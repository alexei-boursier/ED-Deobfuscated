//webcrack:concatenated-module-namespace-object
var i = {};
Object.defineProperty(i, "__esModule", {
  value: true
});
//webcrack:concatenated-module-export
Object.defineProperty(i, "protocol", {
  enumerable: true,
  get: () => nr
});
//webcrack:concatenated-module-export
Object.defineProperty(i, "PacketType", {
  enumerable: true,
  get: () => mr
});
//webcrack:concatenated-module-export
Object.defineProperty(i, "Encoder", {
  enumerable: true,
  get: () => Jr
});
//webcrack:concatenated-module-export
Object.defineProperty(i, "Decoder", {
  enumerable: true,
  get: () => Ys
});
import * as t from "94650";
import * as b from "36895";
import * as M from "69751";
import * as v from "77579";
import * as C from "4707";
import * as S from "39646";
import * as I from "62843";
import * as E from "60515";
import * as O from "4128";
import * as F from "63900";
import * as Z from "18505";
import * as X from "78231";
import * as le from "70655";
import * as q from "13099";
import * as j from "54004";
import * as G from "28746";
import * as se from "39300";
import * as W from "70262";
import * as Pe from "46590";
import * as he from "25403";
import * as Ue from "95698";
/**
       * @license Angular v14.2.11
       * (c) 2010-2022 Google LLC. https://angular.io/
       * License: MIT
       */
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
class rt {}
class Oe {}
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
class Ee {
  constructor(e) {
    this.normalizedNames = new Map();
    this.lazyUpdate = null;
    if (e) {
      this.lazyInit = typeof e == "string" ? () => {
        this.headers = new Map();
        e.split("\n").forEach(n => {
          const s = n.indexOf(":");
          if (s > 0) {
            const d = n.slice(0, s);
            const h = d.toLowerCase();
            const P = n.slice(s + 1).trim();
            this.maybeSetNormalizedName(d, h);
            if (this.headers.has(h)) {
              this.headers.get(h).push(P);
            } else {
              this.headers.set(h, [P]);
            }
          }
        });
      } : () => {
        this.headers = new Map();
        Object.keys(e).forEach(n => {
          let s = e[n];
          const d = n.toLowerCase();
          if (typeof s == "string") {
            s = [s];
          }
          if (s.length > 0) {
            this.headers.set(d, s);
            this.maybeSetNormalizedName(n, d);
          }
        });
      };
    } else {
      this.headers = new Map();
    }
  }
  has(e) {
    this.init();
    return this.headers.has(e.toLowerCase());
  }
  get(e) {
    this.init();
    const n = this.headers.get(e.toLowerCase());
    if (n && n.length > 0) {
      return n[0];
    } else {
      return null;
    }
  }
  keys() {
    this.init();
    return Array.from(this.normalizedNames.values());
  }
  getAll(e) {
    this.init();
    return this.headers.get(e.toLowerCase()) || null;
  }
  append(e, n) {
    return this.clone({
      name: e,
      value: n,
      op: "a"
    });
  }
  set(e, n) {
    return this.clone({
      name: e,
      value: n,
      op: "s"
    });
  }
  delete(e, n) {
    return this.clone({
      name: e,
      value: n,
      op: "d"
    });
  }
  maybeSetNormalizedName(e, n) {
    if (!this.normalizedNames.has(n)) {
      this.normalizedNames.set(n, e);
    }
  }
  init() {
    if (this.lazyInit) {
      if (this.lazyInit instanceof Ee) {
        this.copyFrom(this.lazyInit);
      } else {
        this.lazyInit();
      }
      this.lazyInit = null;
      if (this.lazyUpdate) {
        this.lazyUpdate.forEach(e => this.applyUpdate(e));
        this.lazyUpdate = null;
      }
    }
  }
  copyFrom(e) {
    e.init();
    Array.from(e.headers.keys()).forEach(n => {
      this.headers.set(n, e.headers.get(n));
      this.normalizedNames.set(n, e.normalizedNames.get(n));
    });
  }
  clone(e) {
    const n = new Ee();
    n.lazyInit = this.lazyInit && this.lazyInit instanceof Ee ? this.lazyInit : this;
    n.lazyUpdate = (this.lazyUpdate || []).concat([e]);
    return n;
  }
  applyUpdate(e) {
    const n = e.name.toLowerCase();
    switch (e.op) {
      case "a":
      case "s":
        let s = e.value;
        if (typeof s == "string") {
          s = [s];
        }
        if (s.length === 0) {
          return;
        }
        this.maybeSetNormalizedName(e.name, n);
        const d = (e.op === "a" ? this.headers.get(n) : undefined) || [];
        d.push(...s);
        this.headers.set(n, d);
        break;
      case "d":
        const h = e.value;
        if (h) {
          let P = this.headers.get(n);
          if (!P) {
            return;
          }
          P = P.filter(z => h.indexOf(z) === -1);
          if (P.length === 0) {
            this.headers.delete(n);
            this.normalizedNames.delete(n);
          } else {
            this.headers.set(n, P);
          }
        } else {
          this.headers.delete(n);
          this.normalizedNames.delete(n);
        }
    }
  }
  forEach(e) {
    this.init();
    Array.from(this.normalizedNames.keys()).forEach(n => e(this.normalizedNames.get(n), this.headers.get(n)));
  }
}
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
class Be {
  encodeKey(e) {
    return Yt(e);
  }
  encodeValue(e) {
    return Yt(e);
  }
  decodeKey(e) {
    return decodeURIComponent(e);
  }
  decodeValue(e) {
    return decodeURIComponent(e);
  }
}
const Qe = /%(\d[a-f0-9])/gi;
const It = {
  40: "@",
  "3A": ":",
  24: "$",
  "2C": ",",
  "3B": ";",
  "3D": "=",
  "3F": "?",
  "2F": "/"
};
function Yt(R) {
  return encodeURIComponent(R).replace(Qe, (e, n) => {
    return It[n] ?? e;
  });
}
function Dn(R) {
  return `${R}`;
}
class Et {
  constructor(e = {}) {
    this.updates = null;
    this.cloneFrom = null;
    this.encoder = e.encoder || new Be();
    if (e.fromString) {
      if (e.fromObject) {
        throw new Error("Cannot specify both fromString and fromObject.");
      }
      this.map = function De(R, e) {
        const n = new Map();
        if (R.length > 0) {
          R.replace(/^\?/, "").split("&").forEach(d => {
            const h = d.indexOf("=");
            const [P, z] = h == -1 ? [e.decodeKey(d), ""] : [e.decodeKey(d.slice(0, h)), e.decodeValue(d.slice(h + 1))];
            const Ae = n.get(P) || [];
            Ae.push(z);
            n.set(P, Ae);
          });
        }
        return n;
      }(e.fromString, this.encoder);
    } else if (e.fromObject) {
      this.map = new Map();
      Object.keys(e.fromObject).forEach(n => {
        const s = e.fromObject[n];
        const d = Array.isArray(s) ? s.map(Dn) : [Dn(s)];
        this.map.set(n, d);
      });
    } else {
      this.map = null;
    }
  }
  has(e) {
    this.init();
    return this.map.has(e);
  }
  get(e) {
    this.init();
    const n = this.map.get(e);
    if (n) {
      return n[0];
    } else {
      return null;
    }
  }
  getAll(e) {
    this.init();
    return this.map.get(e) || null;
  }
  keys() {
    this.init();
    return Array.from(this.map.keys());
  }
  append(e, n) {
    return this.clone({
      param: e,
      value: n,
      op: "a"
    });
  }
  appendAll(e) {
    const n = [];
    Object.keys(e).forEach(s => {
      const d = e[s];
      if (Array.isArray(d)) {
        d.forEach(h => {
          n.push({
            param: s,
            value: h,
            op: "a"
          });
        });
      } else {
        n.push({
          param: s,
          value: d,
          op: "a"
        });
      }
    });
    return this.clone(n);
  }
  set(e, n) {
    return this.clone({
      param: e,
      value: n,
      op: "s"
    });
  }
  delete(e, n) {
    return this.clone({
      param: e,
      value: n,
      op: "d"
    });
  }
  toString() {
    this.init();
    return this.keys().map(e => {
      const n = this.encoder.encodeKey(e);
      return this.map.get(e).map(s => n + "=" + this.encoder.encodeValue(s)).join("&");
    }).filter(e => e !== "").join("&");
  }
  clone(e) {
    const n = new Et({
      encoder: this.encoder
    });
    n.cloneFrom = this.cloneFrom || this;
    n.updates = (this.updates || []).concat(e);
    return n;
  }
  init() {
    if (this.map === null) {
      this.map = new Map();
    }
    if (this.cloneFrom !== null) {
      this.cloneFrom.init();
      this.cloneFrom.keys().forEach(e => this.map.set(e, this.cloneFrom.map.get(e)));
      this.updates.forEach(e => {
        switch (e.op) {
          case "a":
          case "s":
            const n = (e.op === "a" ? this.map.get(e.param) : undefined) || [];
            n.push(Dn(e.value));
            this.map.set(e.param, n);
            break;
          case "d":
            if (e.value === undefined) {
              this.map.delete(e.param);
              break;
            }
            {
              let s = this.map.get(e.param) || [];
              const d = s.indexOf(Dn(e.value));
              if (d !== -1) {
                s.splice(d, 1);
              }
              if (s.length > 0) {
                this.map.set(e.param, s);
              } else {
                this.map.delete(e.param);
              }
            }
        }
      });
      this.cloneFrom = this.updates = null;
    }
  }
}
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
class lt {
  constructor(e) {
    this.defaultValue = e;
  }
}
class et {
  constructor() {
    this.map = new Map();
  }
  set(e, n) {
    this.map.set(e, n);
    return this;
  }
  get(e) {
    if (!this.map.has(e)) {
      this.map.set(e, e.defaultValue());
    }
    return this.map.get(e);
  }
  delete(e) {
    this.map.delete(e);
    return this;
  }
  has(e) {
    return this.map.has(e);
  }
  keys() {
    return this.map.keys();
  }
}
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
function ve(R) {
  return typeof ArrayBuffer !== "undefined" && R instanceof ArrayBuffer;
}
function Lt(R) {
  return typeof Blob !== "undefined" && R instanceof Blob;
}
function ft(R) {
  return typeof FormData !== "undefined" && R instanceof FormData;
}
class Me {
  constructor(e, n, s, d) {
    let h;
    this.url = n;
    this.body = null;
    this.reportProgress = false;
    this.withCredentials = false;
    this.responseType = "json";
    this.method = e.toUpperCase();
    if (function St(R) {
      switch (R) {
        case "DELETE":
        case "GET":
        case "HEAD":
        case "OPTIONS":
        case "JSONP":
          return false;
        default:
          return true;
      }
    }(this.method) || d) {
      this.body = s !== undefined ? s : null;
      h = d;
    } else {
      h = s;
    }
    if (h) {
      this.reportProgress = !!h.reportProgress;
      this.withCredentials = !!h.withCredentials;
      if (h.responseType) {
        this.responseType = h.responseType;
      }
      if (h.headers) {
        this.headers = h.headers;
      }
      if (h.context) {
        this.context = h.context;
      }
      if (h.params) {
        this.params = h.params;
      }
    }
    this.headers ||= new Ee();
    this.context ||= new et();
    if (this.params) {
      const P = this.params.toString();
      if (P.length === 0) {
        this.urlWithParams = n;
      } else {
        const z = n.indexOf("?");
        this.urlWithParams = n + (z === -1 ? "?" : z < n.length - 1 ? "&" : "") + P;
      }
    } else {
      this.params = new Et();
      this.urlWithParams = n;
    }
  }
  serializeBody() {
    if (this.body === null) {
      return null;
    } else if (ve(this.body) || Lt(this.body) || ft(this.body) || function qe(R) {
      return typeof URLSearchParams !== "undefined" && R instanceof URLSearchParams;
    }(this.body) || typeof this.body == "string") {
      return this.body;
    } else if (this.body instanceof Et) {
      return this.body.toString();
    } else if (typeof this.body == "object" || typeof this.body == "boolean" || Array.isArray(this.body)) {
      return JSON.stringify(this.body);
    } else {
      return this.body.toString();
    }
  }
  detectContentTypeHeader() {
    if (this.body === null || ft(this.body)) {
      return null;
    } else if (Lt(this.body)) {
      return this.body.type || null;
    } else if (ve(this.body)) {
      return null;
    } else if (typeof this.body == "string") {
      return "text/plain";
    } else if (this.body instanceof Et) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (typeof this.body == "object" || typeof this.body == "number" || typeof this.body == "boolean") {
      return "application/json";
    } else {
      return null;
    }
  }
  clone(e = {}) {
    const s = e.method || this.method;
    const d = e.url || this.url;
    const h = e.responseType || this.responseType;
    const P = e.body !== undefined ? e.body : this.body;
    const z = e.withCredentials !== undefined ? e.withCredentials : this.withCredentials;
    const Ae = e.reportProgress !== undefined ? e.reportProgress : this.reportProgress;
    let Ve = e.headers || this.headers;
    let Tt = e.params || this.params;
    const Vt = e.context ?? this.context;
    if (e.setHeaders !== undefined) {
      Ve = Object.keys(e.setHeaders).reduce((Hn, Ci) => Hn.set(Ci, e.setHeaders[Ci]), Ve);
    }
    if (e.setParams) {
      Tt = Object.keys(e.setParams).reduce((Hn, Ci) => Hn.set(Ci, e.setParams[Ci]), Tt);
    }
    return new Me(s, d, P, {
      params: Tt,
      headers: Ve,
      context: Vt,
      reportProgress: Ae,
      responseType: h,
      withCredentials: z
    });
  }
}
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
var ne = (() => {
  (ne = ne || {})[ne.Sent = 0] = "Sent";
  ne[ne.UploadProgress = 1] = "UploadProgress";
  ne[ne.ResponseHeader = 2] = "ResponseHeader";
  ne[ne.DownloadProgress = 3] = "DownloadProgress";
  ne[ne.Response = 4] = "Response";
  ne[ne.User = 5] = "User";
  return ne;
})();
class me {
  constructor(e, n = 200, s = "OK") {
    this.headers = e.headers || new Ee();
    this.status = e.status !== undefined ? e.status : n;
    this.statusText = e.statusText || s;
    this.url = e.url || null;
    this.ok = this.status >= 200 && this.status < 300;
  }
}
class it extends me {
  constructor(e = {}) {
    super(e);
    this.type = ne.ResponseHeader;
  }
  clone(e = {}) {
    return new it({
      headers: e.headers || this.headers,
      status: e.status !== undefined ? e.status : this.status,
      statusText: e.statusText || this.statusText,
      url: e.url || this.url || undefined
    });
  }
}
class bt extends me {
  constructor(e = {}) {
    super(e);
    this.type = ne.Response;
    this.body = e.body !== undefined ? e.body : null;
  }
  clone(e = {}) {
    return new bt({
      body: e.body !== undefined ? e.body : this.body,
      headers: e.headers || this.headers,
      status: e.status !== undefined ? e.status : this.status,
      statusText: e.statusText || this.statusText,
      url: e.url || this.url || undefined
    });
  }
}
class Ut extends me {
  constructor(e) {
    super(e, 0, "Unknown Error");
    this.name = "HttpErrorResponse";
    this.ok = false;
    this.message = this.status >= 200 && this.status < 300 ? `Http failure during parsing for ${e.url || "(unknown url)"}` : `Http failure response for ${e.url || "(unknown url)"}: ${e.status} ${e.statusText}`;
    this.error = e.error || null;
  }
}
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
function Ze(R, e) {
  return {
    body: e,
    headers: R.headers,
    context: R.context,
    observe: R.observe,
    params: R.params,
    reportProgress: R.reportProgress,
    responseType: R.responseType,
    withCredentials: R.withCredentials
  };
}
let pt = (() => {
  class R {
    constructor(n) {
      this.handler = n;
    }
    request(n, s, d = {}) {
      let h;
      if (n instanceof Me) {
        h = n;
      } else {
        let Ae;
        let Ve;
        Ae = d.headers instanceof Ee ? d.headers : new Ee(d.headers);
        if (d.params) {
          Ve = d.params instanceof Et ? d.params : new Et({
            fromObject: d.params
          });
        }
        h = new Me(n, s, d.body !== undefined ? d.body : null, {
          headers: Ae,
          context: d.context,
          params: Ve,
          reportProgress: d.reportProgress,
          responseType: d.responseType || "json",
          withCredentials: d.withCredentials
        });
      }
      const P = (0, S.of)(h).pipe((0, st.b)(Ae => this.handler.handle(Ae)));
      if (n instanceof Me || d.observe === "events") {
        return P;
      }
      const z = P.pipe((0, se.h)(Ae => Ae instanceof bt));
      switch (d.observe || "body") {
        case "body":
          switch (h.responseType) {
            case "arraybuffer":
              return z.pipe((0, j.U)(Ae => {
                if (Ae.body !== null && !(Ae.body instanceof ArrayBuffer)) {
                  throw new Error("Response is not an ArrayBuffer.");
                }
                return Ae.body;
              }));
            case "blob":
              return z.pipe((0, j.U)(Ae => {
                if (Ae.body !== null && !(Ae.body instanceof Blob)) {
                  throw new Error("Response is not a Blob.");
                }
                return Ae.body;
              }));
            case "text":
              return z.pipe((0, j.U)(Ae => {
                if (Ae.body !== null && typeof Ae.body != "string") {
                  throw new Error("Response is not a string.");
                }
                return Ae.body;
              }));
            default:
              return z.pipe((0, j.U)(Ae => Ae.body));
          }
        case "response":
          return z;
        default:
          throw new Error(`Unreachable: unhandled observe type ${d.observe}}`);
      }
    }
    delete(n, s = {}) {
      return this.request("DELETE", n, s);
    }
    get(n, s = {}) {
      return this.request("GET", n, s);
    }
    head(n, s = {}) {
      return this.request("HEAD", n, s);
    }
    jsonp(n, s) {
      return this.request("JSONP", n, {
        params: new Et().append(s, "JSONP_CALLBACK"),
        observe: "body",
        responseType: "json"
      });
    }
    options(n, s = {}) {
      return this.request("OPTIONS", n, s);
    }
    patch(n, s, d = {}) {
      return this.request("PATCH", n, Ze(d, s));
    }
    post(n, s, d = {}) {
      return this.request("POST", n, Ze(d, s));
    }
    put(n, s, d = {}) {
      return this.request("PUT", n, Ze(d, s));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(rt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac
  });
  return R;
})();
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
class yt {
  constructor(e, n) {
    this.next = e;
    this.interceptor = n;
  }
  handle(e) {
    return this.interceptor.intercept(e, this.next);
  }
}
const Wt = new t.OlP("HTTP_INTERCEPTORS");
let hn = (() => {
  class R {
    intercept(n, s) {
      return s.handle(n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac
  });
  return R;
})();
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
const br = /^\)\]\}',?\n/;
let vr = (() => {
  class R {
    constructor(n) {
      this.xhrFactory = n;
    }
    handle(n) {
      if (n.method === "JSONP") {
        throw new Error("Attempted to construct Jsonp request without HttpClientJsonpModule installed.");
      }
      return new M.y(s => {
        const d = this.xhrFactory.build();
        d.open(n.method, n.urlWithParams);
        if (n.withCredentials) {
          d.withCredentials = true;
        }
        n.headers.forEach((Ci, fr) => d.setRequestHeader(Ci, fr.join(",")));
        if (!n.headers.has("Accept")) {
          d.setRequestHeader("Accept", "application/json, text/plain, */*");
        }
        if (!n.headers.has("Content-Type")) {
          const Ci = n.detectContentTypeHeader();
          if (Ci !== null) {
            d.setRequestHeader("Content-Type", Ci);
          }
        }
        if (n.responseType) {
          const Ci = n.responseType.toLowerCase();
          d.responseType = Ci !== "json" ? Ci : "text";
        }
        const h = n.serializeBody();
        let P = null;
        const z = () => {
          if (P !== null) {
            return P;
          }
          const Ci = d.statusText || "OK";
          const fr = new Ee(d.getAllResponseHeaders());
          const ss = function Ar(R) {
            if ("responseURL" in R && R.responseURL) {
              return R.responseURL;
            } else if (/^X-Request-URL:/m.test(R.getAllResponseHeaders())) {
              return R.getResponseHeader("X-Request-URL");
            } else {
              return null;
            }
          }(d) || n.url;
          P = new it({
            headers: fr,
            status: d.status,
            statusText: Ci,
            url: ss
          });
          return P;
        };
        const Ae = () => {
          let {
            headers: Ci,
            status: fr,
            statusText: ss,
            url: vo
          } = z();
          let uo = null;
          if (fr !== 204) {
            uo = typeof d.response === "undefined" ? d.responseText : d.response;
          }
          if (fr === 0) {
            fr = uo ? 200 : 0;
          }
          let Cu = fr >= 200 && fr < 300;
          if (n.responseType === "json" && typeof uo == "string") {
            const Bm = uo;
            uo = uo.replace(br, "");
            try {
              uo = uo !== "" ? JSON.parse(uo) : null;
            } catch (e0) {
              uo = Bm;
              if (Cu) {
                Cu = false;
                uo = {
                  error: e0,
                  text: uo
                };
              }
            }
          }
          if (Cu) {
            s.next(new bt({
              body: uo,
              headers: Ci,
              status: fr,
              statusText: ss,
              url: vo || undefined
            }));
            s.complete();
          } else {
            s.error(new Ut({
              error: uo,
              headers: Ci,
              status: fr,
              statusText: ss,
              url: vo || undefined
            }));
          }
        };
        const Ve = Ci => {
          const {
            url: fr
          } = z();
          const ss = new Ut({
            error: Ci,
            status: d.status || 0,
            statusText: d.statusText || "Unknown Error",
            url: fr || undefined
          });
          s.error(ss);
        };
        let Tt = false;
        const Vt = Ci => {
          if (!Tt) {
            s.next(z());
            Tt = true;
          }
          let fr = {
            type: ne.DownloadProgress,
            loaded: Ci.loaded
          };
          if (Ci.lengthComputable) {
            fr.total = Ci.total;
          }
          if (n.responseType === "text" && !!d.responseText) {
            fr.partialText = d.responseText;
          }
          s.next(fr);
        };
        const Hn = Ci => {
          let fr = {
            type: ne.UploadProgress,
            loaded: Ci.loaded
          };
          if (Ci.lengthComputable) {
            fr.total = Ci.total;
          }
          s.next(fr);
        };
        d.addEventListener("load", Ae);
        d.addEventListener("error", Ve);
        d.addEventListener("timeout", Ve);
        d.addEventListener("abort", Ve);
        if (n.reportProgress) {
          d.addEventListener("progress", Vt);
          if (h !== null && d.upload) {
            d.upload.addEventListener("progress", Hn);
          }
        }
        d.send(h);
        s.next({
          type: ne.Sent
        });
        return () => {
          d.removeEventListener("error", Ve);
          d.removeEventListener("abort", Ve);
          d.removeEventListener("load", Ae);
          d.removeEventListener("timeout", Ve);
          if (n.reportProgress) {
            d.removeEventListener("progress", Vt);
            if (h !== null && d.upload) {
              d.upload.removeEventListener("progress", Hn);
            }
          }
          if (d.readyState !== d.DONE) {
            d.abort();
          }
        };
      });
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(b.JF));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac
  });
  return R;
})();
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
const Ur = new t.OlP("XSRF_COOKIE_NAME");
const Br = new t.OlP("XSRF_HEADER_NAME");
class rs {}
let vs = (() => {
  class R {
    constructor(n, s, d) {
      this.doc = n;
      this.platform = s;
      this.cookieName = d;
      this.lastCookieString = "";
      this.lastToken = null;
      this.parseCount = 0;
    }
    getToken() {
      if (this.platform === "server") {
        return null;
      }
      const n = this.doc.cookie || "";
      if (n !== this.lastCookieString) {
        this.parseCount++;
        this.lastToken = (0, b.Mx)(n, this.cookieName);
        this.lastCookieString = n;
      }
      return this.lastToken;
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(b.K0), t.LFG(t.Lbi), t.LFG(Ur));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac
  });
  return R;
})();
let wo = (() => {
  class R {
    constructor(n, s) {
      this.tokenService = n;
      this.headerName = s;
    }
    intercept(n, s) {
      const d = n.url.toLowerCase();
      if (n.method === "GET" || n.method === "HEAD" || d.startsWith("http://") || d.startsWith("https://")) {
        return s.handle(n);
      }
      const h = this.tokenService.getToken();
      if (h !== null && !n.headers.has(this.headerName)) {
        n = n.clone({
          headers: n.headers.set(this.headerName, h)
        });
      }
      return s.handle(n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(rs), t.LFG(Br));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac
  });
  return R;
})();
let so = (() => {
  class R {
    constructor(n, s) {
      this.backend = n;
      this.injector = s;
      this.chain = null;
    }
    handle(n) {
      if (this.chain === null) {
        const s = this.injector.get(Wt, []);
        this.chain = s.reduceRight((d, h) => new yt(d, h), this.backend);
      }
      return this.chain.handle(n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(Oe), t.LFG(t.zs3));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac
  });
  return R;
})();
let Tr = (() => {
  class R {
    static disable() {
      return {
        ngModule: R,
        providers: [{
          provide: wo,
          useClass: hn
        }]
      };
    }
    static withOptions(n = {}) {
      return {
        ngModule: R,
        providers: [n.cookieName ? {
          provide: Ur,
          useValue: n.cookieName
        } : [], n.headerName ? {
          provide: Br,
          useValue: n.headerName
        } : []]
      };
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵmod = t.oAB({
    type: R
  });
  R.ɵinj = t.cJS({
    providers: [wo, {
      provide: Wt,
      useExisting: wo,
      multi: true
    }, {
      provide: rs,
      useClass: vs
    }, {
      provide: Ur,
      useValue: "XSRF-TOKEN"
    }, {
      provide: Br,
      useValue: "X-XSRF-TOKEN"
    }]
  });
  return R;
})();
let ns = (() => {
  class R {}
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵmod = t.oAB({
    type: R
  });
  R.ɵinj = t.cJS({
    providers: [pt, {
      provide: rt,
      useClass: so
    }, vr, {
      provide: Oe,
      useExisting: vr
    }],
    imports: [Tr.withOptions({
      cookieName: "XSRF-TOKEN",
      headerName: "X-XSRF-TOKEN"
    })]
  });
  return R;
})();
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
const oi = Object.create(null);
/**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
oi.open = "0";
oi.close = "1";
oi.ping = "2";
oi.pong = "3";
oi.message = "4";
oi.upgrade = "5";
oi.noop = "6";
const fi = Object.create(null);
Object.keys(oi).forEach(R => {
  fi[oi[R]] = R;
});
const bn = {
  type: "error",
  data: "parser error"
};
const pn = typeof Blob == "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
const An = typeof ArrayBuffer == "function";
const dr = (R, e) => {
  const n = new FileReader();
  n.onload = function () {
    const s = n.result.split(",")[1];
    e("b" + (s || ""));
  };
  return n.readAsDataURL(R);
};
const Vr = ({
  type: R,
  data: e
}, n, s) => pn && e instanceof Blob ? n ? s(e) : dr(e, s) : An && (e instanceof ArrayBuffer || (R => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(R) : R && R.buffer instanceof ArrayBuffer)(e)) ? n ? s(e) : dr(new Blob([e]), s) : s(oi[R] + (e || ""));
const Or = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
const is = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
for (let R = 0; R < Or.length; R++) {
  is[Or.charCodeAt(R)] = R;
}
const Zs = typeof ArrayBuffer == "function";
const fa = (R, e) => {
  if (Zs) {
    const n = (R => {
      let s;
      let h;
      let P;
      let z;
      let Ae;
      let e = R.length * 0.75;
      let n = R.length;
      let d = 0;
      if (R[R.length - 1] === "=") {
        e--;
        if (R[R.length - 2] === "=") {
          e--;
        }
      }
      const Ve = new ArrayBuffer(e);
      const Tt = new Uint8Array(Ve);
      for (s = 0; s < n; s += 4) {
        h = is[R.charCodeAt(s)];
        P = is[R.charCodeAt(s + 1)];
        z = is[R.charCodeAt(s + 2)];
        Ae = is[R.charCodeAt(s + 3)];
        Tt[d++] = h << 2 | P >> 4;
        Tt[d++] = (P & 15) << 4 | z >> 2;
        Tt[d++] = (z & 3) << 6 | Ae & 63;
      }
      return Ve;
    })(R);
    return bo(n, e);
  }
  return {
    base64: true,
    data: R
  };
};
const bo = (R, e) => e === "blob" && R instanceof ArrayBuffer ? new Blob([R]) : R;
const ks = (R, e) => {
  if (typeof R != "string") {
    return {
      type: "message",
      data: bo(R, e)
    };
  }
  const n = R.charAt(0);
  if (n === "b") {
    return {
      type: "message",
      data: fa(R.substring(1), e)
    };
  } else if (fi[n]) {
    if (R.length > 1) {
      return {
        type: fi[n],
        data: R.substring(1)
      };
    } else {
      return {
        type: fi[n]
      };
    }
  } else {
    return bn;
  }
};
const Gs = String.fromCharCode(30);
function Ko(R) {
  if (R) {
    return function qi(R) {
      for (var e in Ko.prototype) {
        R[e] = Ko.prototype[e];
      }
      return R;
    }(R);
  }
}
Ko.prototype.on = Ko.prototype.addEventListener = function (R, e) {
  this._callbacks = this._callbacks || {};
  (this._callbacks["$" + R] = this._callbacks["$" + R] || []).push(e);
  return this;
};
Ko.prototype.once = function (R, e) {
  function n() {
    this.off(R, n);
    e.apply(this, arguments);
  }
  n.fn = e;
  this.on(R, n);
  return this;
};
Ko.prototype.off = Ko.prototype.removeListener = Ko.prototype.removeAllListeners = Ko.prototype.removeEventListener = function (R, e) {
  this._callbacks = this._callbacks || {};
  if (arguments.length == 0) {
    this._callbacks = {};
    return this;
  }
  var n = this._callbacks["$" + R];
  if (!n) {
    return this;
  }
  if (arguments.length == 1) {
    delete this._callbacks["$" + R];
    return this;
  }
  for (var s, d = 0; d < n.length; d++) {
    if ((s = n[d]) === e || s.fn === e) {
      n.splice(d, 1);
      break;
    }
  }
  if (n.length === 0) {
    delete this._callbacks["$" + R];
  }
  return this;
};
Ko.prototype.emitReserved = Ko.prototype.emit = function (R) {
  this._callbacks = this._callbacks || {};
  for (var e = new Array(arguments.length - 1), n = this._callbacks["$" + R], s = 1; s < arguments.length; s++) {
    e[s - 1] = arguments[s];
  }
  if (n) {
    s = 0;
    for (var d = (n = n.slice(0)).length; s < d; ++s) {
      n[s].apply(this, e);
    }
  }
  return this;
};
Ko.prototype.listeners = function (R) {
  this._callbacks = this._callbacks || {};
  return this._callbacks["$" + R] || [];
};
Ko.prototype.hasListeners = function (R) {
  return !!this.listeners(R).length;
};
const qo = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : Function("return this")();
function ea(R, ...e) {
  return e.reduce((n, s) => {
    if (R.hasOwnProperty(s)) {
      n[s] = R[s];
    }
    return n;
  }, {});
}
const Oa = setTimeout;
const qa = clearTimeout;
function ja(R, e) {
  if (e.useNativeTimers) {
    R.setTimeoutFn = Oa.bind(qo);
    R.clearTimeoutFn = qa.bind(qo);
  } else {
    R.setTimeoutFn = setTimeout.bind(qo);
    R.clearTimeoutFn = clearTimeout.bind(qo);
  }
}
function ta(R) {
  if (typeof R == "string") {
    return function Fr(R) {
      let e = 0;
      let n = 0;
      for (let s = 0, d = R.length; s < d; s++) {
        e = R.charCodeAt(s);
        if (e < 128) {
          n += 1;
        } else if (e < 2048) {
          n += 2;
        } else if (e < 55296 || e >= 57344) {
          n += 3;
        } else {
          s++;
          n += 4;
        }
      }
      return n;
    }(R);
  } else {
    return Math.ceil((R.byteLength || R.size) * 1.33);
  }
}
class Es extends Error {
  constructor(e, n, s) {
    super(e);
    this.description = n;
    this.context = s;
    this.type = "TransportError";
  }
}
class Ao extends Ko {
  constructor(e) {
    super();
    this.writable = false;
    ja(this, e);
    this.opts = e;
    this.query = e.query;
    this.readyState = "";
    this.socket = e.socket;
  }
  onError(e, n, s) {
    super.emitReserved("error", new Es(e, n, s));
    return this;
  }
  open() {
    if (this.readyState === "closed" || this.readyState === "") {
      this.readyState = "opening";
      this.doOpen();
    }
    return this;
  }
  close() {
    if (this.readyState === "opening" || this.readyState === "open") {
      this.doClose();
      this.onClose();
    }
    return this;
  }
  send(e) {
    if (this.readyState === "open") {
      this.write(e);
    }
  }
  onOpen() {
    this.readyState = "open";
    this.writable = true;
    super.emitReserved("open");
  }
  onData(e) {
    const n = ks(e, this.socket.binaryType);
    this.onPacket(n);
  }
  onPacket(e) {
    super.emitReserved("packet", e);
  }
  onClose(e) {
    this.readyState = "closed";
    super.emitReserved("close", e);
  }
}
const Pa = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split("");
const dl = {};
let ha;
let qs = 0;
let Fo = 0;
function Ca(R) {
  let e = "";
  do {
    e = Pa[R % 64] + e;
    R = Math.floor(R / 64);
  } while (R > 0);
  return e;
}
function fl() {
  const R = Ca(+new Date());
  if (R !== ha) {
    qs = 0;
    return ha = R;
  } else {
    return R + "." + Ca(qs++);
  }
}
for (; Fo < 64; Fo++) {
  dl[Pa[Fo]] = Fo;
}
function Ml(R) {
  let e = "";
  for (let n in R) {
    if (R.hasOwnProperty(n)) {
      if (e.length) {
        e += "&";
      }
      e += encodeURIComponent(n) + "=" + encodeURIComponent(R[n]);
    }
  }
  return e;
}
let So = false;
try {
  So = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
} catch {}
const pa = So;
function Ia(R) {
  const e = R.xdomain;
  try {
    if (typeof XMLHttpRequest !== "undefined" && (!e || pa)) {
      return new XMLHttpRequest();
    }
  } catch {}
  if (!e) {
    try {
      return new qo[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
    } catch {}
  }
}
function po() {}
const zs = new Ia({
  xdomain: false
}).responseType != null;
let Rs = (() => {
  class R extends Ko {
    constructor(n, s) {
      super();
      ja(this, s);
      this.opts = s;
      this.method = s.method || "GET";
      this.uri = n;
      this.async = s.async !== false;
      this.data = s.data !== undefined ? s.data : null;
      this.create();
    }
    create() {
      const n = ea(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
      n.xdomain = !!this.opts.xd;
      n.xscheme = !!this.opts.xs;
      const s = this.xhr = new Ia(n);
      try {
        s.open(this.method, this.uri, this.async);
        try {
          if (this.opts.extraHeaders) {
            if (s.setDisableHeaderCheck) {
              s.setDisableHeaderCheck(true);
            }
            for (let d in this.opts.extraHeaders) {
              if (this.opts.extraHeaders.hasOwnProperty(d)) {
                s.setRequestHeader(d, this.opts.extraHeaders[d]);
              }
            }
          }
        } catch {}
        if (this.method === "POST") {
          try {
            s.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
          } catch {}
        }
        try {
          s.setRequestHeader("Accept", "*/*");
        } catch {}
        if ("withCredentials" in s) {
          s.withCredentials = this.opts.withCredentials;
        }
        if (this.opts.requestTimeout) {
          s.timeout = this.opts.requestTimeout;
        }
        s.onreadystatechange = () => {
          if (s.readyState === 4) {
            if (s.status === 200 || s.status === 1223) {
              this.onLoad();
            } else {
              this.setTimeoutFn(() => {
                this.onError(typeof s.status == "number" ? s.status : 0);
              }, 0);
            }
          }
        };
        s.send(this.data);
      } catch (d) {
        this.setTimeoutFn(() => {
          this.onError(d);
        }, 0);
        return;
      }
      if (typeof document !== "undefined") {
        this.index = R.requestsCount++;
        R.requests[this.index] = this;
      }
    }
    onError(n) {
      this.emitReserved("error", n, this.xhr);
      this.cleanup(true);
    }
    cleanup(n) {
      if (typeof this.xhr !== "undefined" && this.xhr !== null) {
        this.xhr.onreadystatechange = po;
        if (n) {
          try {
            this.xhr.abort();
          } catch {}
        }
        if (typeof document !== "undefined") {
          delete R.requests[this.index];
        }
        this.xhr = null;
      }
    }
    onLoad() {
      const n = this.xhr.responseText;
      if (n !== null) {
        this.emitReserved("data", n);
        this.emitReserved("success");
        this.cleanup();
      }
    }
    abort() {
      this.cleanup();
    }
  }
  R.requestsCount = 0;
  R.requests = {};
  return R;
})();
function eo() {
  for (let R in Rs.requests) {
    if (Rs.requests.hasOwnProperty(R)) {
      Rs.requests[R].abort();
    }
  }
}
if (typeof document !== "undefined") {
  if (typeof attachEvent == "function") {
    attachEvent("onunload", eo);
  } else if (typeof addEventListener == "function") {
    addEventListener("onpagehide" in qo ? "pagehide" : "unload", eo, false);
  }
}
const Vs = typeof Promise == "function" && typeof Promise.resolve == "function" ? e => Promise.resolve().then(e) : (e, n) => n(e, 0);
const Qs = qo.WebSocket || qo.MozWebSocket;
const Uo = typeof navigator !== "undefined" && typeof navigator.product == "string" && navigator.product.toLowerCase() === "reactnative";
const at = {
  websocket: class _r extends Ao {
    constructor(e) {
      super(e);
      this.supportsBinary = !e.forceBase64;
    }
    get name() {
      return "websocket";
    }
    doOpen() {
      if (!this.check()) {
        return;
      }
      const e = this.uri();
      const n = this.opts.protocols;
      const s = Uo ? {} : ea(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
      if (this.opts.extraHeaders) {
        s.headers = this.opts.extraHeaders;
      }
      try {
        this.ws = Uo ? new Qs(e, n, s) : n ? new Qs(e, n) : new Qs(e);
      } catch (d) {
        return this.emitReserved("error", d);
      }
      this.ws.binaryType = this.socket.binaryType || "arraybuffer";
      this.addEventListeners();
    }
    addEventListeners() {
      this.ws.onopen = () => {
        if (this.opts.autoUnref) {
          this.ws._socket.unref();
        }
        this.onOpen();
      };
      this.ws.onclose = e => this.onClose({
        description: "websocket connection closed",
        context: e
      });
      this.ws.onmessage = e => this.onData(e.data);
      this.ws.onerror = e => this.onError("websocket error", e);
    }
    write(e) {
      this.writable = false;
      for (let n = 0; n < e.length; n++) {
        const d = n === e.length - 1;
        Vr(e[n], this.supportsBinary, h => {
          try {
            this.ws.send(h);
          } catch {}
          if (d) {
            Vs(() => {
              this.writable = true;
              this.emitReserved("drain");
            }, this.setTimeoutFn);
          }
        });
      }
    }
    doClose() {
      if (typeof this.ws !== "undefined") {
        this.ws.close();
        this.ws = null;
      }
    }
    uri() {
      let e = this.query || {};
      const n = this.opts.secure ? "wss" : "ws";
      let s = "";
      if (this.opts.port && (n === "wss" && Number(this.opts.port) !== 443 || n === "ws" && Number(this.opts.port) !== 80)) {
        s = ":" + this.opts.port;
      }
      if (this.opts.timestampRequests) {
        e[this.opts.timestampParam] = fl();
      }
      if (!this.supportsBinary) {
        e.b64 = 1;
      }
      const d = Ml(e);
      return n + "://" + (this.opts.hostname.indexOf(":") !== -1 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + s + this.opts.path + (d.length ? "?" + d : "");
    }
    check() {
      return !!Qs;
    }
  },
  polling: class hs extends Ao {
    constructor(e) {
      super(e);
      this.polling = false;
      if (typeof location !== "undefined") {
        const s = location.protocol === "https:";
        let d = location.port;
        d ||= s ? "443" : "80";
        this.xd = typeof location !== "undefined" && e.hostname !== location.hostname || d !== e.port;
        this.xs = e.secure !== s;
      }
      this.supportsBinary = zs && (!e || !e.forceBase64);
    }
    get name() {
      return "polling";
    }
    doOpen() {
      this.poll();
    }
    pause(e) {
      this.readyState = "pausing";
      const n = () => {
        this.readyState = "paused";
        e();
      };
      if (this.polling || !this.writable) {
        let s = 0;
        if (this.polling) {
          s++;
          this.once("pollComplete", function () {
            if (! --s) {
              n();
            }
          });
        }
        if (!this.writable) {
          s++;
          this.once("drain", function () {
            if (! --s) {
              n();
            }
          });
        }
      } else {
        n();
      }
    }
    poll() {
      this.polling = true;
      this.doPoll();
      this.emitReserved("poll");
    }
    onData(e) {
      ((R, e) => {
        const n = R.split(Gs);
        const s = [];
        for (let d = 0; d < n.length; d++) {
          const h = ks(n[d], e);
          s.push(h);
          if (h.type === "error") {
            break;
          }
        }
        return s;
      })(e, this.socket.binaryType).forEach(s => {
        if (this.readyState === "opening" && s.type === "open") {
          this.onOpen();
        }
        if (s.type === "close") {
          this.onClose({
            description: "transport closed by the server"
          });
          return false;
        }
        this.onPacket(s);
      });
      if (this.readyState !== "closed") {
        this.polling = false;
        this.emitReserved("pollComplete");
        if (this.readyState === "open") {
          this.poll();
        }
      }
    }
    doClose() {
      const e = () => {
        this.write([{
          type: "close"
        }]);
      };
      if (this.readyState === "open") {
        e();
      } else {
        this.once("open", e);
      }
    }
    write(e) {
      this.writable = false;
      ((R, e) => {
        const n = R.length;
        const s = new Array(n);
        let d = 0;
        R.forEach((h, P) => {
          Vr(h, false, z => {
            s[P] = z;
            if (++d === n) {
              e(s.join(Gs));
            }
          });
        });
      })(e, n => {
        this.doWrite(n, () => {
          this.writable = true;
          this.emitReserved("drain");
        });
      });
    }
    uri() {
      let e = this.query || {};
      const n = this.opts.secure ? "https" : "http";
      let s = "";
      if (this.opts.timestampRequests !== false) {
        e[this.opts.timestampParam] = fl();
      }
      if (!this.supportsBinary && !e.sid) {
        e.b64 = 1;
      }
      if (this.opts.port && (n === "https" && Number(this.opts.port) !== 443 || n === "http" && Number(this.opts.port) !== 80)) {
        s = ":" + this.opts.port;
      }
      const d = Ml(e);
      return n + "://" + (this.opts.hostname.indexOf(":") !== -1 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + s + this.opts.path + (d.length ? "?" + d : "");
    }
    request(e = {}) {
      Object.assign(e, {
        xd: this.xd,
        xs: this.xs
      }, this.opts);
      return new Rs(this.uri(), e);
    }
    doWrite(e, n) {
      const s = this.request({
        method: "POST",
        data: e
      });
      s.on("success", n);
      s.on("error", (d, h) => {
        this.onError("xhr post error", d, h);
      });
    }
    doPoll() {
      const e = this.request();
      e.on("data", this.onData.bind(this));
      e.on("error", (n, s) => {
        this.onError("xhr poll error", n, s);
      });
      this.pollXhr = e;
    }
  }
};
const Je = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
const be = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
function Bt(R) {
  const e = R;
  const n = R.indexOf("[");
  const s = R.indexOf("]");
  if (n != -1 && s != -1) {
    R = R.substring(0, n) + R.substring(n, s).replace(/:/g, ";") + R.substring(s, R.length);
  }
  let d = Je.exec(R || "");
  let h = {};
  let P = 14;
  for (; P--;) {
    h[be[P]] = d[P] || "";
  }
  if (n != -1 && s != -1) {
    h.source = e;
    h.host = h.host.substring(1, h.host.length - 1).replace(/;/g, ":");
    h.authority = h.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
    h.ipv6uri = true;
  }
  h.pathNames = function an(R, e) {
    const s = e.replace(/\/{2,9}/g, "/").split("/");
    if (e.slice(0, 1) == "/" || e.length === 0) {
      s.splice(0, 1);
    }
    if (e.slice(-1) == "/") {
      s.splice(s.length - 1, 1);
    }
    return s;
  }(0, h.path);
  h.queryKey = function Gn(R, e) {
    const n = {};
    e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function (s, d, h) {
      if (d) {
        n[d] = h;
      }
    });
    return n;
  }(0, h.query);
  return h;
}
let Ki = (() => {
  class R extends Ko {
    constructor(n, s = {}) {
      super();
      if (n && typeof n == "object") {
        s = n;
        n = null;
      }
      if (n) {
        n = Bt(n);
        s.hostname = n.host;
        s.secure = n.protocol === "https" || n.protocol === "wss";
        s.port = n.port;
        if (n.query) {
          s.query = n.query;
        }
      } else if (s.host) {
        s.hostname = Bt(s.host).host;
      }
      ja(this, s);
      this.secure = s.secure ?? (typeof location !== "undefined" && location.protocol === "https:");
      if (s.hostname && !s.port) {
        s.port = this.secure ? "443" : "80";
      }
      this.hostname = s.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
      this.port = s.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
      this.transports = s.transports || ["polling", "websocket"];
      this.readyState = "";
      this.writeBuffer = [];
      this.prevBufferLen = 0;
      this.opts = Object.assign({
        path: "/engine.io",
        agent: false,
        withCredentials: false,
        upgrade: true,
        timestampParam: "t",
        rememberUpgrade: false,
        rejectUnauthorized: true,
        perMessageDeflate: {
          threshold: 1024
        },
        transportOptions: {},
        closeOnBeforeunload: true
      }, s);
      this.opts.path = this.opts.path.replace(/\/$/, "") + "/";
      if (typeof this.opts.query == "string") {
        this.opts.query = function ko(R) {
          let e = {};
          let n = R.split("&");
          for (let s = 0, d = n.length; s < d; s++) {
            let h = n[s].split("=");
            e[decodeURIComponent(h[0])] = decodeURIComponent(h[1]);
          }
          return e;
        }(this.opts.query);
      }
      this.id = null;
      this.upgrades = null;
      this.pingInterval = null;
      this.pingTimeout = null;
      this.pingTimeoutTimer = null;
      if (typeof addEventListener == "function") {
        if (this.opts.closeOnBeforeunload) {
          this.beforeunloadEventListener = () => {
            if (this.transport) {
              this.transport.removeAllListeners();
              this.transport.close();
            }
          };
          addEventListener("beforeunload", this.beforeunloadEventListener, false);
        }
        if (this.hostname !== "localhost") {
          this.offlineEventListener = () => {
            this.onClose("transport close", {
              description: "network connection lost"
            });
          };
          addEventListener("offline", this.offlineEventListener, false);
        }
      }
      this.open();
    }
    createTransport(n) {
      const s = Object.assign({}, this.opts.query);
      s.EIO = 4;
      s.transport = n;
      if (this.id) {
        s.sid = this.id;
      }
      const d = Object.assign({}, this.opts.transportOptions[n], this.opts, {
        query: s,
        socket: this,
        hostname: this.hostname,
        secure: this.secure,
        port: this.port
      });
      return new at[n](d);
    }
    open() {
      let n;
      if (this.opts.rememberUpgrade && R.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
        n = "websocket";
      } else {
        if (this.transports.length === 0) {
          this.setTimeoutFn(() => {
            this.emitReserved("error", "No transports available");
          }, 0);
          return;
        }
        n = this.transports[0];
      }
      this.readyState = "opening";
      try {
        n = this.createTransport(n);
      } catch {
        this.transports.shift();
        this.open();
        return;
      }
      n.open();
      this.setTransport(n);
    }
    setTransport(n) {
      if (this.transport) {
        this.transport.removeAllListeners();
      }
      this.transport = n;
      n.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", s => this.onClose("transport close", s));
    }
    probe(n) {
      let s = this.createTransport(n);
      let d = false;
      R.priorWebsocketSuccess = false;
      const h = () => {
        if (!d) {
          s.send([{
            type: "ping",
            data: "probe"
          }]);
          s.once("packet", Hn => {
            if (!d) {
              if (Hn.type === "pong" && Hn.data === "probe") {
                this.upgrading = true;
                this.emitReserved("upgrading", s);
                if (!s) {
                  return;
                }
                R.priorWebsocketSuccess = s.name === "websocket";
                this.transport.pause(() => {
                  if (!d) {
                    if (this.readyState !== "closed") {
                      Vt();
                      this.setTransport(s);
                      s.send([{
                        type: "upgrade"
                      }]);
                      this.emitReserved("upgrade", s);
                      s = null;
                      this.upgrading = false;
                      this.flush();
                    }
                  }
                });
              } else {
                const Ci = new Error("probe error");
                Ci.transport = s.name;
                this.emitReserved("upgradeError", Ci);
              }
            }
          });
        }
      };
      function P() {
        if (!d) {
          d = true;
          Vt();
          s.close();
          s = null;
        }
      }
      const z = Hn => {
        const Ci = new Error("probe error: " + Hn);
        Ci.transport = s.name;
        P();
        this.emitReserved("upgradeError", Ci);
      };
      function Ae() {
        z("transport closed");
      }
      function Ve() {
        z("socket closed");
      }
      function Tt(Hn) {
        if (s && Hn.name !== s.name) {
          P();
        }
      }
      const Vt = () => {
        s.removeListener("open", h);
        s.removeListener("error", z);
        s.removeListener("close", Ae);
        this.off("close", Ve);
        this.off("upgrading", Tt);
      };
      s.once("open", h);
      s.once("error", z);
      s.once("close", Ae);
      this.once("close", Ve);
      this.once("upgrading", Tt);
      s.open();
    }
    onOpen() {
      this.readyState = "open";
      R.priorWebsocketSuccess = this.transport.name === "websocket";
      this.emitReserved("open");
      this.flush();
      if (this.readyState === "open" && this.opts.upgrade && this.transport.pause) {
        let n = 0;
        const s = this.upgrades.length;
        for (; n < s; n++) {
          this.probe(this.upgrades[n]);
        }
      }
    }
    onPacket(n) {
      if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
        this.emitReserved("packet", n);
        this.emitReserved("heartbeat");
        switch (n.type) {
          case "open":
            this.onHandshake(JSON.parse(n.data));
            break;
          case "ping":
            this.resetPingTimeout();
            this.sendPacket("pong");
            this.emitReserved("ping");
            this.emitReserved("pong");
            break;
          case "error":
            const s = new Error("server error");
            s.code = n.data;
            this.onError(s);
            break;
          case "message":
            this.emitReserved("data", n.data);
            this.emitReserved("message", n.data);
        }
      }
    }
    onHandshake(n) {
      this.emitReserved("handshake", n);
      this.id = n.sid;
      this.transport.query.sid = n.sid;
      this.upgrades = this.filterUpgrades(n.upgrades);
      this.pingInterval = n.pingInterval;
      this.pingTimeout = n.pingTimeout;
      this.maxPayload = n.maxPayload;
      this.onOpen();
      if (this.readyState !== "closed") {
        this.resetPingTimeout();
      }
    }
    resetPingTimeout() {
      this.clearTimeoutFn(this.pingTimeoutTimer);
      this.pingTimeoutTimer = this.setTimeoutFn(() => {
        this.onClose("ping timeout");
      }, this.pingInterval + this.pingTimeout);
      if (this.opts.autoUnref) {
        this.pingTimeoutTimer.unref();
      }
    }
    onDrain() {
      this.writeBuffer.splice(0, this.prevBufferLen);
      this.prevBufferLen = 0;
      if (this.writeBuffer.length === 0) {
        this.emitReserved("drain");
      } else {
        this.flush();
      }
    }
    flush() {
      if (this.readyState !== "closed" && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
        const n = this.getWritablePackets();
        this.transport.send(n);
        this.prevBufferLen = n.length;
        this.emitReserved("flush");
      }
    }
    getWritablePackets() {
      if (!this.maxPayload || this.transport.name !== "polling" || this.writeBuffer.length <= 1) {
        return this.writeBuffer;
      }
      let s = 1;
      for (let d = 0; d < this.writeBuffer.length; d++) {
        const h = this.writeBuffer[d].data;
        if (h) {
          s += ta(h);
        }
        if (d > 0 && s > this.maxPayload) {
          return this.writeBuffer.slice(0, d);
        }
        s += 2;
      }
      return this.writeBuffer;
    }
    write(n, s, d) {
      this.sendPacket("message", n, s, d);
      return this;
    }
    send(n, s, d) {
      this.sendPacket("message", n, s, d);
      return this;
    }
    sendPacket(n, s, d, h) {
      if (typeof s == "function") {
        h = s;
        s = undefined;
      }
      if (typeof d == "function") {
        h = d;
        d = null;
      }
      if (this.readyState === "closing" || this.readyState === "closed") {
        return;
      }
      (d = d || {}).compress = d.compress !== false;
      const P = {
        type: n,
        data: s,
        options: d
      };
      this.emitReserved("packetCreate", P);
      this.writeBuffer.push(P);
      if (h) {
        this.once("flush", h);
      }
      this.flush();
    }
    close() {
      const n = () => {
        this.onClose("forced close");
        this.transport.close();
      };
      const s = () => {
        this.off("upgrade", s);
        this.off("upgradeError", s);
        n();
      };
      const d = () => {
        this.once("upgrade", s);
        this.once("upgradeError", s);
      };
      if (this.readyState === "opening" || this.readyState === "open") {
        this.readyState = "closing";
        if (this.writeBuffer.length) {
          this.once("drain", () => {
            if (this.upgrading) {
              d();
            } else {
              n();
            }
          });
        } else if (this.upgrading) {
          d();
        } else {
          n();
        }
      }
      return this;
    }
    onError(n) {
      R.priorWebsocketSuccess = false;
      this.emitReserved("error", n);
      this.onClose("transport error", n);
    }
    onClose(n, s) {
      if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
        this.clearTimeoutFn(this.pingTimeoutTimer);
        this.transport.removeAllListeners("close");
        this.transport.close();
        this.transport.removeAllListeners();
        if (typeof removeEventListener == "function") {
          removeEventListener("beforeunload", this.beforeunloadEventListener, false);
          removeEventListener("offline", this.offlineEventListener, false);
        }
        this.readyState = "closed";
        this.id = null;
        this.emitReserved("close", n, s);
        this.writeBuffer = [];
        this.prevBufferLen = 0;
      }
    }
    filterUpgrades(n) {
      const s = [];
      let d = 0;
      const h = n.length;
      for (; d < h; d++) {
        if (~this.transports.indexOf(n[d])) {
          s.push(n[d]);
        }
      }
      return s;
    }
  }
  R.protocol = 4;
  return R;
})();
const zr = typeof ArrayBuffer == "function";
const Js = Object.prototype.toString;
const Xt = typeof Blob == "function" || typeof Blob !== "undefined" && Js.call(Blob) === "[object BlobConstructor]";
const ut = typeof File == "function" || typeof File !== "undefined" && Js.call(File) === "[object FileConstructor]";
function vt(R) {
  return zr && (R instanceof ArrayBuffer || (R => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(R) : R.buffer instanceof ArrayBuffer)(R)) || Xt && R instanceof Blob || ut && R instanceof File;
}
function Zt(R, e) {
  if (!R || typeof R != "object") {
    return false;
  }
  if (Array.isArray(R)) {
    for (let n = 0, s = R.length; n < s; n++) {
      if (Zt(R[n])) {
        return true;
      }
    }
    return false;
  }
  if (vt(R)) {
    return true;
  }
  if (R.toJSON && typeof R.toJSON == "function" && arguments.length === 1) {
    return Zt(R.toJSON(), true);
  }
  for (const n in R) {
    if (Object.prototype.hasOwnProperty.call(R, n) && Zt(R[n])) {
      return true;
    }
  }
  return false;
}
function kn(R) {
  const e = [];
  const s = R;
  s.data = Zn(R.data, e);
  s.attachments = e.length;
  return {
    packet: s,
    buffers: e
  };
}
function Zn(R, e) {
  if (!R) {
    return R;
  }
  if (vt(R)) {
    const n = {
      _placeholder: true,
      num: e.length
    };
    e.push(R);
    return n;
  }
  if (Array.isArray(R)) {
    const n = new Array(R.length);
    for (let s = 0; s < R.length; s++) {
      n[s] = Zn(R[s], e);
    }
    return n;
  }
  if (typeof R == "object" && !(R instanceof Date)) {
    const n = {};
    for (const s in R) {
      if (Object.prototype.hasOwnProperty.call(R, s)) {
        n[s] = Zn(R[s], e);
      }
    }
    return n;
  }
  return R;
}
function li(R, e) {
  R.data = Oi(R.data, e);
  delete R.attachments;
  return R;
}
function Oi(R, e) {
  if (!R) {
    return R;
  }
  if (R && R._placeholder === true) {
    if (typeof R.num == "number" && R.num >= 0 && R.num < e.length) {
      return e[R.num];
    }
    throw new Error("illegal attachments");
  }
  if (Array.isArray(R)) {
    for (let n = 0; n < R.length; n++) {
      R[n] = Oi(R[n], e);
    }
  } else if (typeof R == "object") {
    for (const n in R) {
      if (Object.prototype.hasOwnProperty.call(R, n)) {
        R[n] = Oi(R[n], e);
      }
    }
  }
  return R;
}
const Xi = ["connect", "connect_error", "disconnect", "disconnecting", "newListener", "removeListener"];
const nr = 5;
var mr = (() => {
  (R = mr ||= {})[R.CONNECT = 0] = "CONNECT";
  R[R.DISCONNECT = 1] = "DISCONNECT";
  R[R.EVENT = 2] = "EVENT";
  R[R.ACK = 3] = "ACK";
  R[R.CONNECT_ERROR = 4] = "CONNECT_ERROR";
  R[R.BINARY_EVENT = 5] = "BINARY_EVENT";
  R[R.BINARY_ACK = 6] = "BINARY_ACK";
  return mr;
  var R;
})();
class Jr {
  constructor(e) {
    this.replacer = e;
  }
  encode(e) {
    if (e.type !== mr.EVENT && e.type !== mr.ACK || !Zt(e)) {
      return [this.encodeAsString(e)];
    } else {
      return this.encodeAsBinary({
        type: e.type === mr.EVENT ? mr.BINARY_EVENT : mr.BINARY_ACK,
        nsp: e.nsp,
        data: e.data,
        id: e.id
      });
    }
  }
  encodeAsString(e) {
    let n = "" + e.type;
    if (e.type === mr.BINARY_EVENT || e.type === mr.BINARY_ACK) {
      n += e.attachments + "-";
    }
    if (e.nsp && e.nsp !== "/") {
      n += e.nsp + ",";
    }
    if (e.id != null) {
      n += e.id;
    }
    if (e.data != null) {
      n += JSON.stringify(e.data, this.replacer);
    }
    return n;
  }
  encodeAsBinary(e) {
    const n = kn(e);
    const s = this.encodeAsString(n.packet);
    const d = n.buffers;
    d.unshift(s);
    return d;
  }
}
function Ss(R) {
  return Object.prototype.toString.call(R) === "[object Object]";
}
class Ys extends Ko {
  constructor(e) {
    super();
    this.reviver = e;
  }
  add(e) {
    let n;
    if (typeof e == "string") {
      if (this.reconstructor) {
        throw new Error("got plaintext data when reconstructing a packet");
      }
      n = this.decodeString(e);
      const s = n.type === mr.BINARY_EVENT;
      if (s || n.type === mr.BINARY_ACK) {
        n.type = s ? mr.EVENT : mr.ACK;
        this.reconstructor = new xo(n);
        if (n.attachments === 0) {
          super.emitReserved("decoded", n);
        }
      } else {
        super.emitReserved("decoded", n);
      }
    } else {
      if (!vt(e) && !e.base64) {
        throw new Error("Unknown type: " + e);
      }
      if (!this.reconstructor) {
        throw new Error("got binary data when not reconstructing a packet");
      }
      n = this.reconstructor.takeBinaryData(e);
      if (n) {
        this.reconstructor = null;
        super.emitReserved("decoded", n);
      }
    }
  }
  decodeString(e) {
    let n = 0;
    const s = {
      type: Number(e.charAt(0))
    };
    if (mr[s.type] === undefined) {
      throw new Error("unknown packet type " + s.type);
    }
    if (s.type === mr.BINARY_EVENT || s.type === mr.BINARY_ACK) {
      const h = n + 1;
      for (; e.charAt(++n) !== "-" && n != e.length;);
      const P = e.substring(h, n);
      if (P != Number(P) || e.charAt(n) !== "-") {
        throw new Error("Illegal attachments");
      }
      s.attachments = Number(P);
    }
    if (e.charAt(n + 1) === "/") {
      const h = n + 1;
      for (; ++n && e.charAt(n) !== "," && n !== e.length;);
      s.nsp = e.substring(h, n);
    } else {
      s.nsp = "/";
    }
    const d = e.charAt(n + 1);
    if (d !== "" && Number(d) == d) {
      const h = n + 1;
      for (; ++n;) {
        const P = e.charAt(n);
        if (P == null || Number(P) != P) {
          --n;
          break;
        }
        if (n === e.length) {
          break;
        }
      }
      s.id = Number(e.substring(h, n + 1));
    }
    if (e.charAt(++n)) {
      const h = this.tryParse(e.substr(n));
      if (!Ys.isPayloadValid(s.type, h)) {
        throw new Error("invalid payload");
      }
      s.data = h;
    }
    return s;
  }
  tryParse(e) {
    try {
      return JSON.parse(e, this.reviver);
    } catch {
      return false;
    }
  }
  static isPayloadValid(e, n) {
    switch (e) {
      case mr.CONNECT:
        return Ss(n);
      case mr.DISCONNECT:
        return n === undefined;
      case mr.CONNECT_ERROR:
        return typeof n == "string" || Ss(n);
      case mr.EVENT:
      case mr.BINARY_EVENT:
        return Array.isArray(n) && (typeof n[0] == "number" || typeof n[0] == "string" && Xi.indexOf(n[0]) === -1);
      case mr.ACK:
      case mr.BINARY_ACK:
        return Array.isArray(n);
    }
  }
  destroy() {
    if (this.reconstructor) {
      this.reconstructor.finishedReconstruction();
      this.reconstructor = null;
    }
  }
}
class xo {
  constructor(e) {
    this.packet = e;
    this.buffers = [];
    this.reconPack = e;
  }
  takeBinaryData(e) {
    this.buffers.push(e);
    if (this.buffers.length === this.reconPack.attachments) {
      const n = li(this.reconPack, this.buffers);
      this.finishedReconstruction();
      return n;
    }
    return null;
  }
  finishedReconstruction() {
    this.reconPack = null;
    this.buffers = [];
  }
}
function Ls(R, e, n) {
  R.on(e, n);
  return function () {
    R.off(e, n);
  };
}
const sr = Object.freeze({
  connect: 1,
  connect_error: 1,
  disconnect: 1,
  disconnecting: 1,
  newListener: 1,
  removeListener: 1
});
class wa extends Ko {
  constructor(e, n, s) {
    super();
    this.connected = false;
    this.receiveBuffer = [];
    this.sendBuffer = [];
    this.ids = 0;
    this.acks = {};
    this.flags = {};
    this.io = e;
    this.nsp = n;
    if (s && s.auth) {
      this.auth = s.auth;
    }
    if (this.io._autoConnect) {
      this.open();
    }
  }
  get disconnected() {
    return !this.connected;
  }
  subEvents() {
    if (this.subs) {
      return;
    }
    const e = this.io;
    this.subs = [Ls(e, "open", this.onopen.bind(this)), Ls(e, "packet", this.onpacket.bind(this)), Ls(e, "error", this.onerror.bind(this)), Ls(e, "close", this.onclose.bind(this))];
  }
  get active() {
    return !!this.subs;
  }
  connect() {
    if (!this.connected) {
      this.subEvents();
      if (!this.io._reconnecting) {
        this.io.open();
      }
      if (this.io._readyState === "open") {
        this.onopen();
      }
    }
    return this;
  }
  open() {
    return this.connect();
  }
  send(...e) {
    e.unshift("message");
    this.emit.apply(this, e);
    return this;
  }
  emit(e, ...n) {
    if (sr.hasOwnProperty(e)) {
      throw new Error("\"" + e.toString() + "\" is a reserved event name");
    }
    n.unshift(e);
    const s = {
      type: mr.EVENT,
      data: n,
      options: {}
    };
    s.options.compress = this.flags.compress !== false;
    if (typeof n[n.length - 1] == "function") {
      const P = this.ids++;
      const z = n.pop();
      this._registerAckCallback(P, z);
      s.id = P;
    }
    if (!this.flags.volatile || !!this.io.engine && !!this.io.engine.transport && !!this.io.engine.transport.writable && !!this.connected) {
      if (this.connected) {
        this.notifyOutgoingListeners(s);
        this.packet(s);
      } else {
        this.sendBuffer.push(s);
      }
    }
    this.flags = {};
    return this;
  }
  _registerAckCallback(e, n) {
    const s = this.flags.timeout;
    if (s === undefined) {
      this.acks[e] = n;
      return;
    }
    const d = this.io.setTimeoutFn(() => {
      delete this.acks[e];
      for (let h = 0; h < this.sendBuffer.length; h++) {
        if (this.sendBuffer[h].id === e) {
          this.sendBuffer.splice(h, 1);
        }
      }
      n.call(this, new Error("operation has timed out"));
    }, s);
    this.acks[e] = (...h) => {
      this.io.clearTimeoutFn(d);
      n.apply(this, [null, ...h]);
    };
  }
  packet(e) {
    e.nsp = this.nsp;
    this.io._packet(e);
  }
  onopen() {
    if (typeof this.auth == "function") {
      this.auth(e => {
        this.packet({
          type: mr.CONNECT,
          data: e
        });
      });
    } else {
      this.packet({
        type: mr.CONNECT,
        data: this.auth
      });
    }
  }
  onerror(e) {
    if (!this.connected) {
      this.emitReserved("connect_error", e);
    }
  }
  onclose(e, n) {
    this.connected = false;
    delete this.id;
    this.emitReserved("disconnect", e, n);
  }
  onpacket(e) {
    if (e.nsp === this.nsp) {
      switch (e.type) {
        case mr.CONNECT:
          if (e.data && e.data.sid) {
            this.onconnect(e.data.sid);
          } else {
            this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
          }
          break;
        case mr.EVENT:
        case mr.BINARY_EVENT:
          this.onevent(e);
          break;
        case mr.ACK:
        case mr.BINARY_ACK:
          this.onack(e);
          break;
        case mr.DISCONNECT:
          this.ondisconnect();
          break;
        case mr.CONNECT_ERROR:
          this.destroy();
          const s = new Error(e.data.message);
          s.data = e.data.data;
          this.emitReserved("connect_error", s);
      }
    }
  }
  onevent(e) {
    const n = e.data || [];
    if (e.id != null) {
      n.push(this.ack(e.id));
    }
    if (this.connected) {
      this.emitEvent(n);
    } else {
      this.receiveBuffer.push(Object.freeze(n));
    }
  }
  emitEvent(e) {
    if (this._anyListeners && this._anyListeners.length) {
      const n = this._anyListeners.slice();
      for (const s of n) {
        s.apply(this, e);
      }
    }
    super.emit.apply(this, e);
  }
  ack(e) {
    const n = this;
    let s = false;
    return function (...d) {
      if (!s) {
        s = true;
        n.packet({
          type: mr.ACK,
          id: e,
          data: d
        });
      }
    };
  }
  onack(e) {
    const n = this.acks[e.id];
    if (typeof n == "function") {
      n.apply(this, e.data);
      delete this.acks[e.id];
    }
  }
  onconnect(e) {
    this.id = e;
    this.connected = true;
    this.emitBuffered();
    this.emitReserved("connect");
  }
  emitBuffered() {
    this.receiveBuffer.forEach(e => this.emitEvent(e));
    this.receiveBuffer = [];
    this.sendBuffer.forEach(e => {
      this.notifyOutgoingListeners(e);
      this.packet(e);
    });
    this.sendBuffer = [];
  }
  ondisconnect() {
    this.destroy();
    this.onclose("io server disconnect");
  }
  destroy() {
    if (this.subs) {
      this.subs.forEach(e => e());
      this.subs = undefined;
    }
    this.io._destroy(this);
  }
  disconnect() {
    if (this.connected) {
      this.packet({
        type: mr.DISCONNECT
      });
    }
    this.destroy();
    if (this.connected) {
      this.onclose("io client disconnect");
    }
    return this;
  }
  close() {
    return this.disconnect();
  }
  compress(e) {
    this.flags.compress = e;
    return this;
  }
  get volatile() {
    this.flags.volatile = true;
    return this;
  }
  timeout(e) {
    this.flags.timeout = e;
    return this;
  }
  onAny(e) {
    this._anyListeners = this._anyListeners || [];
    this._anyListeners.push(e);
    return this;
  }
  prependAny(e) {
    this._anyListeners = this._anyListeners || [];
    this._anyListeners.unshift(e);
    return this;
  }
  offAny(e) {
    if (!this._anyListeners) {
      return this;
    }
    if (e) {
      const n = this._anyListeners;
      for (let s = 0; s < n.length; s++) {
        if (e === n[s]) {
          n.splice(s, 1);
          return this;
        }
      }
    } else {
      this._anyListeners = [];
    }
    return this;
  }
  listenersAny() {
    return this._anyListeners || [];
  }
  onAnyOutgoing(e) {
    this._anyOutgoingListeners = this._anyOutgoingListeners || [];
    this._anyOutgoingListeners.push(e);
    return this;
  }
  prependAnyOutgoing(e) {
    this._anyOutgoingListeners = this._anyOutgoingListeners || [];
    this._anyOutgoingListeners.unshift(e);
    return this;
  }
  offAnyOutgoing(e) {
    if (!this._anyOutgoingListeners) {
      return this;
    }
    if (e) {
      const n = this._anyOutgoingListeners;
      for (let s = 0; s < n.length; s++) {
        if (e === n[s]) {
          n.splice(s, 1);
          return this;
        }
      }
    } else {
      this._anyOutgoingListeners = [];
    }
    return this;
  }
  listenersAnyOutgoing() {
    return this._anyOutgoingListeners || [];
  }
  notifyOutgoingListeners(e) {
    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
      const n = this._anyOutgoingListeners.slice();
      for (const s of n) {
        s.apply(this, e.data);
      }
    }
  }
}
function ao(R) {
  this.ms = (R = R || {}).min || 100;
  this.max = R.max || 10000;
  this.factor = R.factor || 2;
  this.jitter = R.jitter > 0 && R.jitter <= 1 ? R.jitter : 0;
  this.attempts = 0;
}
ao.prototype.duration = function () {
  var R = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var e = Math.random();
    var n = Math.floor(e * this.jitter * R);
    R = (Math.floor(e * 10) & 1) == 0 ? R - n : R + n;
  }
  return Math.min(R, this.max) | 0;
};
ao.prototype.reset = function () {
  this.attempts = 0;
};
ao.prototype.setMin = function (R) {
  this.ms = R;
};
ao.prototype.setMax = function (R) {
  this.max = R;
};
ao.prototype.setJitter = function (R) {
  this.jitter = R;
};
class sl extends Ko {
  constructor(e, n) {
    super();
    this.nsps = {};
    this.subs = [];
    if (e && typeof e == "object") {
      n = e;
      e = undefined;
    }
    (n = n || {}).path = n.path || "/socket.io";
    this.opts = n;
    ja(this, n);
    this.reconnection(n.reconnection !== false);
    this.reconnectionAttempts(n.reconnectionAttempts || Infinity);
    this.reconnectionDelay(n.reconnectionDelay || 1000);
    this.reconnectionDelayMax(n.reconnectionDelayMax || 5000);
    this.randomizationFactor(n.randomizationFactor ?? 0.5);
    this.backoff = new ao({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    });
    this.timeout(n.timeout ?? 20000);
    this._readyState = "closed";
    this.uri = e;
    const d = n.parser || i;
    this.encoder = new d.Encoder();
    this.decoder = new d.Decoder();
    this._autoConnect = n.autoConnect !== false;
    if (this._autoConnect) {
      this.open();
    }
  }
  reconnection(e) {
    if (arguments.length) {
      this._reconnection = !!e;
      return this;
    } else {
      return this._reconnection;
    }
  }
  reconnectionAttempts(e) {
    if (e === undefined) {
      return this._reconnectionAttempts;
    } else {
      this._reconnectionAttempts = e;
      return this;
    }
  }
  reconnectionDelay(e) {
    var n;
    if (e === undefined) {
      return this._reconnectionDelay;
    } else {
      this._reconnectionDelay = e;
      if ((n = this.backoff) !== null && n !== undefined) {
        n.setMin(e);
      }
      return this;
    }
  }
  randomizationFactor(e) {
    var n;
    if (e === undefined) {
      return this._randomizationFactor;
    } else {
      this._randomizationFactor = e;
      if ((n = this.backoff) !== null && n !== undefined) {
        n.setJitter(e);
      }
      return this;
    }
  }
  reconnectionDelayMax(e) {
    var n;
    if (e === undefined) {
      return this._reconnectionDelayMax;
    } else {
      this._reconnectionDelayMax = e;
      if ((n = this.backoff) !== null && n !== undefined) {
        n.setMax(e);
      }
      return this;
    }
  }
  timeout(e) {
    if (arguments.length) {
      this._timeout = e;
      return this;
    } else {
      return this._timeout;
    }
  }
  maybeReconnectOnOpen() {
    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
      this.reconnect();
    }
  }
  open(e) {
    if (~this._readyState.indexOf("open")) {
      return this;
    }
    this.engine = new Ki(this.uri, this.opts);
    const n = this.engine;
    const s = this;
    this._readyState = "opening";
    this.skipReconnect = false;
    const d = Ls(n, "open", function () {
      s.onopen();
      if (e) {
        e();
      }
    });
    const h = Ls(n, "error", P => {
      s.cleanup();
      s._readyState = "closed";
      this.emitReserved("error", P);
      if (e) {
        e(P);
      } else {
        s.maybeReconnectOnOpen();
      }
    });
    if (this._timeout !== false) {
      const P = this._timeout;
      if (P === 0) {
        d();
      }
      const z = this.setTimeoutFn(() => {
        d();
        n.close();
        n.emit("error", new Error("timeout"));
      }, P);
      if (this.opts.autoUnref) {
        z.unref();
      }
      this.subs.push(function () {
        clearTimeout(z);
      });
    }
    this.subs.push(d);
    this.subs.push(h);
    return this;
  }
  connect(e) {
    return this.open(e);
  }
  onopen() {
    this.cleanup();
    this._readyState = "open";
    this.emitReserved("open");
    const e = this.engine;
    this.subs.push(Ls(e, "ping", this.onping.bind(this)), Ls(e, "data", this.ondata.bind(this)), Ls(e, "error", this.onerror.bind(this)), Ls(e, "close", this.onclose.bind(this)), Ls(this.decoder, "decoded", this.ondecoded.bind(this)));
  }
  onping() {
    this.emitReserved("ping");
  }
  ondata(e) {
    try {
      this.decoder.add(e);
    } catch (n) {
      this.onclose("parse error", n);
    }
  }
  ondecoded(e) {
    Vs(() => {
      this.emitReserved("packet", e);
    }, this.setTimeoutFn);
  }
  onerror(e) {
    this.emitReserved("error", e);
  }
  socket(e, n) {
    let s = this.nsps[e];
    if (!s) {
      s = new wa(this, e, n);
      this.nsps[e] = s;
    }
    return s;
  }
  _destroy(e) {
    const n = Object.keys(this.nsps);
    for (const s of n) {
      if (this.nsps[s].active) {
        return;
      }
    }
    this._close();
  }
  _packet(e) {
    const n = this.encoder.encode(e);
    for (let s = 0; s < n.length; s++) {
      this.engine.write(n[s], e.options);
    }
  }
  cleanup() {
    this.subs.forEach(e => e());
    this.subs.length = 0;
    this.decoder.destroy();
  }
  _close() {
    this.skipReconnect = true;
    this._reconnecting = false;
    this.onclose("forced close");
    if (this.engine) {
      this.engine.close();
    }
  }
  disconnect() {
    return this._close();
  }
  onclose(e, n) {
    this.cleanup();
    this.backoff.reset();
    this._readyState = "closed";
    this.emitReserved("close", e, n);
    if (this._reconnection && !this.skipReconnect) {
      this.reconnect();
    }
  }
  reconnect() {
    if (this._reconnecting || this.skipReconnect) {
      return this;
    }
    const e = this;
    if (this.backoff.attempts >= this._reconnectionAttempts) {
      this.backoff.reset();
      this.emitReserved("reconnect_failed");
      this._reconnecting = false;
    } else {
      const n = this.backoff.duration();
      this._reconnecting = true;
      const s = this.setTimeoutFn(() => {
        if (!e.skipReconnect) {
          this.emitReserved("reconnect_attempt", e.backoff.attempts);
          if (!e.skipReconnect) {
            e.open(d => {
              if (d) {
                e._reconnecting = false;
                e.reconnect();
                this.emitReserved("reconnect_error", d);
              } else {
                e.onreconnect();
              }
            });
          }
        }
      }, n);
      if (this.opts.autoUnref) {
        s.unref();
      }
      this.subs.push(function () {
        clearTimeout(s);
      });
    }
  }
  onreconnect() {
    const e = this.backoff.attempts;
    this._reconnecting = false;
    this.backoff.reset();
    this.emitReserved("reconnect", e);
  }
}
const Rr = {};
function el(R, e) {
  if (typeof R == "object") {
    e = R;
    R = undefined;
  }
  const n = function Gr(R, e = "", n) {
    let s = R;
    n = n || typeof location !== "undefined" && location;
    if (R == null) {
      R = n.protocol + "//" + n.host;
    }
    if (typeof R == "string") {
      if (R.charAt(0) === "/") {
        R = R.charAt(1) === "/" ? n.protocol + R : n.host + R;
      }
      if (!/^(https?|wss?):\/\//.test(R)) {
        R = typeof n !== "undefined" ? n.protocol + "//" + R : "https://" + R;
      }
      s = Bt(R);
    }
    if (!s.port) {
      if (/^(http|ws)$/.test(s.protocol)) {
        s.port = "80";
      } else if (/^(http|ws)s$/.test(s.protocol)) {
        s.port = "443";
      }
    }
    s.path = s.path || "/";
    const h = s.host.indexOf(":") !== -1 ? "[" + s.host + "]" : s.host;
    s.id = s.protocol + "://" + h + ":" + s.port + e;
    s.href = s.protocol + "://" + h + (n && n.port === s.port ? "" : ":" + s.port);
    return s;
  }(R, (e = e || {}).path || "/socket.io");
  const s = n.source;
  const d = n.id;
  let Ae;
  if (e.forceNew || e["force new connection"] || e.multiplex === false || Rr[d] && n.path in Rr[d].nsps) {
    Ae = new sl(s, e);
  } else {
    Rr[d] ||= new sl(s, e);
    Ae = Rr[d];
  }
  if (n.query && !e.query) {
    e.query = n.queryKey;
  }
  return Ae.socket(n.path, e);
}
Object.assign(el, {
  Manager: sl,
  Socket: wa,
  io: el,
  connect: el
});
let Fa = (() => {
  class R {
    constructor(n, s) {
      this.document = n;
      this.platformId = s;
      this.documentIsAccessible = (0, b.NF)(this.platformId);
    }
    static getCookieRegExp(n) {
      const s = n.replace(/([\[\]\{\}\(\)\|\=\;\+\?\,\.\*\^\$])/gi, "\\$1");
      return new RegExp("(?:^" + s + "|;\\s*" + s + ")=(.*?)(?:;|$)", "g");
    }
    static safeDecodeURIComponent(n) {
      try {
        return decodeURIComponent(n);
      } catch {
        return n;
      }
    }
    check(n) {
      return !!this.documentIsAccessible && (n = encodeURIComponent(n), R.getCookieRegExp(n).test(this.document.cookie));
    }
    get(n) {
      if (this.documentIsAccessible && this.check(n)) {
        n = encodeURIComponent(n);
        const d = R.getCookieRegExp(n).exec(this.document.cookie);
        if (d[1]) {
          return R.safeDecodeURIComponent(d[1]);
        } else {
          return "";
        }
      }
      return "";
    }
    getAll() {
      if (!this.documentIsAccessible) {
        return {};
      }
      const n = {};
      const s = this.document;
      if (s.cookie && s.cookie !== "") {
        s.cookie.split(";").forEach(d => {
          const [h, P] = d.split("=");
          n[R.safeDecodeURIComponent(h.replace(/^ /, ""))] = R.safeDecodeURIComponent(P);
        });
      }
      return n;
    }
    set(n, s, d, h, P, z, Ae) {
      if (!this.documentIsAccessible) {
        return;
      }
      if (typeof d == "number" || d instanceof Date || h || P || z || Ae) {
        this.set(n, s, {
          expires: d,
          path: h,
          domain: P,
          secure: z,
          sameSite: Ae || "Lax"
        });
        return;
      }
      let Ve = encodeURIComponent(n) + "=" + encodeURIComponent(s) + ";";
      const Tt = d || {};
      if (Tt.expires) {
        Ve += typeof Tt.expires == "number" ? "expires=" + new Date(new Date().getTime() + Tt.expires * 1000 * 60 * 60 * 24).toUTCString() + ";" : "expires=" + Tt.expires.toUTCString() + ";";
      }
      if (Tt.path) {
        Ve += "path=" + Tt.path + ";";
      }
      if (Tt.domain) {
        Ve += "domain=" + Tt.domain + ";";
      }
      if (Tt.secure === false && Tt.sameSite === "None") {
        Tt.secure = true;
        console.warn(`[ngx-cookie-service] Cookie ${n} was forced with secure flag because sameSite=None.More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);
      }
      if (Tt.secure) {
        Ve += "secure;";
      }
      Tt.sameSite ||= "Lax";
      Ve += "sameSite=" + Tt.sameSite + ";";
      this.document.cookie = Ve;
    }
    delete(n, s, d, h, P = "Lax") {
      if (!this.documentIsAccessible) {
        return;
      }
      const z = new Date("Thu, 01 Jan 1970 00:00:01 GMT");
      this.set(n, "", {
        expires: z,
        path: s,
        domain: d,
        secure: h,
        sameSite: P
      });
    }
    deleteAll(n, s, d, h = "Lax") {
      if (!this.documentIsAccessible) {
        return;
      }
      const P = this.getAll();
      for (const z in P) {
        if (P.hasOwnProperty(z)) {
          this.delete(z, n, s, d, h);
        }
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(b.K0), t.LFG(t.Lbi));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
if (Object.isExists) {
  throw new Error("Object.isExists is already defined - overriding it will be dangerous.");
}
Object.isExists = function Mr(R) {
  return typeof R !== "undefined" && R !== null;
};
if (Object.isEmpty) {
  throw new Error("Object.isEmpty is already defined - overriding it will be dangerous.");
}
Object.isEmpty = function Xe(R) {
  for (const e in R) {
    if (Object.prototype.hasOwnProperty.call(R, e)) {
      return false;
    }
  }
  return true;
};
if (Object.isExpired) {
  throw new Error("Object.isExpired is already defined - overriding it will be dangerous.");
}
Object.isExpired = function $t(R) {
  return !R || typeof R != "object" || typeof R.expired === "undefined" || Date.now() > R.expired;
};
if (Object.setExpired) {
  throw new Error("Object.setExpired is already defined - overriding it will be dangerous.");
}
Object.setExpired = function _e(R, e) {
  if (!!R && typeof R == "object") {
    R.expired = Date.now() + e * 1000;
  }
  return R;
};
if (Object.getEntity) {
  throw new Error("Object.getEntity is already defined - overriding it will be dangerous.");
}
Object.getEntity = function xt(R, e) {
  if (R) {
    return R[e];
  } else {
    return undefined;
  }
};
if (Object.getKey) {
  throw new Error("Object.getKey is already defined - overriding it will be dangerous.");
}
Object.getKey = function gn(R, e) {
  if (!Object.isExists(R)) {
    return;
  }
  const s = Object.keys(R).find(d => R[d] === e);
  if (typeof s !== "undefined") {
    return s;
  } else {
    return undefined;
  }
};
if (Object.edDefaults) {
  throw new Error("Object.edDefaults is already defined - overriding it will be dangerous.");
}
Object.edDefaults = function wn(R, ...e) {
  return e.reduce((n, s) => {
    for (let d = 0, h = Object.keys(s); d < h.length; d++) {
      const P = h[d];
      if (R[P] === undefined) {
        n[P] = s[P];
      }
    }
    return n;
  }, R);
};
if (Object.isEqualFirstLevel) {
  throw new Error("Object.isEqualFirstLevel is already defined - overriding it will be dangerous.");
}
Object.isEqualFirstLevel = function tr(R, e) {
  return !!Object.is(R, e) || typeof R !== "undefined" && R !== null && (s = R, d = e, Object.keys(d).every(h => s.hasOwnProperty(h) && Object.is(s[h], d[h])));
  var s;
  var d;
};
if (Object.edPick) {
  throw new Error("Object.edPick is already defined - overriding it will be dangerous.");
}
Object.edPick = function Do(R, e) {
  return Object.assign({}, ...e.map(n => R && Object.prototype.hasOwnProperty.call(R, n) ? {
    [n]: R[n]
  } : {}));
};
export var GL1 = (() => {
  (R = GL1 ||= {})[R.OK = 200] = "OK";
  R[R.EmptyData = 210] = "EmptyData";
  R[R.AccessTokenInvalid = 526] = "AccessTokenInvalid";
  R[R.SMSInvalid = 506] = "SMSInvalid";
  R[R.DeniedAccess = 530] = "DeniedAccess";
  R[R.UserTypeNotSupported = 600] = "UserTypeNotSupported";
  R[R.NotAvailable = 585] = "NotAvailable";
  R[R.NotAuthorized = 403] = "NotAuthorized";
  R[R.CompteInvalide = 516] = "CompteInvalide";
  R[R.NotExported = 535] = "NotExported";
  return GL1;
  var R;
})();
export const j9q = {
  token: "X-Token",
  code: "X-Code",
  wopiToken: "WOPI-Token",
  streamToken: "STREAM-Token"
};
export const IZV = "¤";
export const X9o = {
  uneSemaine: 604800,
  uneJournee: 86400,
  uneHeure: 3600,
  unQuartDHeure: 900,
  uneMinute: 60
};
export const DOJ = {
  userAccessTokenInvalid: "user:access-token-invalid",
  genericInfo: "generic:info",
  genericSuccess: "generic:success",
  genericWarning: "generic:warning",
  genericError: "generic:error",
  e403: "http:403",
  e404: "http:404",
  ePersistant: "error:persistant"
};
export const K3B = {
  dateInvalidError: "Veuillez saisir une date supérieure à la date du jour !",
  userLogin: "Bienvenue dans votre espace EcoleDirecte",
  userLogout: "Vous avez été déconnecté",
  userInvalid: "Votre fiche utilisateur n'existe pas sur EcoleDirecte",
  userBadSecretResponse: "Votre réponse est incorrecte !",
  userMessagePWSNotSend: "Une erreur est survenue lors de l'envoi du message !",
  userCodeSMSInvalid: "Code SMS invalide !",
  userFirstPasswordAlreadyUpdate: "Identifiant déjà personnalisé",
  userSucessAuthentifiedFirstPassword: "Connexion réussie, créez votre compte utilisateur",
  userAlreadyExist: "Cet identifiant existe déjà, veuillez en choisir un autre",
  userLoginDataInvalid: "L'identifiant et le mot de passe que vous avez entrés ne correspondent pas à ceux présents dans nos fichiers. Veuillez vérifier et réessayer. Si le problème persiste, récupérez votre mot de passe ou contactez votre établissement pour obtenir de nouveaux identifiants.",
  userBadConfirmPassword: "Votre mot de passe de confirmation est incorrect !",
  userAccessTokenInvalid: "Votre session est invalide ou expirée, identifiez-vous à nouveau",
  userOAuthTokenInvalid: "Votre session est invalide ou expirée, identifiez-vous à nouveau",
  swipeProfilError: "Le changement de profil ne peut pas être effectué",
  swipeUserError: "Le changement de compte ne peut pas être effectué",
  forbiddenAction: "Vous n'avez pas les droits suffisants pour cette action",
  networkDown: "Votre connexion Internet semble être hors ligne. La mise à jour des données peut ne pas aboutir.",
  siteClose: "Ce site est actuellement fermé",
  genericError: "Une erreur est survenue, veuillez réessayer.",
  e404: "La ressource demandée n'existe pas.",
  notAvailable: "Cette opération ne peut aboutir car les données sont incorrectes."
};
export const qzA = {
  VIE_SCOLAIRE: "VIE_SCOLAIRE",
  VIE_DE_LA_CLASSE: "VIE_DE_LA_CLASSE",
  NOTES: "NOTES",
  CLOUD: "CLOUD",
  MESSAGERIE: "MESSAGERIE",
  EDT: "EDT",
  CAHIER_DE_TEXTES: "CAHIER_DE_TEXTES",
  RESERVATIONS: "RESERVATIONS",
  COMMANDE_PASSAGE: "COMMANDE_PASSAGE",
  REUNIONS_PP: "REUNIONS_PP",
  RDVPP: "RDVPP",
  COORDONNEES: "COORDONNEES",
  ACTUALITES: "ACTUALITES",
  COMPTE: "COMPTE",
  PARTENAIRES_BAS: "PARTENAIRES_BAS",
  PARTENAIRES_ONGLET: "PARTENAIRES_ONGLET",
  SITUATION_FINANCIERE: "SITUATION_FINANCIERE",
  FACTURES: "FACTURES",
  MODE_DE_REGLEMENT: "MODE_DE_REGLEMENT",
  PAIEMENT_EN_LIGNE: "PAIEMENT_EN_LIGNE",
  DOCUMENTS: "DOCUMENTS",
  CONSULTATION_ETABLISSEMENT: "CONSULTATION_ETABLISSEMENT",
  AFF_EL: "AFF_EL",
  APPEL: "APPEL",
  APPEL_PRIMAIRE: "APPEL_PRIMAIRE",
  APPEL_ETUDE: "APPEL_ETUDE",
  NOTES_MOYENNES: "NOTES_MOYENNES",
  MOYENNES: "MOYENNES",
  DOCUMENTS_ELEVE: "DOCUMENTS_ELEVE",
  ABSENCES: "ABSENCES",
  RETARDS: "RETARDS",
  SANCTIONS: "SANCTIONS",
  ENCOURAGEMENTS: "ENCOURAGEMENTS",
  POSTIT: "POSTIT",
  AGENDA: "AGENDA",
  CARNET_NOTES: "CARNET_NOTES",
  CATER: "CATER",
  SCOLACONCEPT: "SCOLACONCEPT",
  SALLE_DES_PROFS: "SALLE_DES_PROFS",
  ESIDOC: "ESIDOC",
  CONSEIL_DE_CLASSE_NG: "CONSEIL_DE_CLASSE_NG",
  LSL: "LSL",
  EDUNAO: "EDUNAO",
  ALISE: "ALISE",
  EDUMALIN: "EDUMALIN",
  CLICKNPLAY: "CLICKNPLAY",
  AVENRIA: "AVENRIA",
  CARNET_CORRESPONDANCE: "CARNET_CORRESPONDANCE",
  CARNET_CORRESPONDANCE_ELEVE: "CARNET_CORRESPONDANCE_ELEVE",
  GROUPE_FLEX: "GROUPE_FLEX",
  CANTINE_BARCODE: "CANTINE_BARCODE",
  DOSSIER_INSCRIPTION: "DOSSIER_INSCRIPTION",
  SUIVI_STAGE: "SUIVI_STAGE",
  PEARLTREES: "PEARLTREES",
  AUTORISATIONS_SORTIE: "AUTORISATIONS_SORTIE",
  QCM: "QCM",
  VOLTAIRE: "VOLTAIRE",
  COMP_NUM: "COMP_NUM",
  MSC: "MSC",
  SACOCHE: "SACOCHE",
  ETUDIANT: "ETUDIANT",
  ONISEPSERVICES: "ONISEPSERVICES",
  ARD: "ARD",
  IJBOX: "IJBOX",
  IMPALA: "IMPALA",
  EDFORMS: "EDFORMS",
  FUTURNESS: "FUTURNESS",
  MANUELS_SCOLAIRES: "MANUELS_SCOLAIRES",
  POPLAB: "POPLAB",
  EDUMEDIA: "EDUMEDIA",
  ALPHAEDUCATION: "ALPHAEDUCATION",
  KIDIWE: "KIDIWE",
  PASSAGEWEB: "PASSAGEWEB",
  EDIALOG: "EDIALOG"
};
export const lFO = {
  ...qzA,
  ACCUEIL: "ACCUEIL",
  CLOUDET: "CLOUDET",
  EDITIONS: "EDITIONS",
  RESERVATIONS_ACTIVITES: "RESERVATIONS_ACTIVITES",
  CAHIER_DE_TEXTES_ENSEIGNANT: "CAHIER_DE_TEXTES_ENSEIGNANT",
  CAHIER_DE_TEXTES_SLOT: "CAHIER_DE_TEXTES_SLOT",
  CAHIER_DE_TEXTES_DUPLICATION: "CAHIER_DE_TEXTES_DUPLICATION",
  CAHIER_DE_TEXTES_TAFS: "CAHIER_DE_TEXTES_TAFS",
  CAHIER_DE_TEXTES_SEANCES: "CAHIER_DE_TEXTES_SEANCES",
  CAHIER_DE_TEXTES_DETAIL_JOUR: "CAHIER_DE_TEXTES_DETAIL_JOUR",
  CAHIER_DE_TEXTES_CONTENU_SEANCE: "CAHIER_DE_TEXTES_CONTENU_SEANCE",
  CAHIER_DE_TEXTES_RESSOURCES: "CAHIER_DE_TEXTES_RESSOURCES",
  CAHIER_DE_TEXTES_DOCUMENTS: "CAHIER_DE_TEXTES_DOCUMENTS",
  CAHIER_DE_TEXTES_MANUELS_NUMERIQUES: "CAHIER_DE_TEXTES_MANUELS_NUMERIQUES",
  SITUATION_FINANCIERE_COMPTE: "SITUATION_FINANCIERE_COMPTE",
  SITUATION_FINANCIERE_DETAIL_ECRITURE: "SITUATION_FINANCIERE_DETAIL_ECRITURE",
  PAIEMENT_EN_LIGNE_PANIER: "PAIEMENT_EN_LIGNE_PANIER",
  PAIEMENT_EN_LIGNE_PANIER_VALIDATION: "PAIEMENT_EN_LIGNE_PANIER_VALIDATION",
  CLOUDET_DETAIL_ACCUEIL: "CLOUDET_DETAIL_ACCUEIL",
  CLOUDET_DETAIL_AGENDA: "CLOUDET_DETAIL_AGENDA",
  CLOUDET_DETAIL_DISCUSSION: "CLOUDET_DETAIL_DISCUSSION",
  CLOUDET_DETAIL_CLOUD: "CLOUDET_DETAIL_CLOUD",
  CLOUDET_DETAIL_MEMBRES: "CLOUDET_DETAIL_MEMBRES",
  CLOUD_PICKER: "CLOUD_PICKER",
  CLOUD_URL_FILE: "CLOUD_URL_FILE",
  REUNIONS_PP_DETAIL: "REUNIONS_PP_DETAIL",
  REUNIONS_PP_RDV: "REUNIONS_PP_RDV",
  CONSULTATION_ETABLISSEMENT_TROMBINOSCOPE: "CONSULTATION_ETABLISSEMENT_TROMBINOSCOPE",
  CONSULTATION_ELEVE: "CONSULTATION_ELEVE",
  DEVOIR_DETAIL: "DEVOIR_DETAIL",
  LSU_CATALOGUE: "LSU_CATALOGUE",
  LSU_CDT_ELEM_PROG: "LSU_CDT_ELEM_PROG",
  AUTHENTIFICATION_3DSECURE: "AUTHENTIFICATION_3DSECURE",
  GROUPE_FLEX_PERIODE: "GROUPE_FLEX_PERIODE",
  AGENDA_EVENEMENT: "AGENDA_EVENEMENT",
  VIE_SCOLAIRE_JUSTIFICATION: "VIE_SCOLAIRE_JUSTIFICATION",
  SUIVI_STAGE_DETAIL: "SUIVI_STAGE_DETAIL",
  CONTROLE_SORTIE_DEMANDE_FAMILLE: "CONTROLE_SORTIE_DEMANDE_FAMILLE",
  CONTROLE_SORTIE: "CONTROLE_SORTIE",
  ESPACE_DE_TRAVAIL: "ESPACE_DE_TRAVAIL",
  AUTORISATIONS_SORTIE_DEMANDE_FAMILLE: "AUTORISATIONS_SORTIE_DEMANDE_FAMILLE",
  AUTORISATIONS_SORTIE_DETAIL_DEMANDE_FAMILLE: "AUTORISATIONS_SORTIE_DETAIL_DEMANDE_FAMILLE",
  AUTORISATIONS_SORTIE_EDT_ELEVE: "AUTORISATIONS_SORTIE_EDT_ELEVE",
  VIE_SCOLAIRE_TABS: "VIE_SCOLAIRE_TABS"
};
const $r = {
  F: "F",
  H: "H",
  M: "H"
};
export const dcH = {
  ENSEIGNANT: "P",
  FAMILLE: "F",
  FAMILLE_RESPONSABLE: "1",
  FAMILLE_CONJOINT: "2",
  ELEVE: "E",
  PERSONNEL: "A",
  ESPACE_TRAVAIL: "W",
  ENTREPRISE: "T"
};
export const Wqi = {
  FAMILLE: "F",
  ELEVE: "E"
};
export const meW = {
  CLASSE: "C",
  GROUPE: "G",
  SALLE: "S",
  ELEVE: "E",
  ENSEIGNANT: "P",
  RENDEZ_VOUS: "RDVPP",
  ESPACE_TRAVAIL: "W"
};
export const JBS = {
  CLASSE: "C",
  GROUPE: "G"
};
export const qYR = {
  A: "Personnel",
  P: "Enseignant",
  1: "Famille",
  2: "Famille",
  E: "Elève",
  W: "Espace de travail",
  T: "entreprise"
};
const Fn = {
  1: "familles",
  2: "familles",
  E: "eleves",
  A: "personnels",
  P: "enseignants",
  W: "W",
  C: "classes",
  G: "groupes",
  S: "salles",
  T: "entreprise"
};
const ci = {
  1: "Famille",
  2: "Famille",
  E: "Élève",
  A: "Personnel",
  P: "Enseignant",
  W: "de travail",
  T: "Entreprise"
};
const pi = {
  1: "Famille",
  2: "Famille",
  E: "Eleve",
  P: "Professeur",
  A: "Personnel",
  T: "entreprise"
};
const lr = {
  1: "familles",
  2: "familles",
  E: "eleves",
  P: "professeurs",
  A: "personnels",
  T: "entreprise"
};
export const o2q = {
  1: "1",
  2: "2",
  E: "E",
  A: "A",
  P: "P",
  W: "W",
  FE: "famille-eleve",
  PE: "prof-eleve",
  AE: "personnel-eleve",
  TE: "entreprise-eleve",
  C: "classe",
  G: "groupe",
  S: "salle",
  T: "T"
};
const Bo = {
  1: "Familles_1",
  2: "Familles_2",
  E: "Elèves",
  A: "Personnels",
  P: "Professeurs",
  T: "entreprise"
};
export const f3K = {
  s: "standard",
  pm: "portemonnaie",
  pmactivite: "pmactivite"
};
export const M$6 = {
  GESTION: "GESTION",
  ACCUEIL: "ACCUEIL",
  ESPACE_TRAVAIL: "W",
  ACCUEIL_ESPACE_TRAVAIL: "AW"
};
export const Kaf = {
  COURS: "COURS",
  PERMANENCE: "PERMANENCE",
  CONGE: "CONGE"
};
export const h40 = {
  AGENDA: "AGENDA",
  RPP: "RPP",
  RDV_PP: "RDVPP"
};
export const eTt = {
  AGENDA: "AGENDA",
  EDT: "EDT",
  ESPACE_TRAVAIL: "W",
  GENERAL: "GEN",
  RDVPP: "R"
};
export const iUh = {
  RDVPP: "RDVPP",
  RDVPPInvite: "RDVPPInvite",
  RPPFamille: "RPPFamille",
  RPPProf: "RPPProf",
  ETVisio: "ETVisio"
};
export const P9Y = {
  classe: "classe",
  niveau: "niveau",
  etab: "etab"
};
export const PhS = {
  INTERNAT: "Internat",
  REPAS: "Repas",
  MIDI: "MIDI",
  SOIR: "SOIR"
};
export const m5_ = {
  DEMI_PENSIONNAIRE: "Midi",
  INTERNE: "Soir-Matin"
};
export const G7h = {
  ABSENCE: "Absence",
  RETARD: "Retard",
  REPAS: "Repas",
  SANCTION: "Punition",
  ENCOURAGEMENT: "Felicitation",
  INTERNAT: "Internat"
};
export const bvQ = {
  DROIT_LECTURE: 1,
  DROIT_MODIFICATION: 2,
  DROIT_SUPPRESSION: 3,
  DROIT_ADMIN: 4
};
export const VXF = {
  ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD: "ADD",
  ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE: "UPDATE",
  ESPACE_TRAVAIL_TYPE_ACTIVITE_DELETE: "DELETE",
  CIBLE_ACCUEIL: "ACCUEIL",
  CIBLE_POSTIT: "POSTIT",
  CIBLE_AGENDA: "AGENDA",
  CIBLE_TOPIC: "TOPIC",
  CIBLE_TOPIC_MESSAGE: "TOPIC_MESSAGE",
  CIBLE_CLOUD: "CLOUD",
  CIBLE_MEMBRE: "MEMBRE"
};
export const HU = {
  INSCR_ETAPE1_VIDE: "1.0",
  INSCR_ETAPE1_REMPLIE: "1.1",
  INSCR_ETAPE2_VIDE: "2.0",
  INSCR_ETAPE2_REMPLIE: "2.1",
  INSCR_ETAPE3: "3.0",
  INSCR_ETAPE3_VALIDE: "3.1",
  INSCR_FAMILLE_VALIDE: "valide"
};
export const g7k = {
  IMPOSSIBLE: "IMPOSSIBLE",
  DISPONIBLE: "DISPONIBLE",
  PARMOI: "PARMOI",
  BLOQUE: "BLOQUE"
};
const cs = {
  OK: 200,
  KO: 502,
  CANCEL: 501,
  ERROR: 550
};
export const ce3 = {
  AFAIRE: "afaire",
  SEANCE: "seance",
  AFAIREETSEANCE: "afaireetseance",
  VIEDELACLASSE: "viedelaclasse",
  RESSOURCE: "ressources",
  DOCUMENTS: "documents",
  T: "T",
  C: "C",
  R: "R"
};
export const P2J = {
  AFAIRE: ce3.AFAIRE,
  SEANCE: ce3.SEANCE
};
export const a7m = {
  LIST: "list",
  EDT: "edt"
};
export const Rcf = {
  JOUR: "JOUR",
  SEMAINE: "SEMAINE",
  AVENIR: "AVENIR"
};
export const qt_ = {
  CDT: "CDT",
  CDT_CORRECTIFS: "CDT_CORRECTIFS",
  CDT_CORRECTIFS_GLOBAL: "CDT_CORRECTIFS_GLOBAL",
  CLOUD: "CLOUD",
  QCM: "QCM",
  DOCUMENTS: "DOCUMENTS",
  DEMANDE_MODIF_IBAN: "DEMANDE_MODIF_IBAN",
  VISITE_STAGE: "VISITE_STAGE"
};
export const Y9E = {
  CDT: "FICHIER_CDT",
  AIDE: "AIDES",
  CLOUD: "CLOUD",
  CARNET_CORRESPONDANCE: "CC",
  LISTE_PIECE: "LISTE_PIECE",
  INSCR_MEMOS: "INSCR_MEMOS",
  AUTOR_SORTIE_MEMO: "AUTOR_SORTIE_MEMO",
  INSCR: "INSCR",
  FACTURE: "Facture",
  RECHERCHE_STAGE: "RECHERCHE_STAGE",
  VISITES_ELEVES_STAGE: "VISITES_ELEVES_STAGE",
  FICHIER_EDFORMS_SIGNATURES: "FICHIER_EDFORMS_SIGNATURES",
  FICHIER_RPP: "RPP",
  NODEVOIR: "NODEVOIR"
};
export const Vav = {
  FICHIER_EMPTY: "",
  FICHIER_FOLDER: "folder",
  FICHIER_FILE: "file",
  FICHIER_DOC: "Doc",
  FICHIER_CDT: "FICHIER_CDT",
  FICHIER_CDT_RENDU: "FICHIER_CDT_RENDU",
  FICHIER_FACTURE: "Facture",
  FICHIER_VS: "VS",
  FICHIER_NOTE: "Note",
  FICHIER_ADM: "Adm",
  FICHIER_PJ: "PIECE_JOINTE",
  FICHIER_IMPORT: "IMPORT_FTP",
  FICHIER_CLOUD: "CLOUD",
  FICHIER_INSCR: "INSCR",
  FICHIER_INSCR_DOC_A_SIGNER: "INSCR_DOC_A_SIGNER",
  FICHIER_INSCR_DOSSIER_VALIDE: "INSCR_DOC_VALIDE",
  FICHIER_AIDES: "AIDES",
  FICHIER_CC: "CC",
  FICHIER_INSCR_MEMOS: "INSCR_MEMOS",
  FICHIER_AUTOR_SORTIE_MEMO: "AUTOR_SORTIE_MEMO",
  FICHIER_LISTE_PIECE: "LISTE_PIECE",
  FICHIER_DEMANDE_MODIF_IBAN: "DEMANDE_MODIF_IBAN",
  FICHIER_RPP: "RPP",
  FICHIER_CATALOGUE_LSU: "catalogueLSU",
  FICHIER_EDITION_COMPOSANTE: "editionComposante",
  FICHIER_EDITION_APPRECIATION: "editionAppreciation",
  FICHIER_EDITION_PDF: "editionPDF",
  FICHIER_EDITION_EXCEL: "editionExcel",
  FICHIER_GROUPE_FLEXIBLE: "groupeFlexible",
  FICHIER_SUIVI_STAGE_EXCEL: "suiviStageExcel",
  FICHIER_EDFORMS_SIGNATURES: "FICHIER_EDFORMS_SIGNATURES",
  FICHIER_FINANCE_PDF: "fichierFinancePdf",
  FICHIER_NODEVOIR: "NODEVOIR",
  FICHIER_VISITE_STAGE: "VISITE_STAGE_PDF",
  FICHIER_PRELOADED: "PRELOADED",
  FICHIER_MENU_RESTAURATION: "FICHIER_MENU_RESTAURATION"
};
const As = {
  "/": "_______________",
  "+": "PPPPPPPPPPPPPPP"
};
export const Wx7 = {
  ETATS: {
    CLOTUREE: "cloture",
    PARTIELLE: "partiel",
    ATTENTE: "",
    OUVERTE: "ouvert"
  },
  CODES: {
    ANNEE: "A999Z"
  },
  LIBELLES: {
    cloture: "clôturée",
    partiel: "partielle",
    ouvert: "ouverte",
    "": "en attente"
  }
};
const Sa_MOYENNE_MATIERE_SOUS_MATIERE = 1;
const Sa_MOYENNE_MATIERE_TOUTES_LES_NOTES = 2;
const Sa_MOYENNE_PERIODE_TOUTES_LES_NOTES = 2;
export const Gxt = {
  ABS: "abs",
  DISP: "disp",
  NE: "ne",
  EA: "ea"
};
const Kc = {
  1: "Responsable légal",
  2: "Autorité parentale",
  3: "Autres"
};
export const y_A = {
  AM: "matin",
  PM: "apresMidi"
};
export const GjK = {
  MODES: {
    GESTION: "gestion",
    SAISIE: "saisie"
  },
  TYPE_APP: {
    ENSEIGNANT: "Enseignant",
    PP: "Prof Principal",
    CE: "Directeur"
  }
};
export const viF = {
  FAMILLE: {
    code: "F",
    libelle: "Famille"
  },
  ELEVE: {
    code: "E",
    libelle: "Elève"
  },
  PERSONNEL: {
    code: "A",
    libelle: "Personnel"
  },
  PROF: {
    code: "P",
    libelle: "Prof"
  }
};
export const g2X = {
  FAMILLE: {
    code: "F",
    libelle: "Famille"
  },
  ELEVE: {
    code: "E",
    libelle: "Elève"
  },
  PERSONNEL: {
    code: "A",
    libelle: "Personnel"
  },
  PROF: {
    code: "P",
    libelle: "Prof"
  }
};
export const mO$ = {
  alerte: "#FFF956",
  info: "#d9edf7",
  couleur1: "#ff8000",
  couleur2: "#ff0000",
  couleur3: "#80cc33",
  couleur4: "#1796b0",
  couleur5: "#0080ff",
  couleur6: "#9999ff",
  couleur7: "#ca619f",
  couleur8: "#bf00ff"
};
export const WyP = ["#ffff99", "#ffff00", "#ffd966", "#ffbf00", "#ff8000", "#ff6666", "#ff0000", "#bfff00", "#80cc33", "#33cc33", "#1796b0", "#00bfff", "#3399ff", "#0080ff", "#0040ff", "#9999ff", "#bf00ff", "#ff00ff", "#8000ff", "#993300", "#800000"];
const gr = "[Correspondance supprimée.]";
export const G5n = {
  loading: "loading",
  event: "event",
  autre: "autre"
};
export const PMU = {
  MATIN: "Matin",
  APRES_MIDI: "ApresMidi",
  INTER_COURS: "intercours"
};
export const jiO = {
  AJOUT: "+",
  SUPPRESSION: "-",
  SUPPRESSION_MOBILE: "--",
  MODIFICATION: "+-"
};
export const _qn = {
  COMMANDE_DATE_STEP: "dateCommande",
  COMMANDE_ARTICLES_STEP: "articles",
  COMMANDE_CRENEAU_STEP: "creneau"
};
export const w9K = {
  COMMANDE_PREPAREE: "Préparée",
  COMMANDE_RECUPEREE: "Récupérée"
};
export const NEL = {
  CHEQUE: "Chèque",
  PRELEVEMENT: "Prélèvement"
};
export const rQ6 = {
  DATE: "Date",
  HEURE: "Heure",
  NOMBRE: "Nombre",
  TEXTE: "Texte"
};
export const NLf = {
  AVIS_ENGAGEMENT: "AVIS_ENGAGEMENT",
  AVIS_INVESTISSEMENT: "AVIS_INVESTISSEMENT",
  AVIS_CHEFETAB: "AVIS_CHEFETAB",
  AVIS_EXAMEN: "AVIS_EXAMEN",
  ENGAGEMENT_AUTRE: "ENGAGEMENT_AUTRE",
  SYNTHESE_PFMP: "PFMP",
  APP_FICHE_AVENIR: "FicheAvenir"
};
export const A$4 = {
  FAMILLE: "coordonnees",
  ELEVE: "eleve",
  MODE_REGLEMENT: "modeReg"
};
export const IL = {
  ISQRCODE: "isQrcode",
  POSITION_MENU_UTILISATEUR: "positionMenuUtilisateur",
  LSU_POIL_MAIN_BORNE1: "lsuPoilDansLaMainBorne1",
  LSU_POIL_MAIN_BORNE2: "lsuPoilDansLaMainBorne2",
  LSU_POIL_MAIN_BORNE3: "lsuPoilDansLaMainBorne3",
  MODE_ACCESSIBILITE_VISUELLE: "accessibiliteVisuelle",
  MODE_CALCUL_LSU: "modeCalculLSU",
  NB_JOURS_MAX_RENDU_DEVOIR: "nbJoursMaxRenduDevoirCDT",
  TYPE_SAISIE_NOTES_DEFAUT: "typeSaisieNotesDefaut",
  TYPE_VIEW_CDT_DEFAUT: "typeViewCDTDefaut",
  CHECK_AUTHENTIFICATION_SECURE: "checkAuthentificationSecure",
  AFFICHER_BLOC_ACTU_ACCUEIL: "blocActuAccueil",
  AFFICHER_BLOC_PORTE_MONNAIE_ACCUEIL: "blocPMAccueil"
};
export const AEj = "cas/goToService.awp";
export const Wyw = ["-5", "-5.00"];
export const Vqi = 100;
export const Mmy = {
  CREATION_SIMPLE: "C",
  UPDATE: "U",
  CREATION_ASSOCIATION_COMPTE: "A"
};
export const qPe = {
  DOC: "DOC",
  DOC_INS: "DOC_INS",
  DOSSIER_ELEVE: "DOSSIER_ELEVE",
  DOSSIER_FAMILLE: "DOSSIER_FAMILLE",
  PIECE_DOSSIER: "PIECE_DOSSIER",
  EDFORMS: "EDFORMS",
  LISTE_LIBRE: "LISTE_LIBRE"
};
export let ifA = (() => {
  class R extends b.uU {
    constructor() {
      super("fr-FR");
    }
    static formaterDate(n) {
      const s = new RegExp("-", "g");
      return n.replace(s, "/");
    }
    transform(n, s, d, h) {
      var P;
      if (typeof n == "string") {
        if (!/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)((-(\d{2}):(\d{2})|Z)?)/.test(n)) {
          n = R.formaterDate(n);
        }
      }
      if ((P = s) !== null && P !== undefined && P.includes("Do")) {
        if (super.transform(n, "d-MMMM-yyyy").split("-")[0] === "1") {
          s = s.replace("Do", "der");
          return super.transform(n, s, d, h);
        } else {
          s = s.replace("Do", "d");
          return super.transform(n, s, d, h);
        }
      } else {
        return super.transform(n, s, d, h);
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "edDate",
    type: R,
    pure: true
  });
  return R;
})();
export class C_1 {
  static isDate(e) {
    return e instanceof Date || typeof e == "object" && Object.prototype.toString.call(e) === "[object Date]";
  }
  static stringToDate(e) {
    return new Date(C_1.formatDate(e));
  }
  static dateToString(e, n = "y-MM-dd") {
    return new ifA().transform(e, n);
  }
  static addNbJourToDate(e = new Date(), n = 1) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return new Date(e.getFullYear(), e.getMonth(), e.getDate() + n);
  }
  static addNbHoursToDate(e = new Date(), n = 0) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return C_1.addNbMinutesToDate(e, n * 60);
  }
  static addNbMinutesToDate(e = new Date(), n = 0) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return C_1.addNbSecondesToDate(e, n * 60);
  }
  static addNbSecondesToDate(e = new Date(), n = 0) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return new Date(e.getTime() + n * 1000);
  }
  static addNbMoisToDate(e = new Date(), n = 1) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return new Date(e.getFullYear(), e.getMonth() + n, e.getDate());
  }
  static substractNbJourToDate(e = new Date(), n = 1) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return new Date(e.getFullYear(), e.getMonth(), e.getDate() - n);
  }
  static substractNbMinuteToDate(e = new Date(), n = 1) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return new Date(e.getFullYear(), e.getMonth(), e.getDate(), e.getHours(), e.getMinutes() - n);
  }
  static substractNbMoisToDate(e = new Date(), n = 1) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return new Date(e.getFullYear(), e.getMonth() - n, e.getDate());
  }
  static addNbAnneeToDate(e = new Date(), n = 1) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    return new Date(e.getFullYear() + n, e.getMonth(), e.getDate());
  }
  static getMondayOfCurrentWeek(e = new Date()) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    const n = e.getDay();
    return new Date(e.getFullYear(), e.getMonth(), e.getDate() + (n === 0 ? -6 : 1) - n);
  }
  static getSundayOfCurrentWeek(e = new Date()) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    const n = e.getDay();
    return new Date(e.getFullYear(), e.getMonth(), e.getDate() + (n === 0 ? 0 : 7) - n);
  }
  static getWeekPeriodForADay(e = new Date(), n = false) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    const s = C_1.getMondayOfCurrentWeek(e);
    let d = C_1.getSundayOfCurrentWeek(e);
    if (n) {
      d = new Date(d.getTime() + 86400000);
    }
    return {
      dateDebut: s,
      dateFin: d
    };
  }
  static getDaysOfWeek(e = new Date()) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    const n = C_1.getMondayOfCurrentWeek(e);
    let s = [];
    for (let d = 0; d < 7; d++) {
      s.push(C_1.addNbJourToDate(n, d));
    }
    return s;
  }
  static getDaysOfWeekLibelle(e = new Date(), n = false, s = "") {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    const d = C_1.getMondayOfCurrentWeek(e);
    let h = [];
    const P = new ifA();
    for (let z = 0; z < 7; z++) {
      h.push(P.transform(C_1.addNbJourToDate(d, z), n ? s !== "" ? s : "EEEEEE" : "EEEE"));
    }
    return h;
  }
  static formatDate(e, n = "/", s = "-") {
    const d = new RegExp(s, "g");
    return e.replace(d, n);
  }
  static getDatesAnneeScolaire(e, n = false) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    const s = C_1.getMondayOfCurrentWeek(e);
    let d;
    let h;
    if (s <= new Date(s.getFullYear(), 6, 14)) {
      d = s.getFullYear() - 1;
      h = s.getFullYear();
    } else {
      d = s.getFullYear();
      h = s.getFullYear() + 1;
    }
    if (n) {
      return [new Date(d, 6, 14), new Date(h, 6, 13)];
    } else {
      return [new Date(d, 7, 15), new Date(h, 6, 13)];
    }
  }
  static isSamePeriode(e, n) {
    return C_1.isSameDay(e.dateDebut, n.dateDebut) && C_1.isSameDay(e.dateFin, n.dateFin);
  }
  static isPeriodeIncluded(e, n) {
    return (C_1.isSameDay(e.dateDebut, n.dateDebut) || C_1.isAfter(e.dateDebut, n.dateDebut)) && (C_1.isSameDay(e.dateFin, n.dateFin) || C_1.isBefore(e.dateFin, n.dateFin));
  }
  static isSameDay(e, n) {
    return e.getDate() === n.getDate() && e.getMonth() === n.getMonth() && e.getFullYear() === n.getFullYear();
  }
  static isSameTime(e, n, s = false) {
    if (s) {
      return e.getHours() === n.getHours() && e.getMinutes() === n.getMinutes() && e.getSeconds() === n.getSeconds();
    } else {
      return e.getHours() === n.getHours() && e.getMinutes() === n.getMinutes();
    }
  }
  static isEqual(e, n, s = true) {
    let d = new Date(e);
    let h = new Date(n);
    if (!s) {
      d.setHours(0);
      d.setMinutes(0);
      d.setSeconds(0);
      d.setMilliseconds(0);
      h.setHours(0);
      h.setMinutes(0);
      h.setSeconds(0);
      h.setMilliseconds(0);
    }
    return d.getTime() === h.getTime();
  }
  static isBefore(e, n, s = true) {
    let d = new Date(e);
    let h = new Date(n);
    if (!s) {
      d.setHours(0);
      d.setMinutes(0);
      d.setSeconds(0);
      d.setMilliseconds(0);
      h.setHours(0);
      h.setMinutes(0);
      h.setSeconds(0);
      h.setMilliseconds(0);
    }
    return d.getTime() < h.getTime();
  }
  static isAfter(e, n, s = true) {
    let d = new Date(e);
    let h = new Date(n);
    if (!s) {
      d.setHours(0);
      d.setMinutes(0);
      d.setSeconds(0);
      d.setMilliseconds(0);
      h.setHours(0);
      h.setMinutes(0);
      h.setSeconds(0);
      h.setMilliseconds(0);
    }
    return d.getTime() > h.getTime();
  }
  static isBetween(e, n, s, d = true, h = true, P = true) {
    let z = new Date(e);
    let Ae = new Date(n);
    let Ve = new Date(s);
    if (!d) {
      z.setHours(0);
      z.setMinutes(0);
      z.setSeconds(0);
      z.setMilliseconds(0);
      Ae.setHours(0);
      Ae.setMinutes(0);
      Ae.setSeconds(0);
      Ae.setMilliseconds(0);
      Ve.setHours(0);
      Ve.setMinutes(0);
      Ve.setSeconds(0);
      Ve.setMilliseconds(0);
    }
    return (h ? z >= Ae : z > Ae) && (P ? z <= Ve : z < Ve);
  }
  static isDatePassee(e, n = true) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    let s = new Date();
    if (!n) {
      s.setHours(0);
      s.setMinutes(0);
      s.setSeconds(0);
      s.setMilliseconds(0);
    }
    return C_1.isBefore(e, s);
  }
  static isDateFuture(e, n = true) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    let s = new Date();
    if (!n) {
      s.setHours(0);
      s.setMinutes(0);
      s.setSeconds(0);
      s.setMilliseconds(0);
    }
    return C_1.isAfter(e, s);
  }
  static compareAsc(e = new Date(), n = new Date(), s = true) {
    let d = new Date(e);
    let h = new Date(n);
    if (!s) {
      d.setHours(0);
      d.setMinutes(0);
      d.setSeconds(0);
      d.setMilliseconds(0);
      h.setHours(0);
      h.setMinutes(0);
      h.setSeconds(0);
      h.setMilliseconds(0);
    }
    const P = d.getTime() - h.getTime();
    if (P < 0) {
      return -1;
    } else if (P > 0) {
      return 1;
    } else {
      return P;
    }
  }
  static getStartOfMonth(e = new Date()) {
    (e = new Date(e)).setDate(1);
    e.setHours(0, 0, 0, 0);
    return e;
  }
  static getEndOfMonth(e = new Date()) {
    const n = (e = new Date(e)).getMonth();
    e.setFullYear(e.getFullYear(), n + 1, 0);
    e.setHours(23, 59, 59, 999);
    return e;
  }
  static getStartOfDay(e = new Date()) {
    (e = new Date(e)).setHours(0, 0, 0, 0);
    return e;
  }
  static getEndOfDay(e = new Date()) {
    (e = new Date(e)).setHours(23, 59, 59, 999);
    return e;
  }
  static isDateValid(e, n = "/") {
    if (typeof e == "string") {
      const s = n === "/" ? "\\/" : n;
      return new RegExp(`^([0-2][0-9]|(3)[0-1])(${s})(((0)[0-9])|((1)[0-2]))(${s})\\d{4}$`).test(e);
    }
    return !isNaN(e.getTime());
  }
  static convertHoursToString(e) {
    let n = "";
    n += e.getHours() > 9 ? e.getHours() : `${e.getHours()}`.padStart(2, "0");
    n += ":";
    n += e.getMinutes() > 9 ? e.getMinutes() : `${e.getMinutes()}`.padStart(2, "0");
    return n;
  }
  static getDureeToString(e) {
    let n = new Date();
    const s = new ifA();
    let d;
    const h = e.split(":");
    if (parseInt(h[0], 10) > 0) {
      n.setHours(parseInt(h[0], 10));
    }
    if (parseInt(h[1], 10) > 0) {
      n.setMinutes(parseInt(h[1], 10));
    }
    n.setSeconds(parseInt(h[2], 10));
    d = parseInt(h[0], 10) > 0 ? s.transform(n, "H") + "h" + s.transform(n, "mm") : parseInt(h[1], 10) === 0 ? "" : s.transform(n, "m") + " minutes";
    return d;
  }
  static isToday(e) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    const n = new Date(e);
    const s = new Date();
    return n.getDate() === s.getDate() && n.getMonth() === s.getMonth() && n.getFullYear() === s.getFullYear();
  }
  static getWeekNumber(e) {
    if (typeof e == "string") {
      e = C_1.stringToDate(e);
    }
    (e = new Date(Date.UTC(e.getFullYear(), e.getMonth(), e.getDate()))).setUTCDate(e.getUTCDate() + 4 - (e.getUTCDay() || 7));
    const n = new Date(Date.UTC(e.getUTCFullYear(), 0, 1));
    return Math.ceil(((e.getTime() - n.getTime()) / 86400000 + 1) / 7);
  }
  static getIsoWeek(e, n) {
    let s = new Date(e.valueOf());
    const d = (e.getDay() + 6) % 7;
    s.setDate(s.getDate() - d + 3);
    const h = s.valueOf();
    s.setMonth(0, 1);
    if (s.getDay() !== 4) {
      s.setMonth(0, 1 + (4 - s.getDay() + 7) % 7);
    }
    let P = h - s.getTime();
    let z = 1 + Math.ceil(P / 604800000);
    if (n && z < 52) {
      let Ae = new Date(s.getUTCFullYear(), s.getMonth(), s.getDate() - 7);
      let Ve = new Date(s.getUTCFullYear() - 1, 0, 1);
      P = Ae.getTime() - Ve.getTime();
      z = Math.ceil(P / 604800000);
    }
    return z;
  }
  static convertStringFrToDate(e) {
    return new Date(e.split("/").reverse().join("/"));
  }
  static convertTZ(e = new Date(), n = "Europe/Paris") {
    return new Date((typeof e == "string" ? new Date(e) : e).toLocaleString("en-US", {
      timeZone: n
    }));
  }
}
const lc = {
  A: "Administration",
  adm: "Administration",
  P: "Professeur",
  prof: "Professeur",
  1: "Famille",
  2: "Famille",
  fam: "Famille",
  E: "Élève",
  el: "Élève",
  T: "Entreprise"
};
const cc = {
  A: "personnel",
  adm: "personnel",
  P: "enseignant",
  prof: "enseignant",
  1: "famille",
  2: "famille",
  fam: "famille",
  el: "eleve",
  E: "eleve",
  W: "espace-travail",
  RDVPP: "invite-rdvpp",
  MESSAGERIE: "messagerie-nonLu"
};
export let FSr = (() => {
  class R {
    static isNotEmptyString(n, s = false) {
      const d = Boolean(n);
      if (d && s) {
        return Boolean(n.trim());
      } else {
        return d;
      }
    }
    static capitalizeFirstLetter(n) {
      if (R.isNotEmptyString(n)) {
        return n[0].toUpperCase() + n.slice(1);
      } else {
        return "";
      }
    }
    static moduleToCSS(n) {
      return n.replace(/_/g, "").toLowerCase();
    }
    static translateTypeUser(n, s = true) {
      let d = n;
      if (typeof Fn[n] !== "undefined") {
        d = Fn[n];
        if (s) {
          d = R.capitalizeFirstLetter(d);
        }
      }
      return d;
    }
    static translateTypeUserToLibelle(n, s = true) {
      let d = n;
      if (typeof ci[n] !== "undefined") {
        d = ci[n];
        if (s) {
          d = R.capitalizeFirstLetter(d);
        }
      }
      return d;
    }
    static getIconTypePersonne(n = "", s = true) {
      if (n && cc[n]) {
        return cc[n];
      } else if (s) {
        return "user";
      } else {
        return "person";
      }
    }
    static iconsParProfil(n = true) {
      return {
        [o2q[dcH.ENSEIGNANT]]: R.getIconTypePersonne(dcH.ENSEIGNANT, n),
        [o2q[dcH.ELEVE]]: R.getIconTypePersonne(dcH.ELEVE, n),
        [o2q[dcH.PERSONNEL]]: R.getIconTypePersonne(dcH.PERSONNEL, n),
        [o2q[dcH.FAMILLE_RESPONSABLE]]: R.getIconTypePersonne(dcH.FAMILLE_RESPONSABLE, n),
        [o2q[dcH.FAMILLE_CONJOINT]]: R.getIconTypePersonne(dcH.FAMILLE_CONJOINT, n)
      };
    }
    static getTypePersonne(n = "") {
      if (n && lc[n]) {
        return lc[n];
      } else {
        return "";
      }
    }
    static escapeHTMLEncode(n) {
      let h;
      let s = ["©", "Û", "®", "ž", "Ü", "Ÿ", "Ý", "$", "Þ", "%", "¡", "ß", "¢", "à", "£", "á", "À", "¤", "â", "Á", "¥", "ã", "Â", "¦", "ä", "Ã", "§", "å", "Ä", "¨", "æ", "Å", "©", "ç", "Æ", "ª", "è", "Ç", "«", "é", "È", "¬", "ê", "É", "­", "ë", "Ê", "®", "ì", "Ë", "¯", "í", "Ì", "°", "î", "Í", "±", "ï", "Î", "²", "ð", "Ï", "³", "ñ", "Ð", "´", "ò", "Ñ", "µ", "ó", "Õ", "¶", "ô", "Ö", "·", "õ", "Ø", "¸", "ö", "Ù", "¹", "÷", "Ú", "º", "ø", "Û", "»", "ù", "Ü", "@", "¼", "ú", "Ý", "½", "û", "Þ", "€", "¾", "ü", "ß", "¿", "ý", "à", "‚", "À", "þ", "á", "ƒ", "Á", "ÿ", "å", "„", "Â", "æ", "…", "Ã", "ç", "†", "Ä", "è", "‡", "Å", "é", "ˆ", "Æ", "ê", "‰", "Ç", "ë", "Š", "È", "ì", "‹", "É", "í", "Œ", "Ê", "î", "Ë", "ï", "Ž", "Ì", "ð", "Í", "ñ", "Î", "ò", "‘", "Ï", "ó", "’", "Ð", "ô", "“", "Ñ", "õ", "”", "Ò", "ö", "•", "Ó", "ø", "–", "Ô", "ù", "—", "Õ", "ú", "˜", "Ö", "û", "™", "×", "ý", "š", "Ø", "þ", "›", "Ù", "ÿ", "œ", "Ú"];
      let d = ["&copy;", "&#219;", "&reg;", "&#158;", "&#220;", "&#159;", "&#221;", "&#36;", "&#222;", "&#37;", "&#161;", "&#223;", "&#162;", "&#224;", "&#163;", "&#225;", "&Agrave;", "&#164;", "&#226;", "&Aacute;", "&#165;", "&#227;", "&Acirc;", "&#166;", "&#228;", "&Atilde;", "&#167;", "&#229;", "&Auml;", "&#168;", "&#230;", "&Aring;", "&#169;", "&#231;", "&AElig;", "&#170;", "&#232;", "&Ccedil;", "&#171;", "&#233;", "&Egrave;", "&#172;", "&#234;", "&Eacute;", "&#173;", "&#235;", "&Ecirc;", "&#174;", "&#236;", "&Euml;", "&#175;", "&#237;", "&Igrave;", "&#176;", "&#238;", "&Iacute;", "&#177;", "&#239;", "&Icirc;", "&#178;", "&#240;", "&Iuml;", "&#179;", "&#241;", "&ETH;", "&#180;", "&#242;", "&Ntilde;", "&#181;", "&#243;", "&Otilde;", "&#182;", "&#244;", "&Ouml;", "&#183;", "&#245;", "&Oslash;", "&#184;", "&#246;", "&Ugrave;", "&#185;", "&#247;", "&Uacute;", "&#186;", "&#248;", "&Ucirc;", "&#187;", "&#249;", "&Uuml;", "&#64;", "&#188;", "&#250;", "&Yacute;", "&#189;", "&#251;", "&THORN;", "&#128;", "&#190;", "&#252", "&szlig;", "&#191;", "&#253;", "&agrave;", "&#130;", "&#192;", "&#254;", "&aacute;", "&#131;", "&#193;", "&#255;", "&aring;", "&#132;", "&#194;", "&aelig;", "&#133;", "&#195;", "&ccedil;", "&#134;", "&#196;", "&egrave;", "&#135;", "&#197;", "&eacute;", "&#136;", "&#198;", "&ecirc;", "&#137;", "&#199;", "&euml;", "&#138;", "&#200;", "&igrave;", "&#139;", "&#201;", "&iacute;", "&#140;", "&#202;", "&icirc;", "&#203;", "&iuml;", "&#142;", "&#204;", "&eth;", "&#205;", "&ntilde;", "&#206;", "&ograve;", "&#145;", "&#207;", "&oacute;", "&#146;", "&#208;", "&ocirc;", "&#147;", "&#209;", "&otilde;", "&#148;", "&#210;", "&ouml;", "&#149;", "&#211;", "&oslash;", "&#150;", "&#212;", "&ugrave;", "&#151;", "&#213;", "&uacute;", "&#152;", "&#214;", "&ucirc;", "&#153;", "&#215;", "&yacute;", "&#154;", "&#216;", "&thorn;", "&#155;", "&#217;", "&yuml;", "&#156;", "&#218;"];
      let P = n;
      let z = -1;
      let Ae = n.length;
      for (let Ve = 0; Ve < Ae; Ve++) {
        z = s.indexOf(n[Ve]);
        if (z > -1) {
          h = new RegExp(s[z], "g");
          P = P.replace(h, d[z]);
        }
      }
      return P;
    }
    static getNormalizeString(n) {
      return R.replaceDiacritics(n).replace(/([^\w]+|\s+)/g, "-").replace(/--+/g, "-").replace(/(^-+|-+$)/g, "");
    }
    static replaceDiacritics(n) {
      return n.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
    }
    static isNumeric(n) {
      return !isNaN(Number(n));
    }
    static financial(n) {
      return Number(n).toFixed(2);
    }
    static isValidEmail(n, s = false) {
      const d = R.isNotEmptyString(n);
      return s === true && !d || d && R.EMAIL_REGEXP.test(n);
    }
  }
  R.EMAIL_REGEXP = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  R.HREF_REGEXP = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/;
  return R;
})();
class uc {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    coef: 1
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.coef = e.coef;
  }
}
class To {
  constructor(e = {
    id: 0,
    codeOfficiel: "",
    codeCourt: "",
    libelle: ""
  }) {
    this.id = e.id;
    this.codeOfficiel = e.codeOfficiel;
    this.codeCourt = e.codeCourt;
    this.libelle = e.libelle;
  }
}
class vu {
  constructor(e = {
    id: 0,
    code: "",
    nbMaxCaractere: 300,
    libelle: ""
  }) {
    this.code = e.code;
    this.id = e.id;
    this.nbMaxCaractere = e.nbMaxCaractere;
    this.libelle = e.libelle;
  }
}
class rc {
  constructor(e = {
    id: 0,
    nom: ""
  }) {
    this.id = e.id;
    this.nom = e.nom;
  }
}
export class QuE {
  constructor(e = {
    id: 0,
    codeMatiere: "",
    codeSousMatiere: "",
    discipline: "",
    coef: 0,
    effectif: 0,
    rang: 0,
    groupeMatiere: false,
    idGroupeMatiere: 0,
    option: 0,
    sousMatiere: false,
    professeurs: [],
    appreciations: []
  }) {
    this.id = e.id;
    this.codeMatiere = e.codeMatiere;
    this.codeSousMatiere = e.codeSousMatiere;
    this.discipline = e.discipline;
    this.coef = e.coef;
    this.effectif = e.effectif;
    this.rang = e.rang;
    this.groupeMatiere = e.groupeMatiere;
    this.idGroupeMatiere = e.idGroupeMatiere;
    this.option = e.option;
    this.sousMatiere = e.sousMatiere;
    this.professeurs = Array.isArray(e.professeurs) ? e.professeurs.map(n => new rc(n)) : [];
    this.appreciations = Array.isArray(e.appreciations) ? [...e.appreciations] : [];
    this.appreciationClasse = e.appreciationClasse;
    this.displayMoyenneGroupeMatiere = typeof e.displayMoyenneGroupeMatiere !== "undefined" && e.displayMoyenneGroupeMatiere;
    if (typeof e.moyenne !== "undefined") {
      this.moyenne = e.moyenne;
    }
    if (typeof e.moyenneClasse !== "undefined") {
      this.moyenneClasse = e.moyenneClasse;
    }
    if (typeof e.moyenneMin !== "undefined") {
      this.moyenneMin = e.moyenneMin;
    }
    if (typeof e.moyenneMax !== "undefined") {
      this.moyenneMax = e.moyenneMax;
    }
    if (typeof e.position !== "undefined") {
      this.position = e.position;
    }
    if (typeof e.saisieAppreciationSSMat !== "undefined") {
      this.saisieAppreciationSSMat = e.saisieAppreciationSSMat;
    }
  }
  hasAppreciations() {
    return this.appreciations.some(e => FSr.isNotEmptyString(e, true));
  }
  isEnAttente() {
    return FSr.isNotEmptyString(this.moyenne) && Wyw.findIndex(e => this.moyenne === e) > -1;
  }
}
class Al {
  constructor(e = {
    dateCalcul: "",
    nomPP: "",
    nomCE: "",
    decisionDuConseil: "",
    disciplines: []
  }) {
    this.dateCalcul = e.dateCalcul;
    this.nomPP = e.nomPP;
    this.nomCE = e.nomCE;
    this.decisionDuConseil = e.decisionDuConseil;
    this.disciplines = Array.isArray(e.disciplines) ? e.disciplines.map(n => new QuE(n)) : [];
    this.disciplinesSimulation = Array.isArray(e.disciplinesSimulation) ? e.disciplinesSimulation.map(n => new QuE(n)) : [];
    if (typeof e.moyenneGenerale !== "undefined") {
      this.moyenneGenerale = e.moyenneGenerale;
    }
    if (typeof e.moyenneClasse !== "undefined") {
      this.moyenneClasse = e.moyenneClasse;
    }
    if (typeof e.moyenneMin !== "undefined") {
      this.moyenneMin = e.moyenneMin;
    }
    if (typeof e.moyenneMax !== "undefined") {
      this.moyenneMax = e.moyenneMax;
    }
    if (typeof e.appreciationPP !== "undefined") {
      this.appreciationPP = e.appreciationPP;
    }
    if (typeof e.appreciationCE !== "undefined") {
      this.appreciationCE = e.appreciationCE;
    }
    if (typeof e.appreciationVS !== "undefined") {
      this.appreciationVS = e.appreciationVS;
    }
    if (typeof e.appreciationCN !== "undefined") {
      this.appreciationCN = e.appreciationCN;
    }
    if (typeof e.rang !== "undefined") {
      this.rang = e.rang;
    }
    if (typeof e.effectif !== "undefined") {
      this.effectif = e.effectif;
    }
    if (typeof e.appreciationGeneraleClasse !== "undefined") {
      this.appreciationGeneraleClasse = e.appreciationGeneraleClasse;
    }
  }
  isEnAttente() {
    return FSr.isNotEmptyString(this.moyenneGenerale) && Wyw.findIndex(e => this.moyenneGenerale === e) > -1;
  }
}
class wd {
  constructor(e = {
    cdt: false,
    descriptif: "",
    idElemProg: 0,
    idConnaissance: 0,
    valeur: "",
    afc: 0
  }) {
    this.cdt = e.cdt;
    this.descriptif = e.descriptif;
    this.idElemProg = e.idElemProg;
    this.idConnaissance = e.idConnaissance;
    this.valeur = e.valeur;
    this.afc = e.afc;
    if (typeof e.libelleCompetence !== "undefined") {
      this.libelleCompetence = e.libelleCompetence;
    }
  }
  get libelle() {
    return this.libelleCompetence;
  }
  get isConnaissanceAssociee() {
    return this.idConnaissance > 0;
  }
  get isEP() {
    return this.idConnaissance === 0 && !this.isAFC;
  }
  get isAFC() {
    return this.afc === 1;
  }
}
export const Kn2 = R => Object.prototype.toString.call(R) === "[object Object]";
const Xd = R => (R => R != null && R.toString() !== "false")(R) && R.constructor.name === "Object";
export const Z1s = (R, e) => k(R, e);
export const Ofj = R => Array.isArray(R) && R.length > 0;
export class C_g {
  constructor(e = {
    id: 0,
    idParent: 0,
    libelleParent: "",
    libelle: "",
    libelleDisplay: "",
    ordre: 0,
    nbQCM: 0,
    isLeaf: false
  }) {
    this.id = e.id;
    this.idParent = e.idParent;
    this.libelleParent = e.libelleParent;
    this.libelle = e.libelle;
    this.libelleDisplay = e.libelleDisplay;
    this.ordre = e.ordre;
    this.nbQCM = e.nbQCM;
    this.isLeaf = e.isLeaf;
    if (Array.isArray(e.tabChildren)) {
      this.tabChildren = e.tabChildren.map(n => new C_g(n));
    }
  }
  get hasChildrenField() {
    return Ofj(this.tabChildren);
  }
  get combien() {
    let e = this.nbQCM >= 0 ? this.nbQCM : 0;
    if (Array.isArray(this.tabChildren)) {
      for (const n of this.tabChildren) {
        e += n.combien;
      }
    }
    return e;
  }
}
class sc {
  constructor(e = {
    idAssociation: 0,
    idQCM: 0,
    titre: ""
  }) {
    this.idAssociation = e.idAssociation;
    this.idQCM = e.idQCM;
    this.titre = e.titre;
    if (typeof e.debute !== "undefined" && e.debute !== "") {
      this.debute = e.debute;
    }
    if (typeof e.fini !== "undefined" && e.fini !== "") {
      this.fini = e.fini;
    }
  }
}
class Uc {
  constructor(e = {
    id: 0,
    disponible: false
  }) {
    this.id = e.id;
    this.disponible = e.disponible;
  }
}
class Du {
  constructor(e = {
    idParticipant: 0
  }) {
    this.idParticipant = e.idParticipant;
    this.peutVoirSolutions = typeof e.peutVoirSolutions !== "undefined" && e.peutVoirSolutions;
    if (typeof e.debute !== "undefined" && e.debute !== "") {
      this.debute = e.debute;
    }
    if (typeof e.fini !== "undefined" && e.fini !== "") {
      this.fini = e.fini;
    }
  }
}
export const xq9 = {
  radio: {
    id: "radio",
    libelle: "Choix unique"
  },
  checkbox: {
    id: "checkbox",
    libelle: "Choix multiples"
  },
  textarea: {
    id: "textarea",
    libelle: "Texte libre"
  },
  textholes: {
    id: "textholes",
    libelle: "Texte à trous"
  }
};
const xl = {
  q: "questionnaire",
  f: "formulaire",
  s: "sondage"
};
export const j4M = {
  questionnaire: "q",
  formulaire: "f",
  sondage: "s"
};
export const aPJ = {
  ar: "ar",
  mr: "mr",
  br: "br"
};
export class $ws {
  constructor(e = {
    id: 0,
    enonce: ""
  }) {
    this.id = e.id;
    this.enonce = e.enonce;
    if (typeof e.enonceDecode !== "undefined") {
      this.enonceDecode = e.enonceDecode;
    }
    if (typeof e.choisie !== "undefined") {
      this.choisie = e.choisie;
    }
  }
  get key() {
    return `${this.id}`;
  }
}
export let woQ = (() => {
  class R {
    constructor(n = {
      id: 0,
      question: "",
      enonce: "",
      typeQ: "",
      ordre: 1,
      propositions: [],
      required: false
    }) {
      this.id = n.id;
      this.question = n.question;
      this.enonce = n.enonce;
      this.typeQ = n.typeQ;
      this.ordre = n.ordre;
      this.propositions = Array.isArray(n.propositions) ? n.propositions.map(s => new $ws(s)) : [];
      this.required = !!n.required;
      if (typeof n.questionDecode !== "undefined") {
        this.questionDecode = n.questionDecode;
      }
      if (typeof n.enonceDecode !== "undefined") {
        this.enonceDecode = n.enonceDecode;
      }
      if (typeof n.minChecks !== "undefined") {
        this.minChecks = n.minChecks;
      }
      if (typeof n.maxChecks !== "undefined") {
        this.maxChecks = n.maxChecks;
      }
    }
    get key() {
      return `${this.id}`;
    }
    static addNewQuestion(n, s) {
      let d = new R(s);
      d.id = 0;
      d.ordre = n.length === 0 ? R.orderDefaultPos : n[n.length - 1].ordre + R.orderDefaultPos;
      return d;
    }
    static generatePosOrder(n, s) {
      let d;
      const h = n.length;
      d = s === 0 && h === 1 ? R.orderDefaultPos : s === 0 && h > 1 ? n[1].ordre / 2 : s === h - 1 ? n[s - 1].ordre + R.orderDefaultPos : (n[s - 1].ordre + n[s + 1].ordre) / 2;
      return d;
    }
  }
  R.orderDefaultPos = 16384;
  return R;
})();
export class QR_ extends woQ {
  constructor() {
    super(...arguments);
    this.typeQ = xq9.textholes.id;
  }
  static getCleanValue(e) {
    let n = e && e.toString() || e;
    return n && n.trim().toLowerCase();
  }
  static getCleanValueToSave(e) {
    let n = e && e.toString() || e;
    return n && n.trim();
  }
}
export class XBz {
  constructor(e = {
    id: 0,
    idQuestion: 0,
    idParticipant: 0,
    choix: 0
  }) {
    this.id = e.id;
    this.idQuestion = e.idQuestion;
    this.idParticipant = e.idParticipant;
    this.choix = Array.isArray(e.choix) ? [...e.choix] : Xd(e.choix) || Kn2(e.choix) ? {
      ...e.choix
    } : e.choix;
    if (typeof e.choixDecode !== "undefined") {
      if (Array.isArray(e.choixDecode)) {
        this.choixDecode = [...e.choixDecode];
      } else if (Xd(e.choixDecode) || Kn2(e.choixDecode)) {
        const n = Object.keys(e.choixDecode);
        this.choixDecode = n.reduce((s, d) => {
          s[d] = Array.isArray(e.choixDecode[d]) ? [...e.choixDecode[d]] : e.choixDecode[d];
          return s;
        }, {});
      } else {
        this.choixDecode = e.choixDecode;
      }
    }
  }
}
export class Iil extends $ws {
  constructor(e = {
    id: 0,
    enonce: "",
    valide: false,
    correctif: ""
  }) {
    super(e);
    this.valide = e.valide;
    this.correctif = e.correctif;
    if (typeof e.correctifDecode !== "undefined") {
      this.correctifDecode = e.correctifDecode;
    }
  }
}
export class cmE {
  constructor(e = {
    id: 0,
    question: "",
    enonce: "",
    remediation: "",
    titreSon: "",
    uncSon: "",
    srcSon: "",
    typeQ: "",
    ordre: 0,
    aleatoire: false
  }) {
    this.id = e.id;
    this.question = e.question;
    this.enonce = e.enonce;
    this.remediation = e.remediation;
    this.titreSon = e.titreSon;
    this.uncSon = e.uncSon;
    this.srcSon = e.srcSon;
    this.typeQ = e.typeQ;
    this.ordre = e.ordre;
    this.aleatoire = e.aleatoire;
    this.propositions = Array.isArray(e.propositions) ? e.propositions.map(n => new Iil(n)) : [];
    if (typeof e.questionDecode !== "undefined") {
      this.questionDecode = e.questionDecode;
    }
    if (typeof e.enonceDecode !== "undefined") {
      this.enonceDecode = e.enonceDecode;
    }
    if (typeof e.remediationDecode !== "undefined") {
      this.remediationDecode = e.remediationDecode;
    }
  }
  static addNewQuestion(e, n) {
    let s = new cmE(n);
    s.id = 0;
    s.ordre = e.length === 0 ? woQ.orderDefaultPos : e[e.length - 1].ordre + woQ.orderDefaultPos;
    return s;
  }
}
export class S0B {
  constructor(e = {
    id: 0,
    titre: ""
  }) {
    this.id = e.id;
    this.titre = e.titre;
    this.questions = Array.isArray(e.questions) ? e.questions.map(n => new cmE(n)) : [];
  }
  get combien() {
    return this.questions.length;
  }
}
export class xir extends XBz {
  constructor(e = {
    id: 0,
    idQuestion: 0,
    idParticipant: 0,
    choix: 0
  }) {
    super(e);
    if (typeof e.repondu !== "undefined" && e.repondu !== "") {
      this.repondu = e.repondu;
    }
    if (typeof e.resultat !== "undefined") {
      this.resultat = e.resultat;
    }
    if (typeof e.points !== "undefined") {
      this.points = e.points;
    }
  }
}
class yu {
  constructor(e = {
    idQuestion: 0,
    remediation: "",
    choix: 0
  }) {
    this.idQuestion = e.idQuestion;
    this.remediation = e.remediation;
    this.choix = Array.isArray(e.choix) ? [...e.choix] : Xd(e.choix) || Kn2(e.choix) ? {
      ...e.choix
    } : e.choix;
    if (typeof e.choixDecode !== "undefined") {
      if (Array.isArray(e.choixDecode)) {
        this.choixDecode = [...e.choixDecode];
      } else if (Xd(e.choixDecode) || Kn2(e.choixDecode)) {
        const n = Object.keys(e.choixDecode);
        this.choixDecode = n.reduce((s, d) => {
          s[d] = [...e.choixDecode[d]];
          return s;
        }, {});
      } else {
        this.choixDecode = e.choixDecode;
      }
    }
  }
}
class Rl {
  constructor(e = {
    id: 0,
    titre: "",
    introduction: "",
    conclusion: "",
    baremeBR: 1,
    baremeAR: 0,
    baremeMR: -1,
    idAuteur: 0,
    qAleatoire: false,
    masquerCorrectifFE: false,
    masquerCorrectifFormatif: false,
    bloquerRejeuFormatif: false
  }) {
    this.id = e.id;
    this.titre = e.titre;
    this.introduction = e.introduction;
    this.conclusion = e.conclusion;
    this.baremeBR = e.baremeBR;
    this.baremeAR = e.baremeAR;
    this.baremeMR = e.baremeMR;
    this.idAuteur = e.idAuteur;
    this.qAleatoire = e.qAleatoire;
    this.masquerCorrectifFE = e.masquerCorrectifFE;
    this.masquerCorrectifFormatif = e.masquerCorrectifFormatif;
    this.bloquerRejeuFormatif = e.bloquerRejeuFormatif;
    if (typeof e.introductionDecode !== "undefined") {
      this.introductionDecode = e.introductionDecode;
    }
    if (typeof e.conclusionDecode !== "undefined") {
      this.conclusionDecode = e.conclusionDecode;
    }
  }
}
export class UJm {
  constructor(e = {}) {
    this.qcm = new Rl(e.qcm);
    this.association = new Uc(e.association);
    this.participant = new Du(e.participant);
    this.questions = Array.isArray(e.questions) ? e.questions.map(n => new cmE(n)) : [];
    this.reponses = Array.isArray(e.reponses) ? e.reponses.map(n => new xir(n)) : [];
    this.solutions = Array.isArray(e.solutions) ? e.solutions.map(n => new yu(n)) : [];
  }
  get combien() {
    return this.questions.length;
  }
}
export class NyH {
  constructor(e = {
    id: 0,
    titre: "",
    sousTitre: "",
    idEntite: 0
  }) {
    this.id = e.id;
    this.titre = e.titre;
    this.sousTitre = e.sousTitre;
    this.idEntite = e.idEntite;
    if (typeof e.date !== "undefined" && e.date !== "") {
      this.date = e.date;
    }
  }
}
export class Ldb extends NyH {
  constructor(e = {
    id: 0,
    titre: "",
    sousTitre: "",
    idEntite: 0,
    idGroupe: 0,
    idClasse: 0,
    periode: "",
    codeMatiere: "",
    codeSSMatiere: "",
    disponible: false
  }) {
    super(e);
    this.idGroupe = e.idGroupe;
    this.idClasse = e.idClasse;
    this.periode = e.periode;
    this.codeMatiere = e.codeMatiere;
    this.codeSSMatiere = e.codeSSMatiere;
    this.disponible = e.disponible;
    if (typeof e.debute !== "undefined" && e.debute !== "") {
      this.debute = e.debute;
    }
    if (typeof e.fini !== "undefined" && e.fini !== "") {
      this.fini = e.fini;
    }
  }
  get isDatesOK() {
    return FSr.isNotEmptyString(this.debute) && FSr.isNotEmptyString(this.fini);
  }
  get isActive() {
    if (this.isDatesOK) {
      const e = new Date();
      const n = new Date(C_1.formatDate(this.fini));
      return !C_1.isEqual(e, n, true) && !C_1.isAfter(e, n, true) && (this.disponible || C_1.isBetween(e, new Date(C_1.formatDate(this.debute)), n, true, true, false));
    }
    return this.disponible;
  }
  get isPastAndInactive() {
    return this.isDatesOK && C_1.isDatePassee(new Date(C_1.formatDate(this.fini)), true);
  }
}
export class Gmi extends Rl {
  constructor(e = {
    id: 0,
    titre: "",
    introduction: "",
    resume: "",
    conclusion: "",
    created: "",
    baremeBR: 1,
    baremeAR: 0,
    baremeMR: -1,
    idAuteur: 0,
    qAleatoire: false,
    efface: false,
    nbQuestions: 0,
    guid: "",
    etiquettes: [],
    evaluations: [],
    travauxafaire: []
  }) {
    super(e);
    this.resume = e.resume;
    this.created = e.created;
    this.guid = e.guid;
    this.efface = e.efface;
    this.nbQuestions = e.nbQuestions;
    this.etiquettes = Array.isArray(e.etiquettes) ? [...e.etiquettes] : [];
    this.evaluations = Array.isArray(e.evaluations) ? e.evaluations.map(n => new Ldb(n)) : [];
    this.travauxafaire = Array.isArray(e.travauxafaire) ? e.travauxafaire.map(n => new NyH(n)) : [];
    if (Array.isArray(e.taxonomies)) {
      this.taxonomies = e.taxonomies.map(n => new C_g(n));
    }
    if (typeof e.natCommentaire !== "undefined") {
      this.natCommentaire = e.natCommentaire;
    }
    if (typeof e.natEtablissement !== "undefined") {
      this.natEtablissement = e.natEtablissement;
    }
    if (typeof e.natOgec !== "undefined") {
      this.natOgec = e.natOgec;
    }
    if (typeof e.natAuteur !== "undefined") {
      this.natAuteur = e.natAuteur;
    }
    if (typeof e.natMotsCles !== "undefined") {
      this.natMotsCles = e.natMotsCles;
    }
    if (typeof e.natNbTelecharge !== "undefined") {
      this.natNbTelecharge = e.natNbTelecharge;
    }
    if (typeof e.natScoring !== "undefined") {
      this.natScoring = e.natScoring;
    }
    if (typeof e.natNbVotants !== "undefined") {
      this.natNbVotants = e.natNbVotants;
    }
    if (typeof e.resumeDecode !== "undefined") {
      this.resumeDecode = e.resumeDecode;
    }
  }
  static create(e, n) {
    let s = new Gmi();
    if (Object.isExists(n)) {
      s = new Gmi({
        ...s,
        ...n
      });
    }
    s.idAuteur = e;
    return s;
  }
  get hasAssociations() {
    return this.evaluations.length > 0 || this.travauxafaire.length > 0;
  }
  get isShared() {
    return FSr.isNotEmptyString(this.guid);
  }
  get maxPoints() {
    return this.baremeBR * 10;
  }
  hasTag(e) {
    return this.etiquettes.indexOf(e.id) > -1;
  }
  isMine(e) {
    return this.idAuteur === e.id && this.natOgec === e.codeOgec;
  }
}
export class rLV {
  constructor(e = {
    id: 0,
    libelle: "",
    idAuteur: 0,
    badge: 0
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.idAuteur = e.idAuteur;
    this.badge = e.badge;
  }
}
class ll {
  constructor(e = {
    qcms: [],
    etiquettes: []
  }) {
    this.qcms = Array.isArray(e.qcms) ? e.qcms.map(n => new Gmi(n)) : [];
    this.etiquettes = Array.isArray(e.etiquettes) ? e.etiquettes.map(n => new rLV(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  saveQCM(e) {
    const n = this.qcms.findIndex(s => e.qcm.id === s.id);
    if (n === -1) {
      this.qcms.unshift(e.qcm);
    } else {
      this.qcms[n] = e.qcm;
    }
  }
  startStopQCM(e, n) {
    let s = this.qcms.find(d => d.id === n.idQCM);
    if (Object.isExists(s)) {
      let d = s.evaluations.find(h => h.id === n.idAssociation);
      if (Object.isExists(d)) {
        d.disponible = e;
        let h = !e;
        if (!h && d.isDatesOK) {
          const P = new Date();
          const z = new Date(C_1.formatDate(d.fini));
          if (C_1.isEqual(P, z, true) || C_1.isAfter(P, z, true)) {
            h = true;
          }
        }
        if (h) {
          this.deleteAutomatisationAssociation(n);
        }
      }
    }
  }
  editParametresAssociation(e) {
    let n = this.qcms.find(s => s.id === e.idQCM);
    if (Object.isExists(n)) {
      let s = n.evaluations.find(d => d.id === e.idAssociation);
      if (Object.isExists(s)) {
        s.debute = e.debute;
        s.fini = e.fini;
      }
    }
  }
  deleteAutomatisationAssociation(e) {
    let n = this.qcms.find(s => s.id === e.idQCM);
    if (Object.isExists(n)) {
      let s = n.evaluations.find(d => d.id === e.idAssociation);
      if (Object.isExists(s)) {
        delete s.debute;
        delete s.fini;
      }
    }
  }
  updateEtiquettes(e) {
    let n = this.qcms.find(d => d.id === e.idQCM);
    if (Object.isExists(n)) {
      n.etiquettes = [...e.etiquettes];
    }
    let s = this.etiquettes.find(d => d.id === e.idTag);
    if (Object.isExists(s)) {
      const d = s.badge + e.howmany;
      s.badge = d < 0 ? 0 : d;
    }
  }
  cloneQCM(e) {
    this.qcms.unshift(new Gmi(e.clone));
  }
  supprimerQCM(e) {
    const n = this.qcms.findIndex(s => s.id === e.idQCM);
    if (n > -1) {
      this.qcms[n].etiquettes.map(s => {
        let d = this.etiquettes.find(h => h.id === s);
        if (Object.isExists(d)) {
          let h = d.badge - 1;
          if (h < 0) {
            h = 0;
          }
          d.badge = h;
        }
      });
      this.qcms.splice(n, 1);
    }
  }
  reuseQCM(e) {
    this.qcms.unshift(e.newQCM);
  }
  shareQCM(e) {
    const n = this.qcms.findIndex(s => s.id === e.qcm.id);
    if (n > -1) {
      this.qcms[n].guid = e.qcm.guid;
    }
  }
  unshareQCM(e) {
    let n = this.qcms.find(s => s.id === e.idQCM);
    if (Object.isExists(n)) {
      n.guid = "";
    }
  }
  manageTag(e) {
    if (e.etiquette.id > 0) {
      const n = this.etiquettes.findIndex(s => e.etiquette.id === s.id);
      if (n === -1) {
        this.etiquettes.unshift(new rLV(e.etiquette));
      } else {
        this.etiquettes[n] = new rLV(e.etiquette);
      }
    } else {
      this.etiquettes.unshift(new rLV({
        ...e.etiquette,
        id: e.id
      }));
    }
    this.etiquettes = this.etiquettes.edSortBy("libelle");
  }
  supprimerTag(e) {
    const n = this.etiquettes.findIndex(s => e.id === s.id);
    if (n > -1) {
      this.etiquettes.splice(n, 1);
    }
    this.qcms.map(s => {
      const d = s.etiquettes.findIndex(h => e.id === h);
      if (d > -1) {
        s.etiquettes.splice(d, 1);
      }
    });
  }
  deleteAssociation(e) {
    let n = this.qcms.find(s => s.id === e.idQCM);
    if (Object.isExists(n)) {
      if (e.association instanceof Ldb) {
        const s = n.evaluations.findIndex(d => d.id === e.association.id);
        if (s >= 0) {
          n.evaluations.splice(s, 1);
        }
      }
      if (e.association instanceof NyH) {
        const s = n.travauxafaire.findIndex(d => d.id === e.association.id);
        if (s >= 0) {
          n.travauxafaire.splice(s, 1);
        }
      }
    }
  }
  associerDevoir(e) {
    let n = this.qcms.find(s => s.id === e.idQCM);
    if (Object.isExists(n)) {
      n.evaluations.push(e.newDev);
    }
  }
  associerTAF(e) {
    let n = this.qcms.find(s => s.id === e.idQCM);
    if (Object.isExists(n)) {
      n.travauxafaire.push(e.newTaf);
    }
  }
  saveQuestion(e) {
    const n = this.qcms.findIndex(s => s.id === e.idQCM);
    if (n > -1) {
      this.qcms[n].nbQuestions++;
    }
  }
  supprimerQuestion(e) {
    const n = this.qcms.findIndex(s => s.id === e.idQCM);
    if (n > -1) {
      this.qcms[n].nbQuestions--;
    }
  }
}
export class ccH {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new ll(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  static updateQCMWithCG(e, n) {
    e.forEach(s => {
      let d;
      if (s.idGroupe > 0) {
        d = n.find(h => h.id === s.idGroupe && h.typeEntity === meW.GROUPE);
      } else if (s.idClasse > 0) {
        d = n.find(h => h.id === s.idClasse && h.typeEntity === meW.CLASSE);
      }
      if (Object.isExists(d)) {
        s.sousTitre = d.libelle;
        let h = d.periodes.find(P => P.codePeriode === s.periode);
        if (Object.isExists(h)) {
          s.sousTitre = s.sousTitre !== "" ? `${s.sousTitre} - ${h.libelle}` : h.libelle;
          let P = h.matieres.find(z => z.code === s.codeMatiere && z.codeSSMatiere === s.codeSSMatiere);
          if (Object.isExists(P)) {
            s.sousTitre = s.sousTitre !== "" ? `${s.sousTitre} - ${P.libelle}` : P.libelle;
          }
        }
      }
    });
  }
  setNewQCMsRecuperes(e, n, s, d, h) {
    if (d.length > 0) {
      n.forEach(z => {
        ccH.updateQCMWithCG(z.evaluations, d);
      });
    }
    const P = new ll({
      qcms: n,
      etiquettes: s.edSortBy("libelle")
    });
    Object.setExpired(P, h);
    this[e] = P;
  }
}
class su {
  constructor(e = {
    idEleve: 0,
    idParticipant: 0,
    nom: "",
    prenom: "",
    particule: "",
    photo: "",
    sexe: "",
    lance: 0,
    nbPoints: 0,
    nbBR: 0,
    nbMR: 0,
    nbAR: 0,
    pourcReussite: 0,
    classement: 0,
    note: "",
    reponses: []
  }) {
    this.idEleve = e.idEleve;
    this.idParticipant = e.idParticipant;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.photo = e.photo;
    this.sexe = e.sexe;
    this.lance = e.lance;
    this.nbPoints = e.nbPoints;
    this.nbBR = e.nbBR;
    this.nbMR = e.nbMR;
    this.nbAR = e.nbAR;
    this.pourcReussite = e.pourcReussite;
    this.classement = e.classement;
    this.note = e.note;
    this.reponses = Array.isArray(e.reponses) ? e.reponses.map(n => new xir(n)) : [];
    if (typeof e.debute !== "undefined" && e.debute !== "") {
      this.debute = e.debute;
    }
    if (typeof e.fini !== "undefined" && e.fini !== "") {
      this.fini = e.fini;
    }
  }
}
class Dc {
  constructor(e = {
    id: 0,
    question: "",
    nbBR: 0,
    nbMR: 0,
    nbAR: 0
  }) {
    this.id = e.id;
    this.question = e.question;
    this.nbBR = e.nbBR;
    this.nbMR = e.nbMR;
    this.nbAR = e.nbAR;
  }
}
export class lCI {
  constructor(e = {
    questions: [],
    reponsesEleves: [],
    solutions: [],
    statsQuestions: []
  }) {
    this.questions = Array.isArray(e.questions) ? e.questions.map(n => new cmE(n)) : [];
    this.reponsesEleves = Array.isArray(e.reponsesEleves) ? e.reponsesEleves.map(n => new su(n)) : [];
    this.solutions = Array.isArray(e.solutions) ? e.solutions.map(n => new yu(n)) : [];
    this.statsQuestions = Array.isArray(e.statsQuestions) ? e.statsQuestions.map(n => new Dc(n)) : [];
  }
  static equivalentQuestionnaire(e, n) {
    return new UJm({
      association: {
        id: n.idAssociation,
        disponible: true
      },
      participant: {
        idParticipant: e.reponsesEleves[0].idParticipant,
        peutVoirSolutions: true
      },
      qcm: {
        id: n.idQCM,
        titre: n.titre
      },
      questions: e.questions,
      solutions: e.solutions,
      reponses: e.reponsesEleves[0].reponses
    });
  }
}
export class $ej {
  static edDBUserSpecificKey(e, n, s, d = []) {
    return `${e}_${n}_${s}_${d.join("_")}`;
  }
  static edDBUserSpecificKeyFromUser(e, n = []) {
    if (Object.isExists(e)) {
      return `${e.codeOgec}_${e.typeCompte}_${e.id}_${n.join("_")}`;
    } else {
      return `___${n.join("_")}`;
    }
  }
  static edDBUserSpecificKeyWithParams(e, n = [], s = "") {
    return `${e}${s}${n.join("_")}`;
  }
}
export class FwQ extends Error {
  constructor(e, n = 500, s = DOJ.genericError) {
    super(e);
    Object.setPrototypeOf(this, FwQ.prototype);
    this.message = e;
    this.status = n;
    this.action = s;
    this.name = "EDError";
  }
  toJSON() {
    return {
      message: this.message,
      status: this.status,
      action: this.action,
      name: this.name
    };
  }
}
class kt extends FwQ {
  constructor(e) {
    super(`The new state should be immutable in "${e}". Make sure to return a new immutable state (you can probably ignore this message if you know what you do !).`);
  }
}
class Nn {
  constructor(e = {
    component: "CoreStore",
    typeUiState: G5n.autre
  }) {
    this.component = e.component;
    this.typeUiState = e.typeUiState;
    if (typeof e.action !== "undefined") {
      this.action = e.action;
    }
    if (typeof e.title !== "undefined") {
      this.title = e.title;
    }
    if (typeof e.icon !== "undefined") {
      this.icon = e.icon;
    }
    if (typeof e.message !== "undefined") {
      this.message = e.message;
    }
    if (typeof e.showLoader !== "undefined") {
      this.showLoader = e.showLoader;
    }
    if (typeof e.resetCounterLoader !== "undefined") {
      this.resetCounterLoader = e.resetCounterLoader;
    }
    if (Object.isExists(e.error)) {
      this.error = new FwQ(e.error.message, e.error.status, e.error.action);
    }
  }
}
export class NcW {
  constructor(e = {
    action: "",
    samlRequest: "",
    relayState: ""
  }) {
    this.action = e.action;
    this.samlRequest = e.samlRequest;
    this.relayState = e.relayState;
  }
  getHTTPRedirectUrl() {
    let e = `${this.action}?SAMLRequest=${this.samlRequest}`;
    if (FSr.isNotEmptyString(this.relayState)) {
      e = `${e}&RelayState=${this.relayState}`;
    }
    return e;
  }
}
class Ri {
  constructor(e = {
    libelle: "",
    url: "",
    rne: ""
  }) {
    this.libelle = e.libelle;
    this.url = e.url;
    this.rne = e.rne;
  }
}
class Yr {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = s === "tabParams" ? Array.isArray(e[s]) ? e[s].map(d => new Ri(d)) : [] : e[s];
      }
    }
  }
}
class Bs {
  constructor(e = {
    code: "",
    enable: false
  }) {
    this.code = e.code;
    this.enable = e.enable;
    if (typeof e.badge !== "undefined") {
      this.badge = e.badge;
    }
    if (typeof e.ordre !== "undefined") {
      this.ordre = e.ordre;
    }
    if (typeof e.params !== "undefined") {
      this.params = new Yr(e.params);
    }
  }
}
class Nt {
  constructor(e = {
    url: ""
  }) {
    this.url = e.url;
    this.target = e.target || "";
    this.title = e.title || "";
    this.needAuth = e.needAuth || false;
    this.queryParams = Object.isExists(e.queryParams) ? {
      ...e.queryParams
    } : undefined;
  }
}
class Ke {
  constructor(e = {}) {
    if (typeof e.text !== "undefined") {
      this.text = e.text;
    }
    if (typeof e.route !== "undefined") {
      this.route = e.route;
    }
    if (typeof e.queryParams !== "undefined") {
      this.queryParams = {
        ...e.queryParams
      };
    }
    if (typeof e.state !== "undefined") {
      this.state = {
        ...e.state
      };
    }
    this.links = Array.isArray(e.links) ? e.links.map(n => new Nt(n)) : [];
  }
}
class We {
  constructor(e = {
    titre: ""
  }) {
    this.titre = e.titre;
    this.callNiveauxListe = typeof e.callNiveauxListe !== "undefined" && e.callNiveauxListe;
    if (typeof e.code !== "undefined") {
      this.code = e.code;
    }
    if (typeof e.css !== "undefined") {
      this.css = e.css;
    }
    if (typeof e.leftIcon !== "undefined") {
      this.leftIcon = e.leftIcon;
    }
    if (typeof e.rightIcon !== "undefined") {
      this.rightIcon = e.rightIcon;
    }
    if (typeof e.staticCall !== "undefined") {
      this.staticCall = e.staticCall;
    }
    this.badge = typeof e.badge !== "undefined" ? e.badge : 0;
    if (typeof e.action !== "undefined") {
      this.action = new Ke(e.action);
    }
  }
}
class jt {
  constructor(e = {
    id: 0,
    titre: "",
    type: "",
    picture: "",
    badge: 0,
    isOpen: true
  }) {
    this.id = e.id;
    this.titre = e.titre;
    this.type = e.type;
    this.picture = e.picture;
    this.items = Array.isArray(e.items) ? e.items.map(n => new We(n)) : [];
    this.isOpen = e.isOpen;
    if (typeof e.label !== "undefined") {
      this.label = e.label;
    }
    if (typeof e.css !== "undefined") {
      this.css = e.css;
    }
    if (typeof e.sexe !== "undefined") {
      this.sexe = e.sexe;
    }
  }
}
class On {
  constructor(e = {}) {
    if (typeof e.css !== "undefined") {
      this.css = e.css;
    }
    if (typeof e.picture !== "undefined") {
      this.picture = e.picture;
    }
    if (typeof e.espace !== "undefined") {
      this.espace = e.espace;
    }
    if (typeof e.identite !== "undefined") {
      this.identite = e.identite;
    }
    if (typeof e.etablissement !== "undefined") {
      this.etablissement = e.etablissement;
    }
  }
}
export class XmW {
  constructor(e = {}) {
    this.header = new On(e.header);
    this.entries = Array.isArray(e.entries) ? e.entries.map(n => new jt(n)) : [];
  }
  static initialState() {
    return new XmW();
  }
}
export class Kg5 {
  static getModulesEnabled(e) {
    if (e && typeof e.modules !== "undefined") {
      return e.modules.filter(n => n.enable).sort((n, s) => n.ordre - s.ordre);
    } else {
      return [];
    }
  }
  static canAccessPath(e, n, s, d = false) {
    return e.some(h => h.items.filter(P => !(P instanceof M.y) && n.includes(P.code)).some(P => P.action && (!d && P.action.route === s || d && s.startsWith(P.action.route))));
  }
  static isModuleEnabled(e, n, s = 0) {
    if (!Object.isExists(e)) {
      return false;
    }
    let d = [];
    if (s > 0) {
      const h = e.profile.eleves.filter(P => P.id === s);
      if (h.length === 1) {
        d = h[0].modules.filter(P => P.code === n);
      }
    } else {
      d = e.modules.filter(h => h.code === n);
    }
    return d.length === 1 && d[0].enable;
  }
  static getBadgeNumber(e) {
    if (typeof e.badge !== "undefined" && e.badge > 0) {
      return e.badge;
    } else {
      return 0;
    }
  }
  static getModuleParams(e, n) {
    if (!Object.isExists(n)) {
      return new Yr();
    }
    let s = n.modules.find(d => d.code === e);
    if (Object.isExists(s)) {
      return s.params;
    } else {
      return new Yr();
    }
  }
  static getModuleParametre(e, n, s) {
    if (!Object.isExists(s)) {
      return "";
    }
    let d = s.modules.find(h => h.code === e);
    if (Object.isExists(d) && typeof d.params[n] !== "undefined") {
      return d.params[n];
    } else {
      return "";
    }
  }
}
export let $t3 = (() => {
  class R {
    static reverseNom(n) {
      let s = "";
      if (Object.isExists(n)) {
        if (FSr.isNotEmptyString(n.civilite)) {
          s += `${n.civilite} `;
        }
        if (FSr.isNotEmptyString(n.particule)) {
          s += `${n.particule.toUpperCase()} `;
        }
        if (FSr.isNotEmptyString(n.nom)) {
          s += `${n.nom.toUpperCase()} `;
        }
        if (FSr.isNotEmptyString(n.prenom)) {
          s += `${FSr.capitalizeFirstLetter(n.prenom)} `;
        }
        return s.replace(/\s{2,}/g, " ").trim();
      } else {
        return s;
      }
    }
    static defaultNom(n) {
      let s = "";
      if (Object.isExists(n)) {
        if (FSr.isNotEmptyString(n.civilite)) {
          s += `${n.civilite} `;
        }
        if (FSr.isNotEmptyString(n.prenom)) {
          s += `${FSr.capitalizeFirstLetter(n.prenom)} `;
        }
        if (FSr.isNotEmptyString(n.particule)) {
          s += `${n.particule.toUpperCase()} `;
        }
        if (FSr.isNotEmptyString(n.nom)) {
          s += `${n.nom.toUpperCase()} `;
        }
        return s.replace(/\s{2,}/g, " ").trim();
      } else {
        return s;
      }
    }
    static confidentiality(n, s) {
      let d = {
        ...n
      };
      if (s && FSr.isNotEmptyString(n.prenom) && (n.typeCompte === dcH.ENSEIGNANT || n.type === dcH.ENSEIGNANT || n.role === dcH.ENSEIGNANT || n.profil === dcH.ENSEIGNANT || n.typeCompte === dcH.PERSONNEL || n.type === dcH.PERSONNEL || n.role === dcH.PERSONNEL || n.profil === dcH.PERSONNEL)) {
        d.prenom = `${n.prenom.substring(0, 1)}.`;
      }
      return d;
    }
    transform(n, s = false, d = false, h = false) {
      const P = d ? R.confidentiality(n, h) : n;
      if (s) {
        return R.reverseNom(P);
      } else {
        return R.defaultNom(P);
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "displayNom",
    type: R,
    pure: true
  });
  return R;
})();
export let YC = (() => {
  class R {
    static base64decode(n, s) {
      let d;
      if (typeof n === "undefined" || n === "") {
        return n;
      }
      try {
        d = s ? X.DS.atob(n) : X.DS.decode(n);
      } catch (h) {
        console.error("Base64Pipe.base64decode Base64 :", h);
        try {
          d = X.DS.atob(n);
        } catch {
          d = n;
        }
      }
      return d;
    }
    static base64encode(n, s) {
      let d;
      if (typeof n === "undefined" || n === "") {
        return n;
      }
      try {
        d = s ? X.DS.btoa(n) : X.DS.encode(n);
      } catch (h) {
        console.error("Base64Pipe.base64encode Base64 :", h);
        try {
          d = X.DS.btoa(n);
        } catch {
          d = n;
        }
      }
      return d;
    }
    transform(n, s = "decode") {
      if (s === "decode") {
        return R.base64decode(n);
      } else {
        return R.base64encode(n);
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "base64",
    type: R,
    pure: true
  });
  return R;
})();
export let VLW = (() => {
  class R {
    transform(n) {
      return String(n).replace(/<[^>]+>/gm, "");
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "htmlToPlaintext",
    type: R,
    pure: true
  });
  return R;
})();
export let GXb = (() => {
  class R {
    transform(n, s) {
      return n.filter((d, h, P) => P.map(z => z[s]).indexOf(d[s]) === h);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "unique",
    type: R,
    pure: true
  });
  return R;
})();
export let nQ7 = (() => {
  class R {
    transform(n, s) {
      if (typeof n == "string") {
        return n.replace(IZV, typeof s === "undefined" ? " " : s);
      } else {
        return n;
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "schmurtz",
    type: R,
    pure: true
  });
  return R;
})();
export let kM_ = (() => {
  class R {
    static replaceText(n) {
      if (FSr.isNotEmptyString(n)) {
        return n.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n|&#10;)/g, "$1<br />$2");
      } else {
        return n;
      }
    }
    transform(n) {
      return R.replaceText(n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "nl2br",
    type: R,
    pure: true
  });
  return R;
})();
export let d0N = (() => {
  class R {
    static sortDatas(n, s) {
      return n.sort((d, h) => {
        let P;
        let z;
        let Ae;
        for (let Ve = 0; Ve < s.length; Ve++) {
          let Vt;
          let Hn;
          Ae = s[Ve].split("|");
          P = Ae[0];
          z = Ae[1] ? Ae[1] : "asc";
          if (P.indexOf(".") > -1) {
            Vt = R.getPropertyValue({
              ...d
            }, P.split("."));
            Hn = R.getPropertyValue({
              ...h
            }, P.split("."));
          } else if (FSr.isNotEmptyString(P)) {
            Vt = d[P];
            Hn = h[P];
          } else {
            Vt = d;
            Hn = h;
          }
          if (typeof Vt === "undefined" || typeof Hn === "undefined") {
            return 0;
          }
          if (typeof Vt == "string") {
            Vt = Vt.toLowerCase();
          }
          if (typeof Hn == "string") {
            Hn = Hn.toLowerCase();
          }
          if (Vt < Hn) {
            if (z === "asc") {
              return -1;
            } else {
              return 1;
            }
          }
          if (Vt > Hn) {
            if (z === "asc") {
              return 1;
            } else {
              return -1;
            }
          }
          if (Ve === s.length - 1) {
            return 0;
          }
        }
        return 0;
      });
    }
    static getPropertyValue(n, s) {
      let d;
      for (let h = 0; h < s.length; h++) {
        let P = s[h];
        if (!Kn2(n[P])) {
          d = n[P];
          break;
        }
        n = n[P];
      }
      return d;
    }
    transform(n, s) {
      return R.sortDatas(n, s);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "orderBy",
    type: R,
    pure: true
  });
  return R;
})();
export let VOG = (() => {
  class R {
    transform(n) {
      return Object.keys(n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "keys",
    type: R,
    pure: true
  });
  return R;
})();
export let gLd = (() => {
  class R {
    transform(n) {
      return Object.values(n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "values",
    type: R,
    pure: true
  });
  return R;
})();
export let lfJ = (() => {
  class R {
    transform(n, s, d = false) {
      if (d) {
        let Ae = {};
        for (let Ve of n) {
          if (Array.isArray(Ae[Ve[s[0]]])) {
            Ae[Ve[s[0]]].push(Ve);
          } else {
            Ae[Ve[s[0]]] = [Ve];
          }
        }
        return Ae;
      }
      let z;
      let h = [];
      let P = null;
      for (let Ae of n) {
        z = false;
        if (P !== null) {
          for (let Ve = 0; Ve < s.length; Ve++) {
            if (P[s[Ve]] !== Ae[s[Ve]]) {
              z = true;
            }
          }
        } else {
          z = true;
        }
        Ae.group_by_CHANGED = z;
        h.push(Ae);
        P = Ae;
      }
      return h;
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "groupBy",
    type: R,
    pure: false
  });
  return R;
})();
export let Jij = (() => {
  class R {
    constructor() {
      this._date = new ifA();
    }
    memeDates(n, s) {
      return `Le ${this._date.transform(n, s)} \xe0 ${this._date.transform(n, "H:mm")}`;
    }
    aPartirDe(n, s, d = true) {
      return `A partir du ${this._date.transform(n, s)} ${d ? "" : "<br />"}\xe0 ${this._date.transform(n, "H:mm")}`;
    }
    datesDifferentes(n, s, d, h = true) {
      if (C_1.isSameDay(n, s)) {
        return `Le ${this._date.transform(n, d)} ${h ? "" : "<br />"}de ${this._date.transform(n, "H:mm")} \xe0 ${this._date.transform(s, "H:mm")}`;
      } else {
        return `Du ${this._date.transform(n, d)} \xe0 ${this._date.transform(n, "H:mm")} ${h ? "" : "<br />"}au ${this._date.transform(s, d)} \xe0 ${this._date.transform(s, "H:mm")}`;
      }
    }
    transform(n, s = "dd/MM/y", d = true) {
      let h;
      let P;
      if (Object.isExists(n) && !Object.isEmpty(n)) {
        const Ae = Object.keys(n);
        for (let Ve of Ae) {
          let Tt = n[Ve];
          if (typeof Tt == "string") {
            Tt = C_1.stringToDate(Tt);
          }
          if (C_1.isDate(Tt) && C_1.isDateValid(Tt)) {
            if (h) {
              P = Tt;
            } else {
              h = Tt;
            }
          }
        }
      }
      if (!h && !P) {
        return "";
      }
      if (!P) {
        return this.aPartirDe(h, s, d);
      }
      const z = C_1.compareAsc(h, P);
      if (z === 0) {
        return this.memeDates(h, s);
      } else if (z === -1) {
        return this.datesDifferentes(h, P, s, d);
      } else if (z === 1) {
        return this.datesDifferentes(P, h, s, d);
      } else {
        return "";
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "formattedDate",
    type: R,
    pure: true
  });
  return R;
})();
export let dYR = (() => {
  class R {
    transform(n, s = 1, d = true) {
      if ("0" == `${n}`) {
        return "0";
      }
      if (!FSr.isNumeric(`${n}`)) {
        return "-";
      }
      const h = Number(n);
      const z = Math.floor(Math.log(h) / Math.log(1024));
      return (h / Math.pow(1024, Math.floor(z))).toFixed(s) + (d ? " " + ["octets", "Ko", "Mo", "Go", "To", "Po"][z] : "");
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "displaySize",
    type: R,
    pure: true
  });
  return R;
})();
export let W70 = (() => {
  class R {
    transform(n, s = []) {
      const d = s.length > 0 ? parseInt(s[0], 10) : 20;
      const h = s.length > 1 ? s[1] : "…";
      if (n && n.length > d) {
        return n.substring(0, d) + h;
      } else {
        return n;
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "truncate",
    type: R,
    pure: true
  });
  return R;
})();
export let EGL = (() => {
  class R {
    transform(n, s = true, d = false) {
      if (d) {
        return FSr.translateTypeUserToLibelle(n, s);
      } else {
        return FSr.translateTypeUser(n, s);
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "translateTypeUser",
    type: R,
    pure: true
  });
  return R;
})();
export let wtJ = (() => {
  class R extends b.H9 {
    constructor() {
      super("fr-FR", "EUR");
    }
    static displayFormattedMontant(n, s = "978") {
      const d = R.infosDevise(s);
      return (0, b.xG)(n, "fr-FR", (0, b.jK)(d.currencyCode, "wide", "fr-FR"), d.currencyCode, d.digitsInfo);
    }
    static infosDevise(n = "978") {
      let s;
      switch (n) {
        case "756":
          s = {
            currencyCode: "CHF",
            digit: 2,
            num: 756,
            digitsInfo: "1.2-2",
            currencyNarrowSymbol: (0, b.jK)("CHF", "wide", "fr-FR"),
            pattern: "^\\d*(\\.\\d{1,2}$)?"
          };
          break;
        case "950":
          s = {
            currencyCode: "XAF",
            digit: 0,
            num: 950,
            digitsInfo: "1.0-0",
            currencyNarrowSymbol: (0, b.jK)("XAF", "wide", "fr-FR"),
            pattern: "\\d*"
          };
          break;
        case "952":
          s = {
            currencyCode: "XOF",
            digit: 0,
            num: 952,
            digitsInfo: "1.0-0",
            currencyNarrowSymbol: (0, b.jK)("XOF", "wide", "fr-FR"),
            pattern: "\\d*"
          };
          break;
        case "953":
          s = {
            currencyCode: "XPF",
            digit: 0,
            num: 953,
            digitsInfo: "1.0-0",
            currencyNarrowSymbol: (0, b.jK)("XPF", "wide", "fr-FR"),
            pattern: "\\d*"
          };
          break;
        default:
          s = {
            currencyCode: "EUR",
            digit: 2,
            num: 978,
            digitsInfo: "1.2-2",
            currencyNarrowSymbol: (0, b.jK)("EUR", "wide", "fr-FR"),
            pattern: "^\\d*(\\.\\d{1,2}$)?"
          };
      }
      return s;
    }
    transform(n, s = "978", d = "symbol") {
      const h = R.infosDevise(s);
      return super.transform(n, h.currencyCode, d, h.digitsInfo);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵpipe = t.Yjl({
    name: "edCurrency",
    type: R,
    pure: true
  });
  return R;
})();
const yl = ["docx", "aac", "dat", "url", "pad", "gif", "key", "otp", "py", "tgz", "aiff", "dmg", "h", "less", "ots", "qt", "tiff", "ai", "doc", "hpp", "mid", "ott", "rar", "txt", "avi", "dotx", "html", "mp3", "_page", "rb", "wav", "_blank", "dwg", "ics", "mp4", "pdf", "rtc", "rtf", "xls", "bmp", "dxf", "iso", "mpg", "php", "sass", "xlsx", "c", "eps", "java", "odf", "odp", "odg", "png", "scss", "xml", "cpp", "exe", "jpg", "jpeg", "ods", "ppt", "pptx", "sql", "yml", "css", "flv", "js", "odt", "psd", "tga", "zip", "mov", "webm", "wmv", "mpeg", "stream_ed", "mblock", "sb2", "sb3"];
export class VEx {
  static getExtension(e, n) {
    const d = /(?:\.([^.]+))?$/.exec(e)[1];
    let h = Object.isExists(n) ? n : "_page";
    if (yl.indexOf(d) > -1) {
      return d;
    } else {
      return h;
    }
  }
  static findParentFolder(e, n) {
    let s;
    e.forEach(d => {
      if (d.isFolder() && d.children.findIndex(h => h.isFile() && h.id === n) > -1) {
        s = d;
      }
      if (!Object.isExists(s) && d.children) {
        s = VEx.findParentFolder(d.children, n);
      }
    });
    return s;
  }
  static findCurrentNode(e, n) {
    let s;
    e.forEach(d => {
      if (d.id === n) {
        s = d;
      }
      if (!Object.isExists(s) && d.children) {
        s = VEx.findCurrentNode(d.children, n);
      }
    });
    return s;
  }
  static updatedNode(e, n, s, d) {
    let h;
    if (e.id === n) {
      if (s === e.id) {
        const P = Object.keys(e);
        for (let z of P) {
          e[z] = d[z];
        }
        return true;
      }
      h = e.children.findIndex(P => s === P.id);
      if (h > -1) {
        e.children[h] = d;
      } else {
        e.children.push(d);
        e.children = d0N.sortDatas(e.children, ["type|desc", "libelle|asc"]);
      }
      return true;
    }
    {
      let P = e.children.findIndex(z => n === z.id);
      if (P > -1) {
        return VEx.updatedNode(e.children[P], n, s, d);
      } else {
        return e.children.some(z => VEx.updatedNode(z, n, s, d));
      }
    }
  }
  static deleteNode(e, n, s) {
    let d;
    if (e.id === n) {
      d = e.children.findIndex(h => s === h.id);
      return d > -1 && (e.children.splice(d, 1), true);
    }
    {
      let h = e.children.findIndex(P => n === P.id);
      if (h > -1) {
        return VEx.deleteNode(e.children[h], n, s);
      } else {
        return e.children.some(P => VEx.deleteNode(P, n, s));
      }
    }
  }
  static isCollaboraActif(e) {
    return Kg5.getModuleParametre(qzA.CLOUD, "collaboraActif", e) === "1";
  }
  static isCollaboraEdit(e) {
    return Kg5.getModuleParametre(qzA.CLOUD, "collaboraEdit", e) === "1";
  }
  static getCollaboraFormat(e) {
    return Kg5.getModuleParametre(qzA.CLOUD, "collaboraFormat", e);
  }
  static isStreamingActif(e) {
    return Kg5.getModuleParametre(qzA.CLOUD, "streamingActif", e) === "1";
  }
  static isCasierId(e) {
    return new RegExp(/\\[0-9][0-9A-Z]{7}\\[EP]\\\d+\\CASIER\b\\?/).test(e);
  }
  static isCasierDateNodeId(e) {
    return new RegExp(/\\[0-9][0-9A-Z]{7}\\[EPAW]\\\d+\\CASIER\\RENDUS\\[^\\]+\\[^\\]+\\\d{2}-\d{2}-\d{4}\\?$/).test(e);
  }
  static isCasierNodeRemovableId(e) {
    if (!VEx.isCasierDateNodeId(e)) {
      return false;
    }
    const n = e.split("\\").pop();
    if (!new RegExp(/\d{2}-\d{2}-\d{4}/).test(e)) {
      return false;
    }
    const d = C_1.getDatesAnneeScolaire(new Date());
    const h = C_1.stringToDate(n.split("-").reverse().join("-"));
    return C_1.isBefore(h, d[0], false);
  }
}
export class Sej {
  constructor(e = {
    id: 0,
    tel: "",
    nom: "",
    prenom: "",
    particule: "",
    dateCreation: "",
    dateValidation: "",
    signature: ""
  }) {
    this.id = e.id;
    this.tel = e.tel;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.dateCreation = e.dateCreation;
    this.dateValidation = e.dateValidation;
    this.signature = e.signature;
  }
}
export class eD9 {
  constructor(e = {
    id: ""
  }) {
    this.id = e.id || "0";
    if (Object.isExists(e.type)) {
      this.type = e.type;
    }
    if (Object.isExists(e.libelle)) {
      this.libelle = e.libelle;
    }
    if (Object.isExists(e.idEleve)) {
      this.idEleve = e.idEleve;
    }
    if (Object.isExists(e.url)) {
      this.url = e.url;
    }
    if (Object.isExists(e.description)) {
      this.description = e.description;
    }
    if (Object.isExists(e.date)) {
      this.date = e.date;
    }
    if (Object.isExists(e.heure)) {
      this.heure = e.heure;
    }
    if (Object.isExists(e.taille)) {
      this.taille = e.taille;
    }
    this.displayText = typeof e.displayText !== "undefined" ? e.displayText : this.libelle;
    if (Object.isExists(e.extension)) {
      this.extension = e.extension;
    }
    if (Object.isExists(e.unc)) {
      this.unc = e.unc;
    }
    if (Object.isExists(e.uncMerge)) {
      this.uncMerge = e.uncMerge;
    }
    if (Object.isExists(e.signatureDemandee)) {
      this.signatureDemandee = e.signatureDemandee;
    }
    if (Object.isExists(e.signature)) {
      this.signature = new Sej(e.signature);
    }
    if (Object.isExists(e.streamingTranscodeStatus)) {
      this.streamingTranscodeStatus = e.streamingTranscodeStatus;
    }
  }
  get isStreamingReady() {
    return this.isStreaming() && Object.isExists(this.streamingTranscodeStatus) && this.streamingTranscodeStatus === "DONE";
  }
  get isStreamingTranscoding() {
    return this.isStreaming() && Object.isExists(this.streamingTranscodeStatus) && this.streamingTranscodeStatus !== "DONE";
  }
  get compareKey() {
    if (this.id !== "0") {
      return this.id;
    } else if (Object.isExists(this.unc)) {
      return this.unc;
    } else if (Object.isExists(this.url)) {
      return this.url;
    } else if (Object.isExists(this.libelle)) {
      return this.libelle;
    } else {
      return "";
    }
  }
  get nativeExtension() {
    let e = "";
    if (Object.isExists(this.libelle)) {
      e = VEx.getExtension(this.libelle.toLowerCase(), "");
    }
    if (e === "" && typeof this.id == "string") {
      e = VEx.getExtension(this.id.toLowerCase(), "");
    }
    if (e === "" && Object.isExists(this.url)) {
      e = VEx.getExtension(this.url.toLowerCase(), "");
    }
    if (e === "" && Object.isExists(this.unc)) {
      e = VEx.getExtension(this.unc.toLowerCase(), "");
    }
    return e.toLowerCase();
  }
  isImage() {
    return ["gif", "bmp", "png", "jpg", "jpeg"].indexOf(this.nativeExtension) > -1;
  }
  isPDF() {
    return ["pdf"].indexOf(this.nativeExtension) > -1;
  }
  isDocX() {
    return ["doc", "docx"].indexOf(this.nativeExtension) > -1;
  }
  isXls() {
    return ["xls", "xlsx"].indexOf(this.nativeExtension) > -1;
  }
  isODF() {
    return ["odt", "ods", "odp", "odg"].indexOf(this.nativeExtension) > -1;
  }
  isPPTX() {
    return ["ppt", "pptx"].indexOf(this.nativeExtension) > -1;
  }
  isRTF() {
    return ["rtf"].indexOf(this.nativeExtension) > -1;
  }
  isTXT() {
    return ["txt"].indexOf(this.nativeExtension) > -1;
  }
  isCollaboraFile() {
    return this.isDocX() || this.isXls() || this.isPPTX() || this.isRTF() || this.isODF() || this.isTXT() || this.type === Vav.FICHIER_PRELOADED;
  }
  isStreaming() {
    return ["stream_ed"].indexOf(this.nativeExtension) > -1;
  }
  isVideo() {
    return ["mp4", "mpeg", "mov", "webm"].indexOf(this.nativeExtension) > -1;
  }
}
export class XsP {
  constructor(e = {
    civilite: "",
    nom: "",
    prenom: "",
    particule: "",
    type: ""
  }) {
    this.civilite = e.civilite;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.type = e.type;
    if (typeof e.id !== "undefined") {
      this.id = e.id;
    }
  }
}
export class eH4 {
  constructor(e = {
    idSignataire: 0,
    typeSignataire: "",
    telephone: ""
  }) {
    this.idSignataire = e.idSignataire;
    this.typeSignataire = e.typeSignataire;
    this.telephone = e.telephone;
    if (Object.isExists(e.nom)) {
      this.nom = e.nom;
    }
    if (Object.isExists(e.signatureCanvas)) {
      this.signatureCanvas = e.signatureCanvas;
    }
    if (Object.isExists(e.ogec)) {
      this.ogec = e.ogec;
    }
  }
}
export class wlj {
  constructor(e = {
    id: 0,
    libelle: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
  }
}
class qd extends wlj {
  constructor(e = {
    id: 0,
    libelle: "",
    code: ""
  }) {
    super(e);
    this.code = e.code;
  }
}
class Zc extends qd {
  constructor(e = {
    id: 0,
    libelle: "",
    code: ""
  }) {
    super(e);
    if (Array.isArray(e.classes)) {
      this.classes = [...e.classes];
    }
  }
}
export class WRp extends qd {
  constructor(e = {
    id: 0,
    libelle: "",
    code: ""
  }) {
    super(e);
    if (typeof e.idGroupe !== "undefined") {
      this.idGroupe = e.idGroupe;
    }
    if (typeof e.isPP !== "undefined") {
      this.isPP = e.isPP;
    }
    if (typeof e.matiere !== "undefined") {
      this.matiere = e.matiere;
    }
    if (typeof e.optionType !== "undefined") {
      this.optionType = e.optionType;
    }
    if (typeof e.uniqueID !== "undefined") {
      this.uniqueID = e.uniqueID;
    }
    if (typeof e.estNote !== "undefined") {
      this.estNote = e.estNote;
    }
  }
}
function jl(R) {
  return function (e) {
    e.classConfig = {};
    for (let n = 0, s = Object.keys(R); n < s.length; n++) {
      const d = s[n];
      e.classConfig[d] = R[d];
    }
  };
}
export function pcA(R) {
  return jl(R);
}
function rd(R) {
  if (Object.isExists(R.constructor.classConfig)) {
    return R.constructor.classConfig.className;
  } else {
    return R.constructor.name;
  }
}
export let Dfc = (() => {
  let R = class {
    constructor(n = {
      id: 0,
      prenom: "",
      nom: "",
      sexe: "",
      nomEtablissement: "",
      idEtablissement: "",
      idReelEtab: ""
    }) {
      this.id = n.id;
      this.prenom = n.prenom;
      this.nom = n.nom;
      this.sexe = n.sexe;
      this.nomEtablissement = n.nomEtablissement;
      this.idEtablissement = n.idEtablissement;
      this.idReelEtab = n.idReelEtab;
      this.modules = Array.isArray(n.modules) ? n.modules.map(s => new Bs(s)) : [];
      this.classe = new WRp(n.classe);
      if (typeof n.infoEDT !== "undefined") {
        this.infoEDT = n.infoEDT;
      }
      if (typeof n.photo !== "undefined") {
        this.photo = n.photo;
      }
      if (typeof n.classeEstNote !== "undefined") {
        this.classeEstNote = n.classeEstNote;
      }
      if (typeof n.classeId !== "undefined") {
        this.classeId = n.classeId;
      }
      if (typeof n.classeLibelle !== "undefined") {
        this.classeLibelle = n.classeLibelle;
      }
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDEleve"
  })], R);
  return R;
})();
export class SnS {
  constructor(e = {}) {
    this.choosenAnnee = typeof e.choosenAnnee !== "undefined" ? e.choosenAnnee : "";
    this.pagination = typeof e.pagination !== "undefined" ? {
      ...SnS.initPagination(),
      ...e.pagination
    } : SnS.initPagination();
    if (typeof e.typeUser !== "undefined") {
      this.typeUser = e.typeUser;
    }
    if (typeof e.idUser !== "undefined") {
      this.idUser = e.idUser;
    }
    if (typeof e.variantDefault !== "undefined") {
      this.variantDefault = e.variantDefault;
    }
  }
  static initialState() {
    return {
      choosenAnnee: "",
      pagination: SnS.initPagination()
    };
  }
  static initPagination() {
    return {
      "-1": 0,
      "-2": 0,
      "-3": 0,
      "-5": 0
    };
  }
}
class sd {
  constructor(e = {
    code: 0,
    libelle: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
export class liz {
  constructor(e = {
    libelle: ""
  }) {
    this.libelle = e.libelle;
  }
}
class ql {
  constructor(e = {
    code: 0,
    libelle: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
class lu {
  constructor(e = {
    code: "",
    id: 0,
    libelle: "",
    type: ""
  }) {
    this.code = e.code;
    this.id = e.id;
    this.libelle = e.libelle;
    this.type = e.type;
  }
}
class Qc {
  constructor(e = {
    droitUtilisateur: 0
  }) {
    this.droitUtilisateur = e.droitUtilisateur;
  }
}
export let K4v = (() => {
  let R = class {
    constructor(n = {
      idMembre: 0,
      nom: "",
      prenom: "",
      profil: "",
      droit: 0,
      civilite: "",
      libelleClasse: "",
      isAdministrateur: false,
      messagerieActive: false
    }) {
      this.idMembre = n.idMembre;
      this.nom = n.nom;
      this.prenom = n.prenom;
      this.profil = n.profil;
      this.droit = n.droit;
      this.civilite = n.civilite;
      this.libelleClasse = n.libelleClasse;
      this.isAdministrateur = n.isAdministrateur;
      this.messagerieActive = n.messagerieActive;
      this.fonction = new wlj(n.fonction);
      if (this.droit === bvQ.DROIT_ADMIN && !this.isAdministrateur) {
        this.isAdministrateur = true;
      }
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDEspaceDeTravailMembre"
  })], R);
  return R;
})();
export let zH9 = (() => {
  let R = class extends Qc {
    constructor(n = {
      id: 0,
      titre: "",
      description: "",
      resume: "",
      cloud: false,
      discussion: false,
      agenda: false,
      public: false,
      ouvert: false,
      estMembre: false,
      estAdmin: false,
      droitUtilisateur: 0,
      salleDesProfs: false,
      creePar: "",
      nbMembres: 0,
      couleurEvenementAgenda: ""
    }) {
      super(n);
      this.id = n.id;
      this.titre = n.titre;
      this.description = n.description;
      this.resume = n.resume;
      this.cloud = n.cloud;
      this.discussion = n.discussion;
      this.agenda = n.agenda;
      this.public = n.public;
      this.ouvert = n.ouvert;
      this.estMembre = n.estMembre;
      this.estAdmin = n.estAdmin;
      this.salleDesProfs = n.salleDesProfs;
      this.creePar = n.creePar;
      if (Object.isExists(n.nbMembres)) {
        this.nbMembres = n.nbMembres;
      }
      if (Object.isExists(n.creeLe)) {
        this.creeLe = n.creeLe;
      }
      if (Object.isExists(n.couleurEvenementAgenda)) {
        this.couleurEvenementAgenda = n.couleurEvenementAgenda;
      }
      this.fullLoaded = !!Object.isExists(n.fullLoaded) && n.fullLoaded;
      if (Array.isArray(n.membres)) {
        this.membres = n.membres.map(s => new K4v(s));
      }
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDEspaceDeTravail"
  })], R);
  return R;
})();
export class un0 {
  constructor(e = {
    id: 0,
    date: "",
    descriptif: "",
    cible: "",
    membre: {}
  }) {
    this.id = e.id;
    this.date = e.date;
    this.descriptif = e.descriptif;
    this.cible = e.cible;
    this.membre = {
      ...e.membre
    };
  }
}
class yd {
  constructor(e = {
    date: "",
    nom: "",
    prenom: false,
    profil: ""
  }) {
    this.date = e.date;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.profil = e.profil;
  }
}
export class wdp {
  constructor(e = {
    id: 0,
    titre: "",
    idAuteur: 0,
    profilAuteur: "",
    dateCreation: "",
    nbMessages: 0
  }) {
    this.id = e.id;
    this.titre = e.titre;
    this.idAuteur = e.idAuteur;
    this.profilAuteur = e.profilAuteur;
    this.dateCreation = e.dateCreation;
    this.nbMessages = e.nbMessages;
    this.dernierMessage = new yd(e.dernierMessage);
  }
}
class Yd {
  constructor(e = {
    idAuteur: 0,
    profil: "",
    nom: "",
    prenom: "",
    photo: "",
    libelleClasse: "",
    fonctionPersonnel: ""
  }) {
    this.idAuteur = e.idAuteur;
    this.profil = e.profil;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.photo = e.photo;
    this.libelleClasse = e.libelleClasse;
    this.fonctionPersonnel = e.fonctionPersonnel;
  }
}
export class VKt {
  constructor(e = {
    id: "",
    dateCreation: "",
    isModere: false,
    contenu: ""
  }) {
    this.id = e.id;
    this.dateCreation = e.dateCreation;
    this.isModere = e.isModere;
    this.contenu = e.contenu;
    this.auteur = new Yd(e.auteur);
    if (e.idTopic) {
      this.idTopic = e.idTopic;
    }
  }
}
export class G$d {
  constructor(e = {
    idTopic: ""
  }) {
    this.idTopic = e.idTopic;
    this.messages = Array.isArray(e.messages) ? e.messages.map(n => new VKt(n)) : [];
  }
}
class Ye extends zH9 {
  constructor(e = {}, n) {
    super(e);
    if (typeof n !== "undefined") {
      this.expired = n;
    }
  }
}
class Mt {
  constructor(e = {}) {
    this.membres = Array.isArray(e.membres) ? e.membres.map(n => new K4v(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class Qt extends class Mc {
  constructor(e = {
    nomEspaceTravail: ""
  }) {
    this.parametrage = new Qc(e.parametrage);
    this.nomEspaceTravail = e.nomEspaceTravail;
    this.topics = Array.isArray(e.topics) ? e.topics.map(n => new wdp(n)) : [];
  }
} {
  constructor(e = {
    nomEspaceTravail: ""
  }) {
    super(e);
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class Cn extends G$d {
  constructor(e = {
    idTopic: ""
  }) {
    super(e);
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class gi {
  constructor(e = {}) {
    this.activites = Array.isArray(e.activites) ? e.activites.map(n => new un0(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class Ce {
  constructor(e = {}) {
    this.espacesDeTravail = [];
    if (e.espacesDeTravail) {
      this.espacesDeTravail = Array.isArray(e.espacesDeTravail) ? e.espacesDeTravail.map(n => new Ye(n)) : [];
    }
    this.membres ||= {};
    if (e.membres && Object.keys(e.membres).length > 0) {
      const n = Object.keys(e.membres);
      for (let s of n) {
        this.membres[s] = new Mt(e.membres[s]);
      }
    }
    this.topics ||= {};
    if (e.topics && Object.keys(e.topics).length > 0) {
      const n = Object.keys(e.topics);
      for (let s of n) {
        this.topics[s] = new Qt(e.topics[s]);
      }
    }
    this.messages ||= {};
    if (e.messages && Object.keys(e.messages).length > 0) {
      const n = Object.keys(e.messages);
      for (let s of n) {
        this.messages[s] = new Cn(e.messages[s]);
      }
    }
    this.activite ||= {};
    if (e.activite && Object.keys(e.activite).length > 0) {
      const n = Object.keys(e.activite);
      for (let s of n) {
        this.activite[s] = new gi(e.activite[s]);
      }
    }
    this.badges ||= {};
    if (e.badges && Object.keys(e.badges).length > 0) {
      const n = Object.keys(e.badges);
      for (let s of n) {
        this.badges[s] = e.badges[s];
      }
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  setEspaceDeTravailListeEspacesDeTravail(e, n, s) {
    this.badges = {};
    e.forEach(d => {
      this.badges[d.id] = class J {
        static getBadgeEspaceTravail(e, n) {
          return +`${Kg5.getModuleParametre(qzA.CLOUD, `nbBadge_${e}`, n)}`;
        }
        static getBadgeSDP(e) {
          return +`${Kg5.getModuleParametre(qzA.SALLE_DES_PROFS, "badge", e)}`;
        }
      }.getBadgeEspaceTravail(d.id, s);
    });
    this.espacesDeTravail = Array.isArray(e) ? e.map(d => {
      let h = new Ye({
        ...d,
        fullLoaded: false
      });
      Object.setExpired(h, n);
      return h;
    }) : [];
  }
  clearBadgeByIDEspaceDeTravail(e) {
    this.badges[e] = 0;
  }
  setEspaceDeTravailMembres(e, n, s) {
    this.membres ||= {};
    this.membres[e] = new Mt({
      membres: Array.isArray(n) ? n : [],
      ttl: s
    });
    Object.setExpired(this.membres[e], s);
  }
  setEspaceDeTravailActivite(e, n, s) {
    this.activite ||= {};
    this.activite[e] = new gi({
      activites: Array.isArray(n) ? n : [],
      ttl: s
    });
    Object.setExpired(this.activite[e], s);
  }
  setEspaceDeTravailTopics(e, n, s) {
    this.topics ||= {};
    this.topics[e] = new Qt(n);
    Object.setExpired(this.topics[e], s);
  }
  setEspaceDeTravailTopicMessages(e, n, s) {
    this.messages ||= {};
    this.messages[e] = new Cn(n);
    Object.setExpired(this.messages[e], s);
  }
  addEspaceDeTravailTopicMessage(e, n, s, d) {
    this.messages ||= {};
    if (this.messages[n]) {
      this.messages[n].messages.push(s);
    } else {
      this.messages[n] = new Cn({
        idTopic: n,
        messages: [s]
      });
    }
    Object.setExpired(this.messages[n], d);
    let h = this.topics[e].topics.find(P => P.id === n);
    if (Object.isExists(h)) {
      h.dernierMessage = new yd({
        date: s.dateCreation,
        nom: s.auteur.nom,
        prenom: s.auteur.prenom,
        profil: s.auteur.profil
      });
      Object.setExpired(this.topics[e], d);
    }
  }
  updateEspaceDeTravailTopicMessage(e, n, s, d) {
    if (!Object.isExists(this.messages[n])) {
      return;
    }
    const h = this.messages[n];
    const P = h.messages.findIndex(z => z.id === s.id);
    if (P > -1) {
      h.messages[P] = s;
      Object.setExpired(h, d);
    }
  }
  supprimeEspaceDeTravailTopicMessage(e, n, s, d) {
    if (!Object.isExists(this.messages[n])) {
      return;
    }
    const h = this.messages[n];
    const P = h.messages.findIndex(z => z.id === s);
    if (P > -1) {
      h.messages.splice(P, 1);
      Object.setExpired(h, d);
    }
  }
  updateEspaceDeTravail(e, n) {
    let s = new Ye(e);
    Object.setExpired(s, n);
    this.espacesDeTravail.edInsertUpdate(s, d => d.id === s.id);
    if (Array.isArray(s.membres)) {
      this.updateEspaceDeTravailMembres(s.id, s.membres, n);
    }
  }
  deleteEspaceDeTravail(e, n) {
    const s = this.espacesDeTravail.findIndex(h => h.id === e);
    if (s > -1) {
      this.espacesDeTravail.splice(s, 1);
    }
    if (Object.isExists(this.membres[e])) {
      delete this.membres[e];
    }
    let d = [];
    if (Object.isExists(this.topics[e])) {
      d = this.topics[e].topics.edPluckFlatten("id");
      delete this.topics[e];
    }
    d.forEach(h => delete this.messages[h]);
    if (Object.isExists(this.activite[e])) {
      delete this.activite[e];
    }
    Object.setExpired(this, n);
  }
  updateEspaceDeTravailActivite(e, n, s, d, h) {
    if (!Object.isExists(this.activite[e])) {
      return;
    }
    let P = this.activite[e];
    if (n) {
      P.activites.length = 0;
    } else {
      P.activites.edRemove(z => z.membre.id === d && z.membre.profil === h);
    }
    Object.setExpired(P, s);
  }
  updateEspaceDeTravailMembres(e, n, s) {
    if (!this.membres || !this.membres[e]) {
      return;
    }
    let d = this.membres[e];
    n.forEach(h => {
      d.membres.edInsertUpdate(h, P => P.idMembre === h.idMembre && P.profil === h.profil);
    });
    Object.setExpired(d, s);
  }
  supprimeEspaceDeTravailMembre(e, n, s) {
    if (!this.membres || !this.membres[e]) {
      return;
    }
    let d = this.membres[e];
    const h = d.membres.findIndex(P => P.idMembre === n.idMembre && P.profil === n.profil);
    if (h > -1) {
      d.membres.splice(h, 1);
    }
    Object.setExpired(d, s);
  }
  updateEspaceDeTravailTopic(e, n, s) {
    let d = Object.isExists(this.topics[e]) ? this.topics[e] : new Qt();
    d.topics.edInsertUpdate(n, h => h.id === n.id);
    Object.setExpired(d, s);
    this.topics[e] = d;
  }
  updateEspaceDeTravailActivites(e, n, s, d, h, P = "", z = "", Ae = "", Ve = false, Tt) {
    if (!Object.isExists(this.activite[e])) {
      return;
    }
    let Vt = this.activite[e];
    let Hn = new un0();
    Hn.membre.id = s;
    Hn.membre.profil = d;
    Hn.cible = h;
    Hn.date = C_1.dateToString(new Date(), "y-MM-dd HH:mm:ss");
    Hn.descriptif = this.loadDescriptif(n, s, d, h, P, z, Ae, Ve);
    let Ci = C_1.substractNbMinuteToDate(Hn.date, 5);
    if (Vt.activites.filter(ss => ss.membre.id === Hn.membre.id && ss.membre.profil === Hn.membre.profil && ss.descriptif.trim() === Hn.descriptif.trim() && C_1.isAfter(new Date(C_1.formatDate(ss.date)), Ci, true)).length === 0) {
      Vt.activites.push(Hn);
    }
    Object.setExpired(Vt, Tt);
  }
  loadDescriptif(e, n, s, d, h = "", P = "", z = "", Ae = false) {
    let Ve;
    Ve = s === dcH.ELEVE ? h + " " + P : h.substring(0, 1) + ". " + P;
    Ve += " ";
    let Tt = "a ";
    switch (e) {
      case VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD:
        Tt += d === VXF.CIBLE_TOPIC ? "crée " : d === VXF.CIBLE_MEMBRE ? "rejoint " : "ajouté ";
        break;
      case VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE:
        Tt += "mis à jour ";
        break;
      case VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_DELETE:
        Tt += d === VXF.CIBLE_MEMBRE ? "quitté " : "supprimé ";
    }
    let Vt = "";
    let Hn = "";
    switch (d) {
      case VXF.CIBLE_ACCUEIL:
        Vt = "la page d'accueil";
        break;
      case VXF.CIBLE_POSTIT:
        Hn = e === VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD ? "un nouveau postit" : "un postit";
        Vt += `<span class="libelle-element">${Hn}</span>`;
        break;
      case VXF.CIBLE_AGENDA:
        Vt = e === VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD ? "un nouvel évènement " : "l'évènement ";
        if (Ae) {
          z += " (visio)";
        }
        if (z !== "") {
          Vt += `<span class="libelle-element">${z}</span>`;
        }
        Vt += " dans l'agenda";
        break;
      case VXF.CIBLE_TOPIC:
        Vt = "le sujet de discussion ";
        if (z !== "") {
          Vt += `<span class="libelle-element">${z}</span>`;
        }
        break;
      case VXF.CIBLE_TOPIC_MESSAGE:
        Vt += e === VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD ? "un nouveau " : "un ";
        Vt += "message dans la discussion ";
        if (z !== "") {
          Vt += `<span class="libelle-element">${z}</span>`;
        }
        break;
      case VXF.CIBLE_CLOUD:
        Vt += "<span class=\"libelle-element\">un contenu</span>";
        Vt += " dans le cloud";
        break;
      case VXF.CIBLE_MEMBRE:
        Vt += " l'espace de travail";
    }
    return `<span class="membre">${Ve}</span><span class="action">${Tt}</span><span class="cible">${Vt}</span>`;
  }
  supprimeEspaceDeTravailTopic(e, n, s) {
    if (!this.topics || !this.topics[e]) {
      return;
    }
    let d = this.topics[e];
    const h = d.topics.findIndex(P => P.id === n.id);
    if (h > -1) {
      d.topics.splice(h, 1);
      if (Object.isExists(this.messages[n.id])) {
        delete this.messages[n.id];
      }
      Object.setExpired(d, s);
    }
  }
}
class tt {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Ce(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  setEspaceDeTravailUserListeEspacesDeTravail(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].setEspaceDeTravailListeEspacesDeTravail(n, s, d);
  }
  setEspaceDeTravailUserMembres(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].setEspaceDeTravailMembres(n, s, d);
  }
  setEspaceDeTravailUserActivite(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].setEspaceDeTravailActivite(n, s, d);
  }
  setEspaceDeTravailUserTopics(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].setEspaceDeTravailTopics(n, s, d);
  }
  setEspaceDeTravailUserTopicMessages(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].setEspaceDeTravailTopicMessages(n, s, d);
  }
  addEspaceDeTravailUserTopicMessage(e, n, s, d, h) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].addEspaceDeTravailTopicMessage(n, s, d, h);
  }
  updateEspaceDeTravailUserTopicMessage(e, n, s, d, h) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].updateEspaceDeTravailTopicMessage(n, s, d, h);
  }
  supprimeEspaceDeTravailUserTopicMessage(e, n, s, d, h) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].supprimeEspaceDeTravailTopicMessage(n, s, d, h);
  }
  updateEspaceDeTravailUser(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].updateEspaceDeTravail(n, s);
  }
  deleteEspaceDeTravailUser(e, n, s) {
    if (typeof this[e] !== "undefined") {
      this[e].deleteEspaceDeTravail(n, s);
    }
  }
  updateEspaceDeTravailUserActivite(e, n, s, d, h, P) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].updateEspaceDeTravailActivite(n, s, P, d, h);
  }
  updateEspaceDeTravailUserMembres(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].updateEspaceDeTravailMembres(n, s, d);
  }
  supprimeEspaceDeTravailUserMembre(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].supprimeEspaceDeTravailMembre(n, s, d);
  }
  updateEspaceDeTravailUserTopic(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].updateEspaceDeTravailTopic(n, s, d);
  }
  updateEspaceDeTravailUserActivites(e, n, s, d, h, P, z = "", Ae = "", Ve = "", Tt = false, Vt) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].updateEspaceDeTravailActivites(n, s, d, h, P, z, Ae, Ve, Tt, Vt);
  }
  supprimeEspaceDeTravailUserTopic(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].supprimeEspaceDeTravailTopic(n, s, d);
  }
  supprimeEspaceDeTravailUserBadges(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ce();
    }
    this[e].clearBadgeByIDEspaceDeTravail(n);
  }
}
class Rt {
  constructor(e = {
    profil: "",
    idUser: 0,
    ogec: ""
  }) {
    this.profil = e.profil;
    this.idUser = e.idUser;
    this.ogec = e.ogec;
  }
}
class ln {
  constructor(e = {}) {
    this.espacesW = Array.isArray(e.espacesW) ? e.espacesW.map(n => ({
      id: n.id
    })) : [];
  }
}
class ni {
  constructor(e = {
    action: "",
    body: "",
    icon: "",
    title: "",
    type: ""
  }) {
    this.action = e.action;
    this.body = e.body;
    this.icon = e.icon;
    this.title = e.title;
    this.type = e.type;
  }
}
class Mi {
  constructor(e = {
    token: ""
  }) {
    this.data = new VKt(e.data);
    this.author = new Rt(e.author);
    this.notification = new ni(e.notification);
    this.token = e.token;
    if (typeof e.target !== "undefined") {
      this.target = new ln(e.target);
    }
    if (typeof e.targetUsers !== "undefined") {
      this.targetUsers = Array.isArray(e.targetUsers) ? e.targetUsers.map(n => new Rt(n)) : [];
    }
  }
}
class yr {
  constructor(e = {
    id: 0,
    devoir: "",
    codePeriode: "",
    codeMatiere: "",
    libelleMatiere: "",
    codeSousMatiere: "",
    typeDevoir: "",
    enLettre: false,
    coef: "",
    noteSur: "",
    valeur: "",
    nonSignificatif: false,
    date: "",
    dateSaisie: "",
    valeurisee: false,
    moyenneClasse: "",
    elementsProgramme: []
  }) {
    this.id = e.id;
    this.devoir = e.devoir;
    this.codePeriode = e.codePeriode;
    this.codeMatiere = e.codeMatiere;
    this.libelleMatiere = e.libelleMatiere;
    this.codeSousMatiere = e.codeSousMatiere;
    this.typeDevoir = e.typeDevoir;
    this.enLettre = e.enLettre;
    this.coef = e.coef;
    this.noteSur = e.noteSur;
    this.valeur = e.valeur;
    this.nonSignificatif = e.nonSignificatif;
    this.date = e.date;
    this.dateSaisie = e.dateSaisie;
    this.valeurisee = e.valeurisee;
    this.moyenneClasse = e.moyenneClasse;
    this.elementsProgramme = Array.isArray(e.elementsProgramme) ? e.elementsProgramme.map(n => new wd(n)) : [];
    if (typeof e.qcm !== "undefined") {
      this.qcm = new sc(e.qcm);
    }
    if (typeof e.minClasse !== "undefined") {
      this.minClasse = e.minClasse;
    }
    if (typeof e.maxClasse !== "undefined") {
      this.maxClasse = e.maxClasse;
    }
    if (typeof e.commentaire !== "undefined") {
      this.commentaire = e.commentaire;
    }
    if (typeof e.uncSujet !== "undefined") {
      this.setUrlSujet(e.uncSujet);
    }
    if (typeof e.uncCorrige !== "undefined") {
      this.setUrlCorrige(e.uncCorrige);
    }
  }
  isNoteValeurisee() {
    return this.valeurisee === true;
  }
  isExamenBlanc() {
    return this.codePeriode && this.codePeriode.indexOf("X") === 4;
  }
  isNewNote(e) {
    return this.dateSaisie + " 23:59" > e;
  }
  detailDevoirTitle() {
    let e = this.valeur;
    switch (this.valeur.trim().toLowerCase()) {
      case Gxt.EA:
        e = "En attente";
        break;
      case Gxt.NE:
        e = "Non évalué";
        break;
      case Gxt.DISP:
        e = "Dispensé";
        break;
      case Gxt.ABS:
        e = "Absent";
    }
    return e;
  }
  hasQCM() {
    return Object.isExists(this.qcm);
  }
  setUrlSujet(e) {
    if (typeof e !== "undefined") {
      this.uncSujet = e;
      this.sujet = FSr.isNotEmptyString(e) ? new eD9({
        id: e,
        type: Y9E.NODEVOIR,
        displayText: "Sujet de l'évaluation",
        libelle: "Sujet",
        unc: e
      }) : undefined;
    } else {
      this.uncSujet = e;
      this.sujet = undefined;
    }
  }
  setUrlCorrige(e) {
    if (typeof e !== "undefined") {
      this.uncCorrige = e;
      this.corrige = FSr.isNotEmptyString(e) ? new eD9({
        id: e,
        type: Y9E.NODEVOIR,
        displayText: "Corrigé de l'évaluation",
        libelle: "Corrigé",
        unc: e
      }) : undefined;
    } else {
      this.uncCorrige = e;
      this.corrige = undefined;
    }
  }
}
class $s {
  constructor(e = {
    avecSousMatiere: false,
    professeurs: [],
    codeMatiere: "",
    libelleMatiere: "",
    isFirstOfMatiere: false,
    nbElemProgMatiere: 0,
    codeSousMatiere: "",
    libelleSousMatiere: "",
    isFirstOfSousMatiere: false,
    nbElemProgSousMatiere: 0,
    libelleElementProgramme: "",
    valeur: "",
    idElemProg: 0,
    cdt: false,
    afc: 0
  }) {
    this.avecSousMatiere = e.avecSousMatiere;
    this.professeurs = Array.isArray(e.professeurs) ? e.professeurs.map(n => new rc(n)) : [];
    this.codeMatiere = e.codeMatiere;
    this.libelleMatiere = e.libelleMatiere;
    this.isFirstOfMatiere = e.isFirstOfMatiere;
    this.nbElemProgMatiere = e.nbElemProgMatiere;
    this.codeSousMatiere = e.codeSousMatiere;
    this.libelleSousMatiere = e.libelleSousMatiere;
    this.isFirstOfSousMatiere = e.isFirstOfSousMatiere;
    this.nbElemProgSousMatiere = e.nbElemProgSousMatiere;
    this.libelleElementProgramme = e.libelleElementProgramme;
    this.valeur = e.valeur;
    this.idElemProg = e.idElemProg;
    this.cdt = e.cdt;
    this.afc = e.afc;
  }
  get descriptif() {
    return "";
  }
  get libelle() {
    return this.libelleElementProgramme;
  }
  get isAFC() {
    return this.afc === 1;
  }
}
export class xfo {
  constructor(e = {
    idPeriode: "",
    periode: "",
    annuel: false,
    dateDebut: "",
    dateFin: "",
    examenBlanc: false,
    cloture: false,
    moyNbreJoursApresConseil: 0,
    ensembleMatieres: undefined
  }) {
    this.idPeriode = e.idPeriode;
    this.periode = e.periode;
    this.annuel = e.annuel;
    this.dateDebut = e.dateDebut;
    this.dateFin = e.dateFin;
    this.examenBlanc = e.examenBlanc;
    this.cloture = e.cloture;
    this.moyNbreJoursApresConseil = e.moyNbreJoursApresConseil;
    this.ensembleMatieres = new Al(e.ensembleMatieres);
    if (typeof e.dateConseil !== "undefined") {
      this.dateConseil = e.dateConseil;
    }
    if (typeof e.salleConseil !== "undefined") {
      this.salleConseil = e.salleConseil;
    }
    if (typeof e.heureConseil !== "undefined") {
      this.heureConseil = e.heureConseil;
    }
    if (typeof e.heureFinConseil !== "undefined") {
      this.heureFinConseil = e.heureFinConseil;
    }
    if (typeof e.codePeriode !== "undefined") {
      this.codePeriode = e.codePeriode;
    }
  }
  get libelle() {
    return this.periode;
  }
  get libelleConseil() {
    let e = "";
    if (this.heureConseil) {
      e = `\xe0 ${this.heureConseil}`;
    }
    if (this.heureConseil && this.heureFinConseil) {
      e = `de ${this.heureConseil} \xe0 ${this.heureFinConseil}`;
    }
    if (this.salleConseil) {
      e = `${e} en salle ${this.salleConseil}`;
    }
    return e;
  }
  isCompNumVisible() {
    return this.codePeriode.length === 4 && this.codePeriode.charAt(0) === "A";
  }
  isExamenBlanc() {
    return this.idPeriode && this.idPeriode.indexOf("X") === 4;
  }
  affichageCompetence(e) {
    return e !== 0 && (e === 1 || this.cloture);
  }
}
export class pqD {
  constructor(e = {
    couleurEval1: "",
    couleurEval2: "",
    couleurEval3: "",
    couleurEval4: "",
    libelleEval1: "",
    libelleEval2: "",
    libelleEval3: "",
    libelleEval4: "",
    libelleEvalCompNum1: "",
    libelleEvalCompNum2: "",
    libelleEvalCompNum3: "",
    affichageMoyenne: false,
    affichageNote: false,
    affichageCompetence: false,
    affichageAppreciation: false,
    affichagePositionMatiere: false,
    affichageOngletCompetence: 1,
    affichageEvaluationsComposantes: false,
    libellesAppreciations: [],
    appreciationsParametrage: []
  }) {
    this.couleurEval1 = e.couleurEval1;
    this.couleurEval2 = e.couleurEval2;
    this.couleurEval3 = e.couleurEval3;
    this.couleurEval4 = e.couleurEval4;
    this.libelleEval1 = e.libelleEval1;
    this.libelleEval2 = e.libelleEval2;
    this.libelleEval3 = e.libelleEval3;
    this.libelleEval4 = e.libelleEval4;
    this.libelleEvalCompNum1 = e.libelleEvalCompNum1;
    this.libelleEvalCompNum2 = e.libelleEvalCompNum2;
    this.libelleEvalCompNum3 = e.libelleEvalCompNum3;
    this.affichageMoyenne = e.affichageMoyenne;
    this.affichageNote = e.affichageNote;
    this.affichageCompetence = e.affichageCompetence;
    this.affichageAppreciation = e.affichageAppreciation;
    this.affichagePositionMatiere = e.affichagePositionMatiere;
    this.affichageOngletCompetence = e.affichageOngletCompetence;
    this.affichageEvaluationsComposantes = e.affichageEvaluationsComposantes;
    this.libellesAppreciations = Array.isArray(e.libellesAppreciations) ? [...e.libellesAppreciations] : [];
    this.appreciationsParametrage = Array.isArray(e.appreciationsParametrage) ? e.appreciationsParametrage.map(n => new vu(n)) : [];
    if (typeof e.appreciationsProf !== "undefined") {
      this.appreciationsProf = e.appreciationsProf;
    }
    if (typeof e.appreciationProfPrinc !== "undefined") {
      this.appreciationProfPrinc = e.appreciationProfPrinc;
    }
    if (typeof e.affichageMention !== "undefined") {
      this.affichageMention = e.affichageMention;
    }
    if (typeof e.affichageAppreciationCE !== "undefined") {
      this.affichageAppreciationCE = e.affichageAppreciationCE;
    }
    if (typeof e.affichageAppreciationVS !== "undefined") {
      this.affichageAppreciationVS = e.affichageAppreciationVS;
    }
    if (typeof e.affichageAppreciationPeriodeCloturee !== "undefined") {
      this.affichageAppreciationPeriodeCloturee = e.affichageAppreciationPeriodeCloturee;
    }
    if (typeof e.moyenneUniquementPeriodeCloture !== "undefined") {
      this.moyenneUniquementPeriodeCloture = e.moyenneUniquementPeriodeCloture;
    }
    if (typeof e.moyennePeriodeReleve !== "undefined") {
      this.moyennePeriodeReleve = e.moyennePeriodeReleve;
    }
    if (typeof e.moyennePeriodeAnnuelle !== "undefined") {
      this.moyennePeriodeAnnuelle = e.moyennePeriodeAnnuelle;
    }
    if (typeof e.moyennePeriodeHorsP !== "undefined") {
      this.moyennePeriodeHorsP = e.moyennePeriodeHorsP;
    }
    if (typeof e.moyenneEleveDansNotes !== "undefined") {
      this.moyenneEleveDansNotes = e.moyenneEleveDansNotes;
    }
    if (typeof e.moyenneEleve !== "undefined") {
      this.moyenneEleve = e.moyenneEleve;
    }
    if (typeof e.moyenneEleveDansMoyenne !== "undefined") {
      this.moyenneEleveDansMoyenne = e.moyenneEleveDansMoyenne;
    }
    if (typeof e.moyenneGenerale !== "undefined") {
      this.moyenneGenerale = e.moyenneGenerale;
    }
    if (typeof e.moyenneCoefMatiere !== "undefined") {
      this.moyenneCoefMatiere = e.moyenneCoefMatiere;
    }
    if (typeof e.moyenneClasse !== "undefined") {
      this.moyenneClasse = e.moyenneClasse;
    }
    if (typeof e.moyenneMin !== "undefined") {
      this.moyenneMin = e.moyenneMin;
    }
    if (typeof e.moyenneMax !== "undefined") {
      this.moyenneMax = e.moyenneMax;
    }
    if (typeof e.moyenneRang !== "undefined") {
      this.moyenneRang = e.moyenneRang;
    }
    if (typeof e.moyenneSur !== "undefined") {
      this.moyenneSur = e.moyenneSur;
    }
    if (typeof e.moyenneGraphique !== "undefined") {
      this.moyenneGraphique = e.moyenneGraphique;
    }
    if (typeof e.coefficientNote !== "undefined") {
      this.coefficientNote = e.coefficientNote;
    }
    if (typeof e.colonneCoefficientMatiere !== "undefined") {
      this.colonneCoefficientMatiere = e.colonneCoefficientMatiere;
    }
    if (typeof e.libelleDevoir !== "undefined") {
      this.libelleDevoir = e.libelleDevoir;
    }
    if (typeof e.dateDevoir !== "undefined") {
      this.dateDevoir = e.dateDevoir;
    }
    if (typeof e.typeDevoir !== "undefined") {
      this.typeDevoir = e.typeDevoir;
    }
    if (typeof e.noteGrasSousMoyenne !== "undefined") {
      this.noteGrasSousMoyenne = e.noteGrasSousMoyenne;
    }
    if (typeof e.noteGrasAudessusMoyenne !== "undefined") {
      this.noteGrasAudessusMoyenne = e.noteGrasAudessusMoyenne;
    }
    if (typeof e.noteUniquementPeriodeCloture !== "undefined") {
      this.noteUniquementPeriodeCloture = e.noteUniquementPeriodeCloture;
    }
    if (typeof e.notePeriodeReleve !== "undefined") {
      this.notePeriodeReleve = e.notePeriodeReleve;
    }
    if (typeof e.notePeriodeAnnuelle !== "undefined") {
      this.notePeriodeAnnuelle = e.notePeriodeAnnuelle;
    }
    if (typeof e.notePeriodeHorsP !== "undefined") {
      this.notePeriodeHorsP = e.notePeriodeHorsP;
    }
    if (typeof e.affichageCompNum !== "undefined") {
      this.affichageCompNum = e.affichageCompNum;
    }
    if (typeof e.affichageAppreciationClasse !== "undefined") {
      this.affichageAppreciationClasse = e.affichageAppreciationClasse;
    }
    if (typeof e.affichageMoyenneDevoir !== "undefined") {
      this.affichageMoyenneDevoir = e.affichageMoyenneDevoir;
    }
    if (typeof e.moyennesSimulation !== "undefined") {
      this.moyennesSimulation = e.moyennesSimulation;
    }
    if (typeof e.modeCalculGraphiquesComposantes !== "undefined") {
      this.modeCalculGraphiquesComposantes = e.modeCalculGraphiquesComposantes;
    }
    if (typeof e.affichageGraphiquesComposantes !== "undefined") {
      this.affichageGraphiquesComposantes = e.affichageGraphiquesComposantes;
    }
  }
}
class wl {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = Array.isArray(e[s]) && e[s].length > 0 ? e[s].map(d => new $s(d)) : [];
      }
    }
  }
}
export class qu_ {
  constructor(e = {
    parametrage: new pqD(),
    periodes: []
  }) {
    this.parametrage = new pqD(e.parametrage);
    this.periodes = Array.isArray(e.periodes) ? e.periodes.map(n => new xfo(n)) : [];
    if (Array.isArray(e.notes)) {
      this.notes = e.notes.map(n => new yr(n));
    }
    if (typeof e.LSUN !== "undefined") {
      this.LSUN = new wl(e.LSUN);
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
    if (typeof e.foStat !== "undefined") {
      this.foStat = e.foStat;
    }
  }
  get isClassePremiere() {
    return typeof this.foStat !== "undefined" && (this.foStat.startsWith("2212") || this.foStat.startsWith("2382"));
  }
  get isClasseTerminale() {
    return typeof this.foStat !== "undefined" && (this.foStat.startsWith("2213") || this.foStat.startsWith("2383"));
  }
}
export class vcu {
  constructor(e = {
    id: "",
    code: "",
    libelle: "",
    libelleCourt: "",
    coef: 0,
    codeGestion: "",
    codeSSMatiere: "",
    avecSousMatiere: 0,
    calculSousMatiere: 0
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.libelleCourt = e.libelleCourt;
    this.type = e.type;
    this.coef = e.coef;
    this.codeGestion = e.codeGestion;
    this.codeSSMatiere = e.codeSSMatiere;
    this.idMatiereCycle = e.idMatiereCycle;
    this.isEditable = e.isEditable;
    this.avecNotation = e.avecNotation;
    this.avecSousMatiere = e.avecSousMatiere;
    this.calculSousMatiere = e.calculSousMatiere;
    this.saisieAppreciationSSMat = e.saisieAppreciationSSMat;
    this.evaluationLSUN = e.evaluationLSUN;
    this.menusNotes = Array.isArray(e.menusNotes) ? [...e.menusNotes] : [];
    if (typeof e.type !== "undefined") {
      this.type = e.type;
    }
    if (typeof e.idMatiereCycle !== "undefined") {
      this.idMatiereCycle = e.idMatiereCycle;
    }
    if (typeof e.isEditable !== "undefined") {
      this.isEditable = e.isEditable;
    }
    if (typeof e.isPratiqueEnseignement !== "undefined") {
      this.isPratiqueEnseignement = e.isPratiqueEnseignement;
    }
    if (typeof e.avecNotation !== "undefined") {
      this.avecNotation = e.avecNotation;
    }
    if (typeof e.saisieAppreciationSSMat !== "undefined") {
      this.saisieAppreciationSSMat = e.saisieAppreciationSSMat;
    }
    if (typeof e.evaluationLSUN !== "undefined") {
      this.evaluationLSUN = e.evaluationLSUN;
    }
  }
  canDisplayMenu(e) {
    return this.menusNotes.findIndex(n => e === n) > -1;
  }
  isSousMatiere() {
    return FSr.isNotEmptyString(this.codeSSMatiere) && this.avecSousMatiere !== 1;
  }
}
export class g8c {
  constructor(e = {
    id: 0,
    codePeriode: "",
    libelle: "",
    libelleCourt: "",
    dateDebut: "",
    dateFin: "",
    dateConseil: "",
    salleConseil: "",
    coef: 0,
    etat: "",
    periode: 0,
    sousPeriode: 0,
    saisieAppreciation: false,
    saisieAppreciationClasse: false
  }) {
    this.dateHeureConseil = "";
    this.id = e.id;
    this.codePeriode = e.codePeriode;
    this.libelle = e.libelle;
    this.libelleCourt = e.libelleCourt;
    this.dateDebut = e.dateDebut;
    this.dateFin = e.dateFin;
    this.dateConseil = e.dateConseil;
    this.salleConseil = e.salleConseil;
    this.coef = e.coef;
    this.etat = e.etat;
    this.periode = e.periode;
    this.sousPeriode = e.sousPeriode;
    this.saisieAppreciation = e.saisieAppreciation;
    this.saisieAppreciationClasse = e.saisieAppreciationClasse;
    this.matieres = Array.isArray(e.matieres) ? e.matieres.map(n => new vcu(n)) : [];
    this.menusNotes = Array.isArray(e.menusNotes) ? [...e.menusNotes] : [];
    if (typeof e.heureConseil !== "undefined") {
      this.heureConseil = e.heureConseil;
    }
    if (typeof e.heureFinConseil !== "undefined") {
      this.heureFinConseil = e.heureFinConseil;
    }
    if (e.dateConseil) {
      this.dateHeureConseil = e.dateConseil;
    }
    if (typeof e.heureConseil !== "undefined" && this.dateHeureConseil) {
      this.dateHeureConseil = `${this.dateHeureConseil} ${e.heureConseil}:00`;
    }
  }
  get libelleEtat() {
    return Wx7.LIBELLES[this.etat];
  }
  get libelleConseil() {
    let e = "";
    if (this.heureConseil) {
      e = `\xe0 ${this.heureConseil}`;
    }
    if (this.heureConseil && this.heureFinConseil) {
      e = `de ${this.heureConseil} \xe0 ${this.heureFinConseil}`;
    }
    if (this.salleConseil) {
      e = `${e} en salle ${this.salleConseil}`;
    }
    return e;
  }
  get picto() {
    if (this.etat === Wx7.ETATS.OUVERTE) {
      return "";
    }
    let e = "fa ";
    switch (this.etat) {
      case Wx7.ETATS.CLOTUREE:
        e = `${e} fa-lock`;
        break;
      case Wx7.ETATS.PARTIELLE:
        e = `${e} fa-pencil-square-o`;
        break;
      case Wx7.ETATS.ATTENTE:
        e = `${e} fa-clock-o`;
        break;
      default:
        e = "";
    }
    return e;
  }
  get pictoMobile() {
    if (this.etat === Wx7.ETATS.OUVERTE) {
      return;
    }
    let e;
    switch (this.etat) {
      case Wx7.ETATS.CLOTUREE:
        e = {
          ios: "lock-closed-outline",
          md: "lock-closed-sharp"
        };
        break;
      case Wx7.ETATS.PARTIELLE:
        e = {
          ios: "create-outline",
          md: "create-sharp"
        };
        break;
      case Wx7.ETATS.ATTENTE:
        e = {
          ios: "time-outline",
          md: "time-sharp"
        };
    }
    return e;
  }
  isPeriodeEditable() {
    return this.etat === Wx7.ETATS.OUVERTE || this.etat === Wx7.ETATS.PARTIELLE;
  }
  canDisplayMenu(e) {
    return this.menusNotes.findIndex(n => e === n) > -1;
  }
  isCompNumEvaluable() {
    return this.codePeriode.length === 4 && this.codePeriode.charAt(0) === "A" && this.etat !== Wx7.ETATS.ATTENTE;
  }
  isExamenBlanc() {
    return this.codePeriode && this.codePeriode.indexOf("X") === 4;
  }
}
export class nK4 {
  constructor(e = {
    couleurEval1: "",
    couleurEval2: "",
    couleurEval3: "",
    couleurEval4: "",
    emojiEval1: "",
    emojiEval2: "",
    emojiEval3: "",
    emojiEval4: "",
    libelleCycle: "",
    libelleEval1: "",
    libelleEval2: "",
    libelleEval3: "",
    libelleEval4: "",
    nbElementsProgrammeImprimes: 0,
    nbElementsProgrammeImprimesSousMatiere: 0,
    nombreCaracteresMax: 0,
    numeroCycle: 0,
    saisieLibreActive: 0,
    nbElemMaxAImprimer: 0,
    nbElemsImprimes: 0
  }) {
    this.couleurEval1 = e.couleurEval1;
    this.couleurEval2 = e.couleurEval2;
    this.couleurEval3 = e.couleurEval3;
    this.couleurEval4 = e.couleurEval4;
    this.emojiEval1 = e.emojiEval1;
    this.emojiEval2 = e.emojiEval2;
    this.emojiEval3 = e.emojiEval3;
    this.emojiEval4 = e.emojiEval4;
    this.libelleCycle = e.libelleCycle;
    this.libelleEval1 = e.libelleEval1;
    this.libelleEval2 = e.libelleEval2;
    this.libelleEval3 = e.libelleEval3;
    this.libelleEval4 = e.libelleEval4;
    this.nbElementsProgrammeImprimes = e.nbElementsProgrammeImprimes;
    this.nbElementsProgrammeImprimesSousMatiere = e.nbElementsProgrammeImprimesSousMatiere;
    this.nombreCaracteresMax = e.nombreCaracteresMax;
    this.numeroCycle = e.numeroCycle;
    this.saisieLibreActive = e.saisieLibreActive;
    this.nbElemMaxAImprimer = e.nbElemMaxAImprimer;
    this.nbElemsImprimes = e.nbElemsImprimes;
  }
  static countNbElemProgImprimes(e) {
    let n = 0;
    e.forEach(s => {
      s.elementsProgramme.edUniq("idOrigineCatalogue").forEach(d => {
        if (d.imprime) {
          n++;
        }
      });
    });
    return n;
  }
}
export class trj {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    idCycleEtab: 0,
    degre: 0,
    estNote: 0,
    positionnementLSU: 0,
    typeEntity: ""
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.idCycleEtab = e.idCycleEtab;
    this.degre = e.degre;
    this.estNote = e.estNote;
    this.positionnementLSU = e.positionnementLSU;
    this.periodes = Array.isArray(e.periodes) ? e.periodes.map(n => new g8c(n)) : [];
    this.tabPP = Array.isArray(e.tabPP) ? e.tabPP.map(n => new XsP(n)) : [];
    if (typeof e.pcpMoyAnnuelle !== "undefined") {
      this.pcpMoyAnnuelle = e.pcpMoyAnnuelle;
    }
    if (typeof e.pcpMoyGenAnnee !== "undefined") {
      this.pcpMoyGenAnnee = e.pcpMoyGenAnnee;
    }
    if (typeof e.pcpMoyMatiere !== "undefined") {
      this.pcpMoyMatiere = e.pcpMoyMatiere;
    }
    if (typeof e.pcpMoyPeriode !== "undefined") {
      this.pcpMoyPeriode = e.pcpMoyPeriode;
    }
    if (typeof e.pcpNbPeriode !== "undefined") {
      this.pcpNbPeriode = e.pcpNbPeriode;
    }
    if (typeof e.paramsLSU !== "undefined") {
      this.paramsLSU = new nK4(e.paramsLSU);
    }
    if (Array.isArray(e.matieres)) {
      this.matieres = e.matieres.map(n => new vcu(n));
    }
    if (typeof e.typeEntity !== "undefined") {
      this.typeEntity = e.typeEntity;
    }
    if (typeof e.etabLibelle !== "undefined") {
      this.etabLibelle = e.etabLibelle;
    }
    if (typeof e.uniqueID !== "undefined") {
      this.uniqueID = e.uniqueID;
    }
    if (typeof e.classeLibelle !== "undefined") {
      this.classeLibelle = e.classeLibelle;
    }
    if (typeof e.type !== "undefined") {
      this.type = e.type;
    }
  }
}
export class Mn7 extends trj {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    idCycleEtab: 0,
    degre: 0,
    estNote: 0,
    idGroupe: 0,
    isPP: false,
    pcpMoyAnnuelle: 0,
    pcpMoyGenAnnee: 0,
    pcpMoyMatiere: 0,
    pcpMoyPeriode: 0,
    pcpNbPeriode: 0,
    positionnementLSU: 0
  }) {
    super(e);
    this.idGroupe = e.idGroupe;
    this.isPP = e.isPP;
    this.typeEntity = meW.CLASSE;
    if (typeof e.etabId !== "undefined") {
      this.etabId = e.etabId;
    }
    if (typeof e.classeId !== "undefined") {
      this.classeId = e.classeId;
    }
    if (Array.isArray(e.niveaux)) {
      this.niveaux = [...e.niveaux];
    }
  }
  get fileFormated() {
    let e = new eD9();
    e.url = "enseignants/" + this.typeEntity + "/" + this.id + "/repartitionElemsProgPeriodesLSUN/editionCatalogueLSU";
    e.id = this.id.toString();
    e.type = this.typeEntity;
    return e;
  }
}
class cu {
  constructor(e = {
    id: 0,
    code: "",
    libelle: ""
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.classes = Array.isArray(e.classes) ? e.classes.map(n => new Mn7(n)) : [];
  }
}
export class E$4 {
  constructor(e = {
    heure_debut: "",
    heure_fin: ""
  }) {
    this.heure_debut = e.heure_debut;
    this.heure_fin = e.heure_fin;
  }
  toString() {
    return this.heure_debut + "-" + this.heure_fin;
  }
}
class cp {
  constructor(e = {
    isVisioEnable: false,
    appelAvecEDT: false,
    appelAvecGrilleHoraire: false
  }) {
    this.isVisioEnable = e.isVisioEnable;
    this.appelAvecEDT = e.appelAvecEDT;
    this.appelAvecGrilleHoraire = e.appelAvecGrilleHoraire;
    this.grille = Array.isArray(e.grille) ? e.grille.map(n => new E$4(n)) : [];
  }
}
class Vf {
  constructor(e = {
    idCycleEtab: 0
  }) {
    this.idCycleEtab = e.idCycleEtab;
    if (typeof e.paramsLSU !== "undefined") {
      this.paramsLSU = new nK4(e.paramsLSU);
    }
  }
}
export class Gbw {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    rne: "",
    borneMin: 0,
    borneMax: 0,
    moyenneSur: 0,
    saisieLettre: false,
    isBorneModifiable: false,
    isCoefModifiable: false,
    isTypeDevoirObligatoire: false,
    noteNegativeNonAutorisee: false,
    avecDecalage: "0",
    avecDecalageLSUN: "0",
    nbreJoursDecalage: 0,
    nbreJoursDecalageLSUN: 0
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.rne = e.rne;
    this.borneMin = e.borneMin;
    this.borneMax = e.borneMax;
    this.moyenneSur = e.moyenneSur;
    this.saisieLettre = e.saisieLettre;
    this.isBorneModifiable = e.isBorneModifiable;
    this.isCoefModifiable = e.isCoefModifiable;
    this.isTypeDevoirObligatoire = e.isTypeDevoirObligatoire;
    this.noteNegativeNonAutorisee = e.noteNegativeNonAutorisee;
    this.avecDecalage = e.avecDecalage;
    this.avecDecalageLSUN = e.avecDecalageLSUN;
    this.nbreJoursDecalage = e.nbreJoursDecalage;
    this.nbreJoursDecalageLSUN = e.nbreJoursDecalageLSUN;
    this.cycles = Array.isArray(e.cycles) ? e.cycles.map(n => new Vf(n)) : [];
    this.niveaux = Array.isArray(e.niveaux) ? e.niveaux.map(n => new cu(n)) : [];
    this.typesDevoirs = Array.isArray(e.typesDevoirs) ? e.typesDevoirs.map(n => new uc(n)) : [];
    this.parametres = new cp(e.parametres);
  }
}
class J0 {
  constructor(e = {}) {
    this.typesDevoirs = Array.isArray(e.typesDevoirs) ? e.typesDevoirs.map(n => new uc(n)) : [];
    this.etabsParams = Array.isArray(e.etabsParams) ? e.etabsParams.map(n => new Gbw(n)) : [];
    this.notesLettres = Array.isArray(e.notesLettres) ? [...e.notesLettres] : [];
  }
}
export class YGU {
  constructor(e = {
    conversionEvalNotes: false,
    choixCycleCatalogue: false
  }) {
    this.note = new J0(e.note);
    this.conversionEvalNotes = e.conversionEvalNotes;
    this.choixCycleCatalogue = e.choixCycleCatalogue;
    this.composantes = Array.isArray(e.composantes) ? e.composantes.map(n => new To(n)) : [];
  }
}
export class B1P {
  constructor(e = {
    code: "",
    libelle: "",
    evaluable: false
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.evaluable = e.evaluable;
  }
}
export class akz {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    if (typeof e.positionnement !== "undefined") {
      this.positionnement = e.positionnement;
    }
  }
}
export class fXt extends akz {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    super(e);
  }
}
class u0 {
  constructor(e = {
    anneeScolaire: "",
    valeur: ""
  }) {
    this.anneeScolaire = e.anneeScolaire;
    this.valeur = e.valeur;
  }
}
class $0 {
  constructor(e = {
    trimestre: "",
    valeur: ""
  }) {
    this.trimestre = e.trimestre;
    this.valeur = e.valeur;
  }
}
class Zg {
  constructor(e = {
    codeMatiere: "",
    libelleMatiere: "",
    ordre: 0,
    pourcentageEval1: 0,
    pourcentageEval2: 0,
    pourcentageEval3: 0,
    pourcentageEval4: 0
  }) {
    this.codeMatiere = e.codeMatiere;
    this.libelleMatiere = e.libelleMatiere;
    this.ordre = e.ordre;
    this.pourcentageEval1 = e.pourcentageEval1;
    this.pourcentageEval2 = e.pourcentageEval2;
    this.pourcentageEval3 = e.pourcentageEval3;
    this.pourcentageEval4 = e.pourcentageEval4;
  }
}
class Zd {
  constructor(e = {
    pourcentageEval1: 0,
    pourcentageEval2: 0,
    pourcentageEval3: 0,
    pourcentageEval4: 0,
    detailMatieres: {}
  }) {
    this.detailMatieres = {};
    this.pourcentageEval1 = e.pourcentageEval1;
    this.pourcentageEval2 = e.pourcentageEval2;
    this.pourcentageEval3 = e.pourcentageEval3;
    this.pourcentageEval4 = e.pourcentageEval4;
    if (Object.isExists(e.detailMatieres) && !Object.isEmpty(e.detailMatieres)) {
      const n = Object.keys(e.detailMatieres);
      for (let s of n) {
        this.detailMatieres[s] = new Zg(e.detailMatieres[s]);
      }
    }
  }
}
export class wqE {
  constructor(e = {
    id: 0,
    codeComposante: "",
    pourcentageEval1: 0,
    pourcentageEval2: 0,
    pourcentageEval3: 0,
    pourcentageEval4: 0,
    valeur: "",
    historiqueValeurs: [],
    pourcentagesParMatiere: {}
  }) {
    this.id = e.id;
    this.codeComposante = e.codeComposante;
    this.pourcentageEval1 = e.pourcentageEval1;
    this.pourcentageEval2 = e.pourcentageEval2;
    this.pourcentageEval3 = e.pourcentageEval3;
    this.pourcentageEval4 = e.pourcentageEval4;
    this.valeur = e.valeur;
    this.historiqueValeurs = Array.isArray(e.historiqueValeurs) ? e.historiqueValeurs.map(n => new u0(n)) : [];
    this.historiqueTrimestresValeurs = Array.isArray(e.historiqueTrimestresValeurs) ? e.historiqueTrimestresValeurs.map(n => new $0(n)) : [];
    this.pourcentagesParMatiere = new Zd(e.pourcentagesParMatiere);
    if (typeof e.libelle !== "undefined") {
      this.libelle = e.libelle;
    }
    if (typeof e.valeurConseillee !== "undefined") {
      this.valeurConseillee = e.valeurConseillee;
    }
  }
}
export class NK1 {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    particule: "",
    sexe: "",
    photo: "",
    ordreArrivee: "",
    dateSortie: "",
    codeClasse: "",
    competences: [],
    enseignementDeComplement: {},
    langueRegionale: {}
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.sexe = e.sexe;
    this.photo = e.photo;
    this.ordreArrivee = e.ordreArrivee;
    this.dateSortie = e.dateSortie;
    this.codeClasse = e.codeClasse;
    this.competences = Array.isArray(e.competences) ? e.competences.map(n => new wqE(n)) : [];
    this.enseignementDeComplement = new akz(e.enseignementDeComplement);
    this.langueRegionale = e.langueRegionale;
  }
}
export class o56 {
  constructor(e = {
    cycle: ""
  }) {
    this.anneesScolairesPrecedentes = Array.isArray(e.anneesScolairesPrecedentes) ? [...e.anneesScolairesPrecedentes] : [];
    this.composantes = Array.isArray(e.composantes) ? e.composantes.map(n => new B1P(n)) : [];
    this.enseignementsDeComplements = Array.isArray(e.enseignementsDeComplements) ? e.enseignementsDeComplements.map(n => new akz(n)) : [];
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new NK1(n)) : [];
    this.languesRegionales = Array.isArray(e.languesRegionales) ? e.languesRegionales.map(n => new fXt(n)) : [];
    this.cycle = e.cycle;
  }
}
export class sZ$ {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    particule: "",
    sexe: "",
    regime: "",
    dateDeNaissance: "",
    email: "",
    mobile: "",
    photo: "",
    classeId: 0
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.sexe = e.sexe;
    this.regime = e.regime;
    this.dateDeNaissance = e.dateDeNaissance;
    this.email = e.email;
    this.mobile = e.mobile;
    this.photo = e.photo;
    this.classeId = e.classeId;
    if (Object.isExists(e.classeLibelle)) {
      this.classeLibelle = e.classeLibelle;
    }
    if (Object.isExists(e.idEtablissement)) {
      this.idEtablissement = e.idEtablissement;
    }
    if (Object.isExists(e.classeEstNote)) {
      this.classeEstNote = e.classeEstNote;
    }
  }
}
export class zJg extends trj {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    idCycleEtab: 0,
    degre: 0,
    estNote: 0,
    pcpMoyAnnuelle: 0,
    pcpMoyGenAnnee: 0,
    pcpMoyMatiere: 0,
    pcpMoyPeriode: 0,
    pcpNbPeriode: 0,
    positionnementLSU: 0,
    codeRectorat: 0,
    etabId: 0,
    isSansEleve: false,
    isFlexible: false
  }) {
    super(e);
    this.codeRectorat = e.codeRectorat;
    this.etabId = e.etabId;
    this.isSansEleve = e.isSansEleve;
    this.isFlexible = e.isFlexible;
    this.typeEntity = meW.GROUPE;
    if (Array.isArray(e.classes)) {
      this.classes = e.classes.map(n => new Mn7(n));
    }
    if (typeof e.uniqueID !== "undefined") {
      this.uniqueID = e.uniqueID;
    }
    if (typeof e.etabLibelle !== "undefined") {
      this.etabLibelle = e.etabLibelle;
    }
  }
  get isPP() {
    return false;
  }
  get fileFormated() {
    let e = new eD9();
    e.url = "enseignants/" + this.typeEntity + "/" + this.id + "/repartitionElemsProgPeriodesLSUN/editionCatalogueLSU";
    e.id = this.id.toString();
    e.type = this.typeEntity;
    return e;
  }
}
export class jIb {
  constructor(e = {}) {
    this.etablissements = Array.isArray(e.etablissements) ? e.etablissements.map(n => new Gbw(n)) : [];
    this.groupes = Array.isArray(e.groupes) ? e.groupes.map(n => new zJg(n)) : [];
  }
  static initialState() {
    return {};
  }
  visiosDisposPour() {
    return this.etablissements.filter(e => e.parametres.isVisioEnable === true).map(e => e.libelle);
  }
}
class X0 {
  constructor(e = {
    id: 0,
    nom: "",
    adresse: "",
    contact: "",
    telephone: "",
    presentation: "",
    site: "",
    email: ""
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.adresse = e.adresse;
    this.contact = e.contact;
    this.telephone = e.telephone;
    this.photos = Array.isArray(e.photos) ? e.photos.map(n => new eD9(n)) : [];
    this.presentation = e.presentation;
    this.site = e.site;
    this.email = e.email;
    this.logo = new eD9(e.logo);
  }
}
class dp extends XsP {
  constructor(e = {
    id: 0,
    civilite: "",
    particule: "",
    prenom: "",
    nom: "",
    sexe: "",
    type: "",
    matiere: ""
  }) {
    super(e);
    this.id = e.id;
    this.sexe = e.sexe;
    this.matiere = e.matiere;
    this.classe = new WRp(e.classe);
  }
}
export let lEH = (() => {
  let R = class {
    constructor(n = {
      id: 0,
      typeResp: "",
      versQui: ""
    }) {
      this.id = n.id;
      this.typeResp = n.typeResp;
      this.versQui = n.versQui;
      this.contacts = Array.isArray(n.contacts) ? [...n.contacts] : [];
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDResponsable"
  })], R);
  return R;
})();
export class iJ0 extends dp {
  constructor(e = {
    id: 0,
    civilite: "",
    particule: "",
    prenom: "",
    nom: "",
    sexe: "",
    type: "",
    matiere: "",
    photo: "",
    badge: "",
    isPP: false
  }) {
    super(e);
    this.photo = e.photo;
    this.badge = e.badge;
    this.etablissements = Array.isArray(e.etablissements) ? [...e.etablissements] : [];
    this.responsable = new lEH(e.responsable);
    this.fonction = new wlj(e.fonction);
    this.isPP = e.isPP;
    if (Array.isArray(e.classes)) {
      this.classes = e.classes.map(n => new WRp(n));
    }
    if (Array.isArray(e.groupes)) {
      this.groupes = e.groupes.map(n => new Zc(n));
    }
    if (Array.isArray(e.enfants)) {
      this.enfants = e.enfants.map(n => new dp(n));
    }
    if (typeof e.isSelected !== "undefined") {
      this.isSelected = e.isSelected;
    }
    if (typeof e.uniqID !== "undefined") {
      this.uniqID = e.uniqID;
    } else {
      this.uniqID = `${this.id}_${this.type}`;
      if (Object.isExists(this.responsable)) {
        this.uniqID = `${this.uniqID}_${this.responsable.id}`;
      }
      if (Object.isExists(this.fonction)) {
        this.uniqID = `${this.uniqID}_${this.fonction.id}`;
      }
      if (FSr.isNotEmptyString(this.matiere)) {
        this.uniqID = `${this.uniqID}_${FSr.getNormalizeString(this.matiere)}`;
      }
    }
    if (typeof e.to_cc_cci !== "undefined") {
      this.to_cc_cci = e.to_cc_cci;
    }
    if (Object.isExists(e.idRegime)) {
      this.idRegime = e.idRegime;
    }
  }
}
export class b0J {
  constructor(e = {}) {
    this.contacts = Array.isArray(e.contacts) ? e.contacts.map(n => new iJ0(n)) : [];
  }
}
export class s2V {
  constructor(e = {
    id: 0,
    mtype: "",
    read: false,
    subject: "",
    content: "",
    transferred: false,
    answered: false,
    canAnswer: true,
    idClasseur: 0,
    idDossier: 0,
    to_cc_cci: ""
  }) {
    this.id = e.id;
    this.mtype = e.mtype;
    this.read = e.read;
    this.from = new zg(e.from);
    this.to = Array.isArray(e.to) ? e.to.map(n => new zg(n)) : [];
    this.subject = e.subject;
    this.content = e.content;
    this.transferred = e.transferred;
    this.answered = e.answered;
    this.idClasseur = e.idClasseur;
    this.idDossier = e.idDossier;
    this.to_cc_cci = e.to_cc_cci;
    this.canAnswer = e.canAnswer;
    this.files = Array.isArray(e.files) ? e.files.map(n => new eD9(n)) : [];
    if (typeof e.date !== "undefined") {
      this.date = e.date;
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
    if (typeof e.brouillon !== "undefined") {
      this.brouillon = e.brouillon;
    }
    if (typeof e.responseId !== "undefined") {
      this.responseId = e.responseId;
    }
    if (typeof e.forwardId !== "undefined") {
      this.forwardId = e.forwardId;
    }
  }
  isSuppressionMessagePossible(e, n, s) {
    if (this.idDossier !== tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE && e) {
      return true;
    }
    if (n || s || this.idDossier !== tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE || !e) {
      return false;
    }
    const h = this.calculDelai();
    return e && h > 0;
  }
  isCancelMessagePossible(e, n, s) {
    if (this.idDossier !== tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE && e || this.idDossier !== tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE || !e && !n && !s) {
      return false;
    }
    const h = this.calculDelai();
    return n || s || e && h <= 0;
  }
  calculDelai() {
    const e = new Date();
    const n = C_1.addNbMinutesToDate(C_1.stringToDate(this.date), 15);
    return Math.floor(e.getTime() - n.getTime());
  }
}
export class tHm {
  static getTypeContextContactsBySourceModule(e) {
    switch (e) {
      case lFO.ESPACE_DE_TRAVAIL:
        return "espaceTravail";
      case lFO.RDVPP:
        return "rdv";
      case lFO.EDFORMS:
        return "fs";
      default:
        return "messagerie";
    }
  }
  static getMessagerieStateFromIdBox(e) {
    switch (e) {
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION:
        return tHm.MESSAGERIE_STATE.received;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE:
        return tHm.MESSAGERIE_STATE.sent;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT:
        return tHm.MESSAGERIE_STATE.draft;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE:
        return tHm.MESSAGERIE_STATE.archived;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_SETTINGS:
        return tHm.MESSAGERIE_STATE.settings;
      default:
        if (e > 0) {
          return tHm.MESSAGERIE_STATE.classeur;
        }
    }
  }
  static transformSendMessageToMessage(e) {
    let n = new s2V({
      id: e.id,
      responseId: e.responseId,
      forwardId: e.forwardId,
      brouillon: e.brouillon || false,
      mtype: tHm.MESSAGERIE_STATE.sent,
      read: e.read,
      from: e.from,
      to: [],
      subject: e.subject,
      content: e.content instanceof fe.NI ? e.content.getRawValue() : e.content,
      date: e.date,
      files: e.files,
      idDossier: tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE,
      idClasseur: 0,
      transferred: false,
      answered: false,
      to_cc_cci: ""
    });
    n.to = e.groupesDestinataires.reduce((s, d) => {
      const h = d.destinataires.reduce((P, z) => {
        let Ae = new zg({
          prenom: z.prenom,
          nom: z.nom,
          particule: z.particule,
          civilite: z.civilite,
          role: z.type,
          id: z.id,
          read: false,
          to_cc_cci: z.to_cc_cci,
          fonctionPersonnel: ""
        });
        if (z.type === dcH.FAMILLE_RESPONSABLE) {
          Ae.fonctionPersonnel = "responsable";
        }
        if (z.type === dcH.ELEVE && Object.isExists(z.classe) && z.classe.libelle) {
          Ae.fonctionPersonnel = z.classe.libelle;
        }
        if (z.type === dcH.PERSONNEL && Object.isExists(z.fonction) && z.fonction.libelle) {
          Ae.fonctionPersonnel = z.fonction.libelle;
        }
        P.push(Ae);
        return P;
      }, []);
      return s.concat(h);
    }, []);
    return n;
  }
  static displayMatiere(e, n) {
    if (!e && !n || typeof e.classes === "undefined") {
      return "";
    } else if (n && n.optionType === P9Y.classe) {
      return e.classes.filter(s => s.id === n.id).map(s => s.matiere).join(", ");
    } else {
      return e.classes.edUniq("matiere").map(s => s.matiere).join(", ");
    }
  }
  static isPP(e, n) {
    return !!e && (!n && typeof e.classes !== "undefined" || n.optionType === P9Y.niveau || n.optionType === P9Y.etab && n.libelle !== this.TYPE_RECHERCHE.allProfsEtablissements ? e.classes.findIndex(s => s.isPP) > -1 : n.optionType === P9Y.etab && n.libelle === this.TYPE_RECHERCHE.allProfsEtablissements ? e.isPP : typeof e.classes !== "undefined" && e.classes.findIndex(s => s.isPP && s.id === n.id) > -1);
  }
  static convertUserToContactMessagerie(e) {
    let n;
    switch (rd(e)) {
      case "MEDUserDetail":
        n = new iJ0({
          id: e.id,
          civilite: e.civilite,
          nom: e.nom,
          prenom: e.prenom,
          particule: e.particule,
          fonction: e.fonction,
          to_cc_cci: "to",
          type: e.type
        });
        if (e.classe.id > 0) {
          n.classe = new WRp({
            id: e.classe.id,
            code: "",
            libelle: e.classe.libelle
          });
          if (n.type === "") {
            n.type = dcH.ELEVE;
          }
        }
        break;
      case "MEDEspaceDeTravailMembre":
        n = new iJ0({
          id: e.idMembre,
          civilite: "",
          nom: e.nom,
          prenom: e.prenom,
          fonction: e.fonction,
          to_cc_cci: "to",
          type: e.profil
        });
        break;
      case "MEDStageTuteurEtablissement":
        n = new iJ0({
          id: e.id,
          nom: e.nom,
          prenom: e.prenom,
          to_cc_cci: "to",
          particule: e.particule,
          type: dcH.ENSEIGNANT
        });
        break;
      case "MEDStageEleve":
        n = new iJ0({
          id: e.id,
          nom: e.nom,
          prenom: e.prenom,
          to_cc_cci: "to",
          particule: e.particule,
          type: dcH.ELEVE
        });
        break;
      case "MEDGroupeFlexibleEleve":
        n = new iJ0({
          id: e.id,
          nom: e.nom,
          prenom: e.prenom,
          to_cc_cci: "to",
          particule: e.particule,
          type: dcH.ELEVE,
          classeId: e.classeCode,
          classeCode: e.classeCode,
          classeLibelle: e.classeLibelle,
          photo: e.photo
        });
        break;
      case "MEDEleveClasse":
        n = new iJ0({
          id: e.id,
          civilite: "",
          nom: e.nom,
          prenom: e.prenom,
          to_cc_cci: "to",
          type: dcH.ELEVE
        });
        break;
      case "MEDCorrespondanceAuteur":
        n = new iJ0({
          id: e.id,
          civilite: "",
          nom: e.nom,
          prenom: e.prenom,
          to_cc_cci: "to",
          type: e.role
        });
        break;
      case "MEDRDVInvite":
        n = new iJ0({
          id: e.id,
          nom: e.nom,
          prenom: e.prenom,
          to_cc_cci: "to",
          type: e.type
        });
        break;
      case "MEDFSParticipant":
        n = new iJ0({
          id: e.idUser,
          nom: e.nom,
          prenom: e.prenom,
          to_cc_cci: "to",
          type: e.typeUser
        });
        break;
      case "MEDResponsable":
        n = new iJ0({
          id: e.id,
          prenom: "",
          nom: Object.isExists(e.contacts) && e.contacts.length > 0 ? e.contacts[0] : "",
          to_cc_cci: "to",
          type: e.versQui === dcH.FAMILLE_RESPONSABLE || e.versQui === dcH.FAMILLE_CONJOINT ? e.versQui : dcH.FAMILLE_RESPONSABLE
        });
        break;
      case "MEDCorrespondanceGroupedEleve":
        n = new iJ0({
          id: e.idEleve,
          nom: e.nom,
          prenom: e.prenom,
          to_cc_cci: "to",
          type: dcH.ELEVE
        });
    }
    return n;
  }
  static canArchive(e) {
    return e.idClasseur === 0 && e.idDossier === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION;
  }
  static hashCode(e) {
    let n = 0;
    for (let s = 0; s < e.length; s++) {
      n = e.charCodeAt(s) + ((n << 5) - n);
    }
    return n;
  }
  static intToRGB(e) {
    let n = (e & 16777215).toString(16).toUpperCase();
    return "#" + "00000".substring(0, 6 - n.length) + n;
  }
  static generateColor(e) {
    return tHm.intToRGB(tHm.hashCode(e));
  }
}
tHm.INBOX_TITLE = {
  "-1": "Boîte de réception",
  "-2": "Messages envoyés",
  "-3": "Messages archivés",
  "-5": "Brouillons"
};
tHm.ID_DOSSIER_MESSAGERIE = {
  ID_DOSSIER_RECEPTION: -1,
  ID_DOSSIER_ENVOYE: -2,
  ID_DOSSIER_ARCHIVE: -3,
  ID_DOSSIER_SETTINGS: -4,
  ID_DOSSIER_DRAFT: -5,
  received: -1,
  sent: -2,
  send: -2,
  archived: -3,
  settings: -4,
  draft: -5
};
tHm.TYPE_MESSAGERIE_DEST = {
  TO: "to",
  CC: "cc",
  CCI: "cci"
};
tHm.MESSAGERIE_STATE = {
  received: "received",
  sent: "sent",
  send: "send",
  archived: "archived",
  settings: "settings",
  classeur: "classeur",
  draft: "draft"
};
tHm.MESSAGES_DEFAULT_SEARCH_OPTIONS = {
  page: 0,
  itemsPerPage: 20,
  typeRecuperation: tHm.MESSAGERIE_STATE.received,
  force: false,
  orderBy: "date",
  order: "desc",
  query: "",
  idClasseur: 0
};
tHm.MODE_MESSAGE = {
  destinataire: "destinataire",
  expediteur: "expediteur",
  MODE_DESTINATAIRE: "destinataire",
  MODE_EXPEDITEUR: "expediteur"
};
tHm.ACT_ON_MESSAGE = {
  marquerCommeLu: "marquerCommeLu",
  marquerCommeNonLu: "marquerCommeNonLu",
  archiver: "archiver",
  desarchiver: "desarchiver",
  supprimer: "supprimer",
  annuler: "annuler",
  envoyer: "envoyer"
};
tHm.TYPE_COMPOSE = {
  nouveau: "nouveau",
  reponse: "reponse",
  reponseAll: "reponseAll",
  transfert: "transfert"
};
tHm.TYPE_RECHERCHE = {
  allProfsEtablissements: "Tous les profs des établissements"
};
class zg {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    particule: "",
    civilite: "",
    role: "",
    read: false,
    fonctionPersonnel: "",
    listeRouge: false
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.civilite = e.civilite;
    this.role = e.role;
    this.read = e.read;
    this.fonctionPersonnel = e.fonctionPersonnel;
    this.listeRouge = typeof e.listeRouge !== "undefined" && e.listeRouge;
    if (typeof e.to_cc_cci !== "undefined") {
      this.to_cc_cci = e.to_cc_cci;
    }
    if (typeof e.efface !== "undefined") {
      this.efface = e.efface;
    }
    this.color = typeof e.color !== "undefined" ? e.color : tHm.generateColor(`${this.civilite} ${this.prenom} ${this.particule} ${this.nom}`);
  }
}
class bu {
  constructor(e = {
    messagesArchivesCount: 0,
    messagesEnvoyesCount: 0,
    messagesRecusCount: 0,
    messagesRecusNotReadCount: 0,
    messagesDraftCount: 0,
    lastPageLoaded: {}
  }) {
    this.messagesArchivesCount = e.messagesArchivesCount;
    this.messagesEnvoyesCount = e.messagesEnvoyesCount;
    this.messagesRecusCount = e.messagesRecusCount;
    this.messagesRecusNotReadCount = e.messagesRecusNotReadCount;
    this.messagesDraftCount = e.messagesDraftCount;
    this.lastPageLoaded = {
      ...e.lastPageLoaded
    };
  }
}
export class sdI {
  constructor(e = {
    signature: ""
  }) {
    this.signature = e.signature;
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class Dd {
  constructor(e = {
    id: 0,
    libelle: ""
  }) {
    this.id = e.id;
    switch (this.id) {
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION:
        this.type = tHm.MESSAGERIE_STATE.received;
        this.libelle = "Boîte de réception";
        this.icon = "fa-inbox";
        this.order = 0;
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE:
        this.type = tHm.MESSAGERIE_STATE.sent;
        this.libelle = "Envoyés";
        this.icon = "fa-paper-plane";
        this.order = 1;
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT:
        this.type = tHm.MESSAGERIE_STATE.draft;
        this.libelle = "Brouillons";
        this.icon = "fa-file";
        this.order = 2;
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE:
        this.type = tHm.MESSAGERIE_STATE.archived;
        this.libelle = "Archivés";
        this.icon = "fa-archive";
        this.order = 3;
        break;
      default:
        if (this.id > 0) {
          this.type = tHm.MESSAGERIE_STATE.classeur;
          this.icon = "fa-folder";
          this.order = e.order ? e.order : 3 + this.id;
        }
        this.libelle = e.libelle;
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  get isClasseur() {
    return this.type === tHm.MESSAGERIE_STATE.classeur;
  }
}
export let aA2 = (() => {
  class R {
    constructor(n = {
      isActif: false,
      canParentsLireMessagesEnfants: false,
      destAdmin: false,
      destEleve: false,
      destFamille: false,
      destProf: false,
      destEspTravail: false,
      disabledNotification: true,
      notificationEmailEtablissement: false,
      choixMailNotification: 0,
      autreMailNotification: "",
      mailPro: "",
      mailPerso: "",
      blackListProfActive: false,
      estEnBlackList: false,
      afficherToutesLesClasses: false
    }) {
      this.isActif = n.isActif === "1" || n.isActif === true;
      this.canParentsLireMessagesEnfants = n.canParentsLireMessagesEnfants === "1" || n.canParentsLireMessagesEnfants === true;
      this.destAdmin = n.destAdmin === "1" || n.destAdmin === true;
      this.destEleve = n.destEleve === "1" || n.destEleve === true;
      this.destFamille = n.destFamille === "1" || n.destFamille === true;
      this.destProf = n.destProf === "1" || n.destProf === true;
      this.destEspTravail = n.destEspTravail === "1" || n.destEspTravail === true;
      this.disabledNotification = n.disabledNotification === "1" || n.disabledNotification === true;
      this.notificationEmailEtablissement = n.notificationEmailEtablissement === "1" || n.notificationEmailEtablissement === true;
      this.choixMailNotification = n.choixMailNotification;
      this.autreMailNotification = n.autreMailNotification;
      this.mailPro = n.mailPro;
      this.mailPerso = n.mailPerso;
      this.blackListProfActive = n.blackListProfActive === "1" || n.blackListProfActive === true;
      this.estEnBlackList = n.estEnBlackList === "1" || n.estEnBlackList === true;
      this.afficherToutesLesClasses = n.afficherToutesLesClasses === "1" || n.afficherToutesLesClasses === true;
      if (typeof n.droitDeconnexion !== "undefined") {
        this.droitDeconnexion = n.droitDeconnexion;
      }
      if (typeof n.periodesDroitDeconnexion !== "undefined") {
        this.periodesDroitDeconnexion = Object.keys(n.periodesDroitDeconnexion).reduce((s, d) => {
          s[d] = {
            de: n.periodesDroitDeconnexion[d].de,
            a: n.periodesDroitDeconnexion[d].a
          };
          return s;
        }, {});
      }
      if (typeof n.hideListesContacts !== "undefined") {
        this.hideListesContacts = n.hideListesContacts;
      }
    }
  }
  R.semaine = ["lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"];
  return R;
})();
export class xkM {
  constructor(e = {}) {
    this.messages = Array.isArray(e.messages) ? e.messages.map(n => new s2V(n)) : [];
    this.inboxList = Array.isArray(e.inboxList) ? e.inboxList.map(n => new Dd(n)) : [];
    this.pagination = new bu(e.pagination);
  }
  initFoldersCommun() {
    if (this.inboxList.findIndex(e => e.id === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION) === -1) {
      this.inboxList.edInsertAt(0, new Dd({
        id: tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION
      }));
    }
    if (this.inboxList.findIndex(e => e.id === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE) === -1) {
      this.inboxList.edInsertAt(1, new Dd({
        id: tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE
      }));
    }
    if (this.inboxList.findIndex(e => e.id === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT) === -1) {
      this.inboxList.edInsertAt(2, new Dd({
        id: tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT
      }));
    }
    if (this.inboxList.findIndex(e => e.id === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE) === -1) {
      this.inboxList.edInsertAt(3, new Dd({
        id: tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE
      }));
    }
  }
  getTitleCurrentInbox(e) {
    let n = "";
    if (e < 0) {
      n = tHm.INBOX_TITLE[e];
    } else if (e > 0) {
      const s = this.inboxList.find(d => d.id === e);
      if (Object.isExists(s)) {
        n = s.libelle;
      }
    }
    return n;
  }
  setNewMessagesRecuperes(e, n, s, d) {
    this.initFoldersCommun();
    n.classeurs.edSortBy("libelle").forEach((P, z) => {
      const Ae = this.inboxList.find(Ve => Ve.id === P.id);
      if (Object.isExists(Ae)) {
        Ae.order = this.inboxList.length + z;
      } else {
        this.inboxList.push(new Dd({
          ...P,
          order: this.inboxList.length + z
        }));
      }
    });
    switch (e) {
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION:
        this.pagination.messagesRecusCount = n.pagination.messagesRecusCount;
        this.pagination.messagesRecusNotReadCount = n.pagination.messagesRecusNotReadCount;
        this.pagination.messagesDraftCount = n.pagination.messagesDraftCount;
        if (s === 0) {
          this.messages = this.messages.filter(P => P.idDossier !== e || P.idClasseur !== 0);
        }
        n.messages.received.map(P => {
          const z = new s2V(P);
          this.messages.edInsertUpdate(z, Ae => Ae.id === z.id && Ae.idDossier === z.idDossier);
        });
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE:
        this.pagination.messagesEnvoyesCount = n.pagination.messagesEnvoyesCount;
        if (s === 0) {
          this.messages = this.messages.filter(P => P.idDossier !== e || P.idClasseur !== 0 || P.brouillon !== false);
        }
        n.messages.sent.map(P => {
          const z = new s2V(P);
          this.messages.edInsertUpdate(z, Ae => Ae.id === z.id && Ae.idDossier === z.idDossier);
        });
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT:
        this.pagination.messagesDraftCount = n.pagination.messagesDraftCount;
        if (s === 0) {
          this.messages = this.messages.filter(P => P.brouillon === false);
        }
        n.messages.draft.map(P => {
          const z = new s2V(P);
          this.messages.edInsertUpdate(z, Ae => Ae.id === z.id && Ae.idDossier === z.idDossier);
        });
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE:
        this.pagination.messagesArchivesCount = n.pagination.messagesArchivesCount;
        if (s === 0) {
          this.messages = this.messages.filter(P => P.idDossier !== e || P.idClasseur !== 0);
        }
        n.messages.archived.map(P => {
          const z = new s2V(P);
          this.messages.edInsertUpdate(z, Ae => Ae.id === z.id && Ae.idDossier === z.idDossier);
        });
        break;
      default:
        if (e > 0) {
          this.pagination.messagesRecusCount = n.pagination.messagesRecusCount;
          this.pagination.messagesRecusNotReadCount = n.pagination.messagesRecusNotReadCount;
          if (s === 0) {
            this.messages = this.messages.filter(P => P.idClasseur !== e);
          }
          n.messages.received.map(P => {
            const z = new s2V(P);
            this.messages.edInsertUpdate(z, Ae => Ae.id === z.id && Ae.idDossier === z.idDossier);
          });
          n.messages.sent.map(P => {
            const z = new s2V(P);
            this.messages.edInsertUpdate(z, Ae => Ae.id === z.id && Ae.idDossier === z.idDossier);
          });
        }
    }
    const h = this.inboxList.findIndex(P => e === P.id);
    if (h > -1) {
      Object.setExpired(this.inboxList[h], d);
    }
  }
  getMessages(e) {
    switch (e) {
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION:
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE:
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE:
        return this.messages.filter(n => n.idDossier === e && n.brouillon !== true && n.idClasseur === 0);
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT:
        return this.messages.filter(n => n.brouillon === true);
      default:
        if (e > 0) {
          return this.messages.filter(n => n.idClasseur === e);
        } else {
          return this.messages;
        }
    }
  }
  deleteMessages(e) {
    e.forEach(n => {
      const s = this.messages.findIndex(d => d.id === n.id && d.idDossier === n.idDossier && d.idClasseur === n.idClasseur);
      if (s > -1) {
        this.messages.splice(s, 1);
      }
    });
  }
  hasMessage(e, n, s = 0) {
    return this.getMessageIndex(e, n, s) > -1;
  }
  getMessage(e, n, s = 0) {
    const d = this.getMessageIndex(e, n, s);
    if (d > -1) {
      return this.messages[d];
    } else {
      return undefined;
    }
  }
  getMessageIndex(e, n, s = 0) {
    return this.messages.findIndex(d => d.id === e && (n === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT && d.brouillon === true || d.idDossier === n) && d.idClasseur === s);
  }
  setMessage(e, n) {
    let s;
    const d = this.getMessageIndex(e.id, e.idDossier, e.idClasseur);
    if (d > -1) {
      this.messages[d] = new s2V({
        ...this.messages[d],
        ...e
      });
      if (Object.isExists(n)) {
        Object.setExpired(this.messages[d], n);
      }
    } else {
      s = new s2V(e);
      if (Object.isExists(n)) {
        Object.setExpired(s, n);
      }
      this.messages.push(s);
    }
  }
  setMessageTransferred(e, n, s) {
    const d = this.getMessageIndex(e, n, s);
    if (d > -1) {
      this.messages[d] = new s2V({
        ...this.messages[d],
        transferred: true
      });
    }
  }
  setMessageAnswered(e, n, s) {
    const d = this.getMessageIndex(e, n, s);
    if (d > -1) {
      this.messages[d] = new s2V({
        ...this.messages[d],
        answered: true
      });
    }
  }
  updateMessages(e) {
    e.forEach(n => {
      const s = this.getMessageIndex(n.id, n.idDossier, n.idClasseur);
      if (s > -1) {
        this.messages[s] = n;
      } else {
        this.messages.push(n);
      }
    });
  }
  deplacerMessages(e, n) {
    e.forEach(s => {
      const d = this.getMessageIndex(s.id, s.idDossier, s.idClasseur);
      if (d > -1) {
        this.messages[d].idClasseur = n;
      }
    });
  }
  zipMessages(e, n) {
    e.forEach(s => {
      const d = this.getMessageIndex(s.id, s.idDossier, s.idClasseur);
      if (d > -1) {
        this.messages[d].idDossier = n;
      }
    });
  }
  refreshPaginationStorage(e, n) {
    this.pagination = new bu(this.pagination);
    switch (e) {
      case 0:
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION:
        this.pagination.messagesRecusCount = this.messages.filter(s => s.idDossier === e).length;
        this.pagination.messagesRecusNotReadCount = this.messages.filter(s => s.idDossier === e && s.read === false).length;
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE:
        this.pagination.messagesEnvoyesCount = this.messages.filter(s => s.idDossier === e).length;
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT:
        this.pagination.messagesDraftCount = this.messages.filter(s => s.brouillon === true).length;
        break;
      case tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE:
        this.pagination.messagesArchivesCount = this.messages.filter(s => s.idDossier === e).length;
    }
    if (Object.isExists(n)) {
      this.pagination.lastPageLoaded[e] = n;
    }
  }
  setClasseur(e, n) {
    let s = this.inboxList.edRemove(P => P.id > -1);
    const d = s.findIndex(P => e.id === P.id);
    if (d > -1) {
      s[d] = new Dd({
        ...this.inboxList[d],
        ...e
      });
      Object.setExpired(this.inboxList[d], n);
    } else {
      let P = new Dd(e);
      Object.setExpired(P, n);
      s.push(P);
    }
    const h = this.inboxList.filter(P => P.id < 0).length;
    s.edSortBy("libelle").forEach((P, z) => {
      P.order = h + z;
    });
    this.inboxList = this.inboxList.concat(s);
  }
  removeClasseur(e) {
    this.inboxList = this.inboxList.filter(n => e !== n.id);
  }
}
class ec {
  constructor(e = {
    parametrage: undefined,
    signature: undefined
  }) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        if (s === "parametrage") {
          this.parametrage = new aA2(e.parametrage);
        } else if (s === "signature") {
          this.signature = new sdI(e.signature);
        } else {
          this[s] = new xkM(e[s]);
        }
      }
    }
  }
  getMessagerie(e) {
    return this[e];
  }
  getMessages(e, n) {
    if (typeof this[e] === "undefined") {
      return [];
    } else {
      return this[e].getMessages(n);
    }
  }
  setNewMessagesRecuperes(e, n, s, d, h) {
    if (typeof this[e] === "undefined") {
      this[e] = new xkM();
    }
    this.parametrage = new aA2(s.parametrage);
    this[e].setNewMessagesRecuperes(n, s, d, h);
  }
  deleteMessages(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new xkM();
    }
    this[e].deleteMessages(n);
  }
  hasMessage(e, n, s, d = 0) {
    return typeof this[e] !== "undefined" && this[e].hasMessage(n, s, d);
  }
  getMessage(e, n, s, d = 0) {
    if (typeof this[e] !== "undefined") {
      return this[e].getMessage(n, s, d);
    }
  }
  setMessage(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new xkM();
    }
    this[e].setMessage(n, s);
  }
  setMessageTransferred(e, n, s, d) {
    if (typeof this[e] !== "undefined") {
      this[e].setMessageTransferred(n, s, d);
    }
  }
  setMessageAnswered(e, n, s, d) {
    if (typeof this[e] !== "undefined") {
      this[e].setMessageAnswered(n, s, d);
    }
  }
  setSignature(e, n) {
    this.signature = new sdI(e);
    Object.setExpired(this.signature, n);
  }
  updateMessages(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new xkM();
    }
    this[e].updateMessages(n);
  }
  deplacerMessages(e, n, s) {
    if (typeof this[e] !== "undefined") {
      this[e].deplacerMessages(n, s);
    }
  }
  zipMessages(e, n, s) {
    if (typeof this[e] !== "undefined") {
      this[e].zipMessages(n, s);
    }
  }
  refreshPaginationStorage(e, n, s) {
    if (typeof this[e] !== "undefined") {
      this[e].refreshPaginationStorage(n, s);
    }
  }
  setClasseur(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new xkM();
    }
    this[e].setClasseur(n, s);
  }
  removeClasseur(e, n) {
    if (typeof this[e] !== "undefined") {
      this[e].removeClasseur(n);
    }
  }
  updateParams(e) {
    this.parametrage = new aA2(e);
  }
}
class d0 {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new ec(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  getMessagerieParametrage(e) {
    if (typeof this[e] !== "undefined") {
      return this[e].parametrage;
    }
  }
  getMessagerieSignature(e) {
    if (typeof this[e] !== "undefined") {
      return this[e].signature;
    }
  }
  getMessagerie(e, n) {
    if (typeof this[e] !== "undefined") {
      return this[e].getMessagerie(n);
    }
  }
  getMessages(e, n, s) {
    if (typeof this[e] === "undefined") {
      return [];
    } else {
      return this[e].getMessages(n, s);
    }
  }
  setNewMessagesRecuperes(e, n, s, d, h, P) {
    if (typeof this[e] === "undefined") {
      this[e] = new ec();
    }
    this[e].setNewMessagesRecuperes(n, s, d, h, P);
  }
  hasMessage(e, n, s, d, h = 0) {
    return typeof this[e] !== "undefined" && this[e].hasMessage(n, s, d, h);
  }
  getMessage(e, n, s, d, h = 0) {
    if (typeof this[e] !== "undefined") {
      return this[e].getMessage(n, s, d, h);
    }
  }
  setMessage(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new ec();
    }
    this[e].setMessage(n, s, d);
  }
  setMessageTransferred(e, n, s, d, h) {
    if (typeof this[e] !== "undefined") {
      this[e].setMessageTransferred(n, s, d, h);
    }
  }
  setMessageAnswered(e, n, s, d, h) {
    if (typeof this[e] !== "undefined") {
      this[e].setMessageAnswered(n, s, d, h);
    }
  }
  setSignature(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new ec();
    }
    this[e].setSignature(n, s);
  }
  updateMessages(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new ec();
    }
    this[e].updateMessages(n, s);
  }
  deplacerMessages(e, n, s, d) {
    if (typeof this[e] !== "undefined") {
      this[e].deplacerMessages(n, s, d);
    }
  }
  zipMessages(e, n, s, d) {
    if (typeof this[e] !== "undefined") {
      this[e].zipMessages(n, s, d);
    }
  }
  deleteMessages(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new ec();
    }
    this[e].deleteMessages(n, s);
  }
  refreshPaginationStorage(e, n, s, d) {
    if (typeof this[e] !== "undefined") {
      this[e].refreshPaginationStorage(n, s, d);
    }
  }
  setClasseur(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new ec();
    }
    this[e].setClasseur(n, s, d);
  }
  removeClasseur(e, n, s) {
    if (typeof this[e] !== "undefined") {
      this[e].removeClasseur(n, s);
    }
  }
  updateParams(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new ec();
    }
    this[e].updateParams(n);
  }
  canDeleteClasseur(e, n, s) {
    return this.getMessages(e, n, s).length === 0;
  }
}
let f0 = (() => {
  let R = class {
    constructor(n = {
      badge: "",
      civilite: "",
      classe: {},
      id: "",
      isPP: "",
      matiere: "",
      nom: "",
      particule: "",
      photo: "",
      prenom: "",
      telephone: "",
      email: "",
      responsable: {},
      sexe: "",
      type: "",
      estBlackList: false,
      messagerieActive: true
    }) {
      this.badge = n.badge;
      this.civilite = n.civilite;
      this.classe = {
        ...n.classe
      };
      this.etablissements = Array.isArray(n.etablissements) ? [...n.etablissements] : [];
      this.fonction = new wlj(n.fonction);
      this.id = n.id;
      this.isPP = n.isPP;
      this.matiere = n.matiere;
      this.nom = n.nom;
      this.particule = n.particule;
      this.photo = n.photo;
      this.prenom = n.prenom;
      this.telephone = n.telephone;
      this.email = n.email;
      this.responsable = new lEH(n.responsable);
      this.sexe = n.sexe;
      this.type = n.type;
      this.estBlackList = n.estBlackList;
      this.messagerieActive = n.messagerieActive;
      if (Array.isArray(n.classes)) {
        this.classes = n.classes.map(s => ({
          ...s
        }));
      }
      if (Array.isArray(n.groupes)) {
        this.groupes = n.groupes.map(s => ({
          ...s
        }));
      }
      if (Array.isArray(n.enfants)) {
        this.enfants = n.enfants.map(s => ({
          ...s
        }));
      }
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDUserDetail"
  })], R);
  return R;
})();
export class o$F {
  constructor(e = {
    id: 0,
    civilite: "",
    nom: "",
    prenom: "",
    profil: "",
    type: ""
  }) {
    this.id = e.id;
    this.civilite = e.civilite;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.profil = e.profil;
    this.type = e.type;
    if (Object.isExists(e.conjoint)) {
      this.conjoint = e.conjoint;
    }
    if (Array.isArray(e.enfants)) {
      this.enfants = [...e.enfants];
    }
    if (Object.isExists(e.libelleClasse)) {
      this.libelleClasse = e.libelleClasse;
    }
    if (Object.isExists(e.idClasse)) {
      this.idClasse = e.idClasse;
    }
    if (Object.isExists(e.badge)) {
      this.badge = e.badge;
    }
    if (Object.isExists(e.photo)) {
      this.photo = e.photo;
    }
    this.sexe = Object.isExists(e.sexe) ? e.sexe : this.civilite === "Mme" ? "F" : "M";
  }
}
export class QV_ {
  constructor(e = {}) {
    this.selectedClasse = e.selectedClasse;
    this.selectedPeriode = e.selectedPeriode;
    this.selectedMatiere = e.selectedMatiere;
  }
  static initialState() {
    return {};
  }
  static listePratiquesEnseignement(e) {
    let n = [];
    if (Object.isExists(e.selectedClasse) && e.selectedClasse.paramsLSU && e.selectedClasse.paramsLSU.numeroCycle > 0) {
      if (e.selectedClasse.degre === 2 || e.selectedClasse.degre === 4) {
        n.push(new vcu({
          id: "AP",
          code: "AP",
          libelle: "AP",
          libelleCourt: "AP",
          coef: 0,
          codeGestion: "",
          codeSSMatiere: "",
          avecSousMatiere: 0,
          calculSousMatiere: 0,
          isPratiqueEnseignement: true
        }));
      }
      if (e.selectedClasse.paramsLSU.numeroCycle === 3 || e.selectedClasse.paramsLSU.numeroCycle === 4) {
        n.push(new vcu({
          id: "EPI",
          code: "EPI",
          libelle: "EPI",
          libelleCourt: "EPI",
          coef: 0,
          codeGestion: "",
          codeSSMatiere: "",
          avecSousMatiere: 0,
          calculSousMatiere: 0,
          isPratiqueEnseignement: true
        }));
      }
      n.push(new vcu({
        id: "PARCOURS",
        code: "PARCOURS",
        libelle: "Parcours",
        libelleCourt: "Parcours",
        coef: 0,
        codeGestion: "",
        codeSSMatiere: "",
        avecSousMatiere: 0,
        calculSousMatiere: 0,
        isPratiqueEnseignement: true
      }));
    }
    return n;
  }
}
export class pFH {
  constructor(e = {
    id: 0,
    evaluation: ""
  }) {
    this.id = e.id;
    this.evaluation = e.evaluation;
    if (typeof e.date !== "undefined") {
      this.date = e.date;
    }
    if (typeof e.libelle !== "undefined") {
      this.libelle = e.libelle;
    }
    if (typeof e.libelleDevoir !== "undefined") {
      this.libelleDevoir = e.libelleDevoir;
    }
    if (typeof e.libellePeriode !== "undefined") {
      this.libellePeriode = e.libellePeriode;
    }
    if (typeof e.nomProf !== "undefined") {
      this.nomProf = e.nomProf;
    }
  }
}
export class tGo {
  constructor(e = {
    idNote: 0,
    idDevoir: 0,
    idPeriode: "",
    coef: 1,
    note: "",
    noteSur: 20,
    lettre: "",
    notationLettre: false,
    date: "",
    devoirLibelle: "",
    ccf: false,
    nonSignificatif: false,
    codeMatiere: "",
    codeSSMatiere: "",
    commentaire: ""
  }) {
    this.idNote = e.idNote;
    this.idDevoir = e.idDevoir;
    this.idPeriode = e.idPeriode;
    this.coef = e.coef;
    this.note = e.note;
    this.noteSur = e.noteSur;
    this.lettre = e.lettre;
    this.notationLettre = e.notationLettre;
    this.date = e.date;
    this.devoirLibelle = e.devoirLibelle;
    this.ccf = e.ccf;
    this.nonSignificatif = e.nonSignificatif;
    this.codeMatiere = e.codeMatiere;
    this.codeSSMatiere = e.codeSSMatiere;
    this.commentaire = FSr.isNotEmptyString(e.commentaire) ? e.commentaire : "";
    this.elementsProgramme = Array.isArray(e.elementsProgramme) ? e.elementsProgramme.map(n => new pFH(n)) : [];
    if (typeof e.isGoodNote !== "undefined") {
      this.isGoodNote = e.isGoodNote;
    }
    if (typeof e.editDate !== "undefined") {
      this.editDate = e.editDate;
    }
  }
  get isNoteLettreEnAttente() {
    return FSr.isNotEmptyString(this.lettre) && this.lettre.toLowerCase().startsWith(Gxt.EA);
  }
}
export class oeU {
  constructor(e = {
    id: 0,
    prenom: "",
    nom: "",
    particule: "",
    classeLibelle: "",
    codeClasse: "",
    sexe: "",
    photo: "",
    ordreArrivee: ""
  }) {
    this.id = e.id;
    this.prenom = e.prenom;
    this.nom = e.nom;
    this.particule = e.particule;
    this.classeLibelle = e.classeLibelle;
    this.codeClasse = e.codeClasse;
    this.sexe = e.sexe;
    this.photo = e.photo;
    this.ordreArrivee = e.ordreArrivee;
    if (typeof e.dateSortie !== "undefined") {
      this.dateSortie = e.dateSortie;
    }
    if (typeof e.idClasse !== "undefined") {
      this.idClasse = e.idClasse;
    }
    if (typeof e.note !== "undefined") {
      this.note = new tGo(e.note);
    }
    if (typeof e.foStat !== "undefined") {
      this.foStat = e.foStat;
    }
  }
}
export class TOg {
  constructor(e = {}) {
    this.eleve = new oeU(e.eleve);
    this.devoirs = {};
    if (Object.isExists(e.devoirs) && Object.keys(e.devoirs).length > 0) {
      const n = Object.keys(e.devoirs);
      for (let s of n) {
        this.devoirs[s] = new tGo(e.devoirs[s]);
      }
    }
    if (typeof e.moyenne !== "undefined") {
      this.moyenne = e.moyenne;
    }
  }
}
export class fP {
  constructor(e = {
    id: 0,
    code: "",
    libelle: ""
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
export class a_R {
  constructor(e = {
    id: 0,
    libelle: "",
    isSysteme: false
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.isSysteme = e.isSysteme;
    this.personnalise = typeof e.personnalise !== "undefined" && e.personnalise;
    this.idProf = typeof e.idProf !== "undefined" ? e.idProf : 0;
  }
}
export class tnE {
  constructor(e = {
    idOrigineCatalogue: 0,
    idConnaissance: 0,
    libelle: "",
    imprime: false,
    idCompetence: 0,
    libelleCompetence: ""
  }) {
    this.idOrigineCatalogue = e.idOrigineCatalogue;
    this.idConnaissance = typeof e.idConnaissance !== "undefined" ? e.idConnaissance : 0;
    this.libelle = e.libelle;
    this.imprime = e.imprime;
    this.idCompetence = e.idCompetence;
    this.libelleCompetence = e.libelleCompetence;
    this.composantes = Array.isArray(e.composantes) ? e.composantes.map(n => new fP(n)) : [];
    this.connaissancesAssociees = Array.isArray(e.connaissancesAssociees) ? e.connaissancesAssociees.map(n => new a_R(n)) : [];
    if (typeof e.bareme !== "undefined") {
      this.bareme = e.bareme;
    }
    if (typeof e.idMatiere !== "undefined") {
      this.idMatiere = e.idMatiere;
    }
    if (typeof e.libelleMatiere !== "undefined") {
      this.libelleMatiere = e.libelleMatiere;
    }
    this.id = typeof e.id !== "undefined" ? e.id : 0;
    this.personnalise = typeof e.personnalise !== "undefined" && e.personnalise;
    this.idProf = typeof e.idProf !== "undefined" ? e.idProf : 0;
    if (typeof e.pourcentageEvaluation0 !== "undefined") {
      this.pourcentageEvaluation0 = e.pourcentageEvaluation0;
    }
    if (typeof e.pourcentageEvaluation1 !== "undefined") {
      this.pourcentageEvaluation1 = e.pourcentageEvaluation1;
    }
    if (typeof e.pourcentageEvaluation2 !== "undefined") {
      this.pourcentageEvaluation2 = e.pourcentageEvaluation2;
    }
    if (typeof e.pourcentageEvaluation3 !== "undefined") {
      this.pourcentageEvaluation3 = e.pourcentageEvaluation3;
    }
    if (typeof e.pourcentageEvaluation4 !== "undefined") {
      this.pourcentageEvaluation4 = e.pourcentageEvaluation4;
    }
    if (typeof e.afc !== "undefined") {
      this.afc = e.afc;
    }
  }
  get htmlTitle() {
    if (this.isEP) {
      return `\xe9l\xe9ment de programme : ${this.idOrigineCatalogue}`;
    } else if (this.isAFC) {
      return `attendu de fin de cycle : ${this.idOrigineCatalogue}`;
    } else if (this.isConnaissanceAssociee) {
      return `connaissance associ\xe9e : ${this.idOrigineCatalogue} -> ${this.idConnaissance}`;
    } else {
      return "élément de programme";
    }
  }
  get isConnaissanceAssociee() {
    return this.idConnaissance > 0;
  }
  get isEP() {
    return this.idConnaissance === 0 && !this.isAFC;
  }
  get isAFC() {
    return this.afc === 1;
  }
  setCA(e) {
    let n = this.connaissancesAssociees.findIndex(s => e.id === s.id);
    if (n > -1) {
      this.connaissancesAssociees[n] = new a_R({
        ...this.connaissancesAssociees[n],
        ...e
      });
    } else {
      this.connaissancesAssociees.push(new a_R(e));
    }
  }
  deleteCA(e) {
    this.connaissancesAssociees = this.connaissancesAssociees.filter(n => e.id !== n.id);
  }
}
export class n3h {
  constructor(e = {
    id: 0,
    idProf: 0,
    nomProf: "",
    idLong: "",
    libelle: "",
    commentaire: "",
    coef: 1,
    date: "",
    nonSignificatif: false,
    ccf: false,
    noteSur: 20,
    notationLettre: false,
    noteNegative: false,
    statutPeriode: "",
    idPeriode: "",
    codeMatiere: "",
    codeSSMatiere: "",
    avecNote: false
  }) {
    this.id = e.id;
    this.idProf = e.idProf;
    this.nomProf = e.nomProf;
    this.idLong = e.idLong;
    this.libelle = e.libelle;
    this.commentaire = e.commentaire;
    this.coef = e.coef;
    this.date = e.date;
    this.nonSignificatif = e.nonSignificatif;
    this.ccf = e.ccf;
    this.noteSur = e.noteSur;
    this.notationLettre = e.notationLettre;
    this.noteNegative = e.noteNegative;
    this.statutPeriode = e.statutPeriode;
    this.idPeriode = e.idPeriode;
    this.codeMatiere = e.codeMatiere;
    this.codeSSMatiere = e.codeSSMatiere;
    this.avecNote = e.avecNote;
    this.elementsProgramme = Array.isArray(e.elementsProgramme) ? e.elementsProgramme.map(n => new tnE(n)) : [];
    if (typeof e.typeDevoir !== "undefined") {
      this.typeDevoir = new uc(e.typeDevoir);
    }
    if (typeof e.readOnly !== "undefined") {
      this.readOnly = e.readOnly;
    }
    if (Array.isArray(e.eleves)) {
      this.eleves = e.eleves.map(n => new TOg(n));
    }
    if (typeof e.dateAffichage !== "undefined") {
      this.dateAffichage = e.dateAffichage;
    }
    if (typeof e.data !== "undefined") {
      this.data = e.data;
    }
    if (typeof e.uncSujet !== "undefined") {
      this.setUrlSujet(e.uncSujet);
    }
    if (typeof e.uncCorrige !== "undefined") {
      this.setUrlCorrige(e.uncCorrige);
    }
    if (typeof e.moyenne !== "undefined") {
      this.moyenne = e.moyenne;
    }
  }
  get moyenneAsNumeric() {
    if (FSr.isNotEmptyString(this.moyenne)) {
      return parseFloat(this.moyenne);
    } else {
      return 0;
    }
  }
  isExamenBlanc() {
    return this.idPeriode && this.idPeriode.indexOf("X") === 4;
  }
  getEtatImprimeForUniqueID(e) {
    const n = this.elementsProgramme.filter(s => e === s.idOrigineCatalogue);
    if (n.length > 0) {
      return {
        isExist: true,
        status: n[0].imprime
      };
    } else {
      return {
        isExist: false,
        status: false
      };
    }
  }
  setEtatImprime(e, n) {
    this.elementsProgramme.filter(s => e.idOrigineCatalogue === s.idOrigineCatalogue).forEach(s => {
      s.imprime = n;
    });
  }
  setUrlSujet(e) {
    if (typeof e !== "undefined") {
      this.uncSujet = e;
      this.sujet = FSr.isNotEmptyString(e) ? new eD9({
        id: e,
        type: Y9E.NODEVOIR,
        displayText: "Document joint",
        libelle: "Sujet",
        url: e,
        unc: e
      }) : undefined;
    } else {
      this.uncSujet = e;
      this.sujet = undefined;
    }
  }
  setUrlCorrige(e) {
    if (typeof e !== "undefined") {
      this.uncCorrige = e;
      this.corrige = FSr.isNotEmptyString(e) ? new eD9({
        id: e,
        type: Y9E.NODEVOIR,
        displayText: "Document joint",
        libelle: "Corrigé",
        url: e,
        unc: e
      }) : undefined;
    } else {
      this.uncCorrige = e;
      this.corrige = undefined;
    }
  }
  calculeMoyenne(e) {
    if (this.notationLettre) {
      this.moyenne = "";
    }
    const n = e.reduce((s, d) => {
      if (!Object.isExists(d.devoirs)) {
        return s;
      }
      try {
        if (d.devoirs[this.id].note === "") {
          return s;
        }
        if (FSr.isNumeric(d.devoirs[this.id].note) && Number.isFinite(Number(d.devoirs[this.id].note)) && !d.devoirs[this.id].nonSignificatif && !FSr.isNotEmptyString(d.devoirs[this.id].lettre)) {
          s.note += Number(d.devoirs[this.id].note);
          s.nbTotal++;
        }
      } catch {}
      return s;
    }, {
      note: 0,
      nbTotal: 0
    });
    if (n.nbTotal === 0 || n.note === 0) {
      this.moyenne = "";
    } else {
      let s = n.note / n.nbTotal;
      this.moyenne = Number.isFinite(s) ? s.toFixed(2) : "";
    }
  }
}
export class J01 {
  constructor(e = {}) {
    this.devoirs = Array.isArray(e.devoirs) ? e.devoirs.map(n => new n3h(n)) : [];
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new TOg(n)) : [];
  }
  get isClassePremiere() {
    if (this.eleves.length > 0 && typeof this.eleves[0].eleve.foStat !== "undefined") {
      const e = this.eleves[0].eleve.foStat;
      return e.startsWith("2212") || e.startsWith("2382");
    }
    return false;
  }
  get isClasseTerminale() {
    if (this.eleves.length > 0 && typeof this.eleves[0].eleve.foStat !== "undefined") {
      const e = this.eleves[0].eleve.foStat;
      return e.startsWith("2213") || e.startsWith("2383");
    }
    return false;
  }
}
class h0 {
  constructor(e = {
    id: 0,
    date: "",
    libelle: "",
    position: "",
    nomEnseignant: ""
  }) {
    this.id = e.id;
    this.date = e.date;
    this.libelle = e.libelle;
    this.position = e.position;
    this.nomEnseignant = e.nomEnseignant;
  }
}
export class rMy {
  constructor(e = {
    id: 0,
    imprime: false,
    libelle: "",
    position: "",
    modeCalcul: 0,
    ordre: 0,
    codeMatiere: "",
    codeSousMatiere: "",
    libelleMatiere: "",
    group_by_CHANGED: false
  }) {
    this.id = e.id;
    this.imprime = e.imprime;
    this.libelle = e.libelle;
    this.position = e.position;
    this.modeCalcul = e.modeCalcul;
    this.ordre = e.ordre;
    this.codeMatiere = e.codeMatiere;
    this.codeSousMatiere = e.codeSousMatiere;
    this.libelleMatiere = e.libelleMatiere;
    this.devoirs = Array.isArray(e.devoirs) ? e.devoirs.map(n => new h0(n)) : [];
    this.group_by_CHANGED = typeof e.group_by_CHANGED !== "undefined" && e.group_by_CHANGED;
  }
  get codeSousMatiereOrdre() {
    return `${this.codeSousMatiere}${this.ordre}`;
  }
}
class Qm {
  constructor(e = {
    codeSousMatiere: "",
    position: ""
  }) {
    this.codeSousMatiere = e.codeSousMatiere;
    this.position = e.position;
  }
}
export class DJH {
  constructor(e = {
    code: "",
    libelle: "",
    contenu: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.contenu = e.contenu;
  }
}
export class vml {
  constructor(e = {
    code: "",
    libelle: "",
    libelleCourt: "",
    moyenne: "",
    position: "",
    dateDebut: "",
    dateFin: "",
    ouverte: false,
    dateCalculMoyenne: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.libelleCourt = e.libelleCourt;
    this.moyenne = e.moyenne;
    this.position = e.position;
    this.dateDebut = e.dateDebut;
    this.dateFin = e.dateFin;
    this.ouverte = e.ouverte;
    this.dateCalculMoyenne = e.dateCalculMoyenne;
    this.appreciations = Array.isArray(e.appreciations) ? e.appreciations.map(n => new DJH(n)) : [];
    this.positionSSMat = Array.isArray(e.positionSSMat) ? e.positionSSMat.map(n => new Qm(n)) : [];
    this.elementsProgramme = Array.isArray(e.elementsProgramme) ? e.elementsProgramme.map(n => new rMy(n)) : [];
    this.elementsProgrammeImprimes = Array.isArray(e.elementsProgrammeImprimes) ? e.elementsProgrammeImprimes.map(n => new rMy(n)) : [];
  }
  isEnAttente() {
    return FSr.isNotEmptyString(this.moyenne) && Wyw.findIndex(e => this.moyenne === e) > -1;
  }
  isExamenBlanc() {
    return this.code && this.code.indexOf("X") === 4;
  }
}
export class PAx {
  constructor(e = {}) {
    this.periodes = Array.isArray(e.periodes) ? e.periodes.map(n => new vml(n)) : [];
    this.eleve = new oeU(e.eleve);
    this.previousPeriodes = Array.isArray(e.previousPeriodes) ? e.previousPeriodes.map(n => new vml(n)) : [];
    if (typeof e.currentPeriode !== "undefined") {
      this.currentPeriode = new vml(e.currentPeriode);
    }
    if (typeof e.currentMoyenne !== "undefined") {
      this.currentMoyenne = e.currentMoyenne;
    }
  }
  updateAppreciationsFromForm(e, n, s) {
    if (Object.isExists(e[this.eleve.id])) {
      const d = Object.keys(e[`${this.eleve.id}`]);
      for (let h of d) {
        const P = s.findIndex(Tt => Tt.code === h);
        let z = "";
        if (P > -1) {
          z = s[P].libelle;
        }
        const Ae = this.currentPeriode.appreciations.findIndex(Tt => Tt.code === h);
        if (Ae > -1) {
          this.currentPeriode.appreciations[Ae].contenu = YC.base64encode(e[`${this.eleve.id}`][h]);
        } else {
          const Tt = {
            code: h,
            libelle: z,
            contenu: YC.base64encode(e[`${this.eleve.id}`][h])
          };
          this.currentPeriode.appreciations.push(new DJH(Tt));
        }
        const Ve = this.periodes.findIndex(Tt => Tt.code === n);
        if (Ve > -1) {
          if (Ae > -1) {
            this.periodes[Ve].appreciations[Ae].contenu = YC.base64encode(e[`${this.eleve.id}`][h]);
          } else {
            const Tt = {
              code: h,
              libelle: z,
              contenu: YC.base64encode(e[`${this.eleve.id}`][h])
            };
            this.periodes[Ve].appreciations.push(new DJH(Tt));
          }
        }
      }
    }
  }
}
class Ph {
  constructor(e = {
    code: "",
    libelle: "",
    libelleCourt: "",
    moyenne: "",
    ouverte: false,
    etat: "",
    dateCalculMoyenne: "",
    dateDebut: "",
    dateFin: "",
    saisieAppreciation: false,
    appreciationGenerale: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.libelleCourt = e.libelleCourt;
    this.moyenne = e.moyenne;
    this.ouverte = e.ouverte;
    this.etat = e.etat;
    this.dateCalculMoyenne = e.dateCalculMoyenne;
    this.dateDebut = e.dateDebut;
    this.dateFin = e.dateFin;
    this.saisieAppreciation = e.saisieAppreciation;
    this.appreciationGenerale = e.appreciationGenerale;
    if (typeof e.fullMode !== "undefined") {
      this.fullMode = e.fullMode;
    }
  }
  get picto() {
    if (this.etat === Wx7.ETATS.OUVERTE) {
      return "";
    }
    let e = "fa ";
    switch (this.etat) {
      case Wx7.ETATS.CLOTUREE:
        e = `${e} fa-lock`;
        break;
      case Wx7.ETATS.PARTIELLE:
        e = `${e} fa-pencil-square-o`;
        break;
      case Wx7.ETATS.ATTENTE:
        e = `${e} fa-clock-o`;
        break;
      default:
        e = "";
    }
    return e;
  }
  get pictoMobile() {
    if (this.etat === Wx7.ETATS.OUVERTE) {
      return;
    }
    let e;
    switch (this.etat) {
      case Wx7.ETATS.CLOTUREE:
        e = {
          ios: "lock-closed-outline",
          md: "lock-closed-sharp"
        };
        break;
      case Wx7.ETATS.PARTIELLE:
        e = {
          ios: "create-outline",
          md: "create-sharp"
        };
        break;
      case Wx7.ETATS.ATTENTE:
        e = {
          ios: "time-outline",
          md: "time-sharp"
        };
    }
    return e;
  }
}
export class TLH {
  constructor(e = {}) {
    this.periodes = Array.isArray(e.periodes) ? e.periodes.map(n => new Ph(n)) : [];
    this.previousPeriodes = Array.isArray(e.previousPeriodes) ? e.previousPeriodes.map(n => new Ph(n)) : [];
    if (typeof e.currentPeriode !== "undefined") {
      this.currentPeriode = new Ph(e.currentPeriode);
    }
  }
}
class Gy {
  constructor(e = {
    code: "",
    libelle: "",
    nbMaxCaracteres: 200
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.nbMaxCaracteres = e.nbMaxCaracteres;
  }
}
class p0 {
  constructor(e = {
    saisieAppreciationClasse: false
  }) {
    this.appreciations = Array.isArray(e.appreciations) ? e.appreciations.map(n => new Gy(n)) : [];
    this.saisieAppreciationClasse = e.saisieAppreciationClasse;
  }
}
export class KIB {
  constructor(e = {}) {
    this.classe = new TLH(e.classe);
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new PAx(n)) : [];
    this.parametrage = new p0(e.parametrage);
  }
}
export class _ZG {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    type: "",
    idAuteur: 0
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.type = e.type;
    this.idAuteur = e.idAuteur;
    if (typeof e.editable !== "undefined") {
      this.editable = e.editable;
    }
  }
}
class vp {
  constructor(e = {
    nbCaractMax: 200
  }) {
    this.nbCaractMax = e.nbCaractMax;
  }
}
export class dbF {
  constructor(e = {}) {
    this.appreciations = Array.isArray(e.appreciations) ? e.appreciations.map(n => new _ZG(n)) : [];
    this.parametrage = new vp(e.parametrage);
  }
}
export class OTc {
  constructor(e = {
    id: 0,
    libelle: "",
    numLigne: 0
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.numLigne = e.numLigne;
  }
}
class Jm {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    nbCaracteres: 200
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.nbCaracteres = e.nbCaracteres;
  }
}
export class h3R {
  constructor(e = {
    id: "",
    code: "",
    libelle: "",
    date: "",
    text: ""
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.date = e.date;
    this.text = e.text;
  }
}
class $g {
  constructor(e = {
    PPModifVS: false,
    PPModifTout: false,
    longueurMaxAppPP: 400,
    saisieAppreciationClasse: false
  }) {
    this.mentions = Array.isArray(e.mentions) ? e.mentions.map(n => new OTc(n)) : [];
    this.appreciations = Array.isArray(e.appreciations) ? e.appreciations.map(n => new Jm(n)) : [];
    this.PPModifVS = e.PPModifVS;
    this.PPModifTout = e.PPModifTout;
    this.longueurMaxAppPP = e.longueurMaxAppPP;
    this.saisieAppreciationClasse = e.saisieAppreciationClasse;
  }
}
export class EWb {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    particule: "",
    photo: "",
    ordreArrivee: "",
    isFirst: false,
    isLast: false
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.photo = e.photo;
    this.ordreArrivee = typeof e.ordreArrivee !== "undefined" ? e.ordreArrivee : "";
    this.isFirst = typeof e.isFirst !== "undefined" && e.isFirst;
    this.isLast = typeof e.isLast !== "undefined" && e.isLast;
    this.appreciationPP = new h3R(e.appreciationPP);
    this.appreciationCE = new h3R(e.appreciationCE);
    this.appreciationVS = new h3R(e.appreciationVS);
    this.appreciationCN = new h3R(e.appreciationCN);
    this.mentionDuConseil = new h3R(e.mentionDuConseil);
  }
  updateAppreciationsFromForm(e) {
    if (typeof e.appreciationPP !== "undefined" && e.appreciationPP !== null) {
      this.appreciationPP.text = e.appreciationPP;
    }
    if (typeof e.appreciationCE !== "undefined" && e.appreciationCE !== null) {
      this.appreciationCE.text = e.appreciationCE;
    }
    if (typeof e.appreciationVS !== "undefined" && e.appreciationVS !== null) {
      this.appreciationVS.text = e.appreciationVS;
    }
    if (typeof e.appreciationCN !== "undefined" && e.appreciationCN !== null) {
      this.appreciationCN.text = e.appreciationCN;
    }
    if (Object.isExists(e.mentionDuConseil)) {
      this.mentionDuConseil = new h3R(e.mentionDuConseil);
    }
    this.appreciationPP.text &&= YC.base64encode(this.appreciationPP.text);
    this.appreciationVS.text &&= YC.base64encode(this.appreciationVS.text);
    this.appreciationCE.text &&= YC.base64encode(this.appreciationCE.text);
    this.appreciationCN.text &&= YC.base64encode(this.appreciationCN.text);
  }
  updateAppreciationsFromBackEnd(e) {
    if (Object.isExists(e.appreciationPP)) {
      this.appreciationPP = new h3R({
        ...this.appreciationPP,
        ...e.appreciationPP
      });
    }
    if (Object.isExists(e.appreciationCE)) {
      this.appreciationCE = new h3R({
        ...this.appreciationCE,
        ...e.appreciationCE
      });
    }
    if (Object.isExists(e.appreciationVS)) {
      this.appreciationVS = new h3R({
        ...this.appreciationVS,
        ...e.appreciationVS
      });
    }
    if (Object.isExists(e.appreciationCN)) {
      this.appreciationCN = new h3R({
        ...this.appreciationCN,
        ...e.appreciationCN
      });
    }
    if (Object.isExists(e.mentionDuConseil)) {
      this.mentionDuConseil = new h3R({
        ...this.mentionDuConseil,
        ...e.mentionDuConseil
      });
    }
  }
}
export class pW0 {
  constructor(e = {}) {
    this.parametrage = new $g(e.parametrage);
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new EWb(n)) : [];
    this.appreciationGenerale = new h3R(e.appreciationGenerale);
  }
}
export class Gp8 {
  constructor(e = {
    id: 0,
    codePeriode: "",
    libelle: "",
    dateDebut: "",
    dateFin: "",
    etat: ""
  }) {
    this.id = e.id;
    this.codePeriode = e.codePeriode;
    this.libelle = e.libelle;
    this.dateDebut = e.dateDebut;
    this.dateFin = e.dateFin;
    this.etat = e.etat;
  }
}
export class njk {
  constructor(e = {
    idOrigineCatalogue: 0,
    libelle: ""
  }) {
    this.idOrigineCatalogue = e.idOrigineCatalogue;
    this.libelle = e.libelle;
    this.afc = e.afc;
    this.periodes = Array.isArray(e.periodes) ? e.periodes.map(n => new Gp8(n)) : [];
  }
  get isAFC() {
    return this.afc === 1;
  }
}
export class ja7 {
  constructor(e = {
    code: "",
    libelle: "",
    idClasse: 0,
    degreClasse: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.idClasse = e.idClasse;
    this.degreClasse = e.degreClasse;
    if (typeof e.commentaire !== "undefined") {
      this.commentaire = e.commentaire;
    }
  }
  get id() {
    return this.code;
  }
}
export class fAR {
  constructor(e = {
    id: 0,
    libelle: "",
    description: "",
    idEtablissement: 0,
    idClasse: 0,
    idClasseAP: 0
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.description = e.description;
    this.idEtablissement = e.idEtablissement;
    this.idClasse = e.idClasse;
    this.idClasseAP = e.idClasseAP;
    if (typeof e.commentaire !== "undefined") {
      this.commentaire = e.commentaire;
    }
  }
}
export class aEG {
  constructor(e = {
    id: 0,
    libelle: "",
    description: "",
    idCycleEtablissement: 0,
    idClasse: 0,
    idClasseEPI: 0
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.description = e.description;
    this.idCycleEtablissement = e.idCycleEtablissement;
    this.idClasse = e.idClasse;
    this.idClasseEPI = e.idClasseEPI;
    if (typeof e.commentaire !== "undefined") {
      this.commentaire = e.commentaire;
    }
  }
}
class Xm {
  constructor(e = {}) {
    this.eleve = new oeU(e.eleve);
    if (typeof e.accompagnementsPerso !== "undefined") {
      this.accompagnementsPerso = Array.isArray(e.accompagnementsPerso) ? e.accompagnementsPerso.map(n => new fAR(n)) : [];
    }
    if (typeof e.EPIS !== "undefined") {
      this.EPIS = Array.isArray(e.EPIS) ? e.EPIS.map(n => new aEG(n)) : [];
    }
    if (typeof e.parcours !== "undefined") {
      this.parcours = Array.isArray(e.parcours) ? e.parcours.map(n => new ja7(n)) : [];
    }
  }
}
export class Zf$ {
  constructor(e = {
    saisiePossible: false,
    nbCaracteresMax: 0
  }) {
    this.saisiePossible = e.saisiePossible;
    this.nbCaracteresMax = e.nbCaracteresMax;
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new Xm(n)) : [];
    if (typeof e.accompagnementsPerso !== "undefined") {
      this.accompagnementsPerso = Array.isArray(e.accompagnementsPerso) ? e.accompagnementsPerso.map(n => new fAR(n)) : [];
    }
    if (typeof e.EPIS !== "undefined") {
      this.EPIS = Array.isArray(e.EPIS) ? e.EPIS.map(n => new aEG(n)) : [];
    }
    if (typeof e.parcours !== "undefined") {
      this.parcours = Array.isArray(e.parcours) ? e.parcours.map(n => new ja7(n)) : [];
    }
  }
}
export class C5z extends a_R {
  constructor(e = {
    id: 0,
    libelle: "",
    isSysteme: false
  }) {
    super(e);
    this.elementsProgramme = Array.isArray(e.elementsProgramme) ? e.elementsProgramme.map(n => new tnE(n)) : [];
    if (typeof e.editable !== "undefined") {
      this.editable = e.editable;
    }
    if (typeof e.temporaire !== "undefined") {
      this.temporaire = e.temporaire;
    }
  }
  setEP(e) {
    let n = this.elementsProgramme.findIndex(s => e.idOrigineCatalogue === s.idOrigineCatalogue);
    if (n > -1) {
      this.elementsProgramme[n] = new tnE({
        ...this.elementsProgramme[n],
        ...e
      });
    } else {
      this.elementsProgramme.push(new tnE(e));
    }
  }
  setCA(e, n) {
    let s = this.elementsProgramme.findIndex(d => e.idOrigineCatalogue === d.idOrigineCatalogue);
    if (s > -1) {
      this.elementsProgramme[s].setCA(n);
    } else {
      this.elementsProgramme.push(new tnE(e));
      this.elementsProgramme[this.elementsProgramme.length - 1].setCA(n);
    }
  }
  deleteEPCA(e, n) {
    if (Object.isExists(n)) {
      let s = this.elementsProgramme.findIndex(d => e.idOrigineCatalogue === d.idOrigineCatalogue);
      if (s > -1) {
        this.elementsProgramme[s].deleteCA(n);
      }
    } else {
      this.elementsProgramme = this.elementsProgramme.filter(s => e.idOrigineCatalogue !== s.idOrigineCatalogue);
    }
  }
  hasEPsAFC(e, n) {
    return this.elementsProgramme.filter(s => {
      const d = e.find(h => s.idOrigineCatalogue === h.idOrigineCatalogue);
      return !Object.isExists(d) || d.periodes.findIndex(h => n.codePeriode === h.codePeriode) === -1;
    }).some(s => s.isAFC);
  }
}
class em {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    modifiable: false
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.modifiable = e.modifiable;
    this.competences = Array.isArray(e.competences) ? e.competences.map(n => new C5z(n)) : [];
  }
  setCompetence(e) {
    let n = this.competences.findIndex(s => e.id === s.id);
    if (n > -1) {
      this.competences[n] = new C5z({
        ...this.competences[n],
        ...e
      });
    } else {
      this.competences.push(new C5z(e));
    }
  }
  deleteCompetence(e) {
    this.competences = this.competences.filter(n => e !== n.id);
  }
  setEP(e, n) {
    let s = this.competences.findIndex(d => e.id === d.id);
    if (s > -1) {
      this.competences[s].setEP(n);
    } else {
      this.competences.push(new C5z(e));
      this.competences[this.competences.length - 1].setEP(n);
    }
  }
  setCA(e, n, s) {
    let d = this.competences.findIndex(h => e.id === h.id);
    if (d > -1) {
      this.competences[d].setCA(n, s);
    } else {
      this.competences.push(new C5z(e));
      this.competences[this.competences.length - 1].setCA(n, s);
    }
  }
  deleteEPCA(e, n, s) {
    let d = this.competences.findIndex(h => e === h.id);
    if (d > -1) {
      this.competences[d].deleteEPCA(n, s);
    }
  }
}
export class dB8 {
  constructor(e = {}) {
    this.matieres = Array.isArray(e.matieres) ? e.matieres.map(n => new em(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  setCompetence(e, n) {
    let s = this.matieres.findIndex(d => e.id === d.id);
    if (s > -1) {
      this.matieres[s].setCompetence(n);
    } else {
      this.matieres.push(new em(e));
      this.matieres[this.matieres.length - 1].setCompetence(n);
    }
  }
  deleteCompetence(e, n) {
    let s = this.matieres.findIndex(d => e === d.id);
    if (s > -1) {
      this.matieres[s].deleteCompetence(n);
    }
  }
  setEP(e, n, s) {
    let d = this.matieres.findIndex(h => e.id === h.id);
    if (d > -1) {
      this.matieres[d].setEP(n, s);
    } else {
      this.matieres.push(new em(e));
      this.matieres[this.matieres.length - 1].setEP(n, s);
    }
  }
  setCA(e, n, s, d) {
    let h = this.matieres.findIndex(P => e.id === P.id);
    if (h > -1) {
      this.matieres[h].setCA(n, s, d);
    } else {
      this.matieres.push(new em(e));
      this.matieres[this.matieres.length - 1].setCA(n, s, d);
    }
  }
  deleteEPCA(e, n, s, d) {
    let h = this.matieres.findIndex(P => e === P.id);
    if (h > -1) {
      this.matieres[h].deleteEPCA(n, s, d);
    }
  }
}
class ev {
  constructor(e = {
    id: 0,
    contenu: "",
    date: "",
    idCdt: 0,
    matiere: "",
    typeSaisie: ""
  }) {
    this.id = e.id;
    this.contenu = e.contenu;
    this.date = e.date;
    this.idCdt = e.idCdt;
    this.matiere = e.matiere;
    this.typeSaisie = e.typeSaisie;
    this.documents = Array.isArray(e.documents) ? e.documents.map(n => new eD9(n)) : [];
  }
}
class ph {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new dB8(e[s]);
      }
    }
  }
  setCatalogue(e, n) {
    this[n] = new dB8(e);
  }
  setCompetence(e, n, s) {
    if (typeof this[s] === "undefined") {
      this[s] = new dB8();
    }
    this[s].setCompetence(e, n);
  }
  deleteCompetence(e, n, s) {
    if (typeof this[s] !== "undefined") {
      this[s].deleteCompetence(e, n);
    }
  }
  setEP(e, n, s, d) {
    if (typeof this[d] === "undefined") {
      this[d] = new dB8();
    }
    this[d].setEP(e, n, s);
  }
  setCA(e, n, s, d, h) {
    if (typeof this[h] === "undefined") {
      this[h] = new dB8();
    }
    this[h].setCA(e, n, s, d);
  }
  deleteEPCA(e, n, s, d, h) {
    if (typeof this[h] !== "undefined") {
      this[h].deleteEPCA(e, n, s, d);
    }
  }
}
class v0 {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new ph(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  setCatalogue(e, n, s) {
    if (typeof this[s] === "undefined") {
      this[s] = new ph();
    }
    this[s].setCatalogue(e, n);
  }
  setCompetence(e, n, s, d) {
    if (typeof this[d] === "undefined") {
      this[d] = new ph();
    }
    this[d].setCompetence(e, n, s);
  }
  deleteCompetence(e, n, s, d) {
    if (typeof this[d] !== "undefined") {
      this[d].deleteCompetence(e, n, s);
    }
  }
  setEP(e, n, s, d, h) {
    if (typeof this[h] === "undefined") {
      this[h] = new ph();
    }
    this[h].setEP(e, n, s, d);
  }
  setCA(e, n, s, d, h, P) {
    if (typeof this[P] === "undefined") {
      this[P] = new ph();
    }
    this[P].setCA(e, n, s, d, h);
  }
  deleteEPCA(e, n, s, d, h, P) {
    if (typeof this[P] !== "undefined") {
      this[P].deleteEPCA(e, n, s, d, h);
    }
  }
}
export class Vjg {
  constructor(e = {
    id: 0,
    idOrigineCatalogue: 0,
    libelle: "",
    imprime: false,
    ordre: 0,
    codeMatiere: "",
    codeSousMatiere: "",
    libelleMatiere: ""
  }) {
    this.id = e.id;
    this.idOrigineCatalogue = e.idOrigineCatalogue;
    this.libelle = e.libelle;
    this.imprime = e.imprime;
    this.ordre = e.ordre;
    this.codeMatiere = e.codeMatiere;
    this.codeSousMatiere = e.codeSousMatiere;
    this.libelleMatiere = e.libelleMatiere;
    this.composantes = Array.isArray(e.composantes) ? e.composantes.map(n => new fP(n)) : [];
    if (typeof e.idSecondElem !== "undefined") {
      this.idSecondElem = e.idSecondElem;
    }
    if (typeof e.positionSecondElem !== "undefined") {
      this.positionSecondElem = e.positionSecondElem;
    }
    if (typeof e.changeImprime !== "undefined") {
      this.changeImprime = e.changeImprime;
    }
    if (typeof e.editable !== "undefined") {
      this.editable = e.editable;
    }
  }
}
export class uuI {
  constructor(e = {
    nbElemProgImprimes: 0
  }) {
    this.nbElemProgImprimes = e.nbElemProgImprimes;
    this.elementsProgramme = Array.isArray(e.elementsProgramme) ? e.elementsProgramme.map(n => new Vjg(n)) : [];
  }
  get totalElementsProgramme() {
    return this.elementsProgramme.length;
  }
}
export class oi_ {
  constructor(e = {
    competenceEleve: undefined,
    evaluations: []
  }) {
    this.competenceEleve = new wqE(e.competenceEleve);
    this.evaluations = Array.isArray(e.evaluations) ? e.evaluations.map(n => new pFH(n)) : [];
  }
}
const gh = [{
  base: "",
  letters: "'"
}, {
  base: "A",
  letters: "AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ"
}, {
  base: "AA",
  letters: "Ꜳ"
}, {
  base: "AE",
  letters: "ÆǼǢ"
}, {
  base: "AO",
  letters: "Ꜵ"
}, {
  base: "AU",
  letters: "Ꜷ"
}, {
  base: "AV",
  letters: "ꜸꜺ"
}, {
  base: "AY",
  letters: "Ꜽ"
}, {
  base: "B",
  letters: "BⒷＢḂḄḆɃƂƁ"
}, {
  base: "C",
  letters: "CⒸＣĆĈĊČÇḈƇȻꜾ"
}, {
  base: "D",
  letters: "DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ"
}, {
  base: "DZ",
  letters: "ǱǄ"
}, {
  base: "Dz",
  letters: "ǲǅ"
}, {
  base: "E",
  letters: "EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ"
}, {
  base: "F",
  letters: "FⒻＦḞƑꝻ"
}, {
  base: "G",
  letters: "GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ"
}, {
  base: "H",
  letters: "HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ"
}, {
  base: "I",
  letters: "IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ"
}, {
  base: "J",
  letters: "JⒿＪĴɈ"
}, {
  base: "K",
  letters: "KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ"
}, {
  base: "L",
  letters: "LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ"
}, {
  base: "LJ",
  letters: "Ǉ"
}, {
  base: "Lj",
  letters: "ǈ"
}, {
  base: "M",
  letters: "MⓂＭḾṀṂⱮƜ"
}, {
  base: "N",
  letters: "NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ"
}, {
  base: "NJ",
  letters: "Ǌ"
}, {
  base: "Nj",
  letters: "ǋ"
}, {
  base: "O",
  letters: "OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ"
}, {
  base: "OI",
  letters: "Ƣ"
}, {
  base: "OO",
  letters: "Ꝏ"
}, {
  base: "OU",
  letters: "Ȣ"
}, {
  base: "P",
  letters: "PⓅＰṔṖƤⱣꝐꝒꝔ"
}, {
  base: "Q",
  letters: "QⓆＱꝖꝘɊ"
}, {
  base: "R",
  letters: "RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ"
}, {
  base: "S",
  letters: "SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ"
}, {
  base: "T",
  letters: "TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ"
}, {
  base: "TZ",
  letters: "Ꜩ"
}, {
  base: "U",
  letters: "UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ"
}, {
  base: "V",
  letters: "VⓋＶṼṾƲꝞɅ"
}, {
  base: "VY",
  letters: "Ꝡ"
}, {
  base: "W",
  letters: "WⓌＷẀẂŴẆẄẈⱲ"
}, {
  base: "X",
  letters: "XⓍＸẊẌ"
}, {
  base: "Y",
  letters: "YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ"
}, {
  base: "Z",
  letters: "ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ"
}, {
  base: "a",
  letters: "aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ"
}, {
  base: "aa",
  letters: "ꜳ"
}, {
  base: "ae",
  letters: "æǽǣ"
}, {
  base: "ao",
  letters: "ꜵ"
}, {
  base: "au",
  letters: "ꜷ"
}, {
  base: "av",
  letters: "ꜹꜻ"
}, {
  base: "ay",
  letters: "ꜽ"
}, {
  base: "b",
  letters: "bⓑｂḃḅḇƀƃɓ"
}, {
  base: "c",
  letters: "cⓒｃćĉċčçḉƈȼꜿↄ"
}, {
  base: "d",
  letters: "dⓓｄḋďḍḑḓḏđƌɖɗꝺ"
}, {
  base: "dz",
  letters: "ǳǆ"
}, {
  base: "e",
  letters: "eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ"
}, {
  base: "f",
  letters: "fⓕｆḟƒꝼ"
}, {
  base: "g",
  letters: "gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ"
}, {
  base: "h",
  letters: "hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ"
}, {
  base: "hv",
  letters: "ƕ"
}, {
  base: "i",
  letters: "iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı"
}, {
  base: "j",
  letters: "jⓙｊĵǰɉ"
}, {
  base: "k",
  letters: "kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ"
}, {
  base: "l",
  letters: "lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ"
}, {
  base: "lj",
  letters: "ǉ"
}, {
  base: "m",
  letters: "mⓜｍḿṁṃɱɯ"
}, {
  base: "n",
  letters: "nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ"
}, {
  base: "nj",
  letters: "ǌ"
}, {
  base: "o",
  letters: "oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ"
}, {
  base: "oi",
  letters: "ƣ"
}, {
  base: "ou",
  letters: "ȣ"
}, {
  base: "oo",
  letters: "ꝏ"
}, {
  base: "p",
  letters: "pⓟｐṕṗƥᵽꝑꝓꝕ"
}, {
  base: "q",
  letters: "qⓠｑɋꝗꝙ"
}, {
  base: "r",
  letters: "rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ"
}, {
  base: "s",
  letters: "sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ"
}, {
  base: "t",
  letters: "tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ"
}, {
  base: "tz",
  letters: "ꜩ"
}, {
  base: "u",
  letters: "uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ"
}, {
  base: "v",
  letters: "vⓥｖṽṿʋꝟʌ"
}, {
  base: "vy",
  letters: "ꝡ"
}, {
  base: "w",
  letters: "wⓦｗẁẃŵẇẅẘẉⱳ"
}, {
  base: "x",
  letters: "xⓧｘẋẍ"
}, {
  base: "y",
  letters: "yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ"
}, {
  base: "z",
  letters: "zⓩｚźẑżžẓẕƶȥɀⱬꝣ"
}];
export let dR7 = (() => {
  class R {
    static calculateDiacriticsMap() {
      if (!Object.isExists(R.diacriticsMap) || Object.isEmpty(R.diacriticsMap)) {
        R.diacriticsMap = {};
        for (let n of gh) {
          const s = n.letters.split("");
          for (let d of s) {
            R.diacriticsMap[d] = n.base;
          }
        }
      }
    }
    static replaceDiacritics(n) {
      return (n = (n = n.replace("'", "")).replace("-", "")).replace(/[^\u0000-\u007e]/g, d => R.diacriticsMap[d] || d);
    }
    static mergePeriodes(n) {
      let s = n.edGroupBy("codePeriode");
      let d = [];
      const h = Object.keys(s);
      for (let P of h) {
        const z = s[P].reduce((Ae, Ve) => {
          Ae.etat = R.getPuissancePeriodeEtat(Ae.etat) > R.getPuissancePeriodeEtat(Ve.etat) ? Ae.etat : Ve.etat;
          return Ae;
        });
        d.push(z);
      }
      return d;
    }
    static getPuissancePeriodeEtat(n) {
      const s = {
        cloture: 4,
        partiel: 3,
        "": 2,
        ouvert: 1
      };
      if (s.hasOwnProperty(n)) {
        return s[n];
      } else {
        return 0;
      }
    }
    static filterDisplayPeriodeSansR(n) {
      const s = new RegExp(R.regexPeriodeRelevee);
      return n.filter(d => !s.test(d.codePeriode));
    }
    static filterDisplayPeriodeReleve(n) {
      const s = new RegExp(R.regexPeriodeRelevee);
      return n.filter(d => s.test(d.codePeriode));
    }
    static periodeNotAvailable(n, s) {
      return !!Object.isExists(s) && n.findIndex(h => s.codePeriode === h.codePeriode) === -1;
    }
    static sortEleves(n, s = false, d = false) {
      if (Array.isArray(n)) {
        R.calculateDiacriticsMap();
        return n.sort(s ? (h, P) => {
          const z = d ? h.eleve : h;
          const Ae = d ? P.eleve : P;
          let Ve = `${z.codeClasse} ${z.ordreArrivee} ${z.nom} ${z.prenom}`;
          Ve = R.replaceDiacritics(Ve).toUpperCase();
          let Tt = `${Ae.codeClasse} ${Ae.ordreArrivee} ${Ae.nom} ${Ae.prenom}`;
          Tt = R.replaceDiacritics(Tt).toUpperCase();
          return Ve.localeCompare(Tt);
        } : (h, P) => {
          const z = d ? h.eleve : h;
          const Ae = d ? P.eleve : P;
          let Ve = `${z.ordreArrivee} ${z.nom} ${z.prenom}`;
          Ve = R.replaceDiacritics(Ve).toUpperCase();
          let Tt = `${Ae.ordreArrivee} ${Ae.nom} ${Ae.prenom}`;
          Tt = R.replaceDiacritics(Tt).toUpperCase();
          return Ve.localeCompare(Tt);
        });
      } else {
        return n;
      }
    }
    static sortElevesPP(n, s = false) {
      if (Array.isArray(n)) {
        R.calculateDiacriticsMap();
        return n.sort(s ? (d, h) => {
          let P = `${d.codeClasse} ${d.ordreArrivee} ${d.nom} ${d.prenom}`;
          P = R.replaceDiacritics(P).toUpperCase();
          let z = `${h.codeClasse} ${h.ordreArrivee} ${h.nom} ${h.prenom}`;
          z = R.replaceDiacritics(z).toUpperCase();
          return P.localeCompare(z);
        } : (d, h) => {
          let P = `${d.ordreArrivee} ${d.nom} ${d.prenom}`;
          P = R.replaceDiacritics(P).toUpperCase();
          let z = `${h.ordreArrivee} ${h.nom} ${h.prenom}`;
          z = R.replaceDiacritics(z).toUpperCase();
          return P.localeCompare(z);
        });
      } else {
        return n;
      }
    }
    static sortElevesAE(n, s = false) {
      if (Array.isArray(n)) {
        R.calculateDiacriticsMap();
        return n.sort(s ? (d, h) => {
          let P = `${d.classeLibelle} ${d.nom} ${d.prenom}`;
          P = R.replaceDiacritics(P).toUpperCase();
          let z = `${h.classeLibelle} ${h.nom} ${h.prenom}`;
          z = R.replaceDiacritics(z).toUpperCase();
          return P.localeCompare(z);
        } : (d, h) => {
          let P = `${d.nom} ${d.prenom}`;
          P = R.replaceDiacritics(P).toUpperCase();
          let z = `${h.nom} ${h.prenom}`;
          z = R.replaceDiacritics(z).toUpperCase();
          return P.localeCompare(z);
        });
      } else {
        return n;
      }
    }
    static translateModeDeCalcul(n) {
      if (n === 1) {
        return "Toutes les évaluations ont la même valeur. L'arrondi supérieur est conservé.";
      } else if (n === 2) {
        return "Seule la dernière évaluation compte.";
      } else if (n === 3) {
        return "La meilleure évaluation.";
      } else if (n === 4) {
        return "L'évaluation la plus fréquente. La meilleure si les fréquences sont égales.";
      } else if (n === 5) {
        return "Toutes les évaluations ont la même valeur. L'arrondi à la couleur la plus proche est conservé.";
      } else {
        return "Saisie manuelle";
      }
    }
    static noteLettreValidatorSync(n, s, d = true) {
      const h = n.trim();
      return h === "" || !!d && (h.toLowerCase() === Gxt.ABS || h.toLowerCase() === Gxt.DISP || h.toLowerCase() === Gxt.NE) || s.findIndex(P => P === h) > -1;
    }
    static noteNumericValidatorSync(n, s, d, h = true) {
      let P = n.trim();
      if (P.startsWith("(") && P.endsWith(")")) {
        P = P.replace("(", "").replace(")", "");
      }
      if (P === "") {
        return true;
      }
      if (!d && P === Gxt.EA) {
        return false;
      }
      if (FSr.isNumeric(P) && Number.isFinite(Number(P))) {
        const z = Number(P);
        if (z < 0 && !s.noteNegative || z > s.noteSur) {
          return false;
        }
      } else if (h && [Gxt.ABS, Gxt.DISP, Gxt.NE, Gxt.EA].findIndex(z => n === z) <= -1) {
        return false;
      }
      return true;
    }
    static getDateAffichageDevoirNote(n, s, d) {
      let h = 0;
      h = s === true ? d.avecDecalageLSUN !== "1" || d.avecDecalage === "2" ? 0 : d.nbreJoursDecalageLSUN : d.avecDecalage !== "1" ? 0 : d.nbreJoursDecalage;
      return C_1.addNbJourToDate(n, h);
    }
    static isPourcentageMax(n, s, d, h) {
      if (!Object.isExists(n)) {
        return false;
      }
      let P = typeof d !== "undefined" ? d : "";
      let z = typeof h !== "undefined" && h;
      let Ae = new wqE(n);
      if (P !== "") {
        Ae.pourcentageEval1 = Ae.pourcentagesParMatiere.detailMatieres[P].pourcentageEval1;
        Ae.pourcentageEval2 = Ae.pourcentagesParMatiere.detailMatieres[P].pourcentageEval2;
        Ae.pourcentageEval3 = Ae.pourcentagesParMatiere.detailMatieres[P].pourcentageEval3;
        Ae.pourcentageEval4 = Ae.pourcentagesParMatiere.detailMatieres[P].pourcentageEval4;
      } else if (z) {
        Ae.pourcentageEval1 = Ae.pourcentagesParMatiere.pourcentageEval1;
        Ae.pourcentageEval2 = Ae.pourcentagesParMatiere.pourcentageEval2;
        Ae.pourcentageEval3 = Ae.pourcentagesParMatiere.pourcentageEval3;
        Ae.pourcentageEval4 = Ae.pourcentagesParMatiere.pourcentageEval4;
      }
      const Ve = [Ae.pourcentageEval1, Ae.pourcentageEval2, Ae.pourcentageEval3, Ae.pourcentageEval4];
      if (!Object.isExists(Ae[`pourcentageEval${s}`])) {
        return false;
      }
      let Tt = 0;
      Ve.forEach((Vt, Hn) => {
        Tt += Vt * (Hn + 1);
      });
      Tt = Math.round(Tt / 100);
      return s === "" + Tt;
    }
    static calculMoyenneComposante(n, s, d) {
      if (!Object.isExists(n)) {
        return 0;
      }
      let h = typeof s !== "undefined" ? s : "";
      let P = typeof d !== "undefined" && d;
      let z = new wqE(n);
      if (h !== "") {
        z.pourcentageEval1 = z.pourcentagesParMatiere.detailMatieres[h].pourcentageEval1;
        z.pourcentageEval2 = z.pourcentagesParMatiere.detailMatieres[h].pourcentageEval2;
        z.pourcentageEval3 = z.pourcentagesParMatiere.detailMatieres[h].pourcentageEval3;
        z.pourcentageEval4 = z.pourcentagesParMatiere.detailMatieres[h].pourcentageEval4;
      } else if (P) {
        z.pourcentageEval1 = z.pourcentagesParMatiere.pourcentageEval1;
        z.pourcentageEval2 = z.pourcentagesParMatiere.pourcentageEval2;
        z.pourcentageEval3 = z.pourcentagesParMatiere.pourcentageEval3;
        z.pourcentageEval4 = z.pourcentagesParMatiere.pourcentageEval4;
      }
      let Ve = 0;
      [z.pourcentageEval1, z.pourcentageEval2, z.pourcentageEval3, z.pourcentageEval4].forEach((Tt, Vt) => {
        Ve += Tt * Vt;
      });
      Ve /= 3;
      return Ve;
    }
    static calcMoyenneEleve(n, s, d, h) {
      let P;
      P = s.selectedPeriode.codePeriode === Wx7.CODES.ANNEE ? R.calculMoyenneAnnee(d, s.selectedClasse, s.selectedPeriode, s.selectedMatiere, n, h) : s.selectedPeriode.codePeriode[4] === "X" || s.selectedPeriode.codePeriode[4] === "R" && s.selectedPeriode.codePeriode[0] !== "H" ? R.calculMoyennePeriodeXR(d, s.selectedClasse, s.selectedPeriode, s.selectedMatiere, n, h) : R.calculMoyennePeriodeBulletin(d, s.selectedClasse, s.selectedPeriode, s.selectedMatiere, n, h);
      return P;
    }
    static calculMoyenneAnnee(n, s, d, h, P, z) {
      if (h.avecSousMatiere === 0) {
        if (Sa_MOYENNE_PERIODE_TOUTES_LES_NOTES === s.pcpMoyAnnuelle) {
          return R.calculMoyenneToutesLesNotes(n, s, h, P.devoirs, z);
        } else {
          return R.calculMoyenneDesMoyennesPeriodes(n, s, h, P, z);
        }
      } else if (Sa_MOYENNE_PERIODE_TOUTES_LES_NOTES === s.pcpMoyAnnuelle) {
        if (Sa_MOYENNE_MATIERE_SOUS_MATIERE === s.pcpMoyMatiere) {
          return R.calculMoyenneDesSSMatReleve(n, s, d, h, P, z);
        } else {
          return R.calculMoyenneToutesLesNotes(n, s, h, P.devoirs, z);
        }
      } else if (Sa_MOYENNE_MATIERE_SOUS_MATIERE === s.pcpMoyMatiere) {
        return R.calculMoyenneDesSSMatReleve(n, s, d, h, P, z);
      } else {
        return R.calculMoyenneDesMoyennesPeriodes(n, s, h, P, z);
      }
    }
    static calculMoyennePeriodeXR(n, s, d, h, P, z) {
      let Ae = P.devoirs;
      if (d.codePeriode[4] === "R" && d.codePeriode[0] !== "H") {
        Ae = Object.keys(P.devoirs).map(Ve => P.devoirs[Ve]).filter(Ve => Ve.date <= d.dateFin && Ve.date >= d.dateDebut).reduce((Ve, Tt) => {
          Ve[Tt.idDevoir] = Tt;
          return Ve;
        }, {});
      }
      if (h.avecSousMatiere === 0) {
        return R.calculMoyenneToutesLesNotes(n, s, h, Ae, z, d.codePeriode);
      }
      if (Sa_MOYENNE_MATIERE_TOUTES_LES_NOTES === h.calculSousMatiere) {
        return R.calculMoyenneToutesLesNotes(n, s, h, Ae, z, d.codePeriode);
      }
      {
        let Ve = d.matieres.filter(fr => h.code === fr.code && fr.avecSousMatiere === 0);
        let Tt = 0;
        let Vt = 0;
        let Hn = false;
        for (let fr of Ve) {
          Vt += R.calculMoyennePeriodeXR(n, s, d, fr, P, z) * fr.coef;
          Tt += fr.coef;
          if (z && Vt === parseInt(Wyw[0], 10)) {
            Hn = true;
            break;
          }
        }
        if (Hn) {
          return parseInt(Wyw[0], 10);
        }
        let Ci = Vt / Tt;
        Ci = Number(Ci.toFixed(2));
        return Ci;
      }
    }
    static calculMoyennePeriodeBulletin(n, s, d, h, P, z) {
      if (h.avecSousMatiere === 0) {
        if (typeof s.pcpMoyPeriode === "undefined" || typeof s.pcpMoyPeriode != "number" || Sa_MOYENNE_PERIODE_TOUTES_LES_NOTES === s.pcpMoyPeriode) {
          let Ae = Object.keys(P.devoirs).map(Ve => P.devoirs[Ve]).filter(Ve => FSr.isNotEmptyString(Ve.idPeriode) && Ve.idPeriode.indexOf(d.codePeriode) >= 0).reduce((Ve, Tt) => {
            Ve[Tt.idDevoir] = Tt;
            return Ve;
          }, {});
          return R.calculMoyenneToutesLesNotes(n, s, h, Ae, z);
        }
        return R.calculMoyenneDeMoyennePeriodeXR(n, s, d, h, P, z);
      }
      if (Sa_MOYENNE_PERIODE_TOUTES_LES_NOTES === s.pcpMoyPeriode) {
        if (Sa_MOYENNE_MATIERE_TOUTES_LES_NOTES === h.calculSousMatiere) {
          let Ae = Object.keys(P.devoirs).map(Ve => P.devoirs[Ve]).filter(Ve => FSr.isNotEmptyString(Ve.idPeriode) && Ve.idPeriode.indexOf(d.codePeriode) >= 0).reduce((Ve, Tt) => {
            Ve[Tt.idDevoir] = Tt;
            return Ve;
          }, {});
          return R.calculMoyenneToutesLesNotes(n, s, h, Ae, z);
        }
        return R.calculMoyenneDesSSMatReleve(n, s, d, h, P, z);
      }
      if (Sa_MOYENNE_MATIERE_SOUS_MATIERE === s.pcpMoyMatiere) {
        return R.calculMoyenneDesSSMatReleve(n, s, d, h, P, z);
      } else {
        return R.calculMoyenneDeMoyennePeriodeXR(n, s, d, h, P, z);
      }
    }
    static calculMoyenneToutesLesNotes(n, s, d, h, P, z) {
      if (!Object.isExists(h) || Object.keys(h).length === 0) {
        return NaN;
      }
      let Ve;
      let Ae = z && z.length > 4 && z[4] === "X";
      Ve = FSr.isNotEmptyString(d.codeSSMatiere) ? Object.keys(h).map(fr => h[fr]).filter(fr => d.code === fr.codeMatiere && d.codeSSMatiere === fr.codeSSMatiere) : Object.keys(h).map(fr => h[fr]).filter(fr => d.code === fr.codeMatiere);
      if (P && Ve.some(ss => !ss.notationLettre && ss.isNoteLettreEnAttente)) {
        return parseInt(Wyw[0], 10);
      }
      let Tt = 0;
      let Vt = 0;
      Ve.forEach(fr => {
        if (fr.note !== "" && fr.notationLettre !== true && FSr.isNumeric(fr.note) && Number.isFinite(Number(fr.note)) && (!fr.nonSignificatif || Ae) && !FSr.isNotEmptyString(fr.lettre)) {
          Vt += Number(fr.coef);
          Tt += Number(fr.note) / Number(fr.noteSur) * Number(fr.coef);
        }
      });
      let Hn = Tt / Vt;
      const Ci = n.note.etabsParams.find(fr => s.etabId === fr.id);
      if (Object.isExists(Ci) && Ci.moyenneSur > 0) {
        Hn *= parseInt(`${Ci.moyenneSur}`, 10);
      } else {
        Hn *= 20;
      }
      Hn = Number(Hn.toFixed(2));
      return Hn;
    }
    static calculMoyenneDeMoyennePeriodeXR(n, s, d, h, P, z) {
      let Ae = s.periodes.filter(Ci => Ci.codePeriode.startsWith(`${d.codePeriode}R`) && (Ci.menusNotes.findIndex(fr => fr === "notes") > -1 || Ci.codePeriode[4] === "R" && Ci.codePeriode[0] !== "H"));
      let Ve = 0;
      let Tt = 0;
      let Vt = false;
      for (let Ci of Ae) {
        const fr = R.calculMoyennePeriodeXR(n, s, Ci, h, P, z) * Ci.coef;
        if (typeof fr == "number" && Number.isFinite(fr)) {
          Tt += fr;
          Ve += Ci.coef;
        }
        if (z && typeof fr == "number" && Number.isFinite(fr) && fr === parseInt(Wyw[0], 10)) {
          Vt = true;
          break;
        }
      }
      if (Vt) {
        return parseInt(Wyw[0], 10);
      }
      let Hn = Tt / Ve;
      Hn = Number(Hn.toFixed(2));
      return Hn;
    }
    static calculMoyenneDesSSMatReleve(n, s, d, h, P, z) {
      let Ae = d.matieres.filter(Ci => h.code === Ci.code && Ci.avecSousMatiere === 0);
      let Ve = 0;
      let Tt = 0;
      let Vt = false;
      for (let Ci of Ae) {
        let fr = R.calculMoyennePeriodeBulletin(n, s, d, Ci, P, z) * Ci.coef;
        if (typeof fr == "number" && Number.isFinite(fr)) {
          Tt += fr;
          Ve += Ci.coef;
        }
        if (z && typeof fr == "number" && Number.isFinite(fr) && fr === parseInt(Wyw[0], 10)) {
          Vt = true;
          break;
        }
      }
      if (Vt) {
        return parseInt(Wyw[0], 10);
      }
      let Hn = Tt / Ve;
      Hn = Number(Hn.toFixed(2));
      return Hn;
    }
    static calculMoyenneDesMoyennesPeriodes(n, s, d, h, P) {
      let z = s.periodes.filter(Hn => Hn.sousPeriode === 0 && (Hn.menusNotes.findIndex(Ci => Ci === "notes") > -1 || Hn.codePeriode[4] === "R" && Hn.codePeriode[0] !== "H"));
      z.edRemove(Hn => Wx7.CODES.ANNEE === Hn.codePeriode);
      let Ae = 0;
      let Ve = 0;
      let Tt = false;
      for (let Hn of z) {
        const Ci = R.calculMoyennePeriodeBulletin(n, s, Hn, d, h, P) * Hn.coef;
        if (!isNaN(Ci)) {
          Ve += Ci;
          Ae += Hn.coef;
        }
        if (P && !isNaN(Ci) && Ci === parseInt(Wyw[0], 10)) {
          Tt = true;
          break;
        }
      }
      if (Tt) {
        return parseInt(Wyw[0], 10);
      }
      let Vt = Ve / Ae;
      Vt = Number(Vt.toFixed(2));
      return Vt;
    }
    static calculerPourcentagesEvaluation(n, s, d) {
      const h = n.length;
      for (let P of s.elementsProgramme) {
        if (Object.isExists(d) && d.id !== P.id) {
          continue;
        }
        let z = 0;
        let Ae = 0;
        let Ve = 0;
        let Tt = 0;
        let Vt = 0;
        for (let Hn of n) {
          const Ci = Hn.devoirs[s.id];
          if (!Object.isExists(Ci)) {
            z++;
            continue;
          }
          const fr = Ci.elementsProgramme.find(ss => ss.id === P.id);
          if (Object.isExists(fr) && fr.evaluation) {
            if (+fr.evaluation <= 0) {
              z++;
            }
            if (fr.evaluation === "1") {
              Ae++;
            }
            if (fr.evaluation === "2") {
              Ve++;
            }
            if (fr.evaluation === "3") {
              Tt++;
            }
            if (fr.evaluation === "4") {
              Vt++;
            }
          } else {
            z++;
          }
        }
        if (z !== h) {
          P.pourcentageEvaluation0 = "0";
          P.pourcentageEvaluation1 = (Ae / (h - z) * 100).toFixed(1);
          P.pourcentageEvaluation2 = (Ve / (h - z) * 100).toFixed(1);
          P.pourcentageEvaluation3 = (Tt / (h - z) * 100).toFixed(1);
          P.pourcentageEvaluation4 = (Vt / (h - z) * 100).toFixed(1);
        } else {
          P.pourcentageEvaluation0 = "0";
          P.pourcentageEvaluation1 = "0";
          P.pourcentageEvaluation2 = "0";
          P.pourcentageEvaluation3 = "0";
          P.pourcentageEvaluation4 = "0";
        }
      }
    }
  }
  R.regexPeriodeRelevee = /A\d{3}R\d{3}/;
  return R;
})();
if (Array.prototype.edPluck) {
  throw new Error("Array.prototype.edPluck is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edPluck", {
  enumerable: false,
  value: function mh(R) {
    return this.map(e => e[R]);
  }
});
if (Array.prototype.edFlatten) {
  throw new Error("Array.edFlatten is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edFlatten", {
  enumerable: false,
  value: function Qp() {
    return this.reduce((R, e) => R.concat(e), []);
  }
});
if (Array.prototype.edUniq) {
  throw new Error("Array.edUniq is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edUniq", {
  enumerable: false,
  value: function Jp(R) {
    return this.filter((e, n, s) => {
      const d = Array.isArray(R) ? R : [R];
      return n === s.findIndex(h => d.every(P => e[P] === h[P]));
    });
  }
});
if (Array.prototype.edTap) {
  throw new Error("Array.edTap is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edTap", {
  enumerable: false,
  value: function ny(R) {
    return R(this);
  }
});
if (Array.prototype.edSortBy) {
  throw new Error("Array.edSortBy is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edSortBy", {
  enumerable: false,
  value: function y0(R, e, n) {
    this.sort((s, d) => {
      if (n) {
        dR7.calculateDiacriticsMap();
        const h = dR7.replaceDiacritics(s[R]).toUpperCase();
        const P = dR7.replaceDiacritics(d[R]).toUpperCase();
        return h.localeCompare(P);
      }
      if (typeof s[R] == "string") {
        return `${s[R]}`.localeCompare(`${d[R]}`);
      } else if (s[R] === d[R]) {
        return 0;
      } else if (s[R] < d[R]) {
        return -1;
      } else {
        return 1;
      }
    });
    if (e === true) {
      return this.reverse();
    } else {
      return this;
    }
  }
});
if (Array.prototype.edPluckFlatten) {
  throw new Error("Array.edPluckFlatten is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edPluckFlatten", {
  enumerable: false,
  value: function nv(R) {
    return this.reduce((e, n) => Array.isArray(n[R]) ? [...e, ...n[R]] : [...e, n[R]], []);
  }
});
if (Array.prototype.edGroupBy) {
  throw new Error("Array.edGroupBy is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edGroupBy", {
  enumerable: false,
  value: function iy(R) {
    return this.reduce((e, n) => {
      const s = `${n[R]}`;
      if (!Array.isArray(e[s])) {
        e[s] = [];
      }
      e[s].push(n);
      return e;
    }, {});
  }
});
if (Array.prototype.edPartition) {
  throw new Error("Array.edPartition is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edPartition", {
  enumerable: false,
  value: function iv(R, e) {
    return this.reduce((n, s) => {
      if (s[R] === e) {
        n[0].push(s);
      } else {
        n[1].push(s);
      }
      return n;
    }, [[], []]);
  }
});
if (Array.prototype.edInsertAt) {
  throw new Error("Array.edInsertAt is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edInsertAt", {
  enumerable: false,
  value: function rv(R, e) {
    this.splice(R, 0, e);
  }
});
if (Array.prototype.edChunk) {
  throw new Error("Array.edChunk is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edChunk", {
  enumerable: false,
  value: function ry(R) {
    let e = [];
    const n = [...this];
    for (; n.length;) {
      e.push(n.splice(0, R));
    }
    return e;
  }
});
if (Array.prototype.edRemove) {
  throw new Error("Array.edRemove is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edRemove", {
  enumerable: false,
  value: function Wf(R) {
    let e = [];
    const n = this.filter((s, d) => R(s) && e.unshift(d));
    e.forEach(s => {
      this.splice(s, 1);
    });
    return n;
  }
});
if (Array.prototype.edInsertUpdate) {
  throw new Error("Array.edInsertUpdate is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edInsertUpdate", {
  enumerable: false,
  value: function sv(R, e, n = true) {
    const s = this.findIndex(d => e(d));
    if (s > -1) {
      this[s] = R;
    } else if (n) {
      this.push(R);
    } else {
      this.unshift(R);
    }
  }
});
if (Array.prototype.edIntersect) {
  throw new Error("Array.edIntersect is already defined - overriding it will be dangerous.");
}
Object.defineProperty(Array.prototype, "edIntersect", {
  enumerable: false,
  value: function ov(R) {
    return this.filter(e => R.findIndex(n => n === e) > -1);
  }
});
class Gc {
  static isGuid(e) {
    return e && Gc.validator.test(e);
  }
  static create(e = false) {
    if (e && typeof window !== "undefined" && typeof window.crypto !== "undefined" && typeof window.crypto.getRandomValues !== "undefined") {
      let n = new Uint16Array(8);
      window.crypto.getRandomValues(n);
      return [Gc.pad4(n[0]) + Gc.pad4(n[1]), Gc.pad4(n[2]), Gc.pad4(n[3]), Gc.pad4(n[4]), Gc.pad4(n[5]) + Gc.pad4(n[6]) + Gc.pad4(n[7])].join("-");
    }
    return [Gc.gen(2), Gc.gen(1), Gc.gen(1), Gc.gen(1), Gc.gen(3)].join("-");
  }
  static pad4(e) {
    let n = e.toString(16);
    for (; n.length < 4;) {
      n = "0" + n;
    }
    return n;
  }
  static gen(e) {
    let n = "";
    for (let s = 0; s < e; s++) {
      n += ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
    }
    return n;
  }
}
Gc.validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i");
export class Fp2 {
  static getTextColor(e) {
    let n = "#000";
    if (!e || e === "transparent") {
      return n;
    }
    const s = e.substring(1);
    const d = parseInt(s, 16);
    if ((d >> 16 & 255) * 0.2126 + (d >> 8 & 255) * 0.7152 + (d >> 0 & 255) * 0.0722 < 128) {
      n = "#FFF";
    }
    return n;
  }
}
export const kCV = (R = class {}) => class extends R {
  constructor() {
    super(...arguments);
    this.componentDestroyed$ = new v.x();
  }
  onComponentDestroy() {
    this.componentDestroyed$.next();
  }
  ngOnDestroy() {
    this.onComponentDestroy();
  }
};
export const i6X = {
  0: "Erreur d'initialisation de la base locale : ",
  1: "La base locale est indisponible.",
  2: "L'entrée de la base locale est expirée : ",
  3: "Aucune clé correspondante: ",
  4: "L'entrée de la base locale n'a pas été invalidée car aucune connexion internet n'est disponible pour le moment.",
  5: "Impossible de supprimer la base locale"
};
export class V1j {}
function tm(R) {
  Object.freeze(R);
  if (!Object.isExists(R)) {
    return R;
  }
  const e = typeof R == "function";
  Object.getOwnPropertyNames(R).forEach(n => {
    if (!n.startsWith("ɵ")) {
      if (Object.prototype.hasOwnProperty.call(R, n) && (!e || n !== "caller" && n !== "callee" && n !== "arguments") && R[n] !== null && (typeof R[n] == "object" || typeof R[n] == "function") && !Object.isFrozen(R[n])) {
        tm(R[n]);
      }
    }
  });
  return R;
}
let ay = true;
export function _j$() {
  ay = false;
}
const bf = () => ay;
const _0 = R => R.pipe((0, q.B)());
export const z43 = R => R.pipe((0, q.B)({
  connector: () => new C.t(1),
  resetOnError: false,
  resetOnComplete: false,
  resetOnRefCountZero: false
}));
export let lbX = (() => {
  class R {
    constructor(n) {
      this.ngZone = n;
      this._globalDevtools = window.__REDUX_DEVTOOLS_EXTENSION__ || window.devToolsExtension;
      this._instanceId = `ed-store-${Date.now()}`;
      this._baseState = {};
      this._isActiveDevtool = false;
      if (this._globalDevtools) {
        this.ngZone.runOutsideAngular(() => {
          this._localDevTool = this._globalDevtools.connect({
            name: "EDCommon",
            instanceId: this._instanceId,
            trace: true,
            traceLimit: 25
          });
          this._isActiveDevtool = !!this._localDevTool;
          if (this._isActiveDevtool) {
            this._localDevTool.init(this._baseState);
          }
        });
      }
    }
    isActive() {
      return this._isActiveDevtool;
    }
    send(n, s, d) {
      return !!this._isActiveDevtool && (this._localDevTool.send(`${n}.${s}`, Object.assign(this._baseState, {
        [n]: d
      }), false, this.instanceId), true);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(t.R0b));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
const Xp = new Map();
let qp = 0;
const lv = new t.OlP("INITIALIZE_STORE_WITH_DEFAULT_STATE", {
  providedIn: "root",
  factory: () => true
});
export let yh4 = (() => {
  class R {
    constructor(n, s = true) {
      this.devTool = n;
      this.initState = s;
      if (bf()) {
        (function gt(R, e) {
          if (!R || !R.classInstanceRef && !R.initialState && !R.className) {
            console.error(`@ClassConfig({ classInstanceRef; initialState; className }) are missing in ${e}`);
          }
        })(this.classConfig, this.className);
      }
      this._store = new C.t(1);
      this._guid = `${this.className}_${Gc.create()}`;
      Xp.set(this.guid, this);
      this._destroyed = false;
      if (s === true) {
        this.store = this.classConfig.classInstanceRef.initialState();
      }
    }
    ngOnDestroy() {
      this.destroy();
    }
    destroy() {
      Xp.delete(this.guid);
      this.reset();
      this._store.complete();
      this._destroyed = true;
    }
    get guid() {
      return this._guid;
    }
    get classConfig() {
      return this.constructor.classConfig;
    }
    get className() {
      return this.classConfig.className;
    }
    get lastModified() {
      return this._lastModified;
    }
    get expireableTTL() {
      if (typeof this.classConfig.expire !== "undefined") {
        return this.classConfig.expire.ttl;
      } else {
        return qp;
      }
    }
    get snapshot() {
      return this._currentValue;
    }
    get store() {
      return this.snapshot;
    }
    set store(n) {
      if (this._destroyed) {
        return;
      }
      let s = this._T_NewInstance(this.classConfig.classInstanceRef, n);
      if (bf()) {
        const d = Object.isExists(this.snapshot) ? this._T_NewInstance(this.classConfig.classInstanceRef, this.snapshot) : undefined;
        s = tm(s);
        try {
          if (Z1s(d, s)) {
            throw new kt(this.className);
          }
        } catch (h) {
          console.warn(h.message, d, s);
        }
      }
      this.devToolSend(s);
      this._lastModified = Date.now();
      this._store.next(this._currentValue = s);
    }
    _T_NewInstance(n, s) {
      return new n(s);
    }
    devToolSend(n, s) {
      if (!bf()) {
        return false;
      }
      if (!s) {
        try {
          var d;
          s = ((d = new Error().stack) === null || d === undefined ? undefined : d.split("\n")[3].trim().split(" ")[1].split(".")[1]) || "unknown";
        } catch {
          s = "unknown";
        }
      }
      this.devTool.send(this.className, s, n);
      return true;
    }
    _select$(n, s) {
      return this._store.asObservable().pipe((0, j.U)(n), (0, w.x)(s));
    }
    isExpired() {
      if (typeof this._lastModified === "undefined") {
        return true;
      }
      const n = this._lastModified + this.expireableTTL * 1000;
      return Date.now() > n;
    }
    cloneDeep(n) {
      return this._T_NewInstance(this.classConfig.classInstanceRef, n !== undefined ? n : this.snapshot);
    }
    select$(n, s) {
      return this._select$(n || (h => h), s);
    }
    markStoreAsExpired() {
      this._lastModified = undefined;
    }
    reset() {
      this.store = this.classConfig.classInstanceRef.initialState();
      this.markStoreAsExpired();
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX), t.LFG(lv));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
let Gd = (() => {
  class R extends yh4 {
    constructor(n, s) {
      super(s, false);
      this.storage = n;
      this.devTool = s;
      this._isStoreReady = false;
      if (bf()) {
        (function fn(R) {
          console.warn(`Don't forget to call ${R}.ready() everywhere this Store is call potentially for the first time, to use persistent datas from storage !`);
        })(this.className);
      }
    }
    get isStoreReady() {
      return this._isStoreReady;
    }
    ready(n) {
      if (this.isStoreReady) {
        return (0, S.of)(true);
      }
      {
        const s = n || (d => !!Object.isExists(d) && !!Object.isExists(d.payload) && Object.keys(d.payload).length > 0 && (this.store = d.payload, this._lastModified = d.lastModified, true));
        return (0, L.D)(this.storage.get(this.classConfig.idDBKey).then(d => s(d)).catch(d => false)).pipe((0, j.U)(d => {
          if (!d) {
            this.store = this.classConfig.classInstanceRef.initialState();
            this._lastModified = undefined;
          }
          this.markAsReady();
          return true;
        }));
      }
    }
    setStorage(n, s) {
      if (this._destroyed) {
        return Promise.reject("Le stockage persistant n'est pas activé.");
      } else {
        return this.storage.set(this.classConfig.idDBKey, {
          payload: n,
          lastModified: typeof s !== "undefined" ? s : this.lastModified
        }).catch(d => console.error("StorageStore.setStorage : ", this.className, d));
      }
    }
    markAsReady() {
      this._isStoreReady = true;
    }
    destroy() {
      super.destroy();
      this._isStoreReady = false;
    }
    markStoreAsExpired() {
      super.markStoreAsExpired();
      this.storage.set(this.classConfig.idDBKey, {
        payload: this.snapshot
      }).catch(n => console.error("StorageStore.markStoreAsExpired setStorage : ", this.className, n));
    }
    reset() {
      super.reset();
      this.storage.set(this.classConfig.idDBKey, {
        payload: this.snapshot
      }).catch(n => console.error("StorageStore.reset setStorage : ", this.className, n));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(V1j), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class Y5f {
  constructor() {}
  static encodeBody(e, n) {
    if (typeof n == "string") {
      n = (n = (n = n.replace(/%/g, "%25")).replace(/&/g, "%26")).replace(/\+/g, "%2B");
    }
    return n;
  }
  static interceptBody(e, n = true) {
    let s;
    let d = false;
    d = Object.isExists(e.data);
    s = d ? e.data : e;
    const h = typeof s == "object" && s !== null ? JSON.stringify(s, Y5f.encodeBody, 4) : s;
    if (n) {
      return `data=${h}`;
    } else {
      return h;
    }
  }
  static interceptBodyWSRest(e) {
    if (Object.isExists(e.data)) {
      return {
        data: e.data
      };
    } else {
      return {
        data: e
      };
    }
  }
  static buildQueryString(e) {
    return Object.keys(e).reduce((s, d) => s.set(d, Y5f.encodeRFC3986ValueChars(e[d])), new Et());
  }
  static buildSimpleQueryString(e) {
    const s = Object.keys(e).reduce((d, h) => {
      d[h] = `${e[h]}`;
      return d;
    }, {});
    return new Et({
      fromObject: s
    });
  }
  static encodeRFC3986ValueChars(e) {
    return encodeURIComponent(e).replace(/[!'()*]/g, s => `%${s.charCodeAt(0).toString(16)}`);
  }
  static isHttpCodeError(e) {
    return e >= 400;
  }
  static isHttpAuthTokenCodeError(e) {
    return e === 525 || e === 520;
  }
  static isHttpAccessTokenCodeError(e) {
    return e === GL1.AccessTokenInvalid;
  }
  static clone(e) {
    if (Object.isExists(e)) {
      return JSON.parse(JSON.stringify(e));
    } else {
      return e;
    }
  }
  static catchTheBadResponse(e, n) {
    let s;
    let d = 500;
    const h = n || (P => (0, I._)(() => P));
    if (e instanceof FwQ) {
      return h(e);
    } else {
      if (e instanceof Ut) {
        s = e.error instanceof Error ? e.error.message : e.message || e.statusText || "";
        d = e.status === 200 ? 599 : e.status;
        if (d === 599) {
          s = K3B.genericError;
        }
      } else if (Object.isExists(e)) {
        d = e.code ? e.code : d;
        s = e.message ? e.message : e.toString();
      } else {
        s = e.toString();
      }
      if (d === 0) {
        return (0, I._)(() => new FwQ(K3B.networkDown, d, DOJ.genericWarning));
      } else {
        return h(new FwQ(s, d, DOJ.genericError));
      }
    }
  }
  catchBadResponse(e, n) {
    return Y5f.catchTheBadResponse(e, n);
  }
}
export let D3H = (() => {
  class R {}
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵmod = t.oAB({
    type: R
  });
  R.ɵinj = t.cJS({});
  return R;
})();
export let eq2 = (() => {
  class R {
    constructor() {
      this._channels = new Map();
    }
    ngOnDestroy() {
      Array.from(this._channels.keys()).map(n => {
        this.unsubscribe(n);
      });
    }
    select$(n) {
      if (!this._channels.has(n)) {
        this._channels.set(n, new v.x());
      }
      return this._channels.get(n).asObservable().pipe((0, G.x)(() => {
        if (bf()) {
          console.warn("Becareful, an event topic has been destroy after the channel was unsubscribed : ", n);
        }
        this._channels.delete(n);
      }));
    }
    subscribe(n, s) {
      return this.select$(n).subscribe(s);
    }
    publish(n, s) {
      if (!!this._channels.has(n)) {
        this._channels.get(n).next(s);
      }
    }
    unsubscribe(n) {
      if (!!this._channels.has(n)) {
        this._channels.get(n).complete();
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class nl {
  constructor() {
    this._cache = new Map();
  }
  static isInvalidKey(e) {
    return e == null || e === "" || typeof e == "boolean" || Number.isNaN(e);
  }
  static normalizeKey(e) {
    if (nl.isInvalidKey(e)) {
      throw new Error("Merci de spécifier une clé valide pour la mise en cache de la requête.");
    }
    return `${e}`;
  }
  has(e) {
    let n = nl.normalizeKey(e);
    return this._cache.has(n);
  }
  set(e, n, s) {
    let d = nl.normalizeKey(e);
    if (s === 0) {
      s = nl.DEFAULT_MAX_AGE;
    }
    this._cache.set(d, Object.setExpired({
      value: n
    }, s));
  }
  get(e) {
    let n = nl.normalizeKey(e);
    return this._cache.get(n);
  }
  delete(e) {
    let n = nl.normalizeKey(e);
    return this._cache.delete(n);
  }
  filter(e) {
    const n = Array.from(this._cache.keys());
    for (let s of n) {
      if (e(s)) {
        this._cache.delete(s);
      }
    }
  }
  clear() {
    this._cache.clear();
  }
  hasValidCachedValue(e) {
    return !!this.has(e) && (!Object.isExpired(this.get(e)) || !(this.delete(e), 1));
  }
}
nl.DEFAULT_MAX_AGE = X9o.unQuartDHeure;
nl.ɵfac = function (e) {
  return new (e || nl)();
};
nl.ɵprov = t.Yz7({
  token: nl,
  factory: nl.ɵfac,
  providedIn: "root"
});
let nm = (() => {
  class R {
    constructor() {
      this._onCancelPendingRequests = new v.x();
      this.onCancelPendingRequests$ = this._onCancelPendingRequests.asObservable();
    }
    ngOnDestroy() {
      this._onCancelPendingRequests.complete();
    }
    cancelPendingRequests() {
      this._onCancelPendingRequests.next();
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let Lo = (() => {
  class R {
    constructor(n) {
      this.httpCancelService = n;
      this._failedRequests = 0;
      this._authTokenRefreshed$ = new v.x();
      this.authTokenRefreshed$ = this._authTokenRefreshed$.asObservable();
    }
    ngOnDestroy() {
      this._authTokenRefreshed$.complete();
    }
    get nbFailedRequests() {
      return this._failedRequests;
    }
    addFailedRequest() {
      this._failedRequests++;
    }
    retryFailedRequests() {
      this._authTokenRefreshed$.next();
      this.reset();
    }
    loginCancelled() {
      this.reset();
      this.httpCancelService.cancelPendingRequests();
    }
    reset() {
      this._failedRequests = 0;
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(nm));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let AZ5 = (() => {
  class R {
    constructor() {
      this._channels = new Map();
    }
    ngOnDestroy() {
      Array.from(this._channels.keys()).map(n => {
        this.unsubscribe(n);
      });
    }
    select$(n) {
      if (!this._channels.has(n)) {
        this._channels.set(n, new v.x());
      }
      return this._channels.get(n).asObservable().pipe((0, G.x)(() => {
        if (bf()) {
          console.warn("Becareful, an inflightCancelling topic has been destroy after the channel was unsubscribed : ", n);
        }
        this._channels.delete(n);
      }));
    }
    subscribe(n, s) {
      return this.select$(n).subscribe(s);
    }
    publish(n, s) {
      if (!!this._channels.has(n)) {
        this._channels.get(n).next(s);
      }
    }
    unsubscribe(n) {
      if (!!this._channels.has(n)) {
        this._channels.get(n).complete();
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let zFY = (() => {
  class R {
    constructor(n, s) {
      this.httpCacheService = n;
      this.httpAccessFailedService = s;
    }
    static resetStores(n = true) {
      for (const s of Xp.values()) {
        if (n || s.classConfig.resetWhenSwipe === true) {
          s.reset();
        }
      }
    }
    markStoresAsExpired() {
      this.httpCacheService.clear();
      for (const n of Xp.values()) {
        n.markStoreAsExpired();
      }
    }
    resetAll() {
      this.httpCacheService.clear();
      this.httpAccessFailedService.reset();
      R.resetStores();
    }
    swipeReset() {
      this.httpCacheService.clear();
      this.httpAccessFailedService.reset();
      R.resetStores(false);
    }
    invalideCacheOnBasculeAnneeScolaire(n = 0) {
      const s = C_1.convertTZ(new Date(), "Europe/Paris");
      const d = C_1.addNbJourToDate(s, n);
      const h = C_1.stringToDate(`${s.getFullYear()}-07-14`);
      return !!C_1.isBetween(h, s, d, false, true, true) && (console.warn("Bascule scolaire : il est temps d'expirer les données !"), this.markStoresAsExpired(), true);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(nl), t.LFG(Lo));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
const uv = new t.OlP("ED common config");
let vh = (() => {
  class R {
    constructor(n) {
      this.commonConfig = n;
      this.isBrowser = n.isBrowser;
      this.production = n.production;
      this.api = n.api;
      this.apip = n.apip;
      this.apiExtension = n.apiExtension;
      this.packageVersion = n.packageVersion;
      this.collaboraUrl = n.collaboraUrl;
      this.collaboraWopiUrl = n.collaboraWopiUrl;
      this.defaultTTL = typeof n.defaultTTL !== "undefined" ? n.defaultTTL : X9o.uneHeure * 4;
      this.monitorHTTP = typeof n.monitorHTTP !== "undefined" ? n.monitorHTTP : bf();
      (function b0(R) {
        qp = R;
      })(this.defaultTTL);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(uv));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let VLf = (() => {
  class R {
    constructor(n) {
      this.ccService = n;
      this._store = new v.x();
    }
    ngOnDestroy() {
      this._store.complete();
    }
    set store(n) {
      this._store.next(new Nn(n));
    }
    select$() {
      return this._store.asObservable();
    }
    selectLoadingState$(n) {
      return this._store.asObservable().pipe((0, se.h)(s => G5n.loading === s.typeUiState && n === s.component));
    }
    notifyEvent(n, s = "", d = "", h = "", P = "UIService") {
      this.store = {
        component: P,
        action: n,
        message: s,
        title: d,
        icon: h,
        typeUiState: G5n.event
      };
    }
    toggleLoadingIndicator(n, s = "", d = "UIService", h = false) {
      this.store = {
        component: d,
        showLoader: n,
        message: s,
        resetCounterLoader: h,
        typeUiState: G5n.loading
      };
    }
    stopLoadingIndicator(n = "UIService", s = false) {
      this.store = {
        component: n,
        showLoader: false,
        resetCounterLoader: s,
        typeUiState: G5n.loading
      };
    }
    notifyError(n, s = true, d = "", h = "", P = "UIService") {
      if (s) {
        this.notifyEvent(n.action, n.message, d, h, P);
      }
      if (!this.ccService.production) {
        console.error(n);
      }
      return (0, I._)(() => n);
    }
    notifyErrorThenEmpty(n, s = true, d = "", h = "", P = "UIService") {
      if (s) {
        this.notifyEvent(n.action, n.message, d, h, P);
      }
      if (!this.ccService.production) {
        console.error(n);
      }
      return E.E;
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(vh));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class Gf {
  constructor(e = {
    valeur: 0,
    iconApp: false
  }) {
    this.iconApp = e.iconApp;
    this.valeur = e.valeur;
  }
}
class eg {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = typeof e[s] !== "undefined" ? new Gf(e[s]) : new Gf();
      }
    }
  }
  setBadgeForModule(e, n, s = false) {
    this[n] = new Gf({
      valeur: e,
      iconApp: s
    });
  }
}
export class WwR {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new eg(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  static whichClebadge(e, n) {
    return `${e}${n}`;
  }
  updateBadgeForModule(e, n, s, d, h = false) {
    const P = WwR.whichClebadge(s, d);
    if (typeof this[P] === "undefined") {
      this[P] = new eg();
    }
    this[P][n] = new Gf({
      valeur: e,
      iconApp: h
    });
  }
  calculBadgesIconApp(e, n) {
    const d = this[WwR.whichClebadge(e, n)];
    if (typeof d !== "undefined") {
      return Object.keys(d).reduce((h, P) => d[P].iconApp === true ? h + d[P].valeur : h, 0);
    } else {
      return 0;
    }
  }
  calculTotalBadgesUser(e, n) {
    const d = this[WwR.whichClebadge(e, n)];
    let h = "";
    if (typeof d !== "undefined") {
      const P = Object.keys(d).reduce((z, Ae) => z + d[Ae].valeur, 0);
      h = P > 0 ? `${P}` : "";
    }
    return h;
  }
  getBadgeFromModule(e, n, s) {
    const h = this[WwR.whichClebadge(n, s)];
    if (typeof h !== "undefined" && Object.isExists(h[e])) {
      return h[e].valeur;
    } else {
      return 0;
    }
  }
}
export class IDb {
  static isFamilleResponsable(e) {
    return e === dcH.FAMILLE_RESPONSABLE;
  }
  static isEleve(e) {
    return e === dcH.ELEVE;
  }
  static isFamille(e) {
    return e === dcH.FAMILLE_RESPONSABLE || e === dcH.FAMILLE_CONJOINT;
  }
  static isFamilleOuEleve(e) {
    return IDb.isFamille(e) || IDb.isEleve(e);
  }
  static isEntreprise(e) {
    return e === dcH.ENTREPRISE;
  }
  static isEntrepriseOuEleve(e) {
    return e === dcH.ENTREPRISE || IDb.isEleve(e);
  }
  static isPersonnel(e) {
    return e === dcH.PERSONNEL;
  }
  static isProfesseur(e) {
    return e === dcH.ENSEIGNANT;
  }
  static isProfOuPersonnel(e) {
    return e === dcH.ENSEIGNANT || e === dcH.PERSONNEL;
  }
  static isProfOuPersonnelOuEntreprise(e) {
    return e === dcH.ENTREPRISE || IDb.isProfOuPersonnel(e);
  }
  static isProfEtPersonnel(e) {
    return Object.isExists(e) && e.isProfEtPersonnel === true;
  }
  static cToken(e) {
    return YC.base64encode(e);
  }
}
class dv {
  constructor(e = {}) {
    this.identifiant = e.identifiant;
    this.isReLogin = e.isReLogin;
    this.motdepasse = e.motdepasse;
    if (typeof e.acceptationCharte !== "undefined") {
      this.acceptationCharte = e.acceptationCharte;
    }
    if (typeof e.sesouvenirdemoi !== "undefined") {
      this.sesouvenirdemoi = e.sesouvenirdemoi;
    }
    if (typeof e.accesstoken !== "undefined") {
      this.accesstoken = e.accesstoken;
    }
    if (typeof e.typeCompte !== "undefined") {
      this.typeCompte = e.typeCompte;
    }
  }
}
class zf {
  constructor(e = {}) {
    this.authToken = e.authToken;
    this.fcmToken = e.fcmToken;
  }
  static initialState() {
    return {
      authToken: "",
      fcmToken: ""
    };
  }
}
export class bxK {
  constructor(e = {
    isQrcode: false
  }) {
    this.isQrcode = typeof e.isQrcode !== "undefined" && e.isQrcode;
    if (typeof e.positionMenuUtilisateur !== "undefined") {
      this.positionMenuUtilisateur = e.positionMenuUtilisateur;
    }
    if (typeof e.lsuPoilDansLaMainBorne1 !== "undefined") {
      this.lsuPoilDansLaMainBorne1 = e.lsuPoilDansLaMainBorne1;
    }
    if (typeof e.lsuPoilDansLaMainBorne2 !== "undefined") {
      this.lsuPoilDansLaMainBorne2 = e.lsuPoilDansLaMainBorne2;
    }
    if (typeof e.lsuPoilDansLaMainBorne3 !== "undefined") {
      this.lsuPoilDansLaMainBorne3 = e.lsuPoilDansLaMainBorne3;
    }
    if (typeof e.modeCalculLSU !== "undefined") {
      this.modeCalculLSU = e.modeCalculLSU;
    }
    this.accessibiliteVisuelle = typeof e.accessibiliteVisuelle !== "undefined" && e.accessibiliteVisuelle;
    this.checkAuthentificationSecure = typeof e.checkAuthentificationSecure !== "undefined" && e.checkAuthentificationSecure;
    this.typeSaisieNotesDefaut = typeof e.typeSaisieNotesDefaut !== "undefined" ? e.typeSaisieNotesDefaut : "multi";
    this.typeViewCDTDefaut = typeof e.typeViewCDTDefaut !== "undefined" ? e.typeViewCDTDefaut : "list";
    this.nbJoursMaxRenduDevoirCDT = typeof e.nbJoursMaxRenduDevoirCDT !== "undefined" ? +e.nbJoursMaxRenduDevoirCDT : 0;
    this.blocActuAccueil = typeof e.blocActuAccueil === "undefined" || e.blocActuAccueil;
    this.blocPMAccueil = typeof e.blocPMAccueil === "undefined" || e.blocPMAccueil;
  }
}
class Kf {
  constructor(e = {}) {
    if (typeof e.email !== "undefined") {
      this.email = e.email;
    }
    if (typeof e.sexe !== "undefined") {
      this.sexe = e.sexe;
    }
    if (typeof e.infoEDT !== "undefined") {
      this.infoEDT = e.infoEDT;
    }
    if (typeof e.photo !== "undefined") {
      this.photo = e.photo;
    }
    if (typeof e.nomEtablissement !== "undefined") {
      this.nomEtablissement = e.nomEtablissement;
    }
    if (typeof e.idEtablissement !== "undefined") {
      this.idEtablissement = e.idEtablissement;
    }
    if (typeof e.idReelEtab !== "undefined") {
      this.idReelEtab = e.idReelEtab;
    }
    if (typeof e.classe !== "undefined") {
      this.classe = new WRp(e.classe);
    }
    if (Array.isArray(e.eleves)) {
      this.eleves = e.eleves.map(n => new Dfc(n));
    }
    if (Array.isArray(e.classes)) {
      this.classes = e.classes.map(n => new WRp(n));
    }
    if (Array.isArray(e.groupes)) {
      this.groupes = e.groupes.map(n => new Zc(n));
    }
    if (Array.isArray(e.matieres)) {
      this.matieres = e.matieres.map(n => new qd(n));
    }
    if (typeof e.telPortable !== "undefined") {
      this.telPortable = e.telPortable;
    }
    if (typeof e.telPortableConjoint !== "undefined") {
      this.telPortableConjoint = e.telPortableConjoint;
    }
    if (typeof e.telFixe !== "undefined") {
      this.telFixe = e.telFixe;
    }
  }
}
class fv {
  constructor(e = {
    titre: "",
    contenu: ""
  }) {
    this.titre = e.titre;
    this.contenu = e.contenu;
  }
}
class im {
  constructor(e = {
    urlLogout: "",
    urlEditProfil: "",
    libelle: ""
  }) {
    this.urlLogout = e.urlLogout;
    this.urlEditProfil = e.urlEditProfil;
    this.libelle = e.libelle;
  }
}
var rm;
export let XPO = rm = class {
  constructor(e = {
    id: 0,
    main: false,
    codeOgec: "",
    typeCompte: "",
    identifiant: "",
    accessToken: "",
    idLogin: 0,
    socketToken: "",
    uid: "",
    nom: "",
    prenom: "",
    email: "",
    nomEtablissement: "",
    couleurAgendaEtablissement: "",
    anneeScolaireCourante: "",
    dicoEnLigneLeRobert: false
  }) {
    this.id = e.id;
    this.main = e.main;
    this.codeOgec = e.codeOgec;
    this.typeCompte = e.typeCompte;
    this.identifiant = e.identifiant;
    this.accessToken = e.accessToken;
    this.idLogin = e.idLogin;
    this.socketToken = e.socketToken;
    this.uid = e.uid;
    this.modules = Array.isArray(e.modules) ? e.modules.map(n => new Bs(n)) : [];
    this.profile = new Kf(e.profile);
    this.parametresIndividuels = new bxK(e.parametresIndividuels);
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.email = e.email;
    this.nomEtablissement = e.nomEtablissement;
    this.couleurAgendaEtablissement = e.couleurAgendaEtablissement;
    this.dicoEnLigneLeRobert = e.dicoEnLigneLeRobert;
    this.anneeScolaireCourante = rm.calculeAnneeScolaireCourante();
    if (typeof e.current !== "undefined") {
      this.current = e.current;
    }
    if (typeof e.isProfEtPersonnel !== "undefined") {
      this.isProfEtPersonnel = e.isProfEtPersonnel;
    }
    if (typeof e.lastConnexion !== "undefined") {
      this.lastConnexion = e.lastConnexion;
    }
    if (typeof e.civilite !== "undefined") {
      this.civilite = e.civilite;
    }
    if (typeof e.particule !== "undefined") {
      this.particule = e.particule;
    }
    if (typeof e.cnil !== "undefined") {
      this.cnil = e.cnil;
    }
    if (typeof e.logoEtablissement !== "undefined") {
      this.logoEtablissement = e.logoEtablissement;
    }
    if (typeof e.messageMaintenance !== "undefined") {
      this.messageMaintenance = e.messageMaintenance.map(n => new fv(n));
    }
    if (Object.isExists(e.ephemere)) {
      this.ephemere = e.ephemere;
    }
    if (typeof e.oAuthParams !== "undefined") {
      this.oAuthParams = new im(e.oAuthParams);
    }
  }
  static calculeAnneeScolaireCourante(e = "-") {
    const n = C_1.convertTZ(new Date(), "Europe/Paris");
    const s = C_1.stringToDate(`${n.getFullYear()}-07-14`);
    if (C_1.isBefore(n, s, false)) {
      return `${n.getFullYear() - 1}${e}${n.getFullYear()}`;
    } else {
      return `${n.getFullYear()}${e}${n.getFullYear() + 1}`;
    }
  }
  get isChefEtablissement() {
    return IDb.isPersonnel(this.typeCompte) && Kg5.isModuleEnabled(this, qzA.CONSEIL_DE_CLASSE_NG);
  }
  get isProfPrimaire() {
    return Kg5.getModuleParametre(qzA.CARNET_NOTES, "isProfPrimaire", this) === "1";
  }
  get isModeAccessibiliteVisuelle() {
    return this.listParametresIndividuels(IL.MODE_ACCESSIBILITE_VISUELLE) === true;
  }
  get checkAuthentificationSecure() {
    return this.listParametresIndividuels(IL.CHECK_AUTHENTIFICATION_SECURE) === true;
  }
  get isLoggedInFromOAuth() {
    return Object.isExists(this.oAuthParams);
  }
  listParametresIndividuels(e) {
    if (Object.isExists(this.parametresIndividuels) && typeof e !== "undefined" && e !== "") {
      return this.parametresIndividuels[e];
    } else {
      return this.parametresIndividuels;
    }
  }
};
XPO = rm = (0, le.gn)([jl({
  className: "MEDAccount"
})], XPO);
class xf {
  constructor(e = {}) {
    this.accounts = Array.isArray(e.accounts) ? e.accounts.map(n => new XPO(n)) : [];
    this.changementMDP = typeof e.changementMDP !== "undefined" && e.changementMDP;
  }
  static initialState() {
    return {
      accounts: []
    };
  }
  currentAccount() {
    let e = this.accounts.filter(n => n.current);
    if (e.length === 0) {
      e = this.accounts.filter(n => n.main);
      if (e.length > 0) {
        e[0].current = true;
      }
    }
    if (e.length > 1) {
      for (let n of this.accounts) {
        n.current = n.idLogin === e[0].idLogin;
      }
    }
    if (e.length > 0) {
      return e[0];
    } else {
      return undefined;
    }
  }
  linkedAccounts() {
    return this.accounts.filter(e => !e.current);
  }
  currentAndLinkedRefreshAccounts(e, n, s) {
    const d = new xf(e);
    if ((!Object.isExists(n) || n.main !== true) && !s) {
      const P = d.accounts.filter(Ae => Ae.idLogin === n.idLogin);
      const z = this.accounts.findIndex(Ae => Ae.idLogin === n.idLogin);
      if (z > -1 && P.length > 0) {
        this.accounts[z] = new XPO({
          ...P[0],
          current: true,
          main: false
        });
        return;
      }
    }
    this.accounts = d.accounts;
  }
  currentAndLinkedInfosAccounts(e, n) {
    const s = this.accounts.findIndex(d => d.idLogin === n.idLogin);
    if (s > -1) {
      this.accounts[s].identifiant = e.identifiant;
      this.accounts[s].accessToken = e.accessToken;
      this.accounts[s].profile.email = e.email;
      this.accounts[s].profile.telPortable = e.portable;
    }
  }
  swipeProfil(e, n) {
    for (let s of this.accounts) {
      if (s.idLogin === e.idLogin) {
        s.typeCompte = n.typeCompte;
        s.accessToken = n.accessToken;
        s.modules = n.modules.map(d => new Bs(d));
        s.profile = new Kf(n.profile);
      }
    }
  }
  swipeUser(e, n) {
    for (let s of this.accounts) {
      s.current = s.idLogin === e;
      if (s.current) {
        s.accessToken = n.accessToken;
      }
    }
  }
}
export class lZ0 extends XPO {
  constructor(e = {
    login: "",
    motDePasse: "",
    niveauMdp: 0,
    id: 0,
    main: false,
    codeOgec: "",
    typeCompte: "",
    identifiant: "",
    idLogin: 0,
    socketToken: "",
    uid: "",
    nom: "",
    prenom: "",
    nomEtablissement: ""
  }) {
    super(e);
    this.login = e.login;
    this.motDePasse = e.motDePasse;
    this.niveauMdp = e.niveauMdp;
    this.questionsPossibles = Array.isArray(e.questionsPossibles) ? [...e.questionsPossibles] : [];
  }
}
export class iuP {
  constructor(e = {
    id: 0,
    codeOgec: "",
    typeCompte: "",
    identifiant: "",
    nomEtablissement: ""
  }) {
    this.id = +e.id;
    this.codeOgec = e.codeOgec;
    this.typeCompte = e.typeCompte;
    this.identifiant = e.identifiant;
    this.nomEtablissement = e.nomEtablissement;
    this.isExterne = typeof e.isExterne !== "undefined" && e.isExterne;
    if (Array.isArray(e.accounts)) {
      this.accounts = e.accounts.map(n => new XPO(n));
    }
  }
}
export class xrB {
  constructor(e = {
    charte: ""
  }) {
    this.charte = e.charte;
  }
}
const ua_1 = "Portails E-sidoc";
const ua_5 = "Pearltrees Education";
const ua_9 = "Attestation d'assurance scolaire";
const ua_11 = "L'Etudiant";
const ua_12 = "ONISEP Services";
const ua_15 = "Futurness by l'Etudiant";
export const NRy = {
  VIE_SCOLAIRE: "Vie scolaire",
  VIE_DE_LA_CLASSE: "Vie de la classe",
  NOTES: "Notes",
  CLOUDET: "Espaces de travail",
  CLOUD: "Mon cloud",
  MESSAGERIE: "Messagerie",
  EDT: "Emploi du temps",
  CAHIER_DE_TEXTES: "Cahier de textes",
  RESERVATIONS: "Réservations",
  REUNIONS_PP: "Réunion parents/professeurs",
  RDVPP: "Rendez-vous",
  COORDONNEES: "Vos informations",
  SITUATION_FINANCIERE: "Situation financière",
  PAIEMENT_EN_LIGNE: "Paiements en ligne",
  DOCUMENTS: "Documents",
  CONSULTATION_ETABLISSEMENT: "Consultation",
  AFF_EL: "Coordonnées de la famille",
  APPEL: "Feuille d'appel",
  APPEL_PRIMAIRE: "Feuille d'appel pour le primaire",
  APPEL_ETUDE: "Feuille d'appel pour l'étude",
  DOCUMENTS_ELEVE: "Documents",
  POSTIT: "Gestion des post-it",
  AGENDA: "Agenda",
  CARNET_NOTES: "Carnet de notes",
  CATER: "Restauration scolaire",
  SCOLACONCEPT: "ScolaWeb : Réservations, Crédits, Historiques ...",
  SALLE_DES_PROFS: "Salle des profs",
  CONSEIL_DE_CLASSE_NG: "Conseil de classe",
  LSL: "LSL / Parcoursup",
  CARNET_CORRESPONDANCE: "Carnet de correspondance",
  GROUPE_FLEX: "Groupes flexibles",
  CANTINE_BARCODE: "Badge cantine",
  SUIVI_STAGE: "Suivi des stages",
  AUTORISATIONS_SORTIE: "Autorisations de sortie",
  QCM: "QCM",
  DOSSIER_INSCRIPTION: "Dossier d'inscription",
  VOLTAIRE: "Projet Voltaire",
  COMP_NUM: "Compétences Numériques",
  EDFORMS: "Formulaires et sondages",
  MANUELS_SCOLAIRES: "Manuels & ressources",
  PASSAGEWEB: "Passage Web"
};
const ng = {
  1: "famille",
  2: "famille",
  E: "eleve",
  A: "personnel",
  P: "enseignant",
  W: "espacedetravail",
  FE: "eleve",
  PE: "eleve",
  AE: "eleve",
  C: "classe",
  G: "classe",
  "famille-eleve": "eleve",
  "prof-eleve": "eleve",
  "personnel-eleve:": "eleve"
};
export class q9$ {
  static getModuleIcon(e, n) {
    return `${n ? "icon-ed_" : ""}${FSr.moduleToCSS(e)}`;
  }
  static getEspaceLibelle(e) {
    return "Mon espace " + ci[e];
  }
  static getDefaultPicture(e, n = "") {
    if (e !== dcH.ELEVE && e !== o2q.PE && e !== o2q.AE && e !== o2q.FE || !n || n === "") {
      return `assets/img/default-portraits/${ng[e]}.png`;
    } else {
      return `assets/img/default-portraits/${ng[e]}-${$r[n].toLowerCase()}.png`;
    }
  }
  static getAccountFullName(e, n, s, d) {
    const h = Hn => {
      let Ci = FSr.capitalizeFirstLetter(Hn.prenom);
      if (Hn.nom.length < 10) {
        Ci = `${Ci} ${FSr.capitalizeFirstLetter(Hn.nom)}`;
      }
      return Ci;
    };
    const P = Hn => `${FSr.capitalizeFirstLetter(Hn.nom)} ${FSr.capitalizeFirstLetter(Hn.prenom)} (${Hn.classe.libelle})`;
    const z = Hn => s.transform(Hn, false, false, d);
    let Tt = {
      "famille-eleve": h,
      "entreprise-eleve": h,
      "personnel-eleve": P,
      "prof-eleve": P,
      [dcH.FAMILLE_RESPONSABLE]: z,
      [dcH.FAMILLE_CONJOINT]: z,
      [dcH.PERSONNEL]: z,
      [dcH.ELEVE]: z,
      [dcH.ENTREPRISE]: z,
      [dcH.ENSEIGNANT]: z,
      classe: Hn => Hn.libelle,
      groupe: Hn => Hn.libelle
    };
    const Vt = Tt[e](n);
    return FSr.capitalizeFirstLetter(Vt);
  }
  static getDefaultItem(e, n, s, d) {
    const h = FSr.moduleToCSS(e.code);
    let P = new We();
    P.titre = NRy[e.code];
    P.code = e.code;
    P.css = `edmenu-${h}`;
    P.leftIcon = q9$.getModuleIcon(e.code, d);
    P.badge = Kg5.getBadgeNumber(e);
    switch (e.code) {
      case qzA.CANTINE_BARCODE:
        if (d) {
          P = null;
        } else {
          P.leftIcon = "barcode";
          P.action = new Ke({
            route: "/Badge",
            queryParams: {
              idUser: n,
              typeUser: s === o2q.FE ? dcH.ELEVE : s
            }
          });
        }
        break;
      case qzA.VIE_SCOLAIRE:
        if (s === dcH.ELEVE || s === o2q.AE || s === o2q.FE || s === o2q.PE || s === o2q.C || s === o2q.G) {
          let z;
          switch (s) {
            case o2q.C:
              z = `/${meW.CLASSE}/${n}/VieScolaire`;
              break;
            case o2q.G:
              z = `/${meW.GROUPE}/${n}/VieScolaire`;
              break;
            default:
              z = `/E/${n}/VieScolaire`;
          }
          P.action = new Ke({
            route: z
          });
          if (!d && (s === o2q.C || s === o2q.G || s === o2q.AE || s === o2q.PE)) {
            P.action.queryParams = {
              historyPopPage: 1
            };
          }
        } else {
          P = null;
        }
        break;
      case qzA.VIE_DE_LA_CLASSE:
        P.action = new Ke({
          route: `/${dcH.ELEVE}/${n}/VieDeLaClasse`
        });
        break;
      case qzA.NOTES:
        if (s === dcH.ELEVE || s === o2q.AE || s === o2q.FE) {
          P.leftIcon = q9$.getModuleIcon(qzA.CARNET_NOTES, d);
          P.action = new Ke({
            route: `/${dcH.ELEVE}/${n}/Notes`
          });
          if (!d && s === o2q.AE) {
            P.action.queryParams = {
              historyPopPage: 1
            };
          }
        } else {
          P = null;
        }
        break;
      case qzA.MESSAGERIE:
        P.action = new Ke({
          route: `/${s}/${n}/Messagerie`
        });
        if (s === o2q.FE) {
          P.action.route = `/${dcH.ELEVE}/${n}/Messagerie`;
        }
        break;
      case qzA.EDT:
        P.action = new Ke({
          route: `/${dcH.ELEVE}/${n}/EmploiDuTemps`
        });
        if (s === o2q.C) {
          P.action.route = `/${meW.CLASSE}/${n}/EmploiDuTemps`;
        } else if (s === o2q.G) {
          P.action.route = `/${meW.GROUPE}/${n}/EmploiDuTemps`;
        } else if (s === dcH.ENSEIGNANT) {
          P.action.route = `/${dcH.ENSEIGNANT}/${n}/EmploiDuTemps`;
        } else if (s === dcH.PERSONNEL) {
          P = null;
        }
        if (!d && (s === o2q.C || s === o2q.G || s === o2q.AE || s === o2q.PE)) {
          P.action.queryParams = {
            historyPopPage: 1
          };
        }
        break;
      case qzA.REUNIONS_PP:
        P.action = new Ke({
          route: `/${dcH.ENSEIGNANT}/${n}/RPP`
        });
        if (s === o2q.FE) {
          P.action.route = `/${dcH.ELEVE}/${n}/RPP`;
        }
        break;
      case qzA.COORDONNEES:
        {
          const z = IDb.isFamille(s) ? "F" : s;
          P.action = new Ke({
            route: `/${z}/FamilleCoordonnees`
          });
          break;
        }
      case qzA.SITUATION_FINANCIERE:
        P.action = new Ke({
          route: "/Compte"
        });
        if (s === o2q.E) {
          P.titre = "Porte-monnaie";
        }
        break;
      case qzA.PAIEMENT_EN_LIGNE:
        P.action = new Ke({
          route: "/Paiements"
        });
        break;
      case qzA.DOCUMENTS:
        P.action = new Ke({
          route: "/Documents"
        });
        break;
      case qzA.CONSULTATION_ETABLISSEMENT:
        P.action = new Ke({
          route: "/Consultation"
        });
        if (s === o2q.C) {
          P.action.queryParams = {
            idEntity: n,
            typeEntity: meW.CLASSE
          };
        } else if (s === o2q.G) {
          P.action.queryParams = {
            idEntity: n,
            typeEntity: meW.GROUPE
          };
        }
        break;
      case qzA.AFF_EL:
        if (s === o2q.PE || s === o2q.AE) {
          P.leftIcon = q9$.getModuleIcon(qzA.COORDONNEES, d);
          P.action = new Ke({
            route: `/${dcH.ELEVE}/${n}/CoordonneesFamille`
          });
          if (!d) {
            P.action.queryParams = {
              historyPopPage: 1
            };
          }
        } else {
          P = null;
        }
        break;
      case qzA.APPEL:
        P.action = new Ke({
          route: "/Appel"
        });
        break;
      case qzA.APPEL_PRIMAIRE:
        P.action = new Ke({
          route: "/AppelPrimaire"
        });
        break;
      case qzA.APPEL_ETUDE:
        P.action = new Ke({
          route: "/AppelEtude"
        });
        break;
      case qzA.CARNET_CORRESPONDANCE:
        P.action = IDb.isProfesseur(s) || IDb.isPersonnel(s) ? new Ke({
          route: `/${s}/${n}/CarnetCorrespondance`
        }) : new Ke({
          route: `/${dcH.ELEVE}/${n}/CarnetCorrespondance`
        });
        if (!d && (s === o2q.AE || s === o2q.PE)) {
          P.action.queryParams = {
            historyPopPage: 1
          };
        }
        break;
      case qzA.GROUPE_FLEX:
        P.action = new Ke({
          route: "/groupesFlexibles"
        });
        break;
      case qzA.DOCUMENTS_ELEVE:
        P.leftIcon = q9$.getModuleIcon(qzA.DOCUMENTS, d);
        P.action = new Ke({
          route: "/Documents"
        });
        break;
      case qzA.POSTIT:
        if (d) {
          P.action = new Ke({
            route: "/Postits"
          });
        } else {
          P = null;
        }
        break;
      case qzA.AGENDA:
        if (d) {
          P.action = new Ke({
            route: `/${s}/${n}/Agenda`
          });
        } else {
          P = null;
        }
        break;
      case qzA.CARNET_NOTES:
        if (s === dcH.ENSEIGNANT) {
          P.action = new Ke({
            route: "/CarnetDeNotes"
          });
        } else {
          P.titre = NRy.NOTES;
          P.action = new Ke({
            route: `/${dcH.ELEVE}/${n}/Notes`
          });
          if (!d) {
            P.action.queryParams = {
              historyPopPage: 1
            };
          }
        }
        break;
      case qzA.SALLE_DES_PROFS:
        P.action = new Ke({
          route: `/${s}/${n}/SalleDesProfs/${e.params.idEspace}`
        });
        break;
      case qzA.CONSEIL_DE_CLASSE_NG:
        P.action = new Ke({
          route: "/ConseilDeClasse"
        });
        if (s === o2q.C) {
          P.action.route = `/${meW.CLASSE}/${n}/ConseilDeClasse`;
          if (!d) {
            P.action.queryParams = {
              historyPopPage: 1
            };
          }
        } else if (s === o2q.G) {
          P = null;
        }
        break;
      case qzA.LSL:
        P.action = new Ke({
          route: "/LSL"
        });
        break;
      case qzA.SUIVI_STAGE:
        if (s === dcH.ENSEIGNANT || d && s === dcH.ELEVE || d && s === dcH.ENTREPRISE) {
          P.action = new Ke({
            route: "/Stages"
          });
        } else if (d && s === o2q.FE) {
          P.action = new Ke({
            route: `/${dcH.ELEVE}/${n}/stages`
          });
        } else {
          P = null;
        }
        break;
      case qzA.QCM:
        {
          let z = `/${s}/${n}/qcms`;
          if (d || s !== dcH.ELEVE) {
            if (!d && s === dcH.ENSEIGNANT) {
              z = `/${s}/${n}/qcms-prof`;
            }
          } else {
            z = `/${s}/${n}/qcms-eleve`;
          }
          P.action = new Ke({
            route: z
          });
          break;
        }
      case qzA.DOSSIER_INSCRIPTION:
        if (IDb.isFamille(s) && d) {
          P.action = new Ke({
            route: "/F/DossierInscription"
          });
        } else {
          P = null;
        }
        break;
      case qzA.VOLTAIRE:
        if (s === dcH.ENSEIGNANT || s === dcH.ELEVE) {
          P.action = new Ke({
            route: "/Portails/Voltaire"
          });
        } else {
          P = null;
        }
        break;
      case qzA.EDFORMS:
        P.action = new Ke({
          route: `/${s}/${n}/formulaires-et-sondages`
        });
        if (s === o2q.FE) {
          P.action.route = `/${dcH.ELEVE}/${n}/formulaires-et-sondages`;
        }
        break;
      case qzA.COMP_NUM:
        if (s === dcH.ENSEIGNANT) {
          P.action = new Ke({
            route: "/CompetencesNumeriques"
          });
        } else {
          P = null;
        }
        break;
      case qzA.MANUELS_SCOLAIRES:
        P.leftIcon = d ? "fa fa-book" : "book-outline";
        P.action = new Ke(s === dcH.ENSEIGNANT ? {
          route: "/ManuelsScolaires"
        } : {
          route: `/${dcH.ELEVE}/${n}/ManuelsScolaires`
        });
        break;
      case qzA.RDVPP:
        {
          let z = `/${s}/${n}/rendez-vous`;
          if (s === o2q.FE) {
            z = `/${dcH.ELEVE}/${n}/rendez-vous`;
          }
          P.action = new Ke({
            route: z
          });
          break;
        }
      case qzA.PASSAGEWEB:
        P.action = new Ke({
          route: "/PassageWeb"
        });
        break;
      default:
        P = null;
    }
    return P;
  }
  static getEdunao(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = "Moodle";
      s.code = qzA.EDUNAO;
      s.css = "edmenu-edunao";
      s.leftIcon = q9$.getModuleIcon("moodle", n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: "Moodle",
        links: [{
          title: s.titre,
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: {
            service: decodeURIComponent(e.url)
          }
        }]
      });
    }
    return s;
  }
  static getEdumalin(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = "EduMalin";
      s.code = qzA.EDUMALIN;
      s.css = "edmenu-edumalin";
      s.leftIcon = q9$.getModuleIcon(qzA.EDUMALIN, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: "EduMalin",
        links: [{
          title: s.titre,
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: {
            service: decodeURIComponent(e.url)
          }
        }]
      });
    }
    return s;
  }
  static getClickAndPlay(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = "ClickNPlay";
      s.code = qzA.CLICKNPLAY;
      s.css = "edmenu-clickandpay";
      s.leftIcon = q9$.getModuleIcon(qzA.CLICKNPLAY, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: "ClickNPlay",
        links: [{
          title: s.titre,
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: {
            service: decodeURIComponent(e.url)
          }
        }]
      });
    }
    return s;
  }
  static getSacoche(e, n) {
    let s;
    let d;
    d = new We();
    d.code = qzA.SACOCHE;
    d.css = "edmenu-sacoche";
    d.leftIcon = q9$.getModuleIcon(qzA.SACOCHE, n);
    d.rightIcon = "external-link";
    d.titre = "SACoche";
    if (e && FSr.isNotEmptyString(e.params)) {
      s = JSON.parse(e.params);
      if (Array.isArray(s) && s.length >= 1) {
        d.titre = s.length === 1 ? "SACoche" : "Portails SACoche";
        d.action = new Ke();
        d.action.text = d.titre;
        if (n) {
          if (s.length > 1) {
            d.action.route = "/Portails/Sacoche";
          } else {
            d.action.links = [new Nt({
              url: AEj,
              target: "_blank",
              needAuth: true,
              title: d.titre,
              queryParams: {
                ogec: s[0].rne,
                service: decodeURIComponent(s[0].url)
              }
            })];
          }
        } else {
          d.action.links = s.reduce((h, P) => {
            h.push(new Nt({
              title: P.libelle,
              url: AEj,
              target: "_blank",
              needAuth: true,
              queryParams: {
                ogec: P.rne,
                service: decodeURIComponent(P.url)
              }
            }));
            return h;
          }, []);
        }
      }
    } else {
      d = null;
    }
    return d;
  }
  static getEsidoc(e, n, s) {
    let d = null;
    if (e && typeof e.tabParams !== "undefined" && e.tabParams.length >= 1) {
      d = new We();
      d.code = qzA.ESIDOC;
      d.css = "edmenu-esidoc";
      d.leftIcon = q9$.getModuleIcon(qzA.ESIDOC, n);
      d.rightIcon = "external-link";
      d.titre = e.tabParams.length === 1 ? "Portail CDI" : ua_1;
      d.action = new Ke();
      d.action.text = e.tabParams.length === 1 && e.tabParams[0].libelle || ua_1;
      d.action.links = e.tabParams.reduce((h, P) => {
        const z = P.url.search("cas%2Eesidoc") > -1 || P.url.search("cas.esidoc") > -1;
        let Ae = new Nt({
          title: P.libelle || "Portail CDI",
          target: "_blank",
          url: P.url,
          needAuth: z
        });
        if (z) {
          Ae.url = AEj;
          Ae.queryParams = {
            service: decodeURIComponent(P.url)
          };
        }
        h.push(Ae);
        return h;
      }, []);
    }
    return d;
  }
  static getCantineCater(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = NRy.CATER;
      s.code = qzA.CATER;
      s.css = "edmenu-cater";
      s.leftIcon = q9$.getModuleIcon(qzA.CATER, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: NRy.CATER,
        links: [{
          url: e.url,
          title: NRy.CATER,
          target: "_blank"
        }]
      });
    }
    return s;
  }
  static getCantineScolaConcept(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = NRy.SCOLACONCEPT;
      s.code = qzA.SCOLACONCEPT;
      s.css = "edmenu-scolaconcept";
      s.leftIcon = q9$.getModuleIcon(qzA.SCOLACONCEPT, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: NRy.SCOLACONCEPT,
        links: [{
          url: e.url,
          title: NRy.SCOLACONCEPT,
          target: "_blank"
        }]
      });
    }
    return s;
  }
  static getCantineAlise(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = "Alise";
      s.code = qzA.ALISE;
      s.css = "edmenu-alise";
      s.leftIcon = q9$.getModuleIcon(qzA.ALISE, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: "Alise",
        links: [{
          url: e.url,
          title: "Alise",
          target: "_blank"
        }]
      });
    }
    return s;
  }
  static getEtudiant(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = ua_11;
      s.code = qzA.ETUDIANT;
      s.css = "edmenu-etudiant";
      s.leftIcon = q9$.getModuleIcon(qzA.ETUDIANT, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: ua_11,
        links: [{
          title: ua_11,
          url: e.url,
          target: "_blank"
        }]
      });
    }
    return s;
  }
  static getFuturness(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = ua_15;
      s.code = qzA.FUTURNESS;
      s.css = "edmenu-futurness";
      s.leftIcon = q9$.getModuleIcon(qzA.FUTURNESS, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: ua_15,
        links: [{
          title: ua_15,
          url: e.url,
          target: "_blank"
        }]
      });
    }
    return s;
  }
  static getIJBOX(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.rne)) {
      s = new We();
      s.titre = "IJ box";
      s.code = qzA.IJBOX;
      s.css = "edmenu-ijbox";
      s.leftIcon = q9$.getModuleIcon(qzA.IJBOX, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: "IJ box",
        links: [{
          title: s.titre,
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: {
            ogec: e.rne,
            service: decodeURIComponent(e.url)
          }
        }]
      });
    }
    return s;
  }
  static getImpala(e, n, s) {
    let d = null;
    if (e && FSr.isNotEmptyString(e.rne)) {
      d = new We();
      d.titre = "Impala";
      d.code = qzA.IMPALA;
      d.css = "edmenu-impala";
      d.leftIcon = q9$.getModuleIcon(qzA.IMPALA, n);
      d.rightIcon = "external-link";
      let h = {
        ogec: e.rne,
        service: decodeURIComponent(e.url)
      };
      if (Object.isExists(s)) {
        h.eleveId = s;
      }
      d.action = new Ke({
        text: "Impala",
        links: [new Nt({
          title: d.titre,
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: h
        })]
      });
    }
    return d;
  }
  static getEdumedia(e, n, s) {
    let d = null;
    if (e && FSr.isNotEmptyString(e.rne)) {
      d = new We();
      d.titre = "eduMedia";
      d.code = qzA.EDUMEDIA;
      d.css = "edmenu-edumedia";
      d.leftIcon = q9$.getModuleIcon(qzA.EDUMEDIA, n);
      d.rightIcon = "external-link";
      let h = {
        ogec: e.rne,
        service: decodeURIComponent(e.url)
      };
      if (Object.isExists(s)) {
        h.eleveId = s;
      }
      d.action = new Ke({
        text: "eduMedia",
        links: [new Nt({
          title: d.titre,
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: h
        })]
      });
    }
    return d;
  }
  static getKidiwe(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.rne)) {
      s = new We();
      s.titre = "Kidiwe";
      s.code = qzA.KIDIWE;
      s.css = "edmenu-kidiwe";
      s.leftIcon = q9$.getModuleIcon(qzA.KIDIWE, n);
      s.rightIcon = "external-link";
      let d = {
        ogec: e.rne,
        service: decodeURIComponent(e.url)
      };
      s.action = new Ke({
        text: "Kidiwe",
        links: [new Nt({
          title: s.titre,
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: d
        })]
      });
    }
    return s;
  }
  static getEDIALOG(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.rne)) {
      s = new We();
      s.titre = "OKAY Savoie";
      s.code = qzA.EDIALOG;
      s.css = "edmenu-edialog";
      s.leftIcon = q9$.getModuleIcon(qzA.EDIALOG, n);
      s.rightIcon = "external-link";
      let d = {
        ogec: e.rne,
        service: decodeURIComponent(e.url)
      };
      s.action = new Ke({
        text: "OKAY Savoie",
        links: [new Nt({
          title: s.titre,
          url: AEj,
          target: "_self",
          needAuth: true,
          queryParams: d
        })]
      });
    }
    return s;
  }
  static getAlphaEducation(e, n, s) {
    let d = null;
    if (e) {
      d = new We();
      d.titre = "Alpha Education";
      d.code = qzA.ALPHAEDUCATION;
      d.css = "edmenu-alphaeducation";
      d.leftIcon = q9$.getModuleIcon(qzA.ALPHAEDUCATION, n);
      d.rightIcon = "external-link";
      const h = {
        service: decodeURIComponent(e.url)
      };
      if (Object.isExists(s)) {
        h.eleveId = s;
      }
      d.action = new Ke({
        text: "Alpha Education",
        links: [new Nt({
          title: d.titre,
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: h
        })]
      });
    }
    return d;
  }
  static getONISEPSERVICES(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.rne)) {
      s = new We();
      s.titre = ua_12;
      s.code = qzA.ONISEPSERVICES;
      s.css = "edmenu-onisep";
      s.leftIcon = q9$.getModuleIcon(qzA.ONISEPSERVICES, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: ua_12,
        links: [{
          url: AEj,
          target: "_blank",
          needAuth: true,
          title: ua_12,
          queryParams: {
            ogec: e.rne,
            service: decodeURIComponent(e.url)
          }
        }]
      });
    }
    return s;
  }
  static getPopLab(e, n) {
    let s = null;
    if (e && typeof e.tabParams !== "undefined" && e.tabParams.length >= 1) {
      s = new We();
      s.code = qzA.POPLAB;
      s.css = "edmenu-poplab";
      s.leftIcon = q9$.getModuleIcon(qzA.POPLAB, n);
      s.rightIcon = "external-link";
      s.titre = "PopLab";
      s.action = new Ke();
      s.action.text = "PopLab";
      s.action.links = e.tabParams.reduce((d, h) => {
        d.push(new Nt({
          title: e.tabParams.length > 1 ? h.libelle : "PopLab",
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: {
            service: decodeURIComponent(h.url),
            ogec: h.rne
          }
        }));
        return d;
      }, []);
    }
    return s;
  }
  static getARD(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = "ARD";
      s.code = qzA.ARD;
      s.css = "edmenu-ard";
      s.leftIcon = q9$.getModuleIcon(qzA.ARD, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: "ARD",
        links: [{
          url: e.url,
          target: "_blank",
          title: "ARD"
        }]
      });
    }
    return s;
  }
  static getAvenria(e, n, s) {
    let d = null;
    if (e && typeof FSr.isNotEmptyString(e.url)) {
      d = new We();
      d.titre = "Avenria";
      d.code = qzA.AVENRIA;
      d.css = "edmenu-avenria";
      d.leftIcon = q9$.getModuleIcon(qzA.AVENRIA, n);
      d.rightIcon = "external-link";
      d.callNiveauxListe = false;
      d.action = new Ke();
      d.action.text = "Avenria";
      if (s) {
        d.callNiveauxListe = true;
        d.staticCall = "getAsyncAvenria";
      } else {
        d.action.links = [new Nt({
          url: AEj,
          target: "_blank",
          needAuth: true,
          queryParams: {
            service: decodeURIComponent(e.url)
          },
          title: "Avenria"
        })];
      }
    }
    return d;
  }
  static getAsyncAvenria(e, n, s, d) {
    let h = new We(e);
    h.titre = d.length > 1 ? "Portails Avenria" : "Avenria";
    if (s) {
      if (d.length > 1) {
        h.action.route = "/Portails/Avenria";
      } else {
        h.action.links = [new Nt({
          url: AEj,
          target: "_blank",
          needAuth: true,
          title: d[0].libelle,
          queryParams: {
            ogec: d[0].rne,
            service: decodeURIComponent(n.url)
          }
        })];
      }
    } else {
      h.action.links = d.map(P => new Nt({
        url: AEj,
        target: "_blank",
        needAuth: true,
        title: P.libelle,
        queryParams: {
          ogec: P.rne,
          service: decodeURIComponent(n.url)
        }
      }));
    }
    return h;
  }
  static getPearlTrees(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = ua_5;
      s.code = qzA.PEARLTREES;
      s.css = "edmenu-pearltrees";
      s.leftIcon = n ? "icon-ed_pearltree" : q9$.getModuleIcon(qzA.PEARLTREES, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: ua_5,
        links: [new Nt({
          title: ua_5,
          url: AEj,
          target: "_blank",
          queryParams: {
            service: decodeURIComponent(e.url),
            ogec: e.rne
          },
          needAuth: true
        })]
      });
    }
    return s;
  }
  static getMSC(e, n) {
    let s = null;
    if (e && FSr.isNotEmptyString(e.url)) {
      s = new We();
      s.titre = ua_9;
      s.code = qzA.MSC;
      s.css = "edmenu-msc";
      s.leftIcon = n ? "icon-ed_msc" : q9$.getModuleIcon(qzA.MSC, n);
      s.rightIcon = "external-link";
      s.action = new Ke({
        text: ua_9,
        links: [new Nt({
          title: ua_9,
          url: AEj,
          target: "_blank",
          queryParams: {
            service: decodeURIComponent(e.url)
          },
          needAuth: true
        })]
      });
    }
    return s;
  }
  static getCDT(e, n, s, d) {
    let P;
    let z;
    let h = [];
    const Ae = FSr.moduleToCSS(e.code);
    if (s !== dcH.PERSONNEL) {
      P = new We();
      P.titre = NRy[e.code];
      P.code = e.code;
      P.css = `edmenu-${Ae}`;
      P.leftIcon = d ? "icon-ed_cahierdetexte" : q9$.getModuleIcon(e.code, d);
      P.badge = Kg5.getBadgeNumber(e);
      P.action = new Ke(s === dcH.ENSEIGNANT ? {
        route: "/CahierDeTexte"
      } : s === o2q.C ? {
        route: `/${meW.CLASSE}/${n}/CahierDeTexte`
      } : s === o2q.G ? {
        route: `/${meW.GROUPE}/${n}/CahierDeTexte`
      } : {
        route: `/E/${n}/CahierDeTexte`
      });
      if (!d && (s === o2q.C || s === o2q.G || s === o2q.PE || s === o2q.AE)) {
        P.action.queryParams = {
          historyPopPage: 1
        };
      }
      h.push(P);
    }
    if (s === o2q.C || s === o2q.G) {
      const Ve = FSr.moduleToCSS(qzA.VIE_DE_LA_CLASSE);
      z = new We();
      z.titre = NRy.VIE_DE_LA_CLASSE;
      z.code = qzA.VIE_DE_LA_CLASSE;
      z.css = `edmenu-${Ve}`;
      z.leftIcon = q9$.getModuleIcon(qzA.VIE_DE_LA_CLASSE, d);
      z.badge = Kg5.getBadgeNumber(e);
      z.action = new Ke(s === o2q.C ? {
        route: `/${meW.CLASSE}/${n}/VieDeLaClasse`
      } : {
        route: `/${meW.GROUPE}/${n}/VieDeLaClasse`
      });
      if (!d) {
        z.action.queryParams = {
          historyPopPage: 1
        };
      }
      h.push(z);
    }
    return h;
  }
  static getCloud(e, n, s, d) {
    let P;
    let z;
    let h = [];
    if (IDb.isProfOuPersonnel(s) || IDb.isFamilleOuEleve(s)) {
      P = new We();
      P.titre = NRy.CLOUDET;
      P.code = lFO.CLOUDET;
      P.css = `edmenu-${FSr.moduleToCSS(lFO.CLOUDET)}`;
      P.leftIcon = d ? "icon-ed_espacedetravail" : "workplace";
      P.badge = Kg5.getBadgeNumber(e);
      P.action = new Ke({
        route: `/${s}/${n}/EspacesTravail`
      });
      h.push(P);
    }
    if (IDb.isEleve(s) || IDb.isProfOuPersonnel(s) || s === o2q.FE || s === o2q.AE || s === o2q.PE) {
      const Ae = FSr.moduleToCSS(e.code);
      z = new We();
      z.titre = NRy[e.code];
      z.code = e.code;
      z.css = `edmenu-${Ae}`;
      z.leftIcon = q9$.getModuleIcon(e.code, d);
      z.badge = 0;
      if (s === o2q.FE || s === o2q.AE || s === o2q.PE || IDb.isEleve(s)) {
        z.action = new Ke({
          route: `/E/${n}/MonCloud`
        });
      } else if (IDb.isProfOuPersonnel(s)) {
        z.action = new Ke({
          route: `/${s}/${n}/MonCloud`
        });
      }
      if (!d && (s === o2q.PE || s === o2q.AE)) {
        z.action.queryParams = {
          historyPopPage: 1
        };
      }
      h.push(z);
    }
    return h;
  }
  static getAutorisationsSortie(e, n) {
    const s = FSr.moduleToCSS(e.code);
    let d = new We();
    d.titre = NRy[e.code];
    d.code = e.code;
    d.css = `edmenu-${s}`;
    d.leftIcon = "hand-left";
    d.badge = Kg5.getBadgeNumber(e);
    d.action = new Ke({
      route: Object.isExists(n) ? `/${meW.ELEVE}/${n}/AutorisationSortie` : "/AutorisationSortie"
    });
    if (Object.isExists(n)) {
      d.action.queryParams = {
        historyPopPage: 1
      };
    }
    return d;
  }
  static getCoordFamille(e, n, s) {
    let d = new We();
    d.titre = NRy[e.code];
    d.code = e.code;
    const h = FSr.moduleToCSS(e.code);
    d.css = `edmenu-${h}`;
    d.leftIcon = q9$.getModuleIcon(qzA.COORDONNEES, s);
    d.action = new Ke({
      route: `/E/${n}/CoordonneesFamille`
    });
    return d;
  }
  static getReservationAndCommande(e, n, s, d, h, P, z) {
    const Ae = FSr.moduleToCSS(qzA.RESERVATIONS);
    let Hn;
    let Ve = 0;
    let Tt = [];
    let Vt = "";
    Hn = new We();
    let Ci = new XPO(h);
    if (s === o2q.FE) {
      Ve = n;
      Ci = new Dfc(z);
    }
    const fr = Kg5.isModuleEnabled(h, lFO[qzA.COMMANDE_PASSAGE], Ve);
    const ss = Kg5.isModuleEnabled(h, lFO[qzA.RESERVATIONS], Ve);
    const vo = fr && Kg5.getModuleParametre(qzA.COMMANDE_PASSAGE, "affichageMenuSeul", Ci) === "1";
    if (s === o2q.FE || IDb.isEleve(s)) {
      d.map(Cu => new We(Cu)).forEach(Cu => {
        if (!(Cu instanceof M.y)) {
          if (Cu.code === qzA.RESERVATIONS || Cu.code === qzA.COMMANDE_PASSAGE) {
            Tt.push(Cu.code);
          }
        }
      });
    }
    if (Tt.length === 0) {
      let uo;
      Hn.code = e.code;
      Hn.css = `edmenu-${Ae}`;
      Hn.leftIcon = q9$.getModuleIcon(Ae, P);
      Hn.badge = Kg5.getBadgeNumber(e);
      if (P) {
        if (s === o2q.FE || IDb.isEleve(s)) {
          uo = `/E/${n}/Activites`;
          if (!ss && fr && !vo) {
            uo += "/commandes";
          }
          if (!ss && fr && vo) {
            uo += "/menus";
          }
        } else {
          uo = s === o2q.P ? `/P/${n}/Commandes` : `/A/${n}/Commandes`;
        }
      } else {
        let Cu = s;
        if (s === o2q.FE) {
          Cu = o2q.E;
        }
        uo = `/${Cu}/${n}/Commandes`;
      }
      Hn.action = new Ke({
        route: uo
      });
    } else if (s === o2q.FE || IDb.isEleve(s)) {
      return null;
    }
    if (ss) {
      Vt = "Réservations";
    }
    if (fr && !vo) {
      Vt = "Commandes";
    }
    if (fr && vo && !ss) {
      Vt = "Menus";
    }
    if (ss && fr && !vo) {
      Vt = "Réservations et commandes";
    }
    Hn.titre = Vt;
    return Hn;
  }
}
export let et7 = (() => {
  let R = class extends Gd {
    constructor(n, s) {
      super(s, n);
      this.devTool = n;
      this.storage = s;
    }
    markAsReady() {
      super.markAsReady();
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX), t.LFG("StorageService"));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: WwR,
    className: "BadgesStore",
    idDBKey: "badges"
  })], R);
  return R;
})();
export let dSF = (() => {
  let R = class extends Gd {
    constructor(n, s, d) {
      super(d, s);
      this.ccService = n;
      this.devTool = s;
      this.storage = d;
      this._uuid = "";
      this._ionicPlatforms = "navigator";
      this._isProfOuPersonnel = false;
      this._wopiToken = "";
      this._streamToken = "";
    }
    get uuid() {
      return this._uuid;
    }
    get ionicPlatforms() {
      return this._ionicPlatforms;
    }
    get credentials() {
      return this._credentials;
    }
    get wopiToken() {
      return this._wopiToken;
    }
    get streamToken() {
      return this._streamToken;
    }
    get isProfOuPersonnel() {
      return this._isProfOuPersonnel;
    }
    get apiUrl() {
      const n = this.isProfOuPersonnel ? this.ccService.apip : this.ccService.api;
      if (this.ccService.production) {
        return `${n}/v3`;
      } else {
        return `http://${n}/EDV3WEBSERVICES_WEB/FR/v3`;
      }
    }
    get apiRESTUrl() {
      if (this.ccService.production) {
        return `${this.isProfOuPersonnel ? this.ccService.apip : this.ccService.api}/restv3`;
      } else {
        return "http://localhost/restv3";
      }
    }
    get apiWopiRESTUrl() {
      return `${this.ccService.collaboraWopiUrl}/restv3`;
    }
    get collaboraUrl() {
      return this.ccService.collaboraUrl;
    }
    init(n, s) {
      this._uuid = n;
      this._ionicPlatforms = s;
    }
    updateStore(n) {
      const s = {
        ...this.snapshot,
        ...n
      };
      this.store = s;
      this.setStorage(s).catch(d => console.error("CredentialsStore.updateStore setStorage : ", d));
    }
    updateClassMembers(n) {
      if (Object.isExists(n)) {
        const s = Object.keys(n);
        for (let d of s) {
          this[`_${d}`] = d === "credentials" ? new dv(n[d]) : n[d];
        }
      }
    }
    updateCredentials(n) {
      if (!Object.isExists(n)) {
        this.updateClassMembers({
          credentials: undefined
        });
        return;
      }
      const s = {
        identifiant: n.identifiant,
        typeCompte: n.typeCompte,
        motdepasse: "???",
        accesstoken: n.accessToken,
        isReLogin: true
      };
      const d = IDb.isProfOuPersonnel(n.typeCompte);
      this.updateClassMembers({
        credentials: s,
        isProfOuPersonnel: d
      });
    }
    reset() {
      this._isProfOuPersonnel = false;
      this._wopiToken = "";
      this._streamToken = "";
      this._credentials = undefined;
      super.reset();
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(vh), t.LFG(lbX), t.LFG("StorageService"));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: zf,
    className: "CredentialsStore",
    resetWhenSwipe: false,
    idDBKey: "credentials"
  })], R);
  return R;
})();
export class uKw {
  static getCyclesFromEtab(e, n) {
    if (Object.isExists(e) && Array.isArray(e.etablissements)) {
      return e.etablissements.filter(s => n === s.id).reduce((s, d) => {
        for (let h of d.cycles) {
          s.push(new Vf(h));
        }
        return s;
      }, []).edUniq("idCycleEtab");
    } else {
      return [];
    }
  }
  static getCycle(e, n, s) {
    if (!Object.isExists(e) || !Array.isArray(e.etablissements)) {
      return;
    }
    const h = (s > 0 ? e.etablissements.filter(P => s === P.id) : e.etablissements).edPluckFlatten("cycles").find(P => n === P.idCycleEtab);
    if (Object.isExists(h)) {
      return new Vf(h);
    } else {
      return undefined;
    }
  }
  static getClassesAllByNiveauxByEtabs(e) {
    return e.edSortBy("libelle").reduce((s, d) => {
      s.push({
        uniqueID: `${d.id}__`,
        libelle: d.libelle,
        optionType: P9Y.etab,
        id: d.id,
        isPP: false,
        code: d.code
      });
      if (Array.isArray(d.niveaux)) {
        for (let h of d.niveaux) {
          s.push({
            uniqueID: `${d.id}_${h.id}_`,
            libelle: h.libelle,
            optionType: P9Y.niveau,
            id: h.id,
            isPP: false,
            code: h.code
          });
          if (Array.isArray(h.classes)) {
            for (let P of h.classes.edSortBy("libelle")) {
              s.push({
                uniqueID: `${d.id}_${h.id}_${P.id}`,
                libelle: P.libelle,
                optionType: P9Y.classe,
                id: P.id,
                isPP: P.isPP,
                code: P.code
              });
            }
          }
        }
      }
      return s;
    }, []);
  }
  static getClassesByEtabs(e, n) {
    if (!Object.isExists(e) || !Array.isArray(e.etablissements)) {
      return [];
    }
    let s = [];
    for (let d of e.etablissements) {
      if (Array.isArray(d.niveaux)) {
        for (let h of d.niveaux) {
          for (let P of h.classes) {
            const z = uKw.getCycle(e, P.idCycleEtab, d.id);
            s.push(new Mn7({
              etabLibelle: d.libelle,
              etabId: d.id,
              classeLibelle: P.libelle,
              code: P.code,
              libelle: P.libelle,
              classeId: P.id,
              id: P.id,
              periodes: P.periodes,
              tabPP: P.tabPP,
              idCycleEtab: P.idCycleEtab,
              estNote: P.estNote,
              positionnementLSU: P.positionnementLSU,
              pcpNbPeriode: P.pcpNbPeriode,
              pcpMoyAnnuelle: P.pcpMoyAnnuelle,
              pcpMoyGenAnnee: P.pcpMoyGenAnnee,
              pcpMoyPeriode: P.pcpMoyPeriode,
              pcpMoyMatiere: P.pcpMoyMatiere,
              matieres: P.matieres,
              isPP: P.isPP,
              degre: P.degre,
              uniqueID: `${d.id}_${P.id}_${meW.CLASSE}`,
              niveaux: [h.code],
              paramsLSU: z?.paramsLSU
            }));
          }
        }
      }
    }
    if (n) {
      s = s.filter(n);
    }
    s = s.edSortBy("libelle");
    return s;
  }
  static cleanMatieresWithSSMatieres(e) {
    for (let n of e.periodes) {
      let s = [];
      const h = n.matieres.filter((z, Ae, Ve) => Ae === Ve.findIndex(Tt => `${z.code} - ${z.codeSSMatiere}` == `${Tt.code} - ${Tt.codeSSMatiere}`)).reduce((z, Ae) => {
        if (Array.isArray(z[Ae.code])) {
          z[Ae.code].push(Ae);
        } else {
          z[Ae.code] = [Ae];
        }
        return z;
      }, {});
      const P = Object.keys(h);
      for (let z of P) {
        let Ae = h[z].reduce((Ve, Tt) => {
          if (Tt.codeSSMatiere === "") {
            Ve[0].push(Tt);
          } else {
            Ve[1].push(Tt);
          }
          return Ve;
        }, [[], []]);
        if (Ae[0].length >= 1 && typeof Ae[0][0] !== "undefined") {
          const Ve = Ae[0][0].libelle;
          for (let Tt of Ae[1]) {
            Tt.libelle = `${Ve} - ${Tt.libelle}`;
          }
          s = s.concat(Ae[0][0]);
          s = s.concat(Ae[1]);
        }
      }
      n.matieres = s;
    }
    return e;
  }
  static getClassesPP(e, n, s = false) {
    let h = uKw.getClassesByEtabs(e, n === dcH.ENSEIGNANT ? P => P.isPP === true : null);
    if (s) {
      h = h.map(P => uKw.cleanMatieresWithSSMatieres(P));
    }
    return h.edUniq("uniqueID").edSortBy("code");
  }
  static getProfClassesGroupesTree(e) {
    if (Object.isExists(e)) {
      return {
        classes: uKw.getClassesByEtabs(e).map(d => {
          let h = new Mn7(uKw.cleanMatieresWithSSMatieres(d));
          h.matieres = h.periodes.length > 0 ? h.periodes.edPluckFlatten("matieres").edUniq("code").filter(P => P.codeSSMatiere === "") : h.matieres;
          return h;
        }),
        groupes: e.groupes.map(d => {
          const h = uKw.getCycle(e, d.idCycleEtab, d.etabId);
          let P = new zJg(d);
          P.paramsLSU = Object.isExists(h?.paramsLSU) ? new nK4(h.paramsLSU) : undefined;
          P.etabLibelle = "Groupes";
          P.classeLibelle = P.libelle;
          P.uniqueID = `${P.etabId}_${P.id}_${meW.GROUPE}`;
          if (Array.isArray(P.classes)) {
            P.classes.forEach(z => z.uniqueID = `${P.etabId}_${z.id}_${meW.CLASSE}`);
          }
          uKw.cleanMatieresWithSSMatieres(P);
          P.matieres = P.periodes.length > 0 ? P.periodes.edPluckFlatten("matieres").edUniq("code").filter(z => z.codeSSMatiere === "") : P.matieres;
          return P;
        })
      };
    } else {
      return {
        classes: [],
        groupes: []
      };
    }
  }
  static getProfClassesGroupesTreeConcatUnique(e) {
    const n = uKw.getProfClassesGroupesTree(e);
    let s = [...n.classes, ...n.groupes];
    s = s.edUniq("uniqueID");
    return s;
  }
}
export let VD2 = (() => {
  let R = class extends Gd {
    constructor(n, s) {
      super(n, s);
      this.storage = n;
      this.devTool = s;
    }
    updateEtablissementStore(n) {
      let s = new jIb(n);
      for (let d of s.etablissements) {
        if (Array.isArray(d.niveaux)) {
          for (let h of d.niveaux) {
            for (let P of h.classes) {
              P.etabId = d.id;
            }
          }
        }
      }
      this.store = s;
      this.setStorage(s).catch(d => console.error("EtablissementStore.updateEtablissementStore setStorage : ", d));
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG("StorageService"), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: jIb,
    className: "EtablissementStore",
    idDBKey: "etablissement",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let Xmb = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.etablissementStore = n;
      this.http = s;
      this.httpCacheService = d;
    }
    getNiveauxListe(n = false) {
      if (n || this.etablissementStore.isExpired()) {
        if (!Object.isExists(this._getNiveauxListe$)) {
          this._getNiveauxListe$ = this.http.post("niveauxListe", {}, {
            params: new Et().set("verbe", "get")
          }).pipe((0, j.U)(s => this.etablissementStore.updateEtablissementStore(s.data)), (0, W.K)(s => this.catchBadResponse(s)), _0);
        }
        return this._getNiveauxListe$;
      } else {
        return E.E;
      }
    }
    getNiveauxListeAll(n = false) {
      if (n) {
        this.httpCacheService.delete("getNiveauxListeAll");
      }
      const s = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: "getNiveauxListeAll",
        verbe: "get"
      });
      return this.http.post("niveauxListeAll", {}, {
        params: s
      }).pipe((0, j.U)(d => new jIb(d.data)), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getEleveById(n, s = "", d = false) {
      const h = `getEleveById_${s}_${n}`;
      if (d) {
        this.httpCacheService.delete(h);
      }
      const P = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: h,
        verbe: "get"
      });
      return this.http.post(`eleves/${n}`, {
        anneeScolaire: s
      }, {
        params: P
      }).pipe((0, j.U)(z => new sZ$(z.data)), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getClasseGroupeById(n, s, d = false) {
      const h = (z, Ae, Ve) => {
        let Tt;
        const Vt = uKw.getProfClassesGroupesTreeConcatUnique(z);
        if (Ve === meW.CLASSE) {
          Tt = Vt.find(Hn => Hn.typeEntity === meW.CLASSE && Hn.id === Ae);
          if (!Object.isExists(Tt)) {
            for (let Hn = 0; Hn < Vt.length && (Vt[Hn].typeEntity !== meW.GROUPE || (Tt = Vt[Hn].classes.find(Ci => Ci.id === Ae), !Object.isExists(Tt))); Hn++);
          }
        } else {
          Tt = Vt.find(Hn => Hn.typeEntity === meW.GROUPE && Hn.id === Ae);
        }
        return (0, S.of)(Tt);
      };
      let P;
      P = d ? this.getNiveauxListeAll().pipe((0, F.w)(z => h(z, n, s))) : this.getNiveauxListe().pipe((0, Pe.d)(null), (0, F.w)(() => h(this.etablissementStore.snapshot, n, s)));
      return P;
    }
    contactEtablissement(n = false) {
      if (n) {
        this.httpCacheService.delete("contactEtablissement");
      }
      const s = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: "contactEtablissement",
        verbe: "get"
      });
      return this.http.post("contactetablissement", {}, {
        params: s
      }).pipe((0, j.U)(d => Array.isArray(d.data) ? d.data.map(h => new X0(h)) : []), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getProfParametrages(n, s = false) {
      const d = `enseignants/${n}/parametrages`;
      if (s) {
        this.httpCacheService.delete(d);
      }
      const h = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: d,
        verbe: "get"
      });
      return this.http.post(d, {}, {
        params: h
      }).pipe((0, j.U)(P => new YGU(P.data)), (0, W.K)(P => this.catchBadResponse(P)));
    }
    rechercheEleve(n, s = false) {
      if (s) {
        this.httpCacheService.delete("recherche/eleves");
      }
      const d = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: `recherche/eleves/${n}`,
        query: n,
        verbe: "get"
      });
      return this.http.post("recherche/eleves", {}, {
        params: d
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getUserDetails(n, s) {
      let d = Fn[s] || s;
      if (d === "familles") {
        d = s;
      }
      let h = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", `getUserDetails${n}_${s}`).set("cacheTTL", `${X9o.uneJournee}`);
      return this.http.post(`${d}/${n}/details`, {}, {
        params: h
      }).pipe((0, j.U)(P => new f0(P.data)), (0, W.K)(P => this.catchBadResponse(P)));
    }
    listAll(n) {
      let s = lr[n] || n;
      let d = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", `listAll_${n}`).set("cacheTTL", `${X9o.uneJournee}`);
      return this.http.post(`utilisateurs/${s}`, {}, {
        params: d
      }).pipe((0, j.U)(h => h.data.utilisateurs.map(P => new o$F(P))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getUtilisateurEDById(n, s) {
      return this.listAll(s).pipe((0, j.U)(d => d.find(h => h.id === n)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(VD2), t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let wbX = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    getMenuBlockItem(n, s, d) {
      const h = this.snapshot.entries.find(P => P.id === n && P.type === s);
      if (Object.isExists(h)) {
        return h.items.find(P => d === P.code);
      }
    }
    getActionRoutingFromCode(n, s, d) {
      const h = this.snapshot.entries.find(z => z.id === n && z.type === s);
      if (!Object.isExists(h)) {
        return;
      }
      const P = h.items.find(z => d === z.code);
      if (Object.isExists(P)) {
        return P.action;
      } else {
        return undefined;
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: XmW,
    className: "MenuStore"
  })], R);
  return R;
})();
export let CnD = (() => {
  let R = class extends Gd {
    constructor(n, s, d, h, P, z, Ae, Ve) {
      super(Ve, P);
      this.badgesStore = n;
      this.credentialsStore = s;
      this.etablissementService = d;
      this.commonConfigService = h;
      this.devTool = P;
      this.httpCacheService = z;
      this.menuStore = Ae;
      this.storage = Ve;
      this.isLoggedIn$ = this.select$(Tt => Tt.accounts.length > 0);
      this.currentUser$ = this.select$(() => this.currentUser).pipe(z43);
      this.linkingUsers$ = this.select$(() => this.linkingUsers).pipe(z43);
      this._currentUser = undefined;
      this._linkingUsers = [];
      this._modulesCurrentUser = [];
      this._pipeFullname = new $t3();
    }
    get currentUser() {
      return this._currentUser;
    }
    get linkingUsers() {
      return this._linkingUsers;
    }
    get variantForCurrentUser() {
      if (Object.isExists(this.currentUser)) {
        return $ej.edDBUserSpecificKeyFromUser(this.currentUser);
      } else {
        return "";
      }
    }
    static isDateInAnneeCourante(n, s) {
      if (!C_1.isDate(n)) {
        return false;
      }
      const d = s.split("-");
      if (d.length !== 2) {
        return false;
      }
      const h = C_1.stringToDate(`${d[1]}-07-14`);
      const P = C_1.addNbAnneeToDate(h, -1);
      return C_1.isBetween(n, P, h, false, true, false);
    }
    ready() {
      return super.ready(n => {
        if (Object.isExists(n) && Object.isExists(n.payload) && Ofj(n.payload.accounts)) {
          const s = this.cloneDeep(n.payload);
          this.setAuthStore(s, this.commonConfigService.isBrowser, n.lastModified);
          return true;
        }
        return false;
      });
    }
    setAuthStore(n, s, d, h = false) {
      const P = n.currentAccount();
      const z = !s || !Object.isExists(this._currentUser) || this._currentUser.identifiant !== P.identifiant || this._currentUser.typeCompte !== P.typeCompte;
      this._currentUser = P;
      this._linkingUsers = n.linkedAccounts();
      this.credentialsStore.updateCredentials(this._currentUser);
      if (z) {
        if (Object.isExists(this._currentUser)) {
          this.refreshMenu(this._currentUser, h);
        } else {
          this.menuStore.reset();
        }
      }
      this.httpCacheService.clear();
      this.store = n;
      if (typeof d !== "undefined") {
        this._lastModified = d;
      }
      this.setStorage(n).catch(Ae => console.error("AuthStore.updateAccountsStore setStorage : ", Ae));
    }
    afterLogin(n, s) {
      this.storage.disableStorage(!this.commonConfigService.isBrowser && s !== true);
      const d = this.cloneDeep(n);
      this.setAuthStore(d, this.commonConfigService.isBrowser, undefined, true);
    }
    refreshAccounts(n, s = false) {
      let d = this.cloneDeep();
      d.currentAndLinkedRefreshAccounts(n, this._currentUser, this.commonConfigService.isBrowser);
      this.setAuthStore(d, this.commonConfigService.isBrowser, undefined, s);
    }
    updateInfosAccount(n) {
      let s = this.cloneDeep();
      s.currentAndLinkedInfosAccounts(n, this._currentUser);
      this.setAuthStore(s, this.commonConfigService.isBrowser);
    }
    swipeProfil(n) {
      let s = this.cloneDeep();
      s.swipeProfil(this._currentUser, n);
      this.setAuthStore(s, this.commonConfigService.isBrowser);
    }
    associerAccount(n) {
      let s = this.cloneDeep();
      if (s.accounts.findIndex(h => h.idLogin === n.id) === -1 && Object.isExists(n.accounts) && n.accounts.length > 0) {
        s.accounts.push(n.accounts[0]);
        this.setAuthStore(s, this.commonConfigService.isBrowser);
      }
    }
    dissocierAccount(n) {
      let s = this.cloneDeep();
      const d = s.accounts.findIndex(h => h.idLogin === n);
      if (d > -1) {
        s.accounts.splice(d, 1);
        this.setAuthStore(s, this.commonConfigService.isBrowser);
      }
    }
    updateParametresIndividuels(n, s, d, h) {
      let P = this.cloneDeep();
      const z = P.accounts.find(Ae => Ae.id === s && Ae.typeCompte === n);
      if (Object.isExists(z)) {
        z.parametresIndividuels[d] = h;
        this.setAuthStore(P, this.commonConfigService.isBrowser);
      }
    }
    swipeUser(n, s) {
      let d = this.cloneDeep();
      d.swipeUser(s, n);
      this.setAuthStore(d, this.commonConfigService.isBrowser);
    }
    refreshMenu(n, s = false) {
      let d = new XmW({
        header: {
          css: `edmenu-header-${n.typeCompte}`,
          picture: FSr.isNotEmptyString(n.logoEtablissement) ? n.logoEtablissement : "",
          espace: q9$.getEspaceLibelle(n.typeCompte),
          identite: q9$.getAccountFullName(n.typeCompte, n, this._pipeFullname, false),
          etablissement: FSr.isNotEmptyString(n.nomEtablissement) ? n.nomEtablissement : ""
        }
      });
      this._modulesCurrentUser = [...Kg5.getModulesEnabled(n)];
      let h = new jt();
      h.titre = q9$.getAccountFullName(n.typeCompte, n, this._pipeFullname, false);
      h.label = q9$.getEspaceLibelle(n.typeCompte);
      h.type = n.typeCompte;
      h.id = n.id;
      h.css = `edmenu edmenu-${h.type}`;
      h.sexe = n.profile.sexe;
      h.picture = typeof n.profile.photo !== "undefined" && n.profile.photo ? n.profile.photo : "";
      let P = new We();
      P.titre = "Accueil";
      P.code = lFO.ACCUEIL;
      h.css = `edmenu-${FSr.moduleToCSS(lFO.ACCUEIL)}`;
      P.leftIcon = this.commonConfigService.isBrowser ? "icon-ed_accueil" : "maison";
      P.action = new Ke({
        route: "/"
      });
      if (IDb.isEleve(n.typeCompte)) {
        P.leftIcon = this.commonConfigService.isBrowser ? "icon-ed_timeline" : "maison";
        P.action.route = `/Eleves/${n.id}`;
      }
      if (!this.commonConfigService.isBrowser) {
        P.action.route = "/Accueil";
      }
      let z = [P];
      for (let Tt of this._modulesCurrentUser) {
        let Vt;
        let Hn = [];
        switch (Tt.code) {
          case qzA.APPEL_ETUDE:
            Vt = IDb.isProfesseur(n.typeCompte) && Kg5.isModuleEnabled(n, qzA.APPEL_PRIMAIRE) ? null : q9$.getDefaultItem(Tt, n.id, n.typeCompte, this.commonConfigService.isBrowser);
            break;
          case qzA.CLOUD:
            Vt = null;
            Hn = q9$.getCloud(Tt, n.id, n.typeCompte, this.commonConfigService.isBrowser);
            break;
          case qzA.CAHIER_DE_TEXTES:
            Vt = null;
            Hn = q9$.getCDT(Tt, n.id, n.typeCompte, this.commonConfigService.isBrowser);
            break;
          case qzA.CONSEIL_DE_CLASSE_NG:
          case qzA.COMP_NUM:
            Vt = q9$.getDefaultItem(Tt, n.id, n.typeCompte, this.commonConfigService.isBrowser);
            break;
          case qzA.LSL:
            Vt = this.commonConfigService.isBrowser ? q9$.getDefaultItem(Tt, n.id, n.typeCompte, this.commonConfigService.isBrowser) : null;
            break;
          case qzA.CATER:
            Vt = q9$.getCantineCater(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.SCOLACONCEPT:
            Vt = this.commonConfigService.isBrowser ? q9$.getCantineScolaConcept(Tt.params, this.commonConfigService.isBrowser) : null;
            break;
          case qzA.ALISE:
            Vt = this.commonConfigService.isBrowser ? q9$.getCantineAlise(Tt.params, this.commonConfigService.isBrowser) : null;
            break;
          case qzA.EDUNAO:
            Vt = this.commonConfigService.isBrowser ? q9$.getEdunao(Tt.params, this.commonConfigService.isBrowser) : null;
            break;
          case qzA.EDUMALIN:
            Vt = this.commonConfigService.isBrowser ? q9$.getEdumalin(Tt.params, this.commonConfigService.isBrowser) : null;
            break;
          case qzA.CLICKNPLAY:
            Vt = this.commonConfigService.isBrowser ? q9$.getClickAndPlay(Tt.params, this.commonConfigService.isBrowser) : null;
            break;
          case qzA.AVENRIA:
            Vt = q9$.getAvenria(Tt.params, this.commonConfigService.isBrowser, IDb.isProfesseur(n.typeCompte));
            break;
          case qzA.SACOCHE:
            Vt = q9$.getSacoche(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.ESIDOC:
            Vt = q9$.getEsidoc(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.PEARLTREES:
            Vt = q9$.getPearlTrees(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.AUTORISATIONS_SORTIE:
            if (!this.commonConfigService.isBrowser) {
              Vt = IDb.isPersonnel(n.typeCompte) ? q9$.getAutorisationsSortie(Tt) : null;
            }
            break;
          case qzA.MSC:
            Vt = q9$.getMSC(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.ETUDIANT:
            Vt = q9$.getEtudiant(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.ONISEPSERVICES:
            Vt = q9$.getONISEPSERVICES(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.ARD:
            Vt = q9$.getARD(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.IJBOX:
            Vt = q9$.getIJBOX(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.IMPALA:
            Vt = q9$.getImpala(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.FUTURNESS:
            Vt = q9$.getFuturness(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.COMMANDE_PASSAGE:
          case qzA.RESERVATIONS:
            Vt = q9$.getReservationAndCommande(Tt, n.id, n.typeCompte, z, this._currentUser, this.commonConfigService.isBrowser);
            break;
          case qzA.POPLAB:
            Vt = q9$.getPopLab(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.EDUMEDIA:
            Vt = q9$.getEdumedia(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.ALPHAEDUCATION:
            Vt = q9$.getAlphaEducation(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.KIDIWE:
            Vt = q9$.getKidiwe(Tt.params, this.commonConfigService.isBrowser);
            break;
          case qzA.PASSAGEWEB:
            Vt = q9$.getDefaultItem(Tt, n.id, n.typeCompte, this.commonConfigService.isBrowser);
            break;
          case qzA.EDIALOG:
            Vt = q9$.getEDIALOG(Tt.params, this.commonConfigService.isBrowser);
            break;
          default:
            Vt = q9$.getDefaultItem(Tt, n.id, n.typeCompte, this.commonConfigService.isBrowser);
        }
        if (Object.isExists(Vt)) {
          z.push(Vt);
        }
        if (Hn.length > 0) {
          z = z.concat(Hn);
        }
      }
      h.items = z;
      let Ae = [h];
      let Ve = new WwR();
      Ve[WwR.whichClebadge(h.id, h.type)] = h.items.reduce((Tt, Vt) => {
        if (!Vt.callNiveauxListe) {
          Tt[Vt.code] = new Gf({
            valeur: Vt.badge,
            iconApp: Vt.code === qzA.MESSAGERIE || Vt.code === qzA.QCM
          });
        }
        return Tt;
      }, new eg());
      if ((IDb.isFamille(n.typeCompte) || IDb.isEntreprise(n.typeCompte)) && typeof n.profile.eleves !== "undefined" && n.profile.eleves.length > 0) {
        const Tt = n.profile.eleves;
        for (let Vt of Tt) {
          let Hn = [];
          if (this.commonConfigService.isBrowser && !IDb.isEntreprise(n.typeCompte)) {
            let ss = new We();
            ss.titre = "Accueil";
            ss.code = lFO.ACCUEIL;
            ss.css = `edmenu-${FSr.moduleToCSS(lFO.ACCUEIL)}`;
            ss.leftIcon = "icon-ed_timeline";
            ss.action = new Ke({
              route: `/Eleves/${Vt.id}`
            });
            Hn.push(ss);
          }
          let Ci = new jt();
          if (IDb.isEntreprise(n.typeCompte)) {
            Ci.titre = q9$.getAccountFullName(o2q.TE, Vt, this._pipeFullname, false);
            Ci.label = q9$.getEspaceLibelle(dcH.ELEVE);
            Ci.type = o2q.TE;
            Ci.id = Vt.id;
            Ci.css = `edmenu edmenu-${o2q.TE}`;
            Ci.sexe = Vt.sexe;
            Ci.picture = typeof Vt.photo !== "undefined" && Vt.photo ? Vt.photo : "";
            Ci.isOpen = false;
          } else {
            Ci.titre = q9$.getAccountFullName(o2q.FE, Vt, this._pipeFullname, false);
            Ci.label = q9$.getEspaceLibelle(dcH.ELEVE);
            Ci.type = o2q.FE;
            Ci.id = Vt.id;
            Ci.css = `edmenu edmenu-${o2q.FE}`;
            Ci.sexe = Vt.sexe;
            Ci.picture = typeof Vt.photo !== "undefined" && Vt.photo ? Vt.photo : "";
            Ci.isOpen = false;
          }
          const fr = Kg5.getModulesEnabled(Vt);
          for (let ss of fr) {
            let vo;
            let uo = [];
            switch (ss.code) {
              case qzA.QCM:
              case qzA.DOCUMENTS_ELEVE:
                vo = null;
                break;
              case qzA.AFF_EL:
                vo = IDb.isEntreprise(n.typeCompte) ? q9$.getCoordFamille(ss, Vt.id, this.commonConfigService.isBrowser) : null;
                break;
              case qzA.CLOUD:
                vo = null;
                uo = q9$.getCloud(ss, Vt.id, o2q.FE, this.commonConfigService.isBrowser);
                break;
              case qzA.COMMANDE_PASSAGE:
              case qzA.RESERVATIONS:
                vo = q9$.getReservationAndCommande(ss, Vt.id, o2q.FE, Hn, this._currentUser, this.commonConfigService.isBrowser, Vt);
                break;
              case qzA.CAHIER_DE_TEXTES:
                vo = null;
                uo = q9$.getCDT(ss, Vt.id, o2q.FE, this.commonConfigService.isBrowser);
                break;
              case qzA.ETUDIANT:
                vo = q9$.getEtudiant(ss.params, this.commonConfigService.isBrowser);
                break;
              case qzA.FUTURNESS:
                vo = q9$.getFuturness(ss.params, this.commonConfigService.isBrowser);
                break;
              case qzA.POPLAB:
                vo = q9$.getPopLab(ss.params, this.commonConfigService.isBrowser);
                break;
              case qzA.SACOCHE:
                vo = q9$.getSacoche(ss.params, this.commonConfigService.isBrowser);
                break;
              case qzA.IMPALA:
                vo = q9$.getImpala(ss.params, this.commonConfigService.isBrowser, Vt.id);
                break;
              case qzA.EDUMEDIA:
                vo = q9$.getEdumedia(ss.params, this.commonConfigService.isBrowser, Vt.id);
                break;
              default:
                vo = q9$.getDefaultItem(ss, Vt.id, o2q.FE, this.commonConfigService.isBrowser);
            }
            if (Object.isExists(vo)) {
              Hn.push(vo);
            }
            if (uo.length > 0) {
              Hn = Hn.concat(uo);
            }
          }
          Ci.items = Hn;
          Ae.push(Ci);
          Ve[WwR.whichClebadge(Ci.id, Ci.type)] = Ci.items.reduce((ss, vo) => {
            if (!vo.callNiveauxListe) {
              ss[vo.code] = new Gf({
                valeur: vo.badge,
                iconApp: false
              });
            }
            return ss;
          }, new eg());
        }
      }
      if (s) {
        this.badgesStore.store = Ve;
        this.badgesStore.setStorage(Ve).catch(Tt => console.error("AuthStore.refreshMenu badgesStore.setStorage : ", Tt));
        this.badgesStore.markAsReady();
      }
      d.entries = Ae;
      this.menuStore.store = d;
    }
    getMenuClasseOuGroupe(n, s, d) {
      let h = new jt();
      h.titre = FSr.capitalizeFirstLetter(d.libelle);
      h.label = h.titre;
      h.type = s;
      h.id = d.id;
      h.css = `edmenu edmenu-${s}`;
      h.picture = q9$.getDefaultPicture(s);
      let P = new We();
      P.titre = "Retour à la liste des élèves";
      P.css = "edmenu-home";
      P.leftIcon = this.commonConfigService.isBrowser ? "fa fa-list" : "people";
      P.action = new Ke({
        route: "/Consultation",
        queryParams: {
          typeEntity: s === o2q.C ? meW.CLASSE : meW.GROUPE,
          idEntity: n
        }
      });
      let z = new We();
      z.titre = "Les éditions";
      z.css = "edmenu-cahierdetexte";
      z.leftIcon = this.commonConfigService.isBrowser ? "icon-ed_editons" : "print";
      z.action = new Ke({
        route: `/${s === o2q.C ? meW.CLASSE : meW.GROUPE}/${n}/editions`
      });
      let Ae = [P, z];
      for (let Ve of this._modulesCurrentUser) {
        let Tt;
        let Vt = [];
        switch (Ve.code) {
          case qzA.CAHIER_DE_TEXTES:
            Tt = null;
            Vt = q9$.getCDT(Ve, d.id, s, this.commonConfigService.isBrowser);
            break;
          case qzA.EDT:
          case qzA.VIE_SCOLAIRE:
            Tt = q9$.getDefaultItem(Ve, d.id, s, this.commonConfigService.isBrowser);
            break;
          case qzA.CONSEIL_DE_CLASSE_NG:
            if (Object.isExists(this.currentUser) && (this.currentUser.isChefEtablissement || IDb.isProfesseur(this.currentUser.typeCompte) && d.isPP === true)) {
              Tt = q9$.getDefaultItem(Ve, d.id, s, this.commonConfigService.isBrowser);
            }
        }
        if (Object.isExists(Tt)) {
          Ae.push(Tt);
        }
        if (Vt.length > 0) {
          Ae = Ae.concat(Vt);
        }
      }
      h.items = Ae;
      return h;
    }
    getMenuProfOuPersonnelEleve(n, s, d) {
      if (!Object.isExists(this._currentUser)) {
        return new jt();
      }
      let P;
      let h = [];
      if (this._currentUser.typeCompte === dcH.ENSEIGNANT) {
        P = o2q.PE;
        if (this.commonConfigService.isBrowser) {
          let Ae = new We();
          Ae.titre = "Retour à la liste des élèves";
          Ae.code = qzA.CONSULTATION_ETABLISSEMENT;
          Ae.css = "edmenu-home";
          Ae.leftIcon = this.commonConfigService.isBrowser ? "fa fa-arrow-left" : "chevron-back";
          Ae.action = new Ke({
            route: "/Consultation",
            queryParams: {
              typeEntity: s === o2q.C ? meW.CLASSE : meW.GROUPE,
              idEntity: n
            }
          });
          h.push(Ae);
        }
      } else {
        P = o2q.AE;
      }
      let z = new jt();
      z.titre = `${FSr.capitalizeFirstLetter(d.nom)} ${FSr.capitalizeFirstLetter(d.prenom)} (${d.classeLibelle})`;
      z.label = z.titre;
      z.type = P;
      z.id = d.id;
      z.css = `edmenu edmenu-${P}`;
      z.sexe = d.sexe;
      z.picture = typeof d.photo !== "undefined" && d.photo ? d.photo : "";
      for (let Ae of this._modulesCurrentUser) {
        let Ve;
        let Tt = [];
        switch (Ae.code) {
          case qzA.AFF_EL:
          case qzA.VIE_SCOLAIRE:
          case qzA.CARNET_NOTES:
          case qzA.NOTES:
          case qzA.EDT:
            Ve = q9$.getDefaultItem(Ae, d.id, P, this.commonConfigService.isBrowser);
            break;
          case qzA.CAHIER_DE_TEXTES:
            Ve = null;
            Tt = q9$.getCDT(Ae, d.id, P, this.commonConfigService.isBrowser);
            break;
          case qzA.CARNET_CORRESPONDANCE:
            Ve = q9$.getDefaultItem(Ae, d.id, P, this.commonConfigService.isBrowser);
            Ve.code = lFO.CARNET_CORRESPONDANCE_ELEVE;
            break;
          case qzA.CLOUD:
            Ve = null;
            Tt = q9$.getCloud(Ae, d.id, P, this.commonConfigService.isBrowser);
            break;
          case qzA.AUTORISATIONS_SORTIE:
            if (!this.commonConfigService.isBrowser) {
              Ve = q9$.getAutorisationsSortie(Ae, d.id);
            }
            break;
          default:
            Ve = null;
        }
        if (Object.isExists(Ve)) {
          h.push(Ve);
        }
        if (Tt.length > 0) {
          h = h.concat(Tt);
        }
      }
      h.forEach(Ae => {
        if (Ae.code !== qzA.CONSULTATION_ETABLISSEMENT && Object.isExists(Ae.action) && FSr.isNotEmptyString(Ae.action.route)) {
          Ae.action.route = `/${s === o2q.C ? meW.CLASSE : meW.GROUPE}/${n}${Ae.action.route}`;
        }
      });
      z.items = h;
      return z;
    }
    toggleMenuClasseOuGroupe(n, s, d, h = true) {
      let P = this.menuStore.cloneDeep();
      const z = P.entries.findIndex(Ve => Ve.id === n && Ve.type === s);
      let Ae;
      if (z > -1) {
        if (h) {
          Ae = P.entries[z];
          if (Ae.isOpen) {
            return;
          }
        } else {
          P.entries.splice(z, 1);
        }
      } else if (h) {
        Ae = this.getMenuClasseOuGroupe(n, s, d);
        P.entries.edInsertUpdate(Ae, Ve => Ve.type === o2q.C || Ve.type === o2q.G);
      }
      P.entries.forEach(Ve => {
        Ve.isOpen &&= false;
      });
      Ae.isOpen = true;
      this.menuStore.store = P;
    }
    removeSubMenu(n) {
      const s = [o2q.C, o2q.PE, o2q.AE, o2q.G];
      if (Object.isExists(n) && s.indexOf(n) === -1) {
        return;
      }
      let d = this.menuStore.cloneDeep();
      let h = d.entries.edRemove(P => Object.isExists(n) ? P.type === n : s.indexOf(P.type) > -1);
      if (d.entries.findIndex(P => P.isOpen) === -1 && d.entries.length > 0) {
        d.entries[0].isOpen = true;
      }
      if (h.length > 0) {
        this.menuStore.store = d;
      }
    }
    toggleMenuProfOuPersonnelEleve(n, s, d, h, P = true) {
      let z = this.menuStore.cloneDeep();
      const Ae = n.typeCompte === dcH.ENSEIGNANT ? o2q.PE : o2q.AE;
      const Ve = z.entries.findIndex(Vt => Vt.id === h.id && Vt.type === Ae);
      let Tt;
      if (Ve > -1) {
        if (P) {
          Tt = z.entries[Ve];
          if (Tt.isOpen) {
            return;
          }
        } else {
          z.entries.splice(Ve, 1);
        }
      } else if (P) {
        const Vt = z.entries.findIndex(Hn => Hn.type === Ae);
        Tt = this.getMenuProfOuPersonnelEleve(s, d, h);
        if (Vt > -1) {
          z.entries.splice(Vt, 1);
        }
        z.entries.push(Tt);
      }
      z.entries.forEach(Vt => {
        Vt.isOpen &&= false;
      });
      Tt.isOpen = true;
      this.menuStore.store = z;
    }
    toggleMenuFamilleEleve(n, s, d = true) {
      if (n.typeCompte !== dcH.FAMILLE_RESPONSABLE && n.typeCompte !== dcH.FAMILLE_CONJOINT) {
        return;
      }
      let h = this.menuStore.cloneDeep();
      const P = o2q.FE;
      const z = h.entries.findIndex(Ve => Ve.id === s && Ve.type === P);
      if (z !== -1 && h.entries[z].isOpen !== d) {
        h.entries.forEach(Ve => {
          if (Ve.id === s && Ve.type === P) {
            Ve.isOpen = d;
          } else if (d) {
            Ve.isOpen = !d;
          }
        });
        this.menuStore.store = h;
      }
    }
    clearSubMenus() {
      let n = this.menuStore.cloneDeep();
      n.entries.edRemove(s => [o2q.C, o2q.G, o2q.AE, o2q.PE].findIndex(d => d === s.type) > -1);
      if (n.entries.findIndex(s => s.isOpen) === -1 && n.entries.length > 0) {
        n.entries[0].isOpen = true;
      }
      this.menuStore.store = n;
    }
    isLoggedIn() {
      var n;
      return ((n = this.snapshot) === null || n === undefined ? undefined : n.accounts.length) > 0;
    }
    isFamilleResponsable() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isFamilleResponsable(n);
    }
    isEleve() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isEleve(n);
    }
    isFamille() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isFamille(n);
    }
    isFouE() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isFamille(n) || IDb.isEleve(n);
    }
    isEntreprise() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isEntreprise(n);
    }
    isEntrepriseOuE() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isEntrepriseOuEleve(n);
    }
    isPersonnel() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isPersonnel(n);
    }
    isProfesseur() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isProfesseur(n);
    }
    isProfEtPersonnel() {
      return IDb.isProfEtPersonnel(this.currentUser);
    }
    isProfOuPersonnel() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.typeCompte : "";
      return IDb.isProfOuPersonnel(n);
    }
    isModeSupervision() {
      return (Object.isExists(this.currentUser) ? this.currentUser.identifiant : "") === "supervision";
    }
    isEphemere() {
      return Object.isExists(this.currentUser) && this.currentUser.ephemere === true;
    }
    cToken() {
      const n = Object.isExists(this.currentUser) ? this.currentUser.codeOgec : "";
      return IDb.cToken(n);
    }
    isHimself(n, s) {
      return Object.isExists(this.currentUser) && this.currentUser.id === s && this.currentUser.typeCompte === n;
    }
    getClasses() {
      let n = [];
      if (this.isFamille() && Array.isArray(this.currentUser.profile.eleves)) {
        n = this.currentUser.profile.eleves.map(s => new WRp(s.classe));
      }
      if (this.isEleve() && Object.isExists(this.currentUser.profile.classe)) {
        n.push(new WRp(this.currentUser.profile.classe));
      }
      return n.edSortBy("libelle");
    }
    getEleve(n, s = "", d = false) {
      const h = this.currentUser;
      if (this.isEleve() && n === h.id) {
        return (0, S.of)(new XPO(h));
      }
      if (this.isFamille() || this.isEntreprise()) {
        let z = h.profile.eleves.find(Ae => Ae.id === n);
        return (0, S.of)(new Dfc(z));
      }
      if (this.isProfOuPersonnel()) {
        return this.etablissementService.getEleveById(n, s, d).pipe((0, j.U)(P => new Dfc({
          ...P,
          classe: {
            id: P.classeId,
            libelle: P.classeLibelle,
            code: ""
          }
        })));
      } else {
        return (0, S.of)(undefined);
      }
    }
    getAnneesArchive(n) {
      if (!Object.isExists(this.currentUser)) {
        return [];
      }
      let s = [this.currentUser.anneeScolaireCourante];
      if (n > 0) {
        const d = this.currentUser.anneeScolaireCourante.split("-");
        for (let h = 1; h < n + 1; h++) {
          const P = parseInt(d[0], 10) - h + "-" + (parseInt(d[1], 10) - h);
          s.unshift(P);
        }
      }
      return s;
    }
    getAnneesArchiveAvecLibelle(n) {
      if (!Object.isExists(this.currentUser)) {
        return [];
      }
      let s = [{
        valeur: this.currentUser.anneeScolaireCourante,
        libelle: "Année en cours"
      }];
      if (n > 0) {
        const d = this.currentUser.anneeScolaireCourante.split("-");
        for (let h = 1; h < n + 1; h++) {
          const P = parseInt(d[0], 10) - h + "-" + (parseInt(d[1], 10) - h);
          s.unshift({
            valeur: P,
            libelle: P
          });
        }
      }
      return s;
    }
    isAnneeCourante(n) {
      return typeof n === "undefined" || n === "" || Object.isExists(this.currentUser) && n === this.currentUser.anneeScolaireCourante;
    }
    clearAndDisableStorage() {
      this.storage.disableStorage(true);
      this.storage.clear().catch(n => console.error("AuthStore.clearAndDisableStorage storage : ", n));
    }
    reset() {
      this._currentUser = undefined;
      this._linkingUsers = [];
      this._modulesCurrentUser = [];
      super.reset();
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(et7), t.LFG(dSF), t.LFG(Xmb), t.LFG(vh), t.LFG(lbX), t.LFG(nl), t.LFG(wbX), t.LFG("StorageService"));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: xf,
    className: "AuthStore",
    idDBKey: "accounts"
  })], R);
  return R;
})();
let sm = (() => {
  class R {
    constructor(n) {
      this.authStore = n;
      this._wsMessages = new v.x();
      this.wsMessages$ = this._wsMessages.asObservable();
    }
    ngOnDestroy() {
      this._wsMessages.complete();
      if (this._ws.connected) {
        this.disconnect();
      }
    }
    initWsEvents() {
      this._ws.on("connect", () => {
        this._ws.on("message", n => {
          this._wsMessages.next(new Mi(n));
        });
        setTimeout(() => {
          this.join();
        }, 1000);
      });
    }
    connect() {
      this._ws = el("https://controller.ecoledirecte.com");
      this.initWsEvents();
    }
    disconnect() {
      this.leave();
      this._ws.disconnect();
    }
    sendMessage(n, s, d, h) {
      let P = new Mi({
        data: s,
        author: new Rt({
          profil: this.authStore.currentUser.typeCompte,
          idUser: this.authStore.currentUser.id,
          ogec: this.authStore.currentUser.codeOgec
        }),
        target: d,
        notification: h,
        token: this.authStore.currentUser.socketToken
      });
      if (Object.isExists(this._ws)) {
        this._ws.emit(n, P);
      } else {
        console.log("WebSocket disconnected : unable to emit message");
      }
    }
    join() {
      if (Object.isExists(this._ws)) {
        this._ws.emit(`join-${this.authStore.currentUser.typeCompte}`, {
          token: this.authStore.currentUser.socketToken
        });
      } else {
        console.log("WebSocket disconnected : unable to emit message");
      }
    }
    leave() {
      if (Object.isExists(this._ws)) {
        this._ws.emit(`leave-${this.authStore.currentUser.typeCompte}`, {
          token: this.authStore.currentUser.socketToken
        });
      } else {
        console.log("WebSocket disconnected : unable to emit message");
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class gv {
  constructor(e = {
    libelleEtab: "",
    ogecEtab: "",
    questionSecrete: "",
    nomCompte: "",
    prenomCompte: "",
    typeCompte: "",
    niveauSecuriteMDPEtab: 2,
    idLogin: 0
  }) {
    this.libelleEtab = e.libelleEtab;
    this.ogecEtab = e.ogecEtab;
    this.idLogin = e.idLogin;
    this.prenomCompte = e.prenomCompte;
    this.nomCompte = e.nomCompte;
    this.typeCompte = e.typeCompte;
    this.niveauSecuriteMDPEtab = e.niveauSecuriteMDPEtab;
    this.questionSecrete = e.questionSecrete;
    if (Object.isExists(e.reponse)) {
      this.reponse = e.reponse;
    }
  }
}
export class I$6 {
  constructor(e = {
    mailOrTel: "",
    niveauMDPSecurite: 0,
    smsActif: false
  }) {
    this.mailOrTel = e.mailOrTel;
    this.niveauMDPSecurite = e.niveauMDPSecurite;
    this.smsActif = e.smsActif;
    if (Object.isExists(e.etape)) {
      this.etape = e.etape;
    }
    if (Object.isExists(e.login)) {
      this.login = e.login;
    }
    if (Object.isExists(e.motDePasse)) {
      this.motDePasse = e.motDePasse;
    }
    if (Object.isExists(e.motDePasseConfirm)) {
      this.motDePasseConfirm = e.motDePasseConfirm;
    }
    if (Object.isExists(e.typeReinit)) {
      this.typeReinit = e.typeReinit;
    }
    if (Object.isExists(e.key)) {
      this.key = e.key;
    }
    if (Object.isExists(e.urlC)) {
      this.urlC = e.urlC;
    }
    if (Object.isExists(e.codeSms)) {
      this.codeSms = e.codeSms;
    }
    if (Object.isExists(e.ogec)) {
      this.ogec = e.ogec;
    }
    if (Object.isExists(e.modeReception)) {
      this.modeReception = e.modeReception;
    }
    if (Object.isExists(e.modeSMS)) {
      this.modeSMS = e.modeSMS;
    }
    if (Object.isExists(e.idLogin)) {
      this.idLogin = e.idLogin;
    }
    if (Object.isExists(e.question)) {
      this.question = e.question;
    }
    if (Object.isExists(e.reponse)) {
      this.reponse = e.reponse;
    }
    this.comptes = Array.isArray(e.comptes) ? e.comptes.map(n => new gv(n)) : [];
  }
  static initialState() {
    return {
      mailOrTel: "",
      niveauMDPSecurite: 0,
      smsActif: false
    };
  }
}
export let luj = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: I$6,
    className: "RecupLoginStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let e80 = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P, z, Ae, Ve, Tt) {
      super();
      this.authStore = n;
      this.credentialsStore = s;
      this.cookieService = d;
      this.httpCancelService = h;
      this.httpCacheService = P;
      this.http = z;
      this.recupLoginStore = Ae;
      this.resetService = Ve;
      this.commonConfigService = Tt;
    }
    doLogin(n) {
      const s = {
        ...n,
        uuid: this.credentialsStore.uuid
      };
      return this.http.post("login", s, {
        observe: "response"
      }).pipe((0, F.w)(d => {
        const h = +d.headers.get(j9q.code);
        if (h === 221) {
          return (0, I._)(() => new FwQ(d.body.message, h));
        }
        if (Object.isExists(d.body.data)) {
          if (h === 202) {
            return (0, S.of)(new lZ0(d.body.data));
          }
          if (h === 240) {
            return (0, S.of)(new xrB(d.body.data));
          }
          if (Object.isExists(d.body.data) && Array.isArray(d.body.data.accounts) && d.body.data.accounts.length > 0) {
            return (0, S.of)(new xf(d.body.data));
          }
        }
        return (0, I._)(() => new FwQ("Aucun compte trouvé, merci de réessayer !", 517));
      }), (0, Z.b)(d => {
        if (d instanceof xf) {
          this.authStore.afterLogin(d, s.sesouvenirdemoi);
          this.alerteSecuriteConnexion();
        }
      }), (0, W.K)(d => this.catchBadResponse(d, h => this.handleError(h))));
    }
    alerteSecuriteConnexion() {
      if (this.authStore.currentUser.ephemere === true || !this.authStore.currentUser.checkAuthentificationSecure || !IDb.isProfOuPersonnelOuEntreprise(this.authStore.currentUser.typeCompte)) {
        return;
      }
      let n = !this.commonConfigService.isBrowser;
      let s = "";
      if (this.commonConfigService.isBrowser && (s = YC.base64encode($ej.edDBUserSpecificKeyFromUser(this.authStore.currentUser, ["ecoledirecte"])), n = !this.cookieService.check(s), !n)) {
        const d = this.cookieService.get(s);
        if (FSr.isNotEmptyString(d)) {
          this.cookieService.set(s, d, {
            expires: bf() ? 1 : 90,
            path: "/",
            secure: true,
            sameSite: "Strict"
          });
        }
      }
      if (n) {
        this.http.post("connexion/notification", {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, Z.b)(d => {
          if (this.commonConfigService.isBrowser) {
            this.cookieService.set(s, d.data.cookieValue, {
              expires: bf() ? 1 : 90,
              path: "/",
              secure: true,
              sameSite: "Strict"
            });
          }
        }), (0, W.K)(d => E.E)).subscribe();
      }
    }
    doCreationCompte(n, s, d) {
      if (s !== "" && d !== "") {
        n.login = s;
        n.motDePasse = d;
      }
      return this.http.post("logins", n, {
        params: new Et().set("verbe", "post"),
        observe: "response"
      }).pipe((0, F.w)(h => {
        const P = +h.headers.get(j9q.code);
        if (P === 221 || P === 235 || P === 220) {
          return (0, I._)(() => new FwQ(h.body.message, P));
        } else if (P === 202 && Object.isExists(h.body.data) && h.body.data.id > 0) {
          return (0, S.of)(h.body.data);
        } else {
          return (0, I._)(() => new FwQ("Erreur lors de la création de votre compte, merci de réessayer !", 517));
        }
      }), (0, W.K)(h => this.catchBadResponse(h, P => this.handleError(P))));
    }
    doInfosAccount(n = true) {
      const s = "doInfosAccount";
      if (n) {
        this.httpCacheService.delete(s);
      }
      const d = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: s,
        cacheTTL: `${X9o.uneJournee}`,
        verbe: "get"
      });
      return this.http.post(`logins/${this.authStore.currentUser.idLogin}`, {}, {
        params: d
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h, P => this.handleError(P))));
    }
    doUpdateInfosAccount(n) {
      const s = {
        ...n,
        uuid: this.credentialsStore.uuid
      };
      return this.http.post(`logins/${this.authStore.currentUser.idLogin}`, s, {
        params: new Et().set("verbe", "put"),
        observe: "response"
      }).pipe((0, F.w)(d => {
        const h = +d.headers.get(j9q.code);
        if (h === 235 || h !== 200) {
          return (0, I._)(() => new FwQ(d.body.message, h));
        } else if (Object.isExists(d.body.data)) {
          return (0, S.of)(d.body.data);
        } else {
          return (0, I._)(() => new FwQ("Problème lors de la mise à jour de votre compte, merci de réessayer !", 517));
        }
      }), (0, Z.b)(d => this.authStore.updateInfosAccount(d)), (0, W.K)(d => this.catchBadResponse(d, h => this.handleError(h))));
    }
    doRecuperationMotDePasse(n) {
      let s = {};
      if (Object.isExists(n.question)) {
        s.question = n.question;
      }
      if (Object.isExists(n.ogec)) {
        s.ogec = n.ogec;
      }
      if (Object.isExists(n.reponse)) {
        s.reponse = n.reponse;
      }
      if (Object.isExists(n.modeReception)) {
        s.modeReception = n.modeReception;
      }
      if (Object.isExists(n.mailOrTel)) {
        s.mailOrTel = n.mailOrTel;
      }
      if (Object.isExists(n.idLogin)) {
        s.idLogin = n.idLogin;
      }
      let d = 0;
      const h = new Date(1987, 0, 17, 0, 0, 0, 0);
      const P = new Date();
      P.setSeconds(0);
      P.setMilliseconds(0);
      this.commonConfigService.packageVersion.split(".").forEach((Ve, Tt) => {
        switch (Tt) {
          case 0:
            d += +Ve * P.getMinutes();
            break;
          case 1:
            d += +Ve * P.getHours();
            break;
          case 2:
            d += +Ve * P.getDate();
        }
      });
      d *= P.getTime() / 1000 - h.getTime() / 1000;
      s.k = d;
      return this.http.post("recuperationmotdepasse", s, {
        params: new Et().set("verbe", "post"),
        observe: "response"
      }).pipe((0, F.w)(Ve => {
        if (Ve.body.data.smsActif) {
          n.modeSMS = Ve.body.data.smsActif;
          n.smsActif = Ve.body.data.smsActif;
        }
        this.recupLoginStore.store = new I$6(n);
        return (0, S.of)(new I$6(Ve.body.data));
      }), (0, W.K)(Ve => this.catchBadResponse(Ve, Tt => this.handleError(Tt))));
    }
    getInfosEtabWithSecretsQuestions(n) {
      let s = {};
      if (Object.isExists(n.key)) {
        s.key = n.key;
      }
      if (Object.isExists(n.urlC)) {
        s.urlC = n.urlC;
      }
      if (Object.isExists(n.mailOrTel)) {
        s.mailOrTel = n.mailOrTel;
      }
      return this.http.post("recuperationmotdepasse", s, {
        params: new Et().set("verbe", "get"),
        observe: "response"
      }).pipe((0, F.w)(d => {
        let h = new I$6(d.body.data);
        if (Object.isExists(d.body.data.mailOrTel)) {
          h.mailOrTel = d.body.data.mailOrTel;
        }
        if (Object.isExists(d.body.data.modeReception)) {
          h.modeReception = d.body.data.modeReception;
        }
        this.recupLoginStore.store = h;
        return (0, S.of)(h);
      }), (0, W.K)(d => this.catchBadResponse(d, h => this.handleError(h))));
    }
    doReinitialisationPWD(n) {
      let s = new I$6(n);
      return this.http.post(`reinitialisationmotdepasse/${n.typeReinit}`, s, {
        params: new Et().set("verbe", "put"),
        observe: "response"
      }).pipe((0, F.w)(d => {
        const h = +d.headers.get(j9q.code);
        if (h === 221 || h === 235) {
          return (0, I._)(() => new FwQ(d.body.message, h));
        } else {
          return (0, S.of)(d.body.code);
        }
      }), (0, W.K)(d => this.catchBadResponse(d, h => this.handleError(h))));
    }
    refreshAccounts(n = false) {
      if (n || this.authStore.isExpired()) {
        return this.http.post("login", {
          ...this.credentialsStore.credentials,
          uuid: this.credentialsStore.uuid
        }, {
          observe: "response"
        }).pipe((0, F.w)(s => {
          const d = +s.headers.get(j9q.code);
          if (d === 221 || d === 202) {
            return (0, I._)(() => new FwQ(s.body.message, d));
          } else if (Object.isExists(s.body.data) && Array.isArray(s.body.data.accounts) && s.body.data.accounts.length > 0) {
            this.authStore.refreshAccounts(s.body.data, true);
            return (0, S.of)(undefined);
          } else {
            return (0, I._)(() => new FwQ("Aucun compte trouvé, merci de réessayer !", 517));
          }
        }), (0, W.K)(s => this.catchBadResponse(s, d => this.handleError(d))));
      } else {
        return E.E;
      }
    }
    comptesAssocies(n = false) {
      const s = this.authStore.currentUser.idLogin;
      const d = `comptesAssocies-${s}`;
      if (n) {
        this.httpCacheService.delete(d);
      }
      const h = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: d,
        cacheTTL: `${X9o.uneJournee}`,
        verbe: "get"
      });
      return this.http.post(`logins/${s}/comptes`, {}, {
        params: h
      }).pipe((0, j.U)(P => P.data.map(z => new iuP(z))), (0, W.K)(P => this.catchBadResponse(P, z => this.handleError(z))));
    }
    associer(n) {
      const s = this.authStore.currentUser.idLogin;
      return this.http.post(`logins/${s}/comptes`, {
        identifiantCompteAssocie: n.newIdentifiant,
        motDePasseComteAssocie: n.newPassword
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(h => {
        if (h.code !== 200 && h.code !== 202) {
          return (0, I._)(() => new FwQ("Authentification incorrecte", h.code, DOJ.genericError));
        }
        const P = new iuP(h.data);
        if (h.code === GL1.OK) {
          this.authStore.associerAccount(P);
        }
        this.httpCacheService.delete(`comptesAssocies-${s}`);
        return (0, S.of)(P);
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    dissocier(n, s) {
      const d = this.authStore.currentUser.idLogin;
      return this.http.post(`logins/${d}/comptes/${n}`, {
        isExterne: s
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, j.U)(() => {
        if (!s) {
          this.authStore.dissocierAccount(n);
        }
        this.httpCacheService.delete(`comptesAssocies-${d}`);
        return true;
      }), (0, W.K)(h => this.catchBadResponse(h, P => Y5f.isHttpAccessTokenCodeError(P.status) ? (0, I._)(() => new FwQ(K3B.swipeUserError, P.status, DOJ.genericError)) : (0, I._)(() => P))));
    }
    swipeProfil(n) {
      this.httpCancelService.cancelPendingRequests();
      return this.http.post("renewtoken", {
        profil: n,
        uid: this.authStore.currentUser.uid,
        uuid: this.credentialsStore.uuid
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(s => s.data), (0, F.w)(s => Object.isExists(s) ? (this.authStore.swipeProfil(s), (0, S.of)(s)) : (0, I._)(() => new FwQ("Le changement de profil ne peut pas être effectué", 517, DOJ.genericError))), (0, W.K)(s => this.catchBadResponse(s, d => Y5f.isHttpAccessTokenCodeError(d.status) ? (0, I._)(() => new FwQ(K3B.swipeProfilError, d.status, DOJ.genericError)) : (0, I._)(() => d))));
    }
    swipeUser(n) {
      this.httpCancelService.cancelPendingRequests();
      return this.http.post("renewtoken", {
        idUser: n,
        uuid: this.credentialsStore.uuid
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(s => s.data), (0, F.w)(s => Object.isExists(s) ? (this.authStore.swipeUser(s, n), (0, S.of)(s)) : (0, I._)(() => new FwQ("Le changement de compte ne peut pas être effectué avec le profil actuel", 517, DOJ.genericError))), (0, W.K)(s => this.catchBadResponse(s, d => Y5f.isHttpAccessTokenCodeError(d.status) ? (0, I._)(() => new FwQ(K3B.swipeUserError, d.status, DOJ.genericError)) : (0, I._)(() => d))));
    }
    refreshToken(n) {
      return this.http.post("login", n).pipe((0, j.U)(s => s.data));
    }
    sendFCMTokenToServer(n) {
      const s = this.authStore.currentUser;
      return this.http.post("registrationAppToken", {
        idUser: s.id,
        codeOgec: s.codeOgec,
        role: s.typeCompte,
        registrationToken: n,
        oldRegistrationToken: this.credentialsStore.snapshot.fcmToken,
        instanceId: this.credentialsStore.ionicPlatforms
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(() => this.credentialsStore.updateStore({
        fcmToken: n
      })), (0, W.K)(h => this.catchBadResponse(h)));
    }
    deleteFCMTokenFromServer(n, s) {
      const d = Object.isExists(s) ? s : this.authStore.currentUser;
      return this.http.post("registrationAppToken", {
        idUser: d.id,
        codeOgec: d.codeOgec,
        role: d.typeCompte,
        registrationToken: n,
        instanceId: this.credentialsStore.ionicPlatforms
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, W.K)(P => this.catchBadResponse(P)));
    }
    updateParametrageIndividuel(n, s, d, h, P = false) {
      let z = h;
      if (P === true) {
        z = z === true ? "1" : "0";
      }
      const Ae = {
        path: ["Préférences/", Bo[n], d, "/id_" + s].join("/").replace(/\/\//g, "/"),
        value: z
      };
      return this.http.post("parametreIndividuel", Ae, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(Ve => {
        if ([IL.MODE_ACCESSIBILITE_VISUELLE, IL.TYPE_SAISIE_NOTES_DEFAUT, IL.TYPE_VIEW_CDT_DEFAUT, IL.NB_JOURS_MAX_RENDU_DEVOIR].indexOf(d) > -1) {
          this.authStore.updateParametresIndividuels(n, s, d, h);
        }
        return Ve.data;
      }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    setParametresIndividuel(n, s, d, h) {
      this.authStore.updateParametresIndividuels(n, s, d, h);
    }
    getParametrageIndividuel(n, s, d) {
      const h = {
        path: ["Préférences/", Bo[n], d, "/id_" + s].join("/").replace(/\/\//g, "/")
      };
      return this.http.post("parametreIndividuel", h, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(P => P.data), (0, W.K)(P => this.catchBadResponse(P)));
    }
    loginExterne(n, s, d) {
      if (s === "") {
        return (0, I._)(() => new FwQ("Informations incorrectes !"));
      }
      let h = {};
      if (n === "ssoCharly") {
        h.cToken = s;
      } else if (n === "supervision") {
        h.aToken = s;
        if (d && Object.isExists(d.i)) {
          h.i = d.i;
        }
      } else if (n === "sso" && d) {
        h.ssoToken = s;
        h.idSSOToken = d.idSSOToken;
        if (Object.isExists(d.identifiantSSO)) {
          h.identifiant = d.identifiantSSO;
        }
        if (Object.isExists(d.passwordSSO)) {
          h.password = d.passwordSSO;
        }
      } else {
        if (n !== "educonnect") {
          return (0, I._)(() => new FwQ("Informations incorrectes !"));
        }
        h.ecToken = s;
      }
      return this.http.post("loginexterne", h, {
        observe: "response",
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(P => {
        const z = +P.headers.get(j9q.code);
        if (z === GL1.OK) {
          this.authStore.clearAndDisableStorage();
          this.resetService.resetAll();
          const Ae = P.headers.get(j9q.token);
          if (FSr.isNotEmptyString(Ae)) {
            this.credentialsStore.updateStore({
              authToken: Ae
            });
          }
          this.authStore.afterLogin(new xf(P.body.data), false);
        }
        return (0, S.of)(z);
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    educonnect() {
      return this.http.post("educonnect", {}, {
        observe: "response",
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(n => {
        const s = +n.headers.get(j9q.code);
        if (s === 235) {
          return (0, I._)(() => new FwQ(n.body.message, s));
        } else {
          return (0, S.of)(n.body.data);
        }
      }), (0, W.K)(n => this.catchBadResponse(n)));
    }
    logout() {
      this.httpCancelService.cancelPendingRequests();
      this.authStore.clearAndDisableStorage();
      const n = this.credentialsStore.snapshot.fcmToken;
      if (n) {
        this.deleteFCMTokenFromServer(n, this.authStore.currentUser).subscribe({
          next: () => {},
          error: s => console.error("AuthStore.reset deleteFCMTokenFromServer : ", s)
        });
      }
    }
    handleError(n) {
      let s = new FwQ(K3B.userLoginDataInvalid, n.status, DOJ.genericError);
      switch (n.status) {
        case 0:
          s.message = K3B.networkDown;
          s.action = DOJ.genericWarning;
          break;
        case 202:
          s.message = K3B.userSucessAuthentifiedFirstPassword;
          s.action = DOJ.genericError;
          break;
        case 220:
          s.message = K3B.userBadSecretResponse;
          s.action = DOJ.genericError;
          break;
        case 505:
          s.message = K3B.userBadConfirmPassword;
          s.action = DOJ.genericError;
          break;
        case 221:
          s.message = K3B.userFirstPasswordAlreadyUpdate;
          s.action = DOJ.genericError;
          break;
        case 235:
          s.message = K3B.userAlreadyExist;
          s.action = DOJ.genericWarning;
          break;
        case 403:
          s.message = K3B.forbiddenAction;
          s.action = DOJ.e403;
          break;
        case 500:
          s.message = "Erreur inattendue du serveur distant. Merci de réessayer !";
          s.action = DOJ.genericError;
          break;
        case 506:
          s.message = K3B.userCodeSMSInvalid;
          s.action = DOJ.genericError;
          break;
        case 521:
        case 508:
        case 509:
        case 511:
        case 519:
        case 581:
        case 582:
          s.message = n.message;
          s.action = DOJ.genericError;
          break;
        case GL1.CompteInvalide:
          s.message = K3B.siteClose;
          s.action = DOJ.genericError;
          break;
        case 517:
          s.message = n.message;
          s.action = n.action;
          break;
        case 518:
          s.message = K3B.userInvalid;
          s.action = DOJ.genericError;
          break;
        case 580:
          s.message = K3B.userMessagePWSNotSend;
          s.message = K3B.genericError;
          break;
        case GL1.AccessTokenInvalid:
          s.message = K3B.userAccessTokenInvalid;
          s.action = DOJ.userAccessTokenInvalid;
      }
      return (0, I._)(() => s);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(dSF), t.LFG(Fa), t.LFG(nm), t.LFG(nl), t.LFG(pt), t.LFG(luj), t.LFG(zFY), t.LFG(vh));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class wLK {
  constructor(e = {
    id: "",
    libelle: "",
    type: "",
    details: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.type = e.type;
    this.details = e.details;
    this.semaineType = Array.isArray(e.semaineType) ? [...e.semaineType] : [];
  }
}
export class qxE {
  constructor(e = {
    authentificationSms: false,
    debutAnneeScolaire: false,
    finAnneeScolaire: false,
    historiquePassage: false,
    statistiques: false,
    reservationSurSemaineType: false
  }) {
    this.authentificationSms = e.authentificationSms;
    this.debutAnneeScolaire = e.debutAnneeScolaire;
    this.finAnneeScolaire = e.finAnneeScolaire;
    this.historiquePassage = e.historiquePassage;
    this.statistiques = e.statistiques;
    this.reservationSurSemaineType = e.reservationSurSemaineType;
  }
}
class w0 {
  constructor(e = {}) {
    this.activites = Array.isArray(e.activites) ? e.activites.map(n => new wLK(n)) : [];
    this.joursFeries = Array.isArray(e.joursFeries) ? [...e.joursFeries] : [];
    this.parametrage = new qxE(e.parametrage);
  }
}
export class phK extends wLK {
  constructor(e = {
    id: "",
    libelle: "",
    type: "",
    details: ""
  }) {
    super(e);
    this.exceptions = {
      ...e.exceptions
    };
  }
}
class am {
  constructor(e = {}) {
    this.activites = Array.isArray(e.activites) ? e.activites.map(n => new phK(n)) : [];
  }
}
class lm {
  constructor(e = {
    libelle: "",
    prix: 0,
    quantite: 0
  }) {
    if (Object.isExists(e.libelle)) {
      this.libelle = e.libelle;
    }
    if (Object.isExists(e.prix)) {
      this.prix = e.prix;
    }
    if (Object.isExists(e.quantite)) {
      this.quantite = e.quantite;
    }
  }
}
export class hWM {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    if (Object.isExists(e.code)) {
      this.code = e.code;
    }
    if (Object.isExists(e.libelle)) {
      this.libelle = e.libelle;
    }
    this.articles = Array.isArray(e.articles) ? e.articles.map(n => new lm(n)) : [];
    if (Object.isExists(e.montantTotalArticles)) {
      this.montantTotalArticles = e.montantTotalArticles;
    }
  }
}
export class GSe {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = e[s].map(d => new hWM(d));
      }
    }
  }
}
export class zGW {
  constructor(e = {
    id: "",
    idActivite: "",
    activite: "",
    date: "",
    etat: 0
  }) {
    this.id = e.id;
    this.idActivite = e.idActivite;
    this.activite = e.activite;
    this.date = e.date;
    this.etat = e.etat;
  }
}
class cm extends class mv {
  constructor(e = {}) {
    if (Object.isExists(e.activitesEleve)) {
      this.activitesEleve = new am(e.activitesEleve);
    }
    if (Object.isExists(e.activitesEtablissement)) {
      this.activitesEtablissement = new w0(e.activitesEtablissement);
    }
    if (Object.isExists(e.activitesPassage)) {
      this.activitesPassage = new GSe(e.activitesPassage);
    }
  }
} {
  constructor(e) {
    super(e);
    this._datePipe = new ifA();
    if (e && typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  setActiviteInscriptionsDesinscriptions(e, n) {
    for (let s of e) {
      const d = this.activitesEleve.activites.findIndex(P => s.idActivite === P.id);
      if (d === -1) {
        continue;
      }
      let h = new phK(this.activitesEleve.activites[d]);
      if (s.etat === 1) {
        h.exceptions[s.date] = "+";
      } else {
        if (h.exceptions[s.date] && h.exceptions[s.date] === "+") {
          delete h.exceptions[s.date];
        }
        let P = this._datePipe.transform(s.date.replace(/-/g, "/"), "EEEE").toLowerCase();
        if (h.semaineType.indexOf(P) !== -1) {
          h.exceptions[s.date] = "-";
        }
      }
      this.activitesEleve.activites[d] = h;
    }
    Object.setExpired(this, n);
  }
}
class vv {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new cm(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  setActiviteUserInscriptionsDesinscriptions(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new cm();
    }
    this[e].setActiviteInscriptionsDesinscriptions(n, s);
  }
}
export let sg5 = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateActiviteStore(n, s, d) {
      let h = this.cloneDeep();
      if (!Object.isExists(h[s])) {
        h[s] = new cm();
      }
      switch (d) {
        case "listeInfosActivites":
          h[s].activitesEleve = new am(n[0]);
          h[s].activitesEtablissement = new w0(n[1]);
          break;
        case "listePassagesActivitesEleve":
          h[s].activitesPassage = new GSe(n);
          break;
        case "saveReservationsActivites":
          h.setActiviteUserInscriptionsDesinscriptions(s, n, this.expireableTTL);
      }
      Object.setExpired(h[s], this.expireableTTL);
      this.store = h;
    }
    selectAllActivites(n) {
      return this.select$(s => Object.getEntity(s, n));
    }
    selectActivitesEleve(n) {
      return this.selectAllActivites(n).pipe((0, j.U)(s => {
        if (!Object.isExpired(s)) {
          return s.activitesEleve;
        }
      }));
    }
    selectActivitesEtablissement(n) {
      return this.selectAllActivites(n).pipe((0, j.U)(s => {
        if (!Object.isExpired(s)) {
          return s.activitesEtablissement;
        }
      }));
    }
    selectActivitesPassages(n) {
      return this.selectAllActivites(n).pipe((0, j.U)(s => {
        if (!Object.isExpired(s)) {
          return s.activitesPassage;
        }
      }));
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: vv,
    className: "ActiviteStore"
  })], R);
  return R;
})();
export let JKV = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.activiteStore = n;
      this.authStore = s;
      this.http = d;
    }
    infosActivites(n, s, d = false) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const P = Object.getEntity(this.activiteStore.snapshot, h);
      if (d || Object.isExpired(P)) {
        const z = FSr.translateTypeUser(s, false);
        return (0, O.D)([this.http.post(`${z}/${n}/activites`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => Ae.data)), this.http.post(`${z}/${n}/activitesetablissement`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => Ae.data))]).pipe((0, j.U)(Ae => this.activiteStore.updateActiviteStore(Ae, h, "listeInfosActivites")), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      }
      return E.E;
    }
    listePassagesActivtes(n, s, d = false) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const P = Object.getEntity(this.activiteStore.snapshot, h);
      if (d || Object.isExpired(P) || !P.hasOwnProperty("activitesPassage")) {
        const z = FSr.translateTypeUser(s, false);
        return this.http.post(`${z}/${n}/activitespassages`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => this.activiteStore.updateActiviteStore(Ae.data, h, "listePassagesActivitesEleve")), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      }
      return E.E;
    }
    reservationActivites(n, s, d, h = 0, P = "") {
      const z = s === dcH.ELEVE || s === dcH.FAMILLE_CONJOINT || s === dcH.FAMILLE_RESPONSABLE ? "eleve" : FSr.translateTypeUser(s, false);
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${z}/${n}/activites`, {
        codeModule: "reservation",
        codeSecure: h,
        reservations: d,
        signatureCanvas: P
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(Ve => Ve.code === GL1.OK && (this.activiteStore.updateActiviteStore(d, Ae, "saveReservationsActivites"), true)), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(sg5), t.LFG(CnD), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class Px8 {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    localisation: "",
    idLocalisation: "",
    isReservable: false
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    if (typeof e.localisation !== "undefined") {
      this.localisation = e.localisation;
    }
    if (typeof e.idLocalisation !== "undefined") {
      this.idLocalisation = e.idLocalisation;
    }
    if (typeof e.isReservable !== "undefined") {
      this.isReservable = e.isReservable;
    }
  }
}
class S0 {
  constructor(e = {}) {
    this.salles = Array.isArray(e.salles) ? e.salles.map(n => new Px8(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  static initialState() {
    return {};
  }
}
export class whR {
  constructor(e = {
    id: 0,
    libelle: "",
    isProprietaire: false,
    publicAccess: false
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.isProprietaire = e.isProprietaire;
    this.publicAccess = e.publicAccess;
  }
  static getDefaultParametrage(e) {
    return {
      guestPolicy: e === h40.RDV_PP ? "ALWAYS_ACCEPT" : "ASK_MODERATOR",
      muteOnStart: e === h40.AGENDA,
      lockSettingsDisableMic: false,
      webcamsOnlyForModerator: true,
      lockSettingsLockOnJoin: true,
      lockSettingsDisableCam: e === h40.AGENDA
    };
  }
}
export class gBp {
  constructor(e = {
    id: 0,
    libelle: "",
    text: "",
    description: "",
    theme: "",
    dateDebut: "",
    heureDebut: "",
    dateFin: "",
    heureFin: "",
    dateCreation: "",
    idAuteur: 0,
    typeAuteur: "",
    readonly: false,
    estSupprimable: false,
    typeEvenement: "",
    dateFormatee: "",
    color: "#1796b0"
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.text = e.libelle;
    this.description = e.description;
    this.theme = e.theme;
    this.dateDebut = e.dateDebut;
    this.heureDebut = e.heureDebut;
    this.dateFin = e.dateFin;
    this.heureFin = e.heureFin;
    this.dateCreation = e.dateCreation;
    this.idAuteur = e.idAuteur;
    this.typeAuteur = e.typeAuteur;
    this.readonly = e.readonly;
    this.estSupprimable = e.estSupprimable;
    this.typeEvenement = e.typeEvenement;
    this.dateFormatee = e.dateFormatee;
    this.cibles = Array.isArray(e.cibles) ? [...e.cibles] : [];
    this.ciblesEtab = Array.isArray(e.ciblesEtab) ? [...e.ciblesEtab] : [];
    this.color = e.color;
    this.auteur = new XsP(e.auteur);
    if (typeof e.addVisio !== "undefined") {
      this.addVisio = e.addVisio;
    }
    if (typeof e.localisation !== "undefined") {
      this.localisation = new Px8(e.localisation);
    }
    if (typeof e.start_date !== "undefined") {
      this.start_date = e.start_date;
    }
    if (typeof e.end_date !== "undefined") {
      this.end_date = e.end_date;
    }
    if (typeof e.shownItem !== "undefined") {
      this.shownItem = e.shownItem;
    }
    if (typeof e.visio !== "undefined") {
      this.visio = new whR(e.visio);
    }
    if (typeof e.titreEvenement !== "undefined") {
      this.titreEvenement = e.titreEvenement;
    }
  }
  get isPast() {
    return C_1.isDatePassee(this.dateFin, false);
  }
  get isToday() {
    return C_1.isToday(this.dateDebut);
  }
  get descriptionDecode() {
    return YC.base64decode(this.description);
  }
  get titre() {
    return this.libelle;
  }
  get sousTitre() {
    return this.titreEvenement;
  }
  get typeVisio() {
    if (Object.isExists(this.visio)) {
      if (this.isEvtRDVPP()) {
        return h40.RDV_PP;
      } else if (this.isEvtEspaceTravail()) {
        return h40.AGENDA;
      } else {
        return "";
      }
    } else {
      return "";
    }
  }
  isReservationSalle() {
    return this.cibles.length === 1 && this.cibles[0].startsWith(meW.SALLE);
  }
  isEvtEspaceTravail() {
    return this.cibles.length === 1 && this.cibles[0].startsWith(dcH.ESPACE_TRAVAIL);
  }
  isEvtRDVPP() {
    return this.cibles.length === 1 && this.cibles[0].startsWith(eTt.RDVPP);
  }
  isAllDay() {
    return this.heureDebut === "00:00" && this.heureFin === "23:59" && this.dateDebut === this.dateFin;
  }
}
export class B9I extends gBp {
  constructor(e = {
    id: 0,
    libelle: "",
    text: "",
    description: "",
    theme: "",
    dateDebut: "",
    heureDebut: "",
    dateFin: "",
    heureFin: "",
    dateCreation: "",
    idAuteur: 0,
    typeAuteur: "",
    readonly: false,
    estSupprimable: false,
    typeEvenement: "",
    dateFormatee: "",
    color: "#1796b0"
  }) {
    super(e);
    if (typeof e.sexeAuteur !== "undefined") {
      this.sexeAuteur = e.sexeAuteur;
    }
    if (typeof e.nomAuteur !== "undefined") {
      this.nomAuteur = e.nomAuteur;
    }
    if (typeof e.isVisio !== "undefined") {
      this.isVisio = e.isVisio;
    }
    if (typeof e.prenomEleve !== "undefined") {
      this.prenomEleve = e.prenomEleve;
    }
    if (typeof e.classeEleve !== "undefined") {
      this.classeEleve = e.classeEleve;
    }
    if (typeof e.nomEleve !== "undefined") {
      this.nomEleve = e.nomEleve;
    }
    if (typeof e.idEleve !== "undefined") {
      this.idEleve = e.idEleve;
    }
    if (typeof e.eleve !== "undefined") {
      this.eleve = new Dfc(e.eleve);
    }
    if (typeof e.civiliteHote !== "undefined") {
      this.civiliteHote = e.civiliteHote;
    }
    if (typeof e.nomHote !== "undefined") {
      this.nomHote = e.nomHote;
    }
  }
  get titre() {
    let e = this.typeEvenement === iUh.RPPFamille ? super.titre : "";
    if (Object.isExists(this.eleve) && this.eleve.prenom !== "") {
      e += ` (Pour ${this.eleve.prenom}`;
      if (this.nomAuteur !== "" && this.sexeAuteur !== "") {
        e += ` avec ${this.sexeAuteur} ${this.nomAuteur}`;
      }
      e += ")";
    }
    return e;
  }
  get sousTitre() {
    let e = super.sousTitre;
    if (this.typeEvenement === iUh.RDVPPInvite) {
      e += ` (Invit\xe9 par ${this.civiliteHote} ${this.nomHote})`;
    }
    return e;
  }
  get typeVisio() {
    if (this.isVisio) {
      if (this.typeEvenement == iUh.RPPFamille || this.typeEvenement == iUh.RPPProf) {
        return h40.RPP;
      } else if (this.typeEvenement === iUh.RDVPP || this.typeEvenement === iUh.RDVPPInvite) {
        return h40.RDV_PP;
      } else if (this.typeEvenement === iUh.ETVisio) {
        return h40.AGENDA;
      } else {
        return "";
      }
    } else {
      return "";
    }
  }
}
export class lSf {
  constructor(e = {}) {
    this.evenements = Array.isArray(e.evenements) ? e.evenements.map(n => n?.titreEvenement !== "" ? new B9I(n) : new gBp(n)) : [];
    if (Object.isExists(e.periodeLoaded)) {
      this.periodeLoaded = {
        dateDebut: new Date(e.periodeLoaded.dateDebut),
        dateFin: new Date(e.periodeLoaded.dateFin)
      };
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  setListEvents(e, n) {
    const s = new ifA();
    const d = s.transform(n.dateDebut, "y-MM-dd");
    const h = s.transform(n.dateFin, "y-MM-dd");
    this.evenements.edRemove(P => P.dateDebut >= d && P.dateFin <= h);
    e.map(P => {
      this.setEvent(P);
    });
    if (Object.isExists(this.periodeLoaded)) {
      if (n.dateDebut < this.periodeLoaded.dateDebut) {
        this.periodeLoaded = {
          ...this.periodeLoaded,
          dateDebut: n.dateDebut
        };
      }
      if (n.dateFin > this.periodeLoaded.dateFin) {
        this.periodeLoaded = {
          ...this.periodeLoaded,
          dateFin: n.dateFin
        };
      }
    } else {
      this.periodeLoaded = {
        ...n
      };
    }
  }
  setEvent(e) {
    this.evenements.edInsertUpdate(e, n => n.id === e.id);
    this.evenements.edSortBy("start_date");
  }
}
class Eh {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new lSf(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  updateListEventsAgendaStorage(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new lSf();
    }
    this[e].setListEvents(n, s);
    Object.setExpired(this[e], d);
  }
  updateEventAgendaStorage(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new lSf();
    }
    if (s) {
      this[e].evenements.edRemove(h => h.id === n.id);
    } else {
      this[e].setEvent(n);
    }
    Object.setExpired(this[e], d);
  }
}
export class b9O {
  constructor(e = {
    typeEntity: "",
    idEntity: 0,
    typeAgenda: "",
    libelle: "",
    couleurAgenda: "",
    selected: false,
    edtCourant: false
  }) {
    this.typeEntity = e.typeEntity;
    this.idEntity = e.idEntity;
    this.typeAgenda = e.typeAgenda;
    this.libelle = e.libelle;
    this.couleurAgenda = e.couleurAgenda;
    this.selected = e.selected;
    this.edtCourant = e.edtCourant;
  }
}
export class hxO {
  constructor(e = {
    tabAgendaEdtToDisplay: []
  }) {
    this.tabAgendaEdtToDisplay = e.tabAgendaEdtToDisplay.map(n => new b9O(n));
  }
  static initialState() {
    return new hxO();
  }
}
export class h0G {
  static cleanEventsFromServer(e) {
    if (e && Array.isArray(e.evenements)) {
      let n = e.evenements.map(s => h0G.cleanEvent(s.titreEvenement !== "" ? new B9I(s) : new gBp(s)));
      return new lSf({
        ...e,
        evenements: n.edSortBy("start_date")
      });
    }
    return new lSf();
  }
  static cleanEvent(e) {
    e.start_date = `${e.dateDebut} ${e.heureDebut}`;
    e.end_date = `${e.dateFin} ${e.heureFin}`;
    return e;
  }
}
export let Tf5 = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(s);
      this.authStore = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateAgendaStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      switch (d) {
        case "addEvent":
        case "updateEvent":
        case "deleteEvent":
          {
            const z = new gBp(h0G.cleanEvent(n));
            P.updateEventAgendaStorage(s, z, d === "deleteEvent", this.expireableTTL);
            if (z.isReservationSalle()) {
              const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, z.typeAuteur, z.idAuteur, [meW.SALLE, 0]);
              P.updateEventAgendaStorage(Ae, z, d === "deleteEvent", this.expireableTTL);
            }
            break;
          }
        case "searchEvents":
          P.updateListEventsAgendaStorage(s, h0G.cleanEventsFromServer(n).evenements, h, this.expireableTTL);
      }
      this.store = P;
    }
    selectListeEvenements(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.evenements;
        } else {
          return [];
        }
      });
    }
    markAsExpired(n) {
      const s = this.cloneDeep();
      if (Object.isExists(s[n])) {
        Object.setExpired(s[n], 0);
        this.store = s;
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Eh,
    className: "AgendaStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let EYm = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(n);
      this.devTool = n;
      this.authStore = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h])) {
            if (!Object.isExpired(n[h])) {
              Object.setExpired(n[h], 0);
              s = true;
            }
            const P = Object.keys(n[h]);
            for (let z of P) {
              if (z === "espacesDeTravail" && Array.isArray(n[h].espacesDeTravail)) {
                for (let Ae of n[h].espacesDeTravail) {
                  if (!Object.isExpired(Ae)) {
                    Object.setExpired(Ae, 0);
                    s = true;
                  }
                }
              }
              if (["membres", "topics", "messages", "activite"].includes(z) && Object.isExists(n[h][z]) && !Object.isExpired(n[h][z])) {
                Object.setExpired(n[h][z], 0);
                s = true;
              }
            }
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateEspaceDeTravailStore(n, s, d = {}) {
      let h = this.cloneDeep();
      if (!Object.isExists(h[s])) {
        h[s] = new Ce();
      }
      if (n.listeEspacesTravail) {
        h.setEspaceDeTravailUserListeEspacesDeTravail(s, n.listeEspacesTravail, this.expireableTTL, n.account);
      } else if (n.listerMembres) {
        h.setEspaceDeTravailUserMembres(s, d.idEspaceDeTravail, n.listerMembres.membres, this.expireableTTL);
      } else if (n.listTopics) {
        h.setEspaceDeTravailUserTopics(s, d.idEspaceDeTravail, n.listTopics, this.expireableTTL);
      } else if (n.listDiscussion) {
        h.setEspaceDeTravailUserTopicMessages(s, d.idTopic, n.listDiscussion, this.expireableTTL);
      } else if (n.ajoutMessageTopic) {
        h.addEspaceDeTravailUserTopicMessage(s, d.idEspaceDeTravail, d.idTopic, n.ajoutMessageTopic, this.expireableTTL);
      } else if (n.modifierMessageTopic) {
        h.updateEspaceDeTravailUserTopicMessage(s, d.idEspaceDeTravail, d.idTopic, n.modifierMessageTopic, this.expireableTTL);
      } else if (n.effacerMessageTopic) {
        h.supprimeEspaceDeTravailUserTopicMessage(s, d.idEspaceDeTravail, d.idTopic, n.effacerMessageTopic, this.expireableTTL);
      } else if (n.rejoindreEspaceTravail) {
        h.updateEspaceDeTravailUser(s, n.rejoindreEspaceTravail, this.expireableTTL);
      } else if (n.quitterEspaceTravail) {
        h.updateEspaceDeTravailUser(s, n.quitterEspaceTravail, this.expireableTTL);
      } else if (n.infoEspaceTravail) {
        h.updateEspaceDeTravailUser(s, n.infoEspaceTravail, this.expireableTTL);
      } else if (n.ajoutEspaceTravail) {
        h.updateEspaceDeTravailUser(s, n.ajoutEspaceTravail, this.expireableTTL);
      } else if (n.modifierEspaceTravail) {
        h.updateEspaceDeTravailUser(s, n.modifierEspaceTravail, this.expireableTTL);
      } else if (n.deleteEspaceTravail) {
        h.deleteEspaceDeTravailUser(s, n.deleteEspaceTravail, this.expireableTTL);
      } else if (Array.isArray(n.getFilActivite)) {
        h.setEspaceDeTravailUserActivite(s, d.idEspaceDeTravail, n.getFilActivite, this.expireableTTL);
      } else if (n.deleteFilActivite) {
        h.updateEspaceDeTravailUserActivite(s, d.idEspaceDeTravail, d.isDeleteAll, d.idUser, d.typeUser, this.expireableTTL);
      } else if (Array.isArray(n.ajoutMembres)) {
        h.updateEspaceDeTravailUserMembres(s, d.idEspaceDeTravail, n.ajoutMembres, this.expireableTTL);
      } else if (n.supprimeMembre) {
        h.supprimeEspaceDeTravailUserMembre(s, d.idEspaceDeTravail, n.supprimeMembre, this.expireableTTL);
      } else if (n.ajouterTopic) {
        h.updateEspaceDeTravailUserTopic(s, d.idEspaceDeTravail, n.ajouterTopic, this.expireableTTL);
      } else if (n.modifierTopic) {
        h.updateEspaceDeTravailUserTopic(s, d.idEspaceDeTravail, n.modifierTopic, this.expireableTTL);
      } else if (n.supprimerTopic) {
        h.supprimeEspaceDeTravailUserTopic(s, d.idEspaceDeTravail, n.supprimerTopic, this.expireableTTL);
      } else if (n.deleteBadgesIdEspaceDeTravail) {
        h.supprimeEspaceDeTravailUserBadges(s, n.deleteBadgesIdEspaceDeTravail);
      } else if (n.ajoutActivite) {
        h.updateEspaceDeTravailUserActivites(s, d.idEspaceDeTravail, d.typeActivite, d.idUser, d.typeUser, d.cibleActivite, d.prenomUser, d.nomUser, d.libelleElement, d.isVisio, this.expireableTTL);
      }
      Object.setExpired(h[s], this.expireableTTL);
      this.store = h;
    }
    getEspaceTravail(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.snapshot[P] && this.snapshot[P].espacesDeTravail.find(z => z.id === n);
    }
    selectEspaceTravail(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        const Ae = Object.getEntity(z, P);
        if (Object.isExists(Ae)) {
          return Ae.espacesDeTravail.find(Ve => Ve.id === n);
        }
      });
    }
    getEspaceTravailListeMembres(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      const z = this.snapshot[P];
      if (Object.isExists(z)) {
        const Ae = z.membres[n];
        if (Object.isExists(Ae) && Array.isArray(Ae.membres)) {
          return Ae.membres;
        }
      }
    }
    selectEspaceTravailListeMembres(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        const Ae = Object.getEntity(z, P);
        if (!Object.isExists(Ae)) {
          return;
        }
        const Ve = Ae.membres[n];
        if (Object.isExists(Ve) && Array.isArray(Ve.membres)) {
          return Ve.membres;
        } else {
          return undefined;
        }
      });
    }
    selectEspaceTravailTopics(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        const Ae = Object.getEntity(z, P);
        if (!Object.isExists(Ae)) {
          return;
        }
        const Ve = Ae.topics[n];
        if (Object.isExists(Ve)) {
          return Ve;
        } else {
          return undefined;
        }
      });
    }
    selectEspaceTravailTopicMessages(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        const Ae = Object.getEntity(z, P);
        if (!Object.isExists(Ae)) {
          return;
        }
        const Ve = Ae.messages[n];
        if (Object.isExists(Ve)) {
          return Ve;
        } else {
          return undefined;
        }
      });
    }
    selectEspaceTravaiBadges(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        const Ae = Object.getEntity(z, P);
        if (!Object.isExists(Ae)) {
          return;
        }
        const Ve = Ae.badges[n];
        if (Object.isExists(Ve)) {
          return Ve;
        } else {
          return undefined;
        }
      });
    }
    updateFilActivitesStore(n, s, d, h = "", P = false) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id);
      this.updateEspaceDeTravailStore({
        ajoutActivite: true
      }, z, {
        idEspaceDeTravail: n,
        typeActivite: s,
        idUser: this.authStore.currentUser.id,
        typeUser: this.authStore.currentUser.typeCompte,
        cibleActivite: d,
        prenomUser: this.authStore.currentUser.prenom,
        nomUser: this.authStore.currentUser.nom,
        libelleElement: h,
        isVisio: P
      });
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX), t.LFG(CnD));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: tt,
    className: "EspaceDeTravailStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let img = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.httpCacheService = n;
      this.agendaStore = s;
      this.authStore = d;
      this.http = h;
      this.espaceDeTravailStore = P;
      this._datePipe = new ifA();
    }
    searchEvents(n, s, d, h, P = false) {
      const z = {
        dateDebut: this._datePipe.transform(n.dateDebut, "y-MM-dd"),
        dateFin: this._datePipe.transform(n.dateFin, "y-MM-dd")
      };
      const Ae = FSr.translateTypeUser(d, false);
      let Ve;
      Ve = d === meW.SALLE && h === 0 ? $ej.edDBUserSpecificKey(s, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id, [d, h]) : $ej.edDBUserSpecificKey(s, d, h);
      const Tt = Object.getEntity(this.agendaStore.snapshot, Ve);
      let Vt = P || Object.isExpired(Tt);
      if (!Vt) {
        if (Object.isExists(Tt.periodeLoaded) && (Tt.periodeLoaded.dateDebut > n.dateDebut || n.dateFin > Tt.periodeLoaded.dateFin)) {
          Vt = true;
        }
      }
      if (Vt) {
        return this.http.post(`${Ae}/${h}/agendaEvenements`, z, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Hn => {
          this.agendaStore.updateAgendaStore(Hn.data, Ve, "searchEvents", {
            dateDebut: n.dateDebut,
            dateFin: n.dateFin
          });
          return new lSf(Hn.data);
        }), (0, W.K)(Hn => this.catchBadResponse(Hn, Ci => this.handleError(Ci))));
      } else {
        return (0, S.of)(Tt);
      }
    }
    lastEvents(n, s, d, h, P = false) {
      const z = `agendaLastEvents_${$ej.edDBUserSpecificKey(s, d, h)}`;
      if (P) {
        this.httpCacheService.delete(z);
      }
      const Ae = {
        nbProchainsEvents: n
      };
      const Ve = FSr.translateTypeUser(d, false);
      return this.http.post(`${Ve}/${h}/agendaEvenements`, Ae, {
        params: new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", z)
      }).pipe((0, j.U)(Tt => new lSf(Tt.data)), (0, W.K)(Tt => this.catchBadResponse(Tt, Vt => this.handleError(Vt))));
    }
    addEvent(n, s, d, h) {
      let P;
      P = h.isReservationSalle() ? $ej.edDBUserSpecificKey(n, meW.SALLE, h.cibles[0].substr(1)) : h.isEvtEspaceTravail() ? $ej.edDBUserSpecificKey(n, dcH.ESPACE_TRAVAIL, h.cibles[0].substr(1)) : h.isEvtRDVPP() ? $ej.edDBUserSpecificKey(n, eTt.RDVPP, d) : $ej.edDBUserSpecificKey(n, s, d);
      const z = {
        event: h
      };
      const Ae = FSr.translateTypeUser(s, false);
      return this.http.post(`${Ae}/${d}/agendaEvenements`, z, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Ve => {
        if (Ve.code === GL1.OK) {
          if (h.cibles[0].substring(0, 1) === meW.ESPACE_TRAVAIL) {
            let Vt = h.cibles[0].substring(1);
            this.espaceDeTravailStore.updateFilActivitesStore(+Vt, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD, VXF.CIBLE_AGENDA, h.libelle, h.addVisio);
          }
          this.agendaStore.updateAgendaStore(Ve.data, P, "addEvent");
          if (h.isEvtEspaceTravail()) {
            this.httpCacheService.delete("listeAgendaOuPostItsEspacesTravail_agenda");
          }
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Une erreur s'est produite lors de la création de votre événement, veuillez réessayer !", Ve.code, DOJ.genericError));
      }), (0, W.K)(Ve => this.catchBadResponse(Ve, Tt => this.handleError(Tt))));
    }
    updateEvent(n, s, d, h) {
      let P;
      P = h.isReservationSalle() ? $ej.edDBUserSpecificKey(n, meW.SALLE, h.cibles[0].substr(1)) : h.isEvtEspaceTravail() ? $ej.edDBUserSpecificKey(n, dcH.ESPACE_TRAVAIL, h.cibles[0].substr(1)) : h.isEvtRDVPP() ? $ej.edDBUserSpecificKey(n, eTt.RDVPP, d) : $ej.edDBUserSpecificKey(n, s, d);
      const z = {
        event: h
      };
      const Ae = FSr.translateTypeUser(s, false);
      return this.http.post(`${Ae}/${d}/agendaEvenements/${h.id}`, z, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ve => {
        if (Ve.code === GL1.OK) {
          if (h.cibles[0].substring(0, 1) === meW.ESPACE_TRAVAIL) {
            let Vt = h.cibles[0].substring(1);
            this.espaceDeTravailStore.updateFilActivitesStore(+Vt, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_AGENDA, h.libelle, h.addVisio);
          }
          this.agendaStore.updateAgendaStore(Ve.data, P, "updateEvent");
          if (h.isEvtEspaceTravail()) {
            this.httpCacheService.delete("listeAgendaOuPostItsEspacesTravail_agenda");
          }
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Une erreur s'est produite lors de la mise à jour de votre événement, veuillez réessayer !", Ve.code, DOJ.genericError));
      }), (0, W.K)(Ve => this.catchBadResponse(Ve, Tt => this.handleError(Tt))));
    }
    deleteEvent(n, s, d, h) {
      let P;
      P = h.isReservationSalle() ? $ej.edDBUserSpecificKey(n, meW.SALLE, h.cibles[0].substr(1)) : h.isEvtEspaceTravail() ? $ej.edDBUserSpecificKey(n, dcH.ESPACE_TRAVAIL, h.cibles[0].substr(1)) : h.isEvtRDVPP() ? $ej.edDBUserSpecificKey(n, eTt.RDVPP, d) : $ej.edDBUserSpecificKey(n, s, d);
      const z = {
        event: h
      };
      const Ae = FSr.translateTypeUser(s, false);
      return this.http.post(`${Ae}/${d}/agendaEvenements/${h.id}`, z, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Ve => {
        if (Ve.code === GL1.OK) {
          if (h.cibles[0].substring(0, 1) === meW.ESPACE_TRAVAIL) {
            let Vt = h.cibles[0].substring(1);
            this.espaceDeTravailStore.updateFilActivitesStore(+Vt, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_DELETE, VXF.CIBLE_AGENDA, h.libelle, h.addVisio);
          }
          this.agendaStore.updateAgendaStore(h, P, "deleteEvent");
          if (h.isEvtEspaceTravail()) {
            this.httpCacheService.delete("listeAgendaOuPostItsEspacesTravail_agenda");
          }
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Une erreur s'est produite lors de la suppression de votre événement, veuillez réessayer !", Ve.code, DOJ.genericError));
      }), (0, W.K)(Ve => this.catchBadResponse(Ve, Tt => this.handleError(Tt))));
    }
    getIcalLink(n, s) {
      return this.http.post(`ical/${n}/${s}/url`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (0, S.of)(h.data) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la récupération du lien pour l'agenda, veuillez réessayer !", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h, P => this.handleError(P))));
    }
    handleError(n) {
      if (n.status === 512) {
        n.message = K3B.dateInvalidError;
        n.action = DOJ.genericError;
      }
      return (0, I._)(() => n);
    }
    markAsExpired(n) {
      this.agendaStore.markAsExpired(n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(nl), t.LFG(Tf5), t.LFG(CnD), t.LFG(pt), t.LFG(EYm));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class ZZb {
  constructor(e = {
    id: 0,
    classe: "",
    classeCode: "",
    classeId: 0,
    matiere: "",
    codeMatiere: "",
    prof: "",
    salle: "",
    text: "",
    typeCours: "",
    color: "",
    contenuDeSeance: false,
    devoirAFaire: false,
    dispensable: false,
    dispense: 0,
    start_date: "",
    end_date: "",
    groupe: "",
    groupeCode: "",
    groupeId: 0,
    icone: "",
    isAbsenceProf: false,
    isAnnule: false,
    isModifie: false
  }) {
    this.id = e.id;
    this.classe = e.classe;
    this.classeCode = e.classeCode;
    this.classeId = e.classeId;
    this.matiere = e.matiere;
    this.codeMatiere = e.codeMatiere;
    this.prof = e.prof;
    this.salle = e.salle;
    this.text = e.text;
    this.typeCours = e.typeCours;
    this.color = e.color;
    this.contenuDeSeance = e.contenuDeSeance;
    this.devoirAFaire = e.devoirAFaire;
    this.dispensable = e.dispensable;
    this.dispense = e.dispense;
    this.start_date = e.start_date;
    this.end_date = e.end_date;
    this.groupe = e.groupe;
    this.groupeCode = e.groupeCode;
    this.groupeId = e.groupeId;
    this.icone = e.icone;
    this.isAbsenceProf = e.isAbsenceProf;
    this.isAnnule = e.isAnnule;
    this.isModifie = e.isModifie;
    if (Object.isExists(e.heure_debut)) {
      this.heure_debut = e.heure_debut;
    }
    if (Object.isExists(e.heure_fin)) {
      this.heure_fin = e.heure_fin;
    }
    if (Object.isExists(e.isFlexible)) {
      this.isFlexible = e.isFlexible;
    }
  }
  get libelleLong() {
    let s = `${this.start_date.slice(-5)} - ${this.end_date.slice(-5)} : ${this.text}`;
    if (this.classe !== "") {
      s += " - " + this.classe;
    }
    if (this.groupe !== "") {
      s += " - " + this.groupe;
    }
    return s;
  }
}
export class jt5 {
  constructor(e = {
    dateHeure: ""
  }) {
    this.dateHeure = e.dateHeure;
    this.effectue = !!Object.isExists(this.effectue) && e.effectue;
  }
}
export class VG {
  constructor(e = {
    id: "",
    libelle: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    if (typeof e.isSuiviMatin !== "undefined") {
      this.isSuiviMatin = e.isSuiviMatin;
    }
    if (typeof e.isSuiviApresMidi !== "undefined") {
      this.isSuiviApresMidi = e.isSuiviApresMidi;
    }
    if (typeof e.isInscrit !== "undefined") {
      this.isInscrit = e.isInscrit;
    }
    if (typeof e.isUpdated !== "undefined") {
      this.isUpdated = e.isUpdated;
    }
  }
}
export class iIq {
  constructor(e = {
    idActivite: "",
    activite: "",
    date: "",
    etat: 0
  }) {
    this.idActivite = e.idActivite;
    this.activite = e.activite;
    this.date = e.date;
    this.etat = e.etat;
  }
}
export class G6t {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    numeroBadge: "",
    particule: "",
    regime: "",
    photo: "",
    classeId: 0,
    classeLibelle: "",
    dateNaissance: "",
    sexe: ""
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.numeroBadge = e.numeroBadge;
    this.particule = e.particule;
    this.photo = e.photo;
    this.classeId = e.classeId;
    this.classeLibelle = e.classeLibelle;
    this.dateNaissance = e.dateNaissance;
    this.regime = e.regime;
    this.sexe = e.sexe;
    if (typeof e.isPresent !== "undefined") {
      this.isPresent = e.isPresent;
    }
    if (typeof e.libelleSallePresence !== "undefined") {
      this.libelleSallePresence = e.libelleSallePresence;
    }
    if (typeof e.idSalle !== "undefined") {
      this.idSalle = e.idSalle;
    }
  }
  isAnniversaire() {
    const e = new ifA();
    return e.transform(this.dateNaissance, "MM-dd") === e.transform(new Date(), "MM-dd");
  }
}
export let CJ8 = (() => {
  let R = class extends G6t {
    constructor(n = {
      id: 0,
      nom: "",
      prenom: "",
      numeroBadge: "",
      badgeInactif: true,
      particule: "",
      photo: "",
      classeId: 0,
      classeLibelle: "",
      dateEntree: "",
      dateSortie: "",
      dateNaissance: "",
      regime: "",
      sexe: "",
      email: "",
      portable: "",
      isAbsent: false
    }) {
      super(n);
      this.badgeInactif = n.badgeInactif;
      this.dateEntree = n.dateEntree;
      this.dateSortie = n.dateSortie;
      this.regime = n.regime;
      this.isAbsent = n.isAbsent;
      this.email = n.email;
      this.portable = n.portable;
      if (typeof n.absentAvant !== "undefined") {
        this.absentAvant = n.absentAvant;
      }
      if (typeof n.finDispense !== "undefined") {
        this.finDispense = n.finDispense;
      }
      if (typeof n.dispense !== "undefined") {
        this.dispense = n.dispense;
      }
      if (typeof n.dispenseMatin !== "undefined") {
        this.dispenseMatin = n.dispenseMatin;
      }
      if (typeof n.dispenseApresMidi !== "undefined") {
        this.dispenseApresMidi = n.dispenseApresMidi;
      }
      if (typeof n.presenceObligatoire !== "undefined") {
        this.presenceObligatoire = n.presenceObligatoire;
      }
      if (typeof n.estEnStage !== "undefined") {
        this.estEnStage = n.estEnStage;
      }
      if (typeof n.isAbsentMatin !== "undefined") {
        this.isAbsentMatin = n.isAbsentMatin;
      }
      if (typeof n.isAbsentApresMidi !== "undefined") {
        this.isAbsentApresMidi = n.isAbsentApresMidi;
      }
      if (typeof n.activites !== "undefined" && Array.isArray(n.activites)) {
        this.activites = n.activites.map(s => new VG(s));
      }
      if (typeof n.reservations !== "undefined" && Array.isArray(n.reservations)) {
        this.reservations = n.reservations.map(s => new iIq(s));
      }
    }
    isAnniversaire() {
      const n = new ifA();
      return n.transform(this.dateNaissance, "MM-dd") === n.transform(new Date(), "MM-dd");
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDEleveClasse"
  })], R);
  return R;
})();
class Jf {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    type: "",
    isFlexible: false
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
    this.type = e.type;
    this.isFlexible = e.isFlexible;
  }
}
class zd {
  constructor(e = {}) {
    if (typeof e.appelEnClasse !== "undefined") {
      this.appelEnClasse = new jt5(e.appelEnClasse);
    }
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new CJ8(n)) : [];
    this.entity = new Jf(e.entity);
  }
}
export let vGR = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.http = n;
      this.httpCacheService = s;
    }
    elevesByClasseOrGroupe(n, s, d = new E$4(), h = 0, P = false) {
      const z = d.heure_debut !== "" && d.heure_fin !== "";
      const Ae = s === "C" ? `classes/${n}/eleves` : `groupes/${n}/eleves`;
      let Tt;
      let Ve = new Et().set("verbe", "get");
      if (s === meW.CLASSE) {
        Tt = "cette classe.";
      } else if (s === meW.GROUPE) {
        Tt = "ce groupe.";
      }
      if (!z) {
        Ve = Ve.set("cacheEnabled", "1").set("cacheKey", `elevesByClasseOrGroupe_${s}_${n}`).set("cacheTTL", `${X9o.uneJournee}`);
      }
      if (P && Ve.has("cacheKey")) {
        this.httpCacheService.delete(Ve.get("cacheKey"));
      }
      if (h > 0) {
        Ve = Ve.set("idCours", h);
      }
      let Vt = {};
      if (z) {
        Vt.heureDebut = d.heure_debut;
        Vt.heureFin = d.heure_fin;
      }
      return this.http.post(Ae, Vt, {
        params: Ve
      }).pipe((0, F.w)(Hn => Hn.code === GL1.OK ? (0, S.of)(Hn.data) : (0, I._)(Hn.code === GL1.EmptyData ? () => new FwQ("Nous n'avons trouvé aucun élève pour " + Tt, Hn.code, DOJ.genericError) : () => new FwQ("Problème lors du chargement de la liste des élèves, merci de réessayer !", Hn.code, DOJ.genericError))), (0, j.U)(Hn => new zd(Hn)), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    horairesByClassesOrGroupeOrSalle(n, s) {
      let d;
      switch (s) {
        case "C":
          d = "classes/";
          break;
        case "S":
          d = "salles/";
          break;
        case "enseignant":
          d = "enseignant/";
          break;
        default:
          d = "groupes/";
      }
      d += `${n}/appel/horaires`;
      return this.http.post(d, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (0, S.of)(h.data) : (0, I._)(() => new FwQ("Problème lors du chargement des horaires, merci de réessayer !", h.code, DOJ.genericError))), (0, j.U)(h => h.map(P => new ZZb(P))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    postAppel(n, s, d, h) {
      let P = s === "C" ? "classes" : "groupes";
      P += `/${n}/appel/horaires/${d.heure_debut}-${d.heure_fin}`;
      return this.http.post(P, {
        eleves: h
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(z => z.code === GL1.OK ? (0, S.of)(z.data) : (0, I._)(() => new FwQ("Une erreur est survenue lors de l'enregistrement de votre appel, merci de réessayer !", z.code, DOJ.genericError))), (0, j.U)(z => new jt5(z)), (0, W.K)(z => this.catchBadResponse(z)));
    }
    displayElevesAbsents(n, s, d) {
      let h = s === "C" ? "classes" : "groupes";
      h += `/${n}/appel/horaires/${d.heure_debut}-${d.heure_fin}`;
      return this.http.post(h, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (0, S.of)(P.data) : (0, I._)(() => new FwQ("Recupération du détail de l'appel impossible", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class $f {
  constructor(e = {
    matin: "",
    apresMidi: ""
  }) {
    this.matin = e.matin;
    this.apresMidi = e.apresMidi;
  }
}
class Pu {
  constructor(e = {}) {
    this.dernierAppel = new $f(e.dernierAppel);
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new CJ8(n)) : [];
    this.activites = Array.isArray(e.activites) ? e.activites.map(n => new VG(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class ag {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Pu(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let JxN = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateAppelPrimaireStore(n, s) {
      let d = this.cloneDeep();
      d[s] = new Pu(n);
      Object.setExpired(d[s], this.expireableTTL);
      this.store = d;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: ag,
    className: "AppelPrimaireStore"
  })], R);
  return R;
})();
export let v_h = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.appelPrimaireStore = n;
      this.authStore = s;
      this.http = d;
    }
    getFeuilleAppelPrimaire(n, s, d, h, P, z) {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      let Ve = "appelPrimaire/" + (h === "C" ? "classes/" : "groupes/") + d;
      let Tt = {
        trancheHoraireAM: P.toString(),
        trancheHorairePM: z.toString()
      };
      return this.http.post(Ve, Tt, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(Vt => this.appelPrimaireStore.updateAppelPrimaireStore(Vt.data, Ae)), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    postFeuilleAppelPrimaire(n, s, d, h, P, z, Ae) {
      const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      let Tt = "appelPrimaire/" + (h === "C" ? "classes/" : "groupes/") + d;
      let Vt = {
        eleves: P,
        trancheHoraire: z.toString()
      };
      return this.http.post(Tt, Vt, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Hn => {
        if (Hn.code !== GL1.OK) {
          return (0, I._)(() => new FwQ("...", Hn.code));
        }
        let Ci = new Pu(Object.getEntity(this.appelPrimaireStore.snapshot, Ve));
        Ci.dernierAppel[Ae] = Hn.data.dateHeure;
        Ci.eleves = P.map(fr => {
          delete fr.isAbsent;
          delete fr.reservations;
          return fr;
        });
        Ci.eleves.edPluckFlatten("activites").map(fr => delete fr.isUpdated);
        this.appelPrimaireStore.updateAppelPrimaireStore(Ci, Ve);
        return (0, S.of)(new jt5(Hn.data));
      }), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(JxN), t.LFG(CnD), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class YEf {
  constructor(e = {
    appelEffectue: ""
  }) {
    this.appelEffectue = e.appelEffectue;
    if (typeof e.tagEnvoye !== "undefined") {
      this.tagEnvoye = e.tagEnvoye;
    }
    if (typeof e.tagRecu !== "undefined") {
      this.tagRecu = e.tagRecu;
    }
  }
}
class lg {
  constructor(e = {}) {
    this.appelEtude = new YEf(e.appelEtude);
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new G6t(n)) : [];
    if (typeof e.elevesPresent !== "undefined") {
      this.elevesPresent = Array.isArray(e.elevesPresent) ? e.elevesPresent.map(n => new G6t(n)) : [];
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
export class S7y {
  constructor(e = {
    idEtab: 0,
    libelle: ""
  }) {
    this.idEtab = e.idEtab;
    this.libelle = e.libelle;
    this.salles = Array.isArray(e.salles) ? e.salles.map(n => new Px8(n)) : [];
  }
}
class cg {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new lg(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let bRE = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateAppelEtudeStore(n, s) {
      let d = this.cloneDeep();
      d[s] = new lg(n);
      Object.setExpired(d[s], this.expireableTTL);
      this.store = d;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: cg,
    className: "AppelEtudeStore"
  })], R);
  return R;
})();
export let G9p = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.appelEtudeStore = n;
      this.authStore = s;
      this.http = d;
      this._datePipe = new ifA();
    }
    getFeuilleAppelEtude(n, s, d, h, P, z = false) {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [h, P, d.heure_debut, d.heure_fin]);
      const Ve = Object.getEntity(this.appelEtudeStore.snapshot, Ae);
      if (Object.isExpired(Ve) || z) {
        return this.http.post("appelEtude/" + h + "/horaires/" + d.heure_debut + "-" + d.heure_fin, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Vt => this.appelEtudeStore.updateAppelEtudeStore(Vt.data, Ae)), (0, W.K)(Vt => this.catchBadResponse(Vt)));
      } else {
        return E.E;
      }
    }
    postFeuilleAppelEtude(n, s, d, h, P, z) {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, d, s, [n, z, P.heure_debut, P.heure_fin]);
      return this.http.post("appelEtude/" + n + "/horaires/" + P.heure_debut + "-" + P.heure_fin, {
        eleves: h,
        salle: z
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Vt => {
        if (Vt.code !== GL1.OK) {
          return (0, I._)(() => new FwQ("...", Vt.code));
        }
        let Hn = new lg(Object.getEntity(this.appelEtudeStore.snapshot, Ae));
        Hn.appelEtude = new YEf({
          appelEffectue: this._datePipe.transform(new Date(), "y-MM-dd HH:mm:ss")
        });
        this.appelEtudeStore.updateAppelEtudeStore(Hn, Ae);
        return (0, S.of)(Vt.data);
      }), (0, j.U)(Vt => new jt5(Vt)), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(bRE), t.LFG(CnD), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class t13 {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    photo: "",
    idClasse: "",
    libelleClasse: "",
    sexe: "M"
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.photo = e.photo;
    this.idClasse = e.idClasse;
    this.libelleClasse = e.libelleClasse;
    this.sexe = e.sexe;
  }
}
class Qy {
  constructor(e = {
    id: 0,
    role: "",
    nom: "",
    prenom: ""
  }) {
    this.id = e.id;
    this.role = e.role;
    this.nom = e.nom;
    this.prenom = e.prenom;
  }
}
class fy {
  constructor(e = {
    idDemande: 0,
    dateHeureDebut: "",
    dateHeureFin: "",
    accepte: false
  }) {
    this.idDemande = e.idDemande;
    this.dateHeureDebut = e.dateHeureDebut;
    this.dateHeureFin = e.dateHeureFin;
    this.accepte = e.accepte;
    if (Object.isExists(e.auteur)) {
      this.auteur = new Qy(e.auteur);
    }
  }
}
export class JTD extends fy {
  constructor(e = {
    idDemande: 0,
    dateHeureDebut: "",
    dateHeureFin: "",
    dateHeureSaisie: "",
    dateHeureTraitement: "",
    motif: "",
    accepte: false
  }) {
    super(e);
    this.motif = e.motif;
    if (Object.isExists(e.dateHeureSaisie)) {
      this.dateHeureSaisie = e.dateHeureSaisie;
    }
    if (Object.isExists(e.dateHeureTraitement)) {
      this.dateHeureTraitement = e.dateHeureTraitement;
    }
    if (Object.isExists(e.eleve)) {
      this.eleve = new t13(e.eleve);
    }
  }
  get libelleEtat() {
    if (this.accepte) {
      return "Validée par l'établissement";
    } else if (this.dateHeureTraitement !== "") {
      return "Refusée par l'établissement";
    } else {
      return "En attente de validation par l'établissement";
    }
  }
}
class hy {
  constructor(e = {
    id: 0,
    heureDebut: "",
    heureFin: "",
    libelleMatiere: "",
    libelleSalle: "",
    libelleProf: ""
  }) {
    this.id = e.id;
    this.heureDebut = e.heureDebut;
    this.heureFin = e.heureFin;
    this.libelleMatiere = e.libelleMatiere;
    this.libelleSalle = e.libelleSalle;
    this.libelleProf = e.libelleProf;
  }
}
class mm {
  constructor(e = {
    idEleve: 0,
    nom: "",
    prenom: "",
    particule: "",
    photo: "",
    libelleClasse: "",
    sexe: "M",
    peutSortir: false
  }) {
    this.idEleve = e.idEleve;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.photo = e.photo;
    this.libelleClasse = e.libelleClasse;
    this.sexe = e.sexe;
    this.peutSortir = e.peutSortir;
    if (typeof e.demandeEnAttente !== "undefined") {
      this.demandeEnAttente = new JTD(e.demandeEnAttente);
    }
    if (typeof e.coursManque !== "undefined") {
      this.coursManque = new hy(e.coursManque);
    }
  }
}
class _d {
  constructor(e = {
    disponibleFamille: false,
    etat: -1
  }) {
    this.disponibleFamille = e.disponibleFamille;
    this.etat = e.etat;
  }
}
class Av {
  constructor(e = {}) {
    this.arriveeTardive = new _d(e.arriveeTardive);
    this.intercours = new _d(e.intercours);
    this.sortieAnticipee = new _d(e.sortieAnticipee);
  }
}
export class f2o {
  constructor(e = {
    jour: 0,
    ouvertApresMidi: false,
    ouvertMatin: false
  }) {
    this.autorisationsApresMidi = new Av(e.autorisationsApresMidi);
    this.autorisationsMatin = new Av(e.autorisationsMatin);
    this.jour = e.jour;
    this.ouvertApresMidi = e.ouvertApresMidi;
    this.ouvertMatin = e.ouvertMatin;
  }
}
export class qTQ {
  constructor(e = {
    code: "",
    string: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
class Cv {
  constructor(e = {
    affinageParJour: false,
    authentificationSMSActive: false,
    dureeRecreApresMidi: "",
    dureeRecreMatin: "",
    idNiveau: 0,
    moduleActifNiveauEleve: false,
    reglementInterieur: false,
    saisieDemandesFamilleActive: false,
    saisieDemandesFamilleActiveJourJ: false
  }) {
    this.affinageParJour = e.affinageParJour;
    this.authentificationSMSActive = e.authentificationSMSActive;
    this.dureeRecreApresMidi = e.dureeRecreApresMidi;
    this.dureeRecreMatin = e.dureeRecreMatin;
    this.idNiveau = e.idNiveau;
    this.libellesAutorisations = Array.isArray(e.libellesAutorisations) ? e.libellesAutorisations.map(n => new qTQ(n)) : [];
    this.moduleActifNiveauEleve = e.moduleActifNiveauEleve;
    this.reglementInterieur = e.reglementInterieur;
    this.saisieDemandesFamilleActive = e.saisieDemandesFamilleActive;
    this.saisieDemandesFamilleActiveJourJ = e.saisieDemandesFamilleActiveJourJ;
  }
}
export class QYo extends fy {
  constructor(e = {
    idDemande: 0,
    dateHeureDebut: "",
    dateHeureFin: "",
    accepte: false,
    titre: "",
    description: "",
    signatureSMSDemandee: false
  }) {
    super(e);
    this.titre = e.titre;
    this.description = e.description;
    this.signatureSMSDemandee = e.signatureSMSDemandee;
    this.signature = new Sej(e.signature);
  }
}
export class ZpA {
  constructor(e = {}) {
    this.autorisations = Array.isArray(e.autorisations) ? e.autorisations.map(n => new f2o(n)) : [];
    this.demandesEtab = Array.isArray(e.demandesEtab) ? e.demandesEtab.map(n => new QYo(n)) : [];
    this.demandesFamille = Array.isArray(e.demandesFamille) ? e.demandesFamille.map(n => new JTD(n)) : [];
    this.parametrage = new Cv(e.parametrage);
  }
  get isOpenAutorisationsSortieMatinInWeek() {
    return Object.isExists(this.autorisations.find(e => e.ouvertMatin === true));
  }
  get isOpenAutorisationsSortieApresMidiInWeek() {
    return Object.isExists(this.autorisations.find(e => e.ouvertApresMidi === true));
  }
  getStatut(e, n, s) {
    const d = this.autorisations.find(h => h.jour === n);
    return {
      autorise: Object.isExists(d) && d["autorisations" + e] ? d["autorisations" + e][s].etat : -1,
      disponible: Object.isExists(d) && d["autorisations" + e] && d["autorisations" + e][s].disponibleFamille === true
    };
  }
  changeEtatAutorisation(e, n, s) {
    const d = this.autorisations.find(P => P.jour === n);
    if (d["autorisations" + e][s].disponibleFamille !== true) {
      return false;
    }
    const h = d["autorisations" + e][s].etat;
    d["autorisations" + e][s].etat = h === 0 || h === -1 ? 1 : 0;
    return true;
  }
  isTypeAutorSortieOpen(e, n) {
    let s = {};
    this.autorisations.forEach(d => {
      let h = d["autorisations" + e][n];
      if (!Object.isExists(s[e + "_" + n])) {
        s[e + "_" + n] = 0;
      }
      if (Object.isExists(h) && h.disponibleFamille) {
        s[e + "_" + n] += 1;
      }
    });
    return s[e + "_" + n] > 0;
  }
}
class Sv {
  constructor(e) {
    if (e && Array.isArray(e.demandesFamilles)) {
      this.demandesFamilles = e.demandesFamilles.map(n => new JTD(n));
    }
    if (e && Object.isExists(e.controleEleve)) {
      this.controleEleve = new mm(e.controleEleve);
    }
    if (e && Object.isExists(e.autorisationsSortie)) {
      this.autorisationsSortie = new ZpA(e.autorisationsSortie);
    }
    if (e && typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  traiterDemandeFamille(e) {
    this.demandesFamilles.edInsertUpdate(e, n => n.idDemande === e.idDemande);
    if (Object.isExists(this.controleEleve) && this.controleEleve.idEleve === e.eleve.id && Object.isExists(this.controleEleve.demandeEnAttente) && this.controleEleve.demandeEnAttente.idDemande === e.idDemande) {
      this.controleEleve.demandeEnAttente.dateHeureTraitement = e.dateHeureTraitement;
      this.controleEleve.demandeEnAttente.accepte = e.accepte;
      this.controleEleve.peutSortir = e.accepte;
    }
  }
  updateDemandeEtablissement(e) {
    this.autorisationsSortie.demandesEtab.edInsertUpdate(e, n => n.idDemande === e.idDemande);
  }
  deleteDemandeFamille(e) {
    let n = this.autorisationsSortie.demandesFamille.findIndex(s => s.idDemande === e.idDemande);
    if (n > -1) {
      this.autorisationsSortie.demandesFamille.splice(n, 1);
    }
  }
  updateAutorisationsSortieAfterCreation(e) {
    this.autorisationsSortie.autorisations.map(n => {
      const s = e.autorisations.find(d => d.jour === n.jour);
      if (!!Object.isExists(s)) {
        n.autorisationsApresMidi.arriveeTardive = s.autorisationsApresMidi.arriveeTardive;
        n.autorisationsApresMidi.intercours = s.autorisationsApresMidi.intercours;
        n.autorisationsApresMidi.sortieAnticipee = s.autorisationsApresMidi.sortieAnticipee;
        n.autorisationsMatin.arriveeTardive = s.autorisationsMatin.arriveeTardive;
        n.autorisationsMatin.intercours = s.autorisationsMatin.intercours;
        n.autorisationsMatin.sortieAnticipee = s.autorisationsMatin.sortieAnticipee;
      }
    });
  }
  updateDemandeFamille(e) {
    this.autorisationsSortie.demandesFamille.edInsertUpdate(e, n => n.idDemande === e.idDemande);
  }
}
class py {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Sv(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let UmN = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateStore(n, s, d) {
      let h = this.cloneDeep();
      if (!Object.isExists(h[s])) {
        h[s] = new Sv({});
      }
      switch (n) {
        case "controlerSortieEleveParScan":
        case "controlerSortieEleveParId":
          h[s].controleEleve = d.controleEleve;
          break;
        case "listeDemandesFamillesJour":
          h[s].demandesFamilles = d.demandesFamilles;
          Object.setExpired(h[s], this.expireableTTL);
          break;
        case "traiterDemandeFamille":
          h[s].traiterDemandeFamille(d);
          Object.setExpired(h[s], this.expireableTTL);
          break;
        case "saveDemandeFamille":
        case "updateDemandeFamille":
          h[s].updateDemandeFamille(d);
          Object.setExpired(h[s], this.expireableTTL);
          break;
        case "deleteDemandeFamille":
          h[s].deleteDemandeFamille(d);
          Object.setExpired(h[s], this.expireableTTL);
          break;
        case "listeAutorisationsSortie":
          h[s].autorisationsSortie = d.autorisationsSortie;
          Object.setExpired(h[s], this.expireableTTL);
          break;
        case "saveAutorisationsSortie":
          h[s].updateAutorisationsSortieAfterCreation(d.autorisationsSortie);
          Object.setExpired(h[s], this.expireableTTL);
          break;
        case "updateDemandeEtablissement":
          h[s].updateDemandeEtablissement(d);
          Object.setExpired(h[s], this.expireableTTL);
      }
      this.store = h;
    }
    getControleDemandeFamille(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.snapshot[P] && this.snapshot[P].demandesFamilles && this.snapshot[P].demandesFamilles.find(z => z.idDemande === n);
    }
    getControleDemandesFamille(n = 0, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      if (Object.isExists(this.snapshot[P]) && Object.isExists(this.snapshot[P].demandesFamilles)) {
        if (n > 0) {
          return this.snapshot[P].demandesFamilles.filter(z => z.eleve.id === n);
        } else {
          return this.snapshot[P].demandesFamilles;
        }
      }
    }
    selectControleDemandesFamille(n = 0, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        if (Object.isExists(z[P]) && Object.isExists(z[P].demandesFamilles)) {
          if (n > 0) {
            return z[P].demandesFamilles.filter(Ae => Ae.eleve.id === n);
          } else {
            return z[P].demandesFamilles;
          }
        }
      });
    }
    selectControleSortieEleve(n = 0, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        if (Object.isExists(z[P]) && Object.isExists(z[P].controleEleve)) {
          if (n > 0) {
            if (z[P].controleEleve.idEleve === n) {
              return z[P].controleEleve;
            } else {
              return undefined;
            }
          } else {
            return z[P].controleEleve;
          }
        }
      });
    }
    getDemandeFamille(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.snapshot[P] && this.snapshot[P].autorisationsSortie && this.snapshot[P].autorisationsSortie.demandesFamille.find(z => z.idDemande === n);
    }
    selectDemandeFamille(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        if (Object.isExists(z[P]) && Object.isExists(z[P].autorisationsSortie)) {
          return z[P].autorisationsSortie.demandesFamille.find(Ae => Ae.idDemande === n);
        }
      });
    }
    getParametrageEleve(n, s, d) {
      const h = $ej.edDBUserSpecificKey(n, s, d);
      return this.snapshot[h] && this.snapshot[h].autorisationsSortie && this.snapshot[h].autorisationsSortie.parametrage;
    }
    selectAutorisationsSortieFamilleEleve(n, s, d) {
      const h = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(P => {
        if (Object.isExists(P[h]) && Object.isExists(P[h].autorisationsSortie)) {
          return P[h].autorisationsSortie;
        }
      });
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: py,
    className: "AutorisationsSortieStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let xrA = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.http = n;
      this.autorSortieStore = s;
    }
    controlerSortieEleveParId(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(s, d, h);
      return this.http.post(`autorisationsSortie/controle/eleve/${n}`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(z => this.autorSortieStore.updateStore("controlerSortieEleveParId", P, {
        controleEleve: z.data
      })), (0, W.K)(z => this.catchBadResponse(z)));
    }
    controlerSortieEleveParScan(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(s, d, h);
      return this.http.post("autorisationsSortie/controle/eleve/0", {
        scan: n
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(z => this.autorSortieStore.updateStore("controlerSortieEleveParScan", P, {
        controleEleve: z.data
      })), (0, W.K)(z => this.catchBadResponse(z)));
    }
    listeDemandesFamillesJour(n, s, d, h, P = false) {
      let z = $ej.edDBUserSpecificKey(s, d, h);
      const Ae = Object.getEntity(this.autorSortieStore.snapshot, z);
      const Ve = new ifA();
      if (P || Object.isExpired(Ae)) {
        return this.http.post(`autorisationsSortie/controle/demandes/${Ve.transform(n, "yMMdd")}`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Tt => {
          this.autorSortieStore.updateStore("listeDemandesFamillesJour", z, {
            demandesFamilles: Array.isArray(Tt.data) ? Tt.data.map(Vt => new JTD(Vt)) : []
          });
        }), (0, W.K)(Tt => this.catchBadResponse(Tt)));
      } else {
        return E.E;
      }
    }
    traiterDemandeFamille(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(s, d, h);
      return this.http.post(`eleves/${n.eleve.id}/niveaux/0/demandesAutorisationSortie`, {
        demandeExceptionnelle: n
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(Ae => {
        this.autorSortieStore.updateStore("traiterDemandeFamille", P, {
          ...n,
          dateHeureTraitement: Ae.data.dateHeureTraitement
        });
        return Ae.data;
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    listeAutorisationsSortie(n, s, d, h, P = false) {
      let z = $ej.edDBUserSpecificKey(s, d, h);
      const Ae = Object.getEntity(this.autorSortieStore.snapshot, z);
      if (P || Object.isExpired(Ae)) {
        return this.http.post(`eleves/${n}/niveaux/0/autorisationsSortie`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Tt => {
          const Vt = new ZpA(Tt.data);
          this.autorSortieStore.updateStore("listeAutorisationsSortie", z, {
            autorisationsSortie: Vt
          });
          return Vt;
        }), (0, W.K)(Tt => this.catchBadResponse(Tt)));
      } else {
        return E.E;
      }
    }
    saveAutorisationsSortie(n, s, d, h, P, z, Ae, Ve) {
      let Tt = $ej.edDBUserSpecificKey(h, P, z);
      return this.http.post(`eleves/${s}/niveaux/${d}/autorisationsSortie`, {
        autorisationSortie: n,
        codeSecure: Ae || "",
        signatureCanvas: Ve
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Hn => {
        if (Hn.code === GL1.OK) {
          const Ci = new ZpA(Hn.data);
          this.autorSortieStore.updateStore("saveAutorisationsSortie", Tt, {
            autorisationsSortie: Ci
          });
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Une erreur est survenue lors de l'enregistrement de vos modifications, merci de réessayer !", Hn.code, DOJ.genericError));
      }), (0, W.K)(Hn => this.catchBadResponse(Hn, Ci => this.handleError(Ci))));
    }
    updateDemandeEtablissement(n, s, d, h, P, z, Ae, Ve) {
      const Tt = $ej.edDBUserSpecificKey(h, P, z);
      return this.http.post(`eleves/${s}/niveaux/${d}/demandesAutorisationSortie/${n.idDemande}`, {
        demandeExceptionnelle: n,
        codeSecure: Ae || "",
        signatureCanvas: Ve
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Vt => Vt.code === GL1.OK ? (this.autorSortieStore.updateStore("updateDemandeEtablissement", Tt, {
        ...n,
        accepte: Vt.data.accepte,
        signature: new Sej(Vt.data.signature)
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la mise à jour de la demande établissement, veuillez réessayer !", Vt.code, DOJ.genericError))), (0, W.K)(Vt => this.catchBadResponse(Vt, Hn => this.handleError(Hn))));
    }
    saveDemandeFamille(n, s, d, h, P, z, Ae, Ve) {
      const Tt = $ej.edDBUserSpecificKey(d, h, P);
      return this.http.post(`eleves/${n.eleve.id}/niveaux/${s}/demandesAutorisationSortie`, {
        demandeExceptionnelle: n,
        codeSecure: z || "",
        signatureCanvas: Ae,
        dateFormated: Ve
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Vt => Vt.code === GL1.OK ? (this.autorSortieStore.updateStore("saveDemandeFamille", Tt, {
        ...n,
        idDemande: Vt.data.idDemande
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la création de votre demande, veuillez réessayer !", Vt.code, DOJ.genericError))), (0, W.K)(Vt => this.catchBadResponse(Vt, Hn => this.handleError(Hn))));
    }
    updateDemandeFamille(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKey(d, h, P);
      return this.http.post(`eleves/${n.eleve.id}/niveaux/${s}/famille/demandesAutorisationSortie/${n.idDemande}`, {
        demandeExceptionnelle: n
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (this.autorSortieStore.updateStore("updateDemandeFamille", z, n), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la mise à jour de votre demande, veuillez réessayer !", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    deleteDemandeFamille(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKey(d, h, P);
      return this.http.post(`eleves/${n.eleve.id}/niveaux/${s}/famille/demandesAutorisationSortie/${n.idDemande}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (this.autorSortieStore.updateStore("deleteDemandeFamille", z, n), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la suppression de votre demande, veuillez réessayer !", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    handleError(n) {
      if (n.status === GL1.SMSInvalid) {
        n.message = K3B.userCodeSMSInvalid;
        n.action = DOJ.genericError;
      }
      return (0, I._)(() => n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(UmN));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class Ya {
  constructor(e = {
    idDevoir: 0,
    donneLe: "",
    codeMatiere: "",
    matiere: "",
    interrogation: false,
    rendreEnLigne: false,
    effectue: false,
    aFaire: false,
    documentsAFaire: false
  }) {
    this.idDevoir = e.idDevoir;
    this.donneLe = e.donneLe;
    this.codeMatiere = e.codeMatiere;
    this.matiere = e.matiere;
    this.interrogation = e.interrogation;
    this.rendreEnLigne = e.rendreEnLigne;
    this.effectue = e.effectue;
    this.aFaire = e.aFaire;
    this.documentsAFaire = e.documentsAFaire;
  }
}
export class sIb {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e).filter(s => !isNaN(Date.parse(s)));
      for (let s of n) {
        this[s] = Array.isArray(e[s]) ? e[s].map(d => new Ya(d)) : [];
      }
    }
  }
}
export class j2C {
  constructor(e = {
    id: 0,
    date: "",
    auteur: "",
    idAuteur: 0,
    profilAuteur: "",
    supprime: false,
    message: "",
    idSupport: 0,
    typeSupport: ""
  }) {
    this.id = e.id;
    this.date = e.date;
    this.auteur = e.auteur;
    this.idAuteur = e.idAuteur;
    this.profilAuteur = e.profilAuteur;
    this.supprime = e.supprime;
    this.message = e.message;
    this.idSupport = e.idSupport;
    this.typeSupport = e.typeSupport;
  }
  get commentaireDecode() {
    return YC.base64decode(this.message);
  }
}
export class qGp {
  constructor(e = {
    id: 0,
    libelle: "",
    libelleCompetence: "",
    libelleMatiere: "",
    editable: false
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.libelleCompetence = e.libelleCompetence;
    this.libelleMatiere = e.libelleMatiere;
    this.editable = e.editable;
    if (typeof e.imprime !== "undefined") {
      this.imprime = e.imprime;
    }
    if (typeof e.isConnaissanceAssociee !== "undefined") {
      this.isConnaissanceAssociee = e.isConnaissanceAssociee;
    }
    if (typeof e.isEP !== "undefined") {
      this.isEP = e.isEP;
    }
    if (typeof e.isAFC !== "undefined") {
      this.isAFC = e.isAFC;
    }
  }
}
class my {
  constructor(e = {
    idPathCorrectifs: "",
    combien: 0,
    commentaire: "",
    libelle: ""
  }) {
    this.idPathCorrectifs = e.idPathCorrectifs;
    this.combien = e.combien;
    this.commentaire = e.commentaire;
    this.libelle = e.libelle;
  }
}
export class my1 {
  constructor(e = {
    url: "",
    libelle: ""
  }) {
    this.url = e.url;
    this.libelle = e.libelle;
  }
}
class Dv {
  constructor(e = {
    idDevoir: 0,
    rendreEnLigne: false,
    donneLe: "",
    contenu: "",
    documentsRendusDeposes: false
  }) {
    this.idDevoir = e.idDevoir;
    this.rendreEnLigne = e.rendreEnLigne;
    this.donneLe = e.donneLe;
    this.contenu = e.contenu;
    this.documents = Array.isArray(e.documents) ? e.documents.map(n => new eD9(n)) : [];
    this.commentaires = Array.isArray(e.commentaires) ? e.commentaires.map(n => new j2C(n)) : [];
    this.elementsProg = Array.isArray(e.elementsProg) ? e.elementsProg.map(n => new qGp(n)) : [];
    this.liensManuel = Array.isArray(e.liensManuel) ? e.liensManuel.map(n => new my1(n)) : [];
    this.documentsRendusDeposes = e.documentsRendusDeposes;
    if (typeof e.nbCopies !== "undefined") {
      this.nbCopies = e.nbCopies;
    }
    if (typeof e.nbCopiesTotal !== "undefined") {
      this.nbCopiesTotal = e.nbCopiesTotal;
    }
    if (typeof e.qcm !== "undefined") {
      this.qcm = new sc(e.qcm);
    }
    if (typeof e.correctifs !== "undefined") {
      this.correctifs = new my(e.correctifs);
    }
  }
  get hasQCM() {
    return Object.isExists(this.qcm);
  }
  get hasCorrectifs() {
    return Object.isExists(this.correctifs) && this.correctifs.combien > 0;
  }
}
export class l6t extends Dv {
  constructor(e = {
    idCDT: 0,
    idDevoir: 0,
    rendreEnLigne: false,
    donneLe: "",
    contenu: ""
  }) {
    super(e);
    this.idCDT = e.idCDT;
    if (Object.isExists(e.modeEdit)) {
      this.modeEdit = e.modeEdit;
    }
  }
  addDocument(e) {
    this.documents.push(e);
  }
  deleteDocument(e) {
    this.documents = this.documents.filter(n => n.id !== e);
  }
  addComment(e) {
    this.commentaires.push(e);
  }
}
export class mEw {
  constructor(e = {
    contenu: ""
  }) {
    if (typeof e.idDevoir !== "undefined") {
      this.idDevoir = e.idDevoir;
    }
    if (typeof e.idCDT !== "undefined") {
      this.idCDT = e.idCDT;
    }
    this.contenu = e.contenu;
    this.documents = Array.isArray(e.documents) ? e.documents.map(n => new eD9(n)) : [];
    this.commentaires = Array.isArray(e.commentaires) ? e.commentaires.map(n => new j2C(n)) : [];
    this.elementsProg = Array.isArray(e.elementsProg) ? e.elementsProg.map(n => new qGp(n)) : [];
    this.liensManuel = Array.isArray(e.liensManuel) ? e.liensManuel.map(n => new my1(n)) : [];
    if (Object.isExists(e.modeEdit)) {
      this.modeEdit = e.modeEdit;
    }
  }
  addDocument(e) {
    this.documents.push(e);
  }
  deleteDocument(e) {
    this.documents = this.documents.filter(n => n.id !== e);
  }
  addComment(e) {
    this.commentaires.push(e);
  }
}
export class B5X {
  constructor(e = {
    color: "",
    date: "",
    entityId: 0,
    entityCode: "",
    entityLibelle: "",
    entityType: "",
    text: "",
    matiereCode: "",
    matiereLibelle: "",
    travailAFaire: false,
    contenuDeSeance: false,
    interrogation: false,
    idCycleEtab: 0,
    libelleCycle: "",
    isFlexible: false
  }) {
    this.color = e.color;
    this.date = e.date;
    this.entityId = e.entityId;
    this.entityCode = e.entityCode;
    this.entityLibelle = e.entityLibelle;
    this.entityType = e.entityType;
    this.text = e.text;
    this.matiereCode = e.matiereCode;
    this.matiereLibelle = e.matiereLibelle;
    this.niveaux = Array.isArray(e.niveaux) ? [...e.niveaux] : [];
    this.travailAFaire = e.travailAFaire;
    this.contenuDeSeance = e.contenuDeSeance;
    this.interrogation = e.interrogation;
    this.idCycleEtab = e.idCycleEtab;
    this.libelleCycle = e.libelleCycle;
    this.isFlexible = e.isFlexible;
    if (typeof e.idCDT !== "undefined") {
      this.idCDT = e.idCDT;
    }
    if (typeof e.idCours !== "undefined") {
      this.idCours = e.idCours;
    }
    if (typeof e.start_date !== "undefined") {
      this.start_date = e.start_date instanceof Date ? C_1.dateToString(e.start_date, "y-MM-dd HH:mm") : e.start_date;
    }
    if (typeof e.end_date !== "undefined") {
      this.end_date = e.end_date instanceof Date ? C_1.dateToString(e.end_date, "y-MM-dd HH:mm") : e.end_date;
    }
    if (typeof e.aFaire !== "undefined") {
      this.aFaire = new l6t(e.aFaire);
    }
    if (typeof e.seance !== "undefined") {
      this.seance = new mEw(e.seance);
    }
    if (typeof e.typeSaisie !== "undefined") {
      this.typeSaisie = e.typeSaisie;
    }
    if (typeof e.temporaire !== "undefined") {
      this.temporaire = e.temporaire;
    }
  }
  get afaire() {
    return this.aFaire;
  }
  get uniqueID() {
    return `${this.date}_${this.entityCode}_${this.matiereCode}_${this.idCDT}`;
  }
  get sortByForQCM() {
    return `${this.date}${this.start_date}${this.entityType}${this.entityCode}`;
  }
  addDocument(e, n) {
    if (e === P2J.AFAIRE) {
      this.aFaire.addDocument(n);
    } else if (e === P2J.SEANCE) {
      this.seance.addDocument(n);
    }
  }
  deleteDocument(e, n) {
    if (e === P2J.AFAIRE && Object.isExists(this.aFaire)) {
      this.aFaire.deleteDocument(n);
    } else if (e === P2J.SEANCE && Object.isExists(this.seance)) {
      this.seance.deleteDocument(n);
    }
  }
  addComment(e, n) {
    if (e === P2J.AFAIRE) {
      this.aFaire.addComment(n);
    } else if (e === P2J.SEANCE) {
      this.seance.addComment(n);
    }
  }
  updateComment(e, n) {
    if (e === P2J.AFAIRE) {
      this.aFaire.commentaires.edInsertUpdate(n, s => s.id === n.id);
    } else if (e === P2J.SEANCE) {
      this.seance.commentaires.edInsertUpdate(n, s => s.id === n.id);
    }
  }
  deleteComment(e, n) {
    if (e === P2J.AFAIRE) {
      this.aFaire.commentaires.edRemove(s => s.id === n.id);
    } else if (e === P2J.SEANCE) {
      this.seance.commentaires.edRemove(s => s.id === n.id);
    }
  }
  isModeEdit(e) {
    return Object.isExists(this[e]) && this[e].modeEdit === true;
  }
  setModeEdit(e, n) {
    if (n) {
      if (!Object.isExists(this[e])) {
        if (e === P2J.AFAIRE) {
          this.aFaire = new l6t();
          const s = new ifA();
          this.aFaire.donneLe = s.transform(new Date(), "y-MM-dd");
        } else {
          this.seance = new mEw();
        }
      }
    } else if (e !== P2J.AFAIRE || this.travailAFaire) {
      if (e === P2J.SEANCE && !this.seance) {
        this.seance = undefined;
      }
    } else {
      this.aFaire = undefined;
    }
    if (Object.isExists(this[e])) {
      this[e].modeEdit = n;
    }
  }
}
class vy extends Dv {
  constructor(e = {
    idDevoir: 0,
    effectue: false,
    rendreEnLigne: false,
    donneLe: "",
    contenu: "",
    ressource: ""
  }) {
    super(e);
    this.effectue = e.effectue;
    this.contenuDeSeance = new mEw(e.contenuDeSeance);
    this.ressource = e.ressource;
    this.ressourceDocuments = Array.isArray(e.ressourceDocuments) ? e.ressourceDocuments.map(n => new eD9(n)) : [];
    this.documentsRendus = Array.isArray(e.documentsRendus) ? e.documentsRendus.map(n => new eD9(n)) : [];
  }
}
class ym {
  constructor(e = {
    id: 0,
    blogActif: false,
    codeMatiere: "",
    interrogation: false,
    matiere: "",
    nomProf: "",
    nbJourMaxRenduDevoir: 0,
    entityCode: "",
    entityLibelle: "",
    entityType: "C"
  }) {
    this.id = e.id;
    this.blogActif = e.blogActif;
    this.codeMatiere = e.codeMatiere;
    this.contenuDeSeance = new mEw(e.contenuDeSeance);
    this.interrogation = e.interrogation;
    this.matiere = e.matiere;
    this.nomProf = e.nomProf;
    this.nbJourMaxRenduDevoir = e.nbJourMaxRenduDevoir;
    if (typeof e.aFaire !== "undefined") {
      this.aFaire = new vy(e.aFaire);
    }
    this.entityCode = e.entityCode;
    this.entityLibelle = e.entityLibelle;
    this.entityType = e.entityType;
  }
  addDocumentRendu(e) {
    const n = new ifA();
    if (!!Object.isExists(this.aFaire)) {
      e.date = n.transform(new Date(), "yyyy-MM-dd HH:mm");
      this.aFaire.documentsRendus.push(e);
    }
  }
  removeDocumentRendu(e) {
    if (!!Object.isExists(this.aFaire)) {
      this.aFaire.documentsRendus.edRemove(n => n.id === e.id);
    }
  }
}
export class ftL {
  constructor(e = {
    date: ""
  }) {
    this.date = e.date;
    this.matieres = Array.isArray(e.matieres) ? e.matieres.map(n => new ym(n)) : [];
  }
}
class Gh {
  constructor(e = {
    contenu: "",
    idCDT: 0
  }) {
    this.commentaires = Array.isArray(e.commentaires) ? e.commentaires.map(n => new j2C(n)) : [];
    this.contenu = e.contenu;
    this.idCDT = e.idCDT;
  }
  addComment(e) {
    this.commentaires.push(e);
  }
  updateComment(e) {
    this.commentaires.edInsertUpdate(e, n => n.id === e.id);
  }
  deleteComment(e) {
    this.commentaires.edRemove(n => n.id === e.id);
  }
}
export class E5w extends Gh {
  constructor(e = {
    contenu: "",
    idCDT: 0
  }) {
    super(e);
    this.documents = Array.isArray(e.documents) ? e.documents.map(n => new eD9(n)) : [];
    if (typeof e.entityCode !== "undefined") {
      this.entityCode = e.entityCode;
    }
    if (typeof e.matiereCode !== "undefined") {
      this.matiereCode = e.matiereCode;
    }
  }
  addDocument(e) {
    this.documents.push(e);
  }
  deleteDocument(e) {
    this.documents = this.documents.filter(n => n.id !== e);
  }
}
export class td2 extends Gh {
  constructor(e = {
    contenu: "",
    idCDT: 0,
    id: "",
    libelle: "",
    dateMiseAjour: ""
  }) {
    super(e);
    this.id = e.id;
    this.libelle = e.libelle;
    this.dateMiseAJour = e.dateMiseAJour;
    this.fichiers = Array.isArray(e.fichiers) ? e.fichiers.map(n => new eD9(n)) : [];
  }
}
export class dv9 {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Gf(e[s]);
      }
    }
  }
}
class _m {
  constructor(e = {
    typeEntity: "",
    classeCode: "",
    classeLibelle: ""
  }) {
    this.typeEntity = e.typeEntity;
    this.classeCode = e.classeCode;
    this.classeLibelle = e.classeLibelle;
  }
}
export class YJW {
  constructor(e = {
    id: 0
  }) {
    this.id = e.id;
    this.edt = new _m(e.edt);
    this.note = new _m(e.note);
  }
}
class Tv {
  constructor(e = {
    matiereCode: "",
    matiereLibelle: ""
  }) {
    this.matiereCode = e.matiereCode;
    this.matiereLibelle = e.matiereLibelle;
  }
}
class Mv {
  constructor(e = {
    id: 0
  }) {
    this.id = e.id;
    this.edt = new Tv(e.edt);
    this.note = new Tv(e.note);
  }
}
export class syW {
  constructor(e = {}) {
    this.classes = Array.isArray(e.classes) ? e.classes.map(n => new YJW(n)) : [];
    this.matieres = Array.isArray(e.matieres) ? e.matieres.map(n => new Mv(n)) : [];
  }
}
export let TuB = (() => {
  let R = class {
    constructor(n = {
      idPathCopies: "",
      idPathCorrectifs: "",
      commentaire: "",
      readonlyCopies: false,
      readonlyCorrectifs: false,
      copies: 0,
      correctifs: 0,
      eleve: new CJ8()
    }) {
      this.idPathCopies = n.idPathCopies;
      this.idPathCorrectifs = n.idPathCorrectifs;
      this.commentaire = n.commentaire;
      this.readonlyCopies = n.readonlyCopies;
      this.readonlyCorrectifs = n.readonlyCorrectifs;
      this.copies = n.copies;
      this.correctifs = n.correctifs;
      this.eleve = new CJ8(n.eleve);
      if (Object.isExists(n.idProf) && n.idProf > 0) {
        this.idProf = n.idProf;
      }
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDCahierDeTexteDCCEleve"
  })], R);
  return R;
})();
export class O$2 {
  constructor(e = {
    nbCopies: 0,
    nbCopiesTotal: 0,
    eleves: [],
    contactsFamilles: []
  }) {
    if (Object.isExists(e.idCDT)) {
      this.idCDT = e.idCDT;
    }
    this.nbCopies = e.nbCopies;
    this.nbCopiesTotal = e.nbCopiesTotal;
    this.eleves = e.eleves.map(n => new TuB(n));
    this.contactsFamilles = e.contactsFamilles.map(n => new f0(n));
  }
}
class tc {
  constructor(e = {}) {
    if (typeof e.timeline !== "undefined") {
      this.timeline = new sIb(e.timeline);
    }
    this.vueJour = {};
    if (e.vueJour && Object.keys(e.vueJour).length > 0) {
      const n = Object.keys(e.vueJour);
      for (let s of n) {
        this.vueJour[s] = new ftL(e.vueJour[s]);
      }
    }
    if (typeof e.ressourcesEleve !== "undefined") {
      this.ressourcesEleve = Array.isArray(e.ressourcesEleve) ? e.ressourcesEleve.map(n => new td2(n)) : [];
    }
    this.slots = Array.isArray(e.slots) ? e.slots.map(n => new B5X(n)) : [];
    if (typeof e.documents !== "undefined") {
      this.documents = Array.isArray(e.documents) ? e.documents.map(n => new eD9(n)) : [];
    }
    if (Object.isExists(e.correspondances)) {
      this.correspondances = new syW(e.correspondances);
    }
    if (Object.isExists(e.periodeSlotsLoaded)) {
      this.periodeSlotsLoaded = {
        ...e.periodeSlotsLoaded
      };
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
    if (typeof e.ressources !== "undefined") {
      this.ressources = Array.isArray(e.ressources) ? e.ressources.map(n => new E5w(n)) : [];
    }
    this.dcc = Array.isArray(e.dcc) ? e.dcc.map(n => new O$2(n)) : [];
  }
  setCahierDeTexteTimeline(e) {
    this.timeline = new sIb(e);
  }
  setCahierDeTexteVueJour(e) {
    this.vueJour[e.date] = new ftL(e);
  }
  setCahierDeTexteCommentaireDevoir(e, n, s) {
    let d = Object.keys(this.vueJour);
    for (let h of d) {
      const P = this.vueJour[h].matieres.findIndex(z => z.id === n);
      if (P > -1) {
        let z;
        if (s === P2J.AFAIRE) {
          z = this.vueJour[h].matieres[P].aFaire;
        } else if (s === P2J.SEANCE) {
          z = this.vueJour[h].matieres[P].contenuDeSeance;
        }
        if (Object.isExists(z)) {
          z.commentaires.push(e);
        }
        return;
      }
    }
  }
  setCahierDeTexteDevoirEffectue(e, n, s) {
    let d;
    if (Object.isExists(this.timeline) && Object.isExists(this.timeline[s])) {
      let h = this.timeline[s].filter(P => P.idDevoir === e);
      if (h.length > 0) {
        d = h[0];
        d.effectue = n;
      }
    }
    if (this.vueJour[s]) {
      const h = this.vueJour[s].matieres.findIndex(P => Object.isExists(P.aFaire) && P.aFaire.idDevoir === e);
      if (h > -1) {
        this.vueJour[s].matieres[h].aFaire.effectue = n;
      }
    }
  }
  setCahierDeTexteSlots(e, n) {
    e.map(s => {
      this.setCahierDeTexteSlot(s);
    });
    if (Object.isExists(n.dateDebut) && Object.isExists(n.dateFin)) {
      if (C_1.isSameDay(n.dateDebut, n.dateFin)) {
        return;
      }
      if (Object.isExists(this.periodeSlotsLoaded) && n.forceReload !== true) {
        if (n.dateDebut < this.periodeSlotsLoaded.dateDebut) {
          this.periodeSlotsLoaded = {
            ...this.periodeSlotsLoaded,
            dateDebut: n.dateDebut
          };
        }
        if (n.dateFin > this.periodeSlotsLoaded.dateFin) {
          this.periodeSlotsLoaded = {
            ...this.periodeSlotsLoaded,
            dateFin: n.dateFin
          };
        }
      } else {
        this.periodeSlotsLoaded = {
          ...n
        };
      }
    }
  }
  setCahierDeTexteDCC(e, n) {
    e.idCDT = n;
    this.dcc.edInsertUpdate(e, s => s.idCDT === n);
  }
  setCahierDeTexteDCCEleve(e, n) {
    const s = this.dcc.find(d => d.idCDT === n);
    if (Object.isExists(s)) {
      s.eleves.edInsertUpdate(e, d => d.eleve.id === e.eleve.id);
    }
  }
  getCahierDeTexteDCCEleve(e, n) {
    const s = this.dcc.find(d => d.idCDT === e);
    if (Object.isExists(s)) {
      return s.eleves.find(d => d.eleve.id === n);
    }
  }
  setCahierDeTexteSlot(e) {
    this.slots.edInsertUpdate(e, n => n.date === e.date && n.entityType === e.entityType && n.entityCode === e.entityCode && n.matiereCode === e.matiereCode && n.start_date === e.start_date && n.end_date === e.end_date);
  }
  setCahierDeTexteRessource(e) {
    this.ressources.edInsertUpdate(e, n => e.entityCode === n.entityCode && e.matiereCode === n.matiereCode);
  }
  getCahierDeTexteRessource(e, n) {
    return this.ressources.find(s => e === s.entityCode && n === s.matiereCode);
  }
  getCahierDeTexteCdtMatiereJour(e, n) {
    if (Object.isExists(this.vueJour) && Object.isExists(this.vueJour[e])) {
      return this.vueJour[e].matieres.find(s => s.matiere === n);
    }
  }
  setCahierDeTexteCdtMatiereJour(e, n) {
    if (!!Object.isExists(this.vueJour) && !!Object.isExists(this.vueJour[e])) {
      this.vueJour[e].matieres.edInsertUpdate(n, s => s.id === n.id);
    }
  }
  toggleElementProgrammeSlot(e, n, s) {
    let d;
    if (s === P2J.AFAIRE && typeof e.aFaire !== "undefined") {
      d = e.aFaire.elementsProg;
    } else if (s === P2J.SEANCE && typeof e.seance !== "undefined") {
      d = e.seance.elementsProg;
    }
    let h = d.findIndex(P => P.id === n.id);
    if (typeof d !== "undefined") {
      if (h > -1) {
        d.splice(h, 1);
      } else {
        d.push(n);
      }
    }
    this.setCahierDeTexteSlot(e);
  }
  toggleLienManuelSlot(e, n, s) {
    let d;
    if (s === P2J.AFAIRE && typeof e.aFaire !== "undefined") {
      d = e.aFaire.liensManuel;
    } else if (s === P2J.SEANCE && typeof e.seance !== "undefined") {
      d = e.seance.liensManuel;
    }
    let h = d.findIndex(P => P.url === n.url);
    if (Array.isArray(d)) {
      if (h > -1) {
        d.splice(h, 1);
      } else {
        d.push(n);
      }
    }
    this.setCahierDeTexteSlot(e);
  }
  deleteDocumentSlots(e) {
    this.slots.forEach(n => {
      n.deleteDocument(P2J.AFAIRE, e.id);
      n.deleteDocument(P2J.SEANCE, e.id);
    });
  }
  setCahierDeTexteCorrespondances(e) {
    this.correspondances = new syW(e);
  }
  saveContenu(e) {
    this.ressources.edInsertUpdate(e, n => n.matiereCode === e.matiereCode && n.entityCode === e.entityCode);
  }
  duplicateRessource(e, n) {
    n.forEach(s => {
      const d = this.ressources.findIndex(h => h.entityCode === s.entityCode && h.matiereCode === s.matiereCode);
      if (d > -1) {
        this.ressources[d] = new E5w({
          ...this.ressources[d],
          documents: e.documents,
          contenu: e.contenu,
          commentaires: e.commentaires
        });
      }
    });
  }
  associateClasse(e) {
    this.correspondances.classes.edInsertUpdate(e, n => n.id === e.id);
  }
  associateMatiere(e) {
    this.correspondances.matieres.edInsertUpdate(e, n => n.id === e.id);
  }
  removeClasse(e) {
    this.correspondances.classes.edRemove(n => n.id === e.id);
  }
  removeMatiere(e) {
    this.correspondances.matieres.edRemove(n => n.id === e.id);
  }
  validerDepotRenduEleveDCCUser(e, n) {
    if (this.vueJour[n]) {
      const s = this.vueJour[n].matieres.findIndex(d => Object.isExists(d.aFaire) && d.aFaire.idDevoir === e);
      if (s > -1) {
        this.vueJour[n].matieres[s].aFaire.documentsRendusDeposes = true;
      }
    }
  }
  setDepotRenduEleveDCC(e, n, s) {
    const d = this.dcc.findIndex(h => h.idCDT === e);
    if (d > -1) {
      const h = this.dcc[d].eleves.findIndex(P => P.eleve.id === n);
      if (h > -1) {
        this.dcc[d].eleves[h].readonlyCopies = !s;
        if (!s) {
          this.dcc[d].eleves[h].copies = 0;
        }
      }
    }
  }
  setDepotCorrectifEleveDCC(e, n, s) {
    const d = this.dcc.findIndex(h => h.idCDT === e);
    if (d > -1) {
      const h = this.dcc[d].eleves.findIndex(P => P.eleve.id === n);
      if (h > -1) {
        this.dcc[d].eleves[h].readonlyCorrectifs = s;
      }
    }
  }
  setDepotCorrectifGlobalDCC(e, n) {
    const s = this.dcc.findIndex(d => d.idCDT === e);
    if (s > -1) {
      this.dcc[s].eleves.forEach(d => d.readonlyCorrectifs = n);
    }
  }
}
export class a9d {
  static newSlotDefault(e, n, s) {
    const d = new ifA();
    let h = new B5X();
    if (s) {
      h.date = d.transform(e, "yyyy-MM-dd");
      h.matiereCode = meW.CLASSE;
      h.entityCode = n.code;
      h.entityLibelle = n.libelle;
      h.entityType = n.typeEntity;
    }
    return h;
  }
  static getSlotsByDateEntityMatiere(e, n, s, d, h) {
    return e.filter(z => z.date === n && z.entityType === s && z.entityCode === d && z.matiereCode === h);
  }
  static getSlotByDateEntityMatiere(e, n, s, d, h) {
    const P = a9d.getSlotIndexByDateEntityMatiere(e, n, s, d, h);
    if (P > -1) {
      return e[P];
    } else {
      return undefined;
    }
  }
  static getSlotIndexByDateEntityMatiere(e, n, s, d, h) {
    return e.findIndex(z => z.date === n && z.entityType === s && z.entityCode === d && z.matiereCode === h);
  }
  static filterSlotsByPeriode(e, n) {
    if (!Array.isArray(e)) {
      return [];
    }
    if (!Object.isExists(n)) {
      return e;
    }
    const s = new ifA();
    return e.filter(d => d.date >= s.transform(n.dateDebut, "yyyy-MM-dd") && d.date <= s.transform(n.dateFin, "yyyy-MM-dd"));
  }
  static filterCDTEleveByPeriode(e, n) {
    if (!Object.isExists(e)) {
      return;
    }
    if (!Object.isExists(n)) {
      return Object.values(e);
    }
    const s = new ifA();
    let d = Object.keys(e).filter(P => P >= s.transform(n.dateDebut, "yyyy-MM-dd") && P <= s.transform(n.dateFin, "yyyy-MM-dd"));
    let h = [];
    d.forEach(P => h.push(e[P]));
    return h;
  }
  static formatCodeMatiere(e) {
    let n = e;
    for (let s of Object.keys(As)) {
      n = n.replace(s, As[s]);
    }
    return n;
  }
}
class Kh {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new tc(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  setCahierDeTexteUserTimeline(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteTimeline(n);
  }
  setCahierDeTexteUserVueJour(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteVueJour(n);
  }
  setCahierDeTexteUserCommentaireDevoir(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteCommentaireDevoir(n, s, d);
  }
  setCahierDeTexteUserDevoirEffectue(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteDevoirEffectue(n, s, d);
  }
  setCahierDeTexteUserSlots(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteSlots(n, s);
  }
  setCahierDeTexteUserDCC(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteDCC(n, s);
  }
  setCahierDeTexteUserSlot(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteSlot(n);
  }
  setCahierDeTexteUserRessource(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteRessource(n);
  }
  setCahierDeTexteUserCdtMatiereJour(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteCdtMatiereJour(n, s);
  }
  getCahierDeTexteUserSlots(e, n, s, d, h) {
    if (Object.isExists(this[e])) {
      return a9d.getSlotsByDateEntityMatiere(this[e].slots, n, s, d, h);
    }
  }
  getCahierDeTexteUserSlot(e, n, s, d, h) {
    if (Object.isExists(this[e])) {
      return a9d.getSlotByDateEntityMatiere(this[e].slots, n, s, d, h);
    }
  }
  getCahierDeTexteUserRessource(e, n, s) {
    if (Object.isExists(this[e])) {
      return this[e].getCahierDeTexteRessource(n, s);
    }
  }
  getCahierDeTexteUserCdtMatiereJour(e, n, s) {
    if (Object.isExists(this[e])) {
      return this[e].getCahierDeTexteCdtMatiereJour(n, s);
    }
  }
  toggleElementProgrammeUserSlot(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].toggleElementProgrammeSlot(n, s, d);
  }
  toggleLienManuelUserSlot(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].toggleLienManuelSlot(n, s, d);
  }
  setCahierDeTexteUserCorrespondances(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setCahierDeTexteCorrespondances(n);
  }
  saveContenu(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].saveContenu(n);
  }
  associateClasse(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].associateClasse(n);
  }
  associateMatiere(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].associateMatiere(n);
  }
  updateClasse(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].removeClasse(n);
  }
  updateMatiere(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].removeMatiere(n);
  }
  duplicateRessource(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].duplicateRessource(n, s);
  }
  validerDepotRenduEleveDCCUser(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].validerDepotRenduEleveDCCUser(n, s);
  }
  setDepotRenduEleveDCCUser(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setDepotRenduEleveDCC(n, s, d);
  }
  setDepotCorrectifEleveDCCUser(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setDepotCorrectifEleveDCC(n, s, d);
  }
  setDepotCorrectifGlobalDCCUser(e, n, s) {
    if (typeof this[e] === "undefined") {
      this[e] = new tc();
    }
    this[e].setDepotCorrectifGlobalDCC(n, s);
  }
}
export class iEn {
  constructor(e = {
    date: "",
    matiere: ""
  }) {
    this.date = e.date;
    this.matiere = e.matiere;
  }
}
export let x1h = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(s);
      this.authStore = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateCahierDeTexteStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      if (!Object.isExists(P[s])) {
        P[s] = new tc();
      }
      switch (d) {
        case "cahierDeTexte":
          P.setCahierDeTexteUserTimeline(s, n);
          break;
        case "cahierDeTextesParDate":
          P.setCahierDeTexteUserVueJour(s, n);
          break;
        case "addCommentDevoir":
          P.setCahierDeTexteUserCommentaireDevoir(s, n, h.idDevoir, h.side);
          break;
        case "associateElemProg":
        case "dissociateElemProg":
          P.getCahierDeTexteUserSlots(s, h.slot.date, h.slot.entityType, h.slot.entityCode, h.slot.matiereCode).forEach(Ae => {
            P.toggleElementProgrammeUserSlot(s, Ae, h.elemProg, h.typeSaisie);
          });
          break;
        case "associateLienManuel":
        case "dissociateLienManuel":
          P.getCahierDeTexteUserSlots(s, h.slot.date, h.slot.entityType, h.slot.entityCode, h.slot.matiereCode).forEach(Ae => {
            P.toggleLienManuelUserSlot(s, Ae, h.lienManuel, h.typeSaisie);
          });
          break;
        case "associateClasse":
          P.associateClasse(s, new YJW(n));
          break;
        case "associateMatiere":
          P.associateMatiere(s, new Mv(n));
          break;
        case "deleteCorrespondance":
          if (h.type === "classe") {
            P.updateClasse(s, new YJW(n));
          }
          if (h.type === "matiere") {
            P.updateMatiere(s, new Mv(n));
          }
          break;
        case "saveContenu":
          P.saveContenu(s, new E5w(n));
          break;
        case "loadSlots":
          P.setCahierDeTexteUserSlots(s, n, h);
          break;
        case "setDevoirEffectue":
          P.setCahierDeTexteUserDevoirEffectue(s, h.idDevoir, h.isEffectue, h.dateCahierTexte);
          break;
        case "save":
          {
            let z = P.getCahierDeTexteUserSlots(s, h.slot.date, h.slot.entityType, h.slot.entityCode, h.slot.matiereCode);
            if (z.length === 0) {
              z.push(h.slot);
            }
            z.forEach(Ae => {
              let Ve = new B5X(Ae);
              Ve.idCDT = n;
              Ve.interrogation = h.slot.interrogation;
              if (typeof h.slot.aFaire !== "undefined") {
                Ve.aFaire = new l6t(h.slot.aFaire);
                Ve.aFaire.idCDT = n;
                Ve.travailAFaire = h.slot.aFaire.contenu.length > 0;
              }
              if (typeof h.slot.seance !== "undefined") {
                Ve.seance = new mEw(h.slot.seance);
                Ve.seance.idCDT = n;
                Ve.contenuDeSeance = h.slot.seance.contenu.length > 0;
              }
              P.setCahierDeTexteUserSlot(s, Ve);
            });
            break;
          }
        case "delete":
          {
            const z = n;
            P.getCahierDeTexteUserSlots(s, z.date, z.entityType, z.entityCode, z.matiereCode).forEach(Ve => {
              if (!z.aFaire) {
                Ve.travailAFaire = false;
                Ve.aFaire = undefined;
              }
              if (!z.contenuDeSeance) {
                Ve.contenuDeSeance = false;
                Ve.seance = undefined;
              }
              P.setCahierDeTexteUserSlot(s, Ve);
            });
            break;
          }
        case "deleteDocument":
          if (Object.isExists(h.slot) && Object.isExists(h.side) && h.side !== ce3.DOCUMENTS) {
            P.getCahierDeTexteUserSlots(s, h.slot.date, h.slot.entityType, h.slot.entityCode, h.slot.matiereCode).forEach(Ae => {
              let Ve = new B5X(Ae);
              Ve.deleteDocument(h.side, h.file.id);
              P.setCahierDeTexteUserSlot(s, Ve);
            });
          } else if (h.side === ce3.DOCUMENTS) {
            P[s].deleteDocumentSlots(h.file);
          } else if (h.side === ce3.RESSOURCE) {
            let z = new E5w(h.ressource);
            z.deleteDocument(h.file.id);
            P.setCahierDeTexteUserRessource(s, z);
          }
          if (Array.isArray(P[s].documents)) {
            P[s].documents.edRemove(z => z.id === h.file.id);
          }
          break;
        case "addDocument":
          if (!Object.isExists(h.slot) || h.side !== ce3.AFAIRE && h.side !== ce3.SEANCE) {
            if (Object.isExists(h.ressource) && h.side === ce3.RESSOURCE) {
              const z = P.getCahierDeTexteUserRessource(s, h.ressource.entityCode, h.ressource.matiereCode);
              if (Object.isExists(z)) {
                let Ae = new E5w(z);
                Ae.addDocument(h.file);
                P.setCahierDeTexteUserRessource(s, Ae);
              }
            }
          } else {
            const z = P.getCahierDeTexteUserSlots(s, h.slot.date, h.slot.entityType, h.slot.entityCode, h.slot.matiereCode);
            const Ae = new ifA();
            z.forEach(Ve => {
              let Tt = new B5X(Ve);
              h.file.description = `${h.side === ce3.AFAIRE ? "Travail à faire" : "Contenu de séance"} - ${Tt.matiereLibelle} - ${Tt.entityLibelle} - ${Ae.transform(new Date(), "EEE dd MMM")}`;
              Tt.addDocument(h.side, h.file);
              P.setCahierDeTexteUserSlot(s, Tt);
            });
          }
          if (Array.isArray(P[s].documents)) {
            P[s].documents.push(h.file);
          }
          break;
        case "getDocuments":
          if (Array.isArray(n)) {
            P[s].documents = n.map(z => new eD9(z));
          }
          break;
        case "getRessources":
          {
            let z;
            z = Object.isExists(n) ? new E5w({
              ...n,
              entityCode: h.entityCode,
              matiereCode: h.matiereCode
            }) : new E5w({
              idCDT: 0,
              contenu: "",
              entityCode: h.entityCode,
              matiereCode: h.matiereCode
            });
            if (!Array.isArray(P[s].ressources)) {
              P[s].ressources = [];
            }
            P[s].ressources.edInsertUpdate(z, Ae => z.entityCode === Ae.entityCode && z.matiereCode === Ae.matiereCode);
            break;
          }
        case "addComment":
        case "updateComment":
        case "deleteComment":
          if (h.side === ce3.RESSOURCE) {
            let z = P.getCahierDeTexteUserRessource(s, h.ressource.entityCode, h.ressource.matiereCode);
            if (Object.isExists(z)) {
              let Ae = new E5w(z);
              if (d === "addComment") {
                Ae.addComment(n);
              } else if (d === "updateComment") {
                Ae.updateComment(n);
              } else {
                Ae.deleteComment(n);
              }
              P.setCahierDeTexteUserRessource(s, Ae);
            }
          } else if (h.side === ce3.AFAIRE || h.side === ce3.SEANCE) {
            let z = new B5X(h.slot);
            if (d === "addComment") {
              z.addComment(h.side, n);
            } else if (d === "updateComment") {
              z.updateComment(h.side, n);
            } else {
              z.deleteComment(h.side, n);
            }
            P.setCahierDeTexteUserSlot(s, z);
          }
          break;
        case "loadCorrespondances":
          P.setCahierDeTexteUserCorrespondances(s, n);
          break;
        case "addRenduDevoir":
          {
            const z = P.getCahierDeTexteUserCdtMatiereJour(s, h.dateDevoir, h.cdtMatiereJour.matiere);
            if (Object.isExists(z)) {
              let Ae = new ym(z);
              Ae.addDocumentRendu(h.file);
              P.setCahierDeTexteUserCdtMatiereJour(s, h.dateDevoir, Ae);
            }
            break;
          }
        case "removeRendusDevoir":
          {
            const z = P.getCahierDeTexteUserCdtMatiereJour(s, h.dateDevoir, h.cdtMatiereJour.matiere);
            if (Object.isExists(z)) {
              const Ae = new ym(z);
              h.tabFichiers.forEach(Ve => Ae.removeDocumentRendu(Ve));
              P.setCahierDeTexteUserCdtMatiereJour(s, h.dateDevoir, Ae);
            }
            break;
          }
        case "getRessourcesEleve":
          if (Array.isArray(n)) {
            P[s].ressourcesEleve = n.map(z => new td2(z));
          }
          break;
        case "duplicateRessource":
          P.duplicateRessource(s, n, h);
          break;
        case "getCopiesCorrectifs":
          P.setCahierDeTexteUserDCC(s, n, h.idCDT);
          break;
        case "addCorrectifDevoir":
          {
            const z = P[s].getCahierDeTexteDCCEleve(h.idCDT, h.idEleve);
            if (Object.isExists(z)) {
              let Ae = new TuB(z);
              Ae.correctifs += h.nbFiles;
              P[s].setCahierDeTexteDCCEleve(Ae, h.idCDT);
            }
            break;
          }
        case "removeCorrectifsDevoir":
          {
            const z = P[s].getCahierDeTexteDCCEleve(h.idCDT, h.idEleve);
            if (Object.isExists(z)) {
              let Ae = new TuB(z);
              Ae.correctifs = 0;
              P[s].setCahierDeTexteDCCEleve(Ae, h.idCDT);
            }
            break;
          }
        case "saveCorrectifsCommentaireEnseignant":
          {
            const z = P[s].getCahierDeTexteDCCEleve(h.idCDT, h.idEleve);
            if (Object.isExists(z)) {
              let Ae = new TuB(z);
              Ae.commentaire = n;
              P[s].setCahierDeTexteDCCEleve(Ae, h.idCDT);
            }
            break;
          }
        case "validerDepotRendusEleveDansCasierProf":
          P.validerDepotRenduEleveDCCUser(s, h.idDevoir, h.dateCahierTexte);
          break;
        case "updateStateDepotRenduCorrectifEleve":
          if (h.typeDepot === "rendu") {
            P.setDepotRenduEleveDCCUser(s, h.idDevoir, h.idEleve, h.isDepose);
          } else if (h.typeDepot === "correctif") {
            P.setDepotCorrectifEleveDCCUser(s, h.idDevoir, h.idEleve, h.isDepose);
          }
          break;
        case "validerDepotCorrectifGlobal":
          P.setDepotCorrectifGlobalDCCUser(s, h.idDevoir, h.isDepose);
      }
      Object.setExpired(P[s], this.expireableTTL);
      this.store = P;
    }
    markAsExpired(n) {
      let s = this.cloneDeep();
      if (Object.isExists(s[n])) {
        Object.setExpired(s[n], 0);
        this.store = s;
      }
    }
    addFile(n, s, d) {
      let h = {
        file: n,
        side: d
      };
      if (d === ce3.RESSOURCE) {
        h.ressource = s;
      } else if (d === ce3.AFAIRE || d === ce3.SEANCE) {
        h.slot = s;
      }
      this.updateCahierDeTexteStore(null, this.authStore.variantForCurrentUser, "addDocument", h);
    }
    addRenduDevoir(n, s, d, h) {
      this.updateCahierDeTexteStore(null, $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, dcH.ELEVE, h), "addRenduDevoir", {
        file: n,
        dateDevoir: s,
        cdtMatiereJour: d
      });
    }
    removeRendusDevoir(n, s, d, h) {
      this.updateCahierDeTexteStore(null, $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, dcH.ELEVE, h), "removeRendusDevoir", {
        tabFichiers: n,
        dateDevoir: s,
        cdtMatiereJour: d
      });
    }
    addCorrectifDevoir(n, s, d) {
      this.updateCahierDeTexteStore(null, this.authStore.variantForCurrentUser, "addCorrectifDevoir", {
        idCDT: n,
        idEleve: s,
        nbFiles: d
      });
    }
    removeCorrectifsDevoir(n, s) {
      this.updateCahierDeTexteStore(null, this.authStore.variantForCurrentUser, "removeCorrectifsDevoir", {
        idCDT: n,
        idEleve: s
      });
    }
    selectBadgesCahierDeTexteEleve(n, s) {
      const d = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.select$(h => {
        const P = Object.getEntity(h, d);
        if (!Object.isExists(P) || !Object.isExists(P.timeline)) {
          return (0, S.of)(undefined);
        }
        const z = Object.keys(P.timeline);
        let Ae = new dv9();
        z.forEach(Ve => {
          Ae[Ve] = new Gf({
            iconApp: true,
            valeur: P.timeline[Ve].filter(Tt => Tt.effectue === false).length
          });
        });
        return Ae;
      });
    }
    selectCahierDeTexte(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.select$(P => {
        const z = Object.getEntity(P, h);
        if (Object.isExists(z)) {
          if (n === meW.ENSEIGNANT) {
            return a9d.filterSlotsByPeriode(z.slots, d);
          }
          if (n === meW.ELEVE || n === meW.CLASSE || n === meW.GROUPE) {
            return a9d.filterCDTEleveByPeriode(z.vueJour, d);
          }
        }
      });
    }
    selectCahierDeTexteEleveAVenir(n, s) {
      const d = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.select$(h => {
        const P = Object.getEntity(h, d);
        if (Object.isExists(P) && Object.isExists(P.timeline)) {
          return P.timeline;
        }
      });
    }
    selectCahierDeTexteEntryById(n, s, d) {
      return this.select$(() => this.getCahierDeTexteEntryById(n, s, d));
    }
    selectListeRessourcesEleve(n, s, d = "") {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.select$(P => {
        const z = Object.getEntity(P, h);
        if (Object.isExists(z)) {
          if (d === "") {
            return z.ressourcesEleve;
          } else {
            return z.ressourcesEleve.find(Ae => Ae.id === d);
          }
        }
      });
    }
    selectDCCSlot(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, this.authStore.variantForCurrentUser);
        if (Object.isExists(d) && Object.isExists(d.dcc)) {
          return d.dcc.find(h => h.idCDT === n);
        }
      });
    }
    selectDCCEleveSlot(n, s) {
      return this.selectDCCSlot(n).pipe((0, j.U)(d => {
        var h;
        if ((h = d.eleves) === null || h === undefined) {
          return undefined;
        } else {
          return h.find(P => P.eleve.id === s);
        }
      }));
    }
    getCahierDeTexte(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const P = this.snapshot[h];
      if (Object.isExists(P)) {
        if (n === meW.ENSEIGNANT) {
          return a9d.filterSlotsByPeriode(P.slots, d);
        }
        if (n === meW.ELEVE || n === meW.CLASSE || n === meW.GROUPE) {
          return a9d.filterCDTEleveByPeriode(P.vueJour, d);
        }
      }
    }
    getCahierDeTexteEntryById(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const P = this.snapshot[h];
      if (Object.isExists(P)) {
        if (n === meW.ENSEIGNANT) {
          return P.slots.find(z => z.idCDT === d);
        } else {
          return Object.values(P.vueJour).edFlatten().edPluckFlatten("matieres").find(z => z.id === d);
        }
      }
    }
    getSlot(n, s, d, h, P, z) {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.snapshot.getCahierDeTexteUserSlot(Ae, d, h, P, z);
    }
    getRessourceEleve(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const P = this.snapshot[h];
      if (Object.isExists(P) && Array.isArray(P.ressourcesEleve)) {
        return P.ressourcesEleve.find(z => z.id === d);
      }
    }
    getPeriodeSlotsLoaded(n) {
      const s = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, meW.ENSEIGNANT, n);
      const d = this.snapshot[s];
      if (Object.isExists(d) && Object.isExists(d.periodeSlotsLoaded)) {
        return d.periodeSlotsLoaded;
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Kh,
    className: "CahierDeTexteStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
let Pv = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.http = n;
      this.authStore = s;
      this._datePipe = new ifA();
      this._displayNomPipe = new $t3();
    }
    addComment(n, s, d, h, P) {
      let z = FSr.translateTypeUser(s, false);
      return this.http.post(`${z}/${n}/${h}/commentaires`, {
        message: P.message,
        idContenu: d
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(Ve => {
        if (Ve.code === GL1.OK) {
          let Tt = new j2C(P);
          Tt.id = Ve.data.id;
          Tt.date = this._datePipe.transform(new Date(), "y-MM-dd");
          Tt.auteur = this._displayNomPipe.transform(this.authStore.currentUser, false, false, this.authStore.isFouE());
          Tt.idAuteur = n;
          Tt.supprime = false;
          Tt.profilAuteur = s;
          Tt.idSupport = d;
          Tt.typeSupport = h;
          return Tt;
        }
      }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    updateComment(n, s, d, h, P) {
      return this.http.post(`${s}/${n}/${h}/commentaires/${P.id}`, {
        message: P.message,
        idContenu: d
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(Ae => {
        if (Ae.code === GL1.OK) {
          let Ve = new j2C(Ae.data);
          Ve.auteur = this._displayNomPipe.transform(this.authStore.currentUser, false, false, this.authStore.isFouE());
          return Ve;
        }
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    deleteComment(n, s, d, h, P) {
      return this.http.post(`${s}/${n}/${h}/commentaires/${P.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, j.U)(Ae => Ae.code === GL1.OK), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(CnD));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let mYE = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.http = n;
      this.httpCacheService = s;
      this.authStore = d;
      this.store = h;
      this.commentaireService = P;
    }
    cahierDeTexte(n, s, d = false) {
      let h = FSr.translateTypeUser(s);
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const z = Object.getEntity(this.store.snapshot, P);
      if (d || Object.isExpired(z)) {
        return this.http.post(`${h}/${n}/cahierdetexte`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => {
          const Ve = new sIb(Ae.data);
          this.store.updateCahierDeTexteStore(Ve, P, "cahierDeTexte");
          return Ve;
        }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      } else {
        return E.E;
      }
    }
    cahierDeTextesParDate(n, s, d, h = false) {
      let P = FSr.translateTypeUser(s);
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const Ae = Object.getEntity(this.store.snapshot, z);
      if (h || Object.isExpired(Ae) || !Object.isExists(Ae.vueJour[d])) {
        return this.http.post(`${P}/${n}/cahierdetexte/${d}`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ve => {
          const Tt = new ftL(Ve.data);
          this.store.updateCahierDeTexteStore(Tt, z, "cahierDeTextesParDate");
          return Tt;
        }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    getCDTUnitaire(n, s, d, h) {
      if (typeof n === "undefined" || typeof s === "undefined" || typeof d === "undefined" || typeof h === "undefined") {
        return (0, I._)(() => new FwQ("Données non valides"));
      }
      let P = a9d.formatCodeMatiere(d);
      return this.http.post(`cahierdetexte/${n}/${s}/${P}/${h}`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(z => n === "afaire" ? new l6t(z.data) : new mEw(z.data)), (0, W.K)(z => this.catchBadResponse(z)));
    }
    setDevoirEffectue(n, s, d, h, P = false) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      let Ae = FSr.translateTypeUser(s);
      let Ve = {
        idDevoirsEffectues: [],
        idDevoirsNonEffectues: []
      };
      if (P) {
        Ve.idDevoirsEffectues.push(d);
      } else {
        Ve.idDevoirsNonEffectues.push(d);
      }
      return this.http.post(`${Ae}/${n}/cahierdetexte`, Ve, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Tt => Tt.code !== GL1.OK ? (0, I._)(() => new FwQ("...", Tt.code)) : (this.store.updateCahierDeTexteStore(true, z, "setDevoirEffectue", {
        idDevoir: d,
        isEffectue: P,
        dateCahierTexte: h
      }), (0, S.of)(true))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    loadSlots(n, s, d, h, P = false) {
      if (s !== dcH.ENSEIGNANT) {
        return (0, I._)(() => new FwQ("Chargement du cahier de texte impossible. Utilisateur interdit"));
      }
      if (typeof d === "undefined" || typeof h === "undefined") {
        return (0, I._)(() => new FwQ("Chargement du cahier de texte impossible. Période non définies"));
      }
      const z = new Date(d);
      const Ae = new Date(h);
      const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const Tt = Object.getEntity(this.store.snapshot, Ve);
      let Vt = P || Object.isExpired(Tt);
      if (!Vt) {
        if (Object.isExists(Tt.periodeSlotsLoaded) && (Tt.periodeSlotsLoaded.dateDebut > z || Ae > Tt.periodeSlotsLoaded.dateFin)) {
          Vt = true;
        }
      }
      if (Vt) {
        return this.http.post(`cahierdetexte/loadslots/${d}/${h}`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Hn => {
          const Ci = Hn.data.map(fr => new B5X(fr));
          return this.store.updateCahierDeTexteStore(Ci, Ve, "loadSlots", {
            dateDebut: z,
            dateFin: Ae,
            forceReload: P
          });
        }), (0, W.K)(Hn => this.catchBadResponse(Hn)));
      } else {
        return E.E;
      }
    }
    save(n, s) {
      if (s === P2J.AFAIRE && n.aFaire.contenu.length > 1048576 || s === P2J.SEANCE && n.seance.contenu.length > 1048576) {
        return (0, I._)(new FwQ("Enregistrement impossible. Votre saisie est trop grande (>1 Mo)."));
      }
      s = s.toLowerCase();
      let d = a9d.formatCodeMatiere(n.matiereCode);
      return this.http.post(`cahierdetexte/${s}/${n.entityCode}/${d}/${n.date}`, n, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(h => h.code !== GL1.OK ? (0, I._)(() => new FwQ("...", h.code)) : (this.httpCacheService.delete(`listeInterrogations_${n.entityType}_${n.entityId}`), this.store.updateCahierDeTexteStore(h.data.idCDT, this.authStore.variantForCurrentUser, "save", {
        slot: n
      }), (0, S.of)(h.data.idCDT))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    delete(n, s) {
      return this.http.post(`cahierdetexte/${s.toLowerCase()}/${n.idCDT}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(d => {
        if (d.code !== GL1.OK) {
          return (0, I._)(() => new FwQ("...", d.code));
        }
        this.httpCacheService.delete(`listeInterrogations_${n.entityType}_${n.entityId}`);
        let h = new B5X(n);
        if (s === P2J.AFAIRE) {
          h.travailAFaire = false;
          h.aFaire = undefined;
        } else {
          h.contenuDeSeance = false;
          h.seance = undefined;
        }
        this.store.updateCahierDeTexteStore(h, this.authStore.variantForCurrentUser, "delete");
        return (0, S.of)(true);
      }), (0, W.K)(d => this.catchBadResponse(d)));
    }
    associateElemProg(n, s) {
      if (typeof n.idCDT === "undefined") {
        return (0, I._)(() => new FwQ("Données non valides"));
      } else {
        return this.http.post(`cahierdetexte/${n.idCDT}/elementsprogramme`, {
          typeCDT: n.typeSaisie,
          idOrigineCatalogue: s.idOrigineCatalogue
        }, {
          params: new Et().set("verbe", "post")
        }).pipe((0, F.w)(h => h.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur est survenue lors de l'ajout de l'élément de programme", h.code, DOJ.genericError)) : (this.store.updateCahierDeTexteStore(s, this.authStore.variantForCurrentUser, "associateElemProg", {
          slot: n,
          typeSaisie: n.typeSaisie === "T" ? P2J.AFAIRE : P2J.SEANCE,
          elemProg: new qGp({
            id: s.idOrigineCatalogue,
            libelle: s.libelle,
            libelleCompetence: s.libelleCompetence,
            libelleMatiere: s.libelleMatiere
          })
        }), (0, S.of)(true))), (0, W.K)(h => this.catchBadResponse(h)));
      }
    }
    associateClasseGroupe(n, s, d, h) {
      let P = new YJW();
      P.edt.typeEntity = d;
      P.edt.classeCode = s;
      P.edt.classeLibelle = n;
      P.note.typeEntity = h.typeEntity;
      P.note.classeCode = h.code;
      P.note.classeLibelle = h.libelle;
      return this.http.post("cahierdetexte/correspondances", {
        edt: P.edt,
        note: P.note
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Ae => Ae.code !== GL1.OK ? (0, I._)(() => new FwQ("...", Ae.code)) : (P.id = Ae.data.id, this.store.updateCahierDeTexteStore(P, this.authStore.variantForCurrentUser, "associateClasse"), (0, S.of)(Ae.data.id))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    associateMatiere(n, s, d) {
      let h = new Mv();
      h.edt.matiereCode = s;
      h.edt.matiereLibelle = n;
      h.note.matiereCode = d.code;
      h.note.matiereLibelle = d.libelle;
      return this.http.post("cahierdetexte/correspondances", {
        edt: h.edt,
        note: h.note
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("...", z.code)) : (h.id = z.data.id, this.store.updateCahierDeTexteStore(h, this.authStore.variantForCurrentUser, "associateMatiere"), (0, S.of)(z.data.id))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    deleteCorrespondance(n, s) {
      return this.http.post(`cahierdetexte/correspondances/${n.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(d => d.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de l'élément de programme", d.code, DOJ.genericError)) : (this.store.updateCahierDeTexteStore(n, this.authStore.variantForCurrentUser, "deleteCorrespondance", {
        type: s
      }), (0, S.of)(true))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    dissociateElemProg(n, s) {
      if (typeof n.idCDT === "undefined") {
        return (0, I._)(() => new FwQ("Données non valides"));
      }
      let d;
      d = s instanceof tnE ? s.idOrigineCatalogue : s.id;
      return this.http.post(`cahierdetexte/${n.idCDT}/elementsprogramme/${d}`, {
        typeCDT: n.typeSaisie,
        idOrigineCatalogue: d
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => {
        if (P.code !== GL1.OK) {
          return (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de l'élément de programme", P.code, DOJ.genericError));
        }
        let z = {
          slot: n,
          typeSaisie: n.typeSaisie === "T" ? P2J.AFAIRE : P2J.SEANCE,
          elemProg: undefined
        };
        z.elemProg = s instanceof tnE ? new qGp({
          id: s.idOrigineCatalogue,
          libelle: s.libelle,
          libelleCompetence: s.libelleCompetence,
          libelleMatiere: s.libelleMatiere
        }) : s;
        this.store.updateCahierDeTexteStore(s, this.authStore.variantForCurrentUser, "dissociateElemProg", z);
        return (0, S.of)(true);
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    associateLienManuel(n, s, d) {
      if (typeof n.idCDT === "undefined") {
        return (0, I._)(() => new FwQ("Données non valides"));
      } else {
        return this.http.post(`cahierdetexte/${n.idCDT}/liensmanuels`, {
          typeCDT: s === P2J.AFAIRE ? ce3.T : ce3.C,
          urlLien: d.url,
          urlLibelle: d.libelle
        }, {
          params: new Et().set("verbe", "post")
        }).pipe((0, F.w)(P => P.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur est survenue lors de l'ajout du lien manuel", P.code, DOJ.genericError)) : (this.store.updateCahierDeTexteStore(d, this.authStore.variantForCurrentUser, "associateLienManuel", {
          slot: n,
          typeSaisie: s,
          lienManuel: d
        }), (0, S.of)(true))), (0, W.K)(P => this.catchBadResponse(P)));
      }
    }
    dissociateLienManuel(n, s, d) {
      if (typeof n.idCDT === "undefined") {
        return (0, I._)(() => new FwQ("Données non valides"));
      } else {
        return this.http.post(`cahierdetexte/${n.idCDT}/liensmanuels`, {
          typeCDT: s === P2J.AFAIRE ? ce3.T : ce3.C,
          urlLien: d.url
        }, {
          params: new Et().set("verbe", "delete")
        }).pipe((0, F.w)(P => P.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression du lien manuel", P.code, DOJ.genericError)) : (this.store.updateCahierDeTexteStore(d, this.authStore.variantForCurrentUser, "dissociateLienManuel", {
          slot: n,
          typeSaisie: s,
          lienManuel: d
        }), (0, S.of)(true))), (0, W.K)(P => this.catchBadResponse(P)));
      }
    }
    liensCdtElemProg(n, s, d, h, P = "", z = false) {
      const Ae = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: `liensCdtElemProg_${P}_${h}_${d}`,
        cacheTTL: X9o.uneJournee,
        verbe: "get"
      });
      if (z) {
        this.httpCacheService.delete(Ae.get("cacheKey"));
      }
      return this.http.post(`eleves/${d}/cahierdetexte/elementProgramme/${h}`, {
        anneeScolaire: P
      }, {
        params: Ae
      }).pipe((0, j.U)(Ve => Array.isArray(Ve.data.saisiesCahierDeTextes) ? Ve.data.saisiesCahierDeTextes.map(Tt => new ev(Tt)) : []), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    duplicateSlot(n, s, d) {
      return this.http.post("cahierdetexte/duplication", {
        origine: n,
        side: d,
        destinations: s
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(h => {
        if (h.code !== GL1.OK) {
          return (0, I._)(() => new FwQ("...", h.code));
        }
        const P = s.edSortBy("date");
        return this.loadSlots(this.authStore.currentUser.id, this.authStore.currentUser.typeCompte, P[0].date, P[P.length - 1].date, true);
      }), (0, j.U)(() => true), (0, W.K)(h => this.catchBadResponse(h)));
    }
    duplicateRessource(n, s) {
      return this.http.post("cahierdetexte/duplication", {
        origine: n,
        side: ce3.RESSOURCE,
        destinations: s
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(d => d.code !== GL1.OK ? (0, I._)(() => new FwQ("...", d.code)) : (this.store.updateCahierDeTexteStore(n, this.authStore.variantForCurrentUser, "duplicateRessource", s), (0, S.of)(true))), (0, j.U)(() => true), (0, W.K)(d => this.catchBadResponse(d)));
    }
    loadCorrespondances(n = false) {
      const s = this.authStore.variantForCurrentUser;
      const d = Object.getEntity(this.store.snapshot, s);
      if (n || Object.isExpired(d)) {
        return this.http.post("cahierdetexte/correspondances", {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(h => {
          const P = new syW(h.data);
          this.store.updateCahierDeTexteStore(P, s, "loadCorrespondances");
        }), (0, W.K)(h => this.catchBadResponse(h)));
      } else {
        return E.E;
      }
    }
    getCopiesCorrectifs(n, s = false) {
      if (!this.authStore.isProfesseur()) {
        return (0, I._)(() => new FwQ("Chargement impossible. Utilisateur interdit"));
      }
      const d = this.authStore.variantForCurrentUser;
      const h = Object.getEntity(this.store.snapshot, d);
      if (s || Object.isExpired(h) || h.dcc.findIndex(z => z.idCDT === n.idCDT) === -1) {
        const z = a9d.formatCodeMatiere(n.matiereCode);
        return this.http.post(`cahierdetexte/${n.idCDT}/${n.entityCode}/${z}/pCDTDashboardCopiesCorrectifs`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => {
          const Ve = new O$2(Ae.data);
          return this.store.updateCahierDeTexteStore(Ve, d, "getCopiesCorrectifs", {
            idCDT: n.idCDT
          });
        }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      }
      return E.E;
    }
    saveCorrectifsCommentaireEnseignant(n, s, d) {
      if (!this.authStore.isProfesseur()) {
        return (0, I._)(() => new FwQ("Mise à jour impossible. Utilisateur interdit"));
      }
      const h = a9d.formatCodeMatiere(n.matiereCode);
      return this.http.post(`cahierdetexte/${n.idCDT}/${n.entityCode}/${h}/pCDTDashboardCopiesCorrectifs`, {
        dateCDT: n.date,
        idEleve: s,
        commentaire: d
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.store.updateCahierDeTexteStore(d, this.authStore.variantForCurrentUser, "saveCorrectifsCommentaireEnseignant", {
        idCDT: n.idCDT,
        idEleve: s
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de l'enregistrement du commentaire, merci de réessayer !", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    addCommentDevoir(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.commentaireService.addComment(n, s, d, P, h).pipe((0, F.w)(Ae => Object.isExists(Ae) ? (this.store.updateCahierDeTexteStore(Ae, z, "addCommentDevoir", {
        idDevoir: d,
        side: P
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de l'ajout du commentaire, merci de réessayer !"))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    addComment(n, s, d) {
      return this.commentaireService.addComment(this.authStore.currentUser.id, this.authStore.currentUser.typeCompte, n.idCDT, s, d).pipe((0, F.w)(h => {
        if (Object.isExists(h)) {
          let P = {
            side: s
          };
          if (s === ce3.RESSOURCE) {
            P.ressource = n;
          } else if (s === ce3.AFAIRE || s === ce3.SEANCE) {
            P.slot = n;
          }
          this.store.updateCahierDeTexteStore(h, this.authStore.variantForCurrentUser, "addComment", P);
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Un problème technique s'est produit lors de l'ajout du commentaire, merci de réessayer !"));
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    updateComment(n, s, d) {
      return this.commentaireService.updateComment(this.authStore.currentUser.id, this.authStore.currentUser.typeCompte, n.idCDT, s, d).pipe((0, F.w)(h => {
        if (Object.isExists(h)) {
          let P = {
            side: s
          };
          if (s === ce3.RESSOURCE) {
            P.ressource = n;
          } else if (s === ce3.AFAIRE || s === ce3.SEANCE) {
            P.slot = n;
          }
          this.store.updateCahierDeTexteStore(h, this.authStore.variantForCurrentUser, "updateComment", P);
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la modification du commentaire, merci de réessayer !"));
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    deleteComment(n, s, d) {
      return this.commentaireService.deleteComment(this.authStore.currentUser.id, this.authStore.currentUser.typeCompte, n.idCDT, s, d).pipe((0, F.w)(h => {
        if (h) {
          let P = {
            side: s
          };
          if (s === ce3.RESSOURCE) {
            P.ressource = n;
          } else if (s === ce3.AFAIRE || s === ce3.SEANCE) {
            P.slot = n;
          }
          this.store.updateCahierDeTexteStore(d, this.authStore.variantForCurrentUser, "deleteComment", P);
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la suppression du commentaire, merci de réessayer !"));
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    deleteFile(n, s, d) {
      let h = {
        file: n,
        side: d
      };
      if (d === ce3.RESSOURCE) {
        h.ressource = s;
      } else if (d === ce3.AFAIRE || d === ce3.SEANCE) {
        h.slot = s;
      }
      return this.http.post(`cahierdetexte/fichiers/${n.id}`, n, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => P.code !== GL1.OK ? (0, I._)(() => new FwQ("...", P.code)) : (Object.isExists(s) && Object.isExists(d) && this.store.updateCahierDeTexteStore(null, this.authStore.variantForCurrentUser, "deleteDocument", h), (0, S.of)(true))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    getDocuments(n = false) {
      const s = this.authStore.variantForCurrentUser;
      const d = Object.getEntity(this.store.snapshot, s);
      if (n || !Array.isArray(d.documents) || Object.isExpired(d)) {
        return this.http.post("cahierdetexte/fichiers", {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(P => {
          this.store.updateCahierDeTexteStore(P.data, s, "getDocuments");
        }), (0, W.K)(P => this.catchBadResponse(P)));
      } else {
        return E.E;
      }
    }
    getResources(n, s, d = false) {
      const h = this.authStore.variantForCurrentUser;
      const P = Object.getEntity(this.store.snapshot, h);
      let z = d || Object.isExpired(P) || !Array.isArray(P.ressources);
      if (!z) {
        if (P.ressources.findIndex(Tt => Object.isExists(Tt.matiereCode) && Object.isExists(Tt.entityCode) && Tt.matiereCode === s && Tt.entityCode === n && Tt.idCDT > 0) === -1) {
          z = true;
        }
      }
      let Ae = a9d.formatCodeMatiere(s);
      if (z) {
        return this.http.post(`cahierdetexte/ressources/${n}/${Ae}`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ve => {
          this.store.updateCahierDeTexteStore(Ve.data, h, "getRessources", {
            entityCode: n,
            matiereCode: s
          });
        }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    saveContenu(n, s = "", d) {
      const h = this.authStore.variantForCurrentUser;
      let P = n;
      let z = a9d.formatCodeMatiere(d);
      return this.http.post(`cahierdetexte/ressources/${s}/${z}`, P, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (P.idCDT === 0 && (P.idCDT = Ae.data.idCDT), this.store.updateCahierDeTexteStore(P, h, "saveContenu"), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la mise à jour. Merci de réessayer !"))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    getRessourcesEleve(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const z = Object.getEntity(this.store.snapshot, P);
      if (h || Object.isExpired(z) || !Array.isArray(z.ressourcesEleve)) {
        return this.http.post(`${ce3.R}/${d}/viedelaclasse`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ve => {
          this.store.updateCahierDeTexteStore(Array.isArray(Ve.data.matieres) ? Ve.data.matieres : [], P, "getRessourcesEleve");
        }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    listeInterrogations(n, s, d = false) {
      const h = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: `listeInterrogations_${s}_${n}`,
        cacheTTL: X9o.uneJournee,
        verbe: "get"
      });
      if (d) {
        this.httpCacheService.delete(h.get("cacheKey"));
      }
      return this.http.post(`enseignant/cahierdetexte/${s === JBS.CLASSE ? "Classes" : "Groupes"}/${n}/interrogations`, {}, {
        params: h
      }).pipe((0, j.U)(P => P.data), (0, W.K)(P => this.catchBadResponse(P)));
    }
    getEleveCopiesCorrectifs(n, s) {
      if (!this.authStore.isProfesseur() && !this.authStore.isFouE()) {
        return (0, I._)(() => new FwQ("Chargement impossible. Utilisateur interdit"));
      }
      const d = this.store.getCahierDeTexteEntryById(meW.ELEVE, s, n);
      if (!Object.isExists(d)) {
        return (0, I._)(() => new FwQ("Chargement impossible. Cahier de texte inexistant."));
      }
      const h = a9d.formatCodeMatiere(d.codeMatiere);
      return this.http.post(`cahierdetexte/${n}/${d.entityCode}/${h}/eCDTDashboardCopiesCorrectifs/${s}`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(P => new TuB(P.data)), (0, W.K)(P => this.catchBadResponse(P)));
    }
    validerDepotRendusEleveDansCasierProf(n, s, d) {
      if (!this.authStore.isProfesseur() && !this.authStore.isFouE()) {
        return (0, I._)(() => new FwQ("Mise à jour impossible. Utilisateur interdit"));
      }
      const h = this.store.getCahierDeTexteEntryById(meW.ELEVE, s, n);
      if (!Object.isExists(h)) {
        return (0, I._)(() => new FwQ("Mise à jour impossible. Cahier de texte inexistant."));
      }
      const P = a9d.formatCodeMatiere(h.codeMatiere);
      return this.http.post(`cahierdetexte/${n}/${h.entityCode}/${P}/depot/rendu/${s}`, {
        isDepose: true
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ae => {
        if (Ae.code === GL1.OK) {
          const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, dcH.ELEVE, s);
          this.store.updateCahierDeTexteStore(undefined, Ve, "validerDepotRendusEleveDansCasierProf", {
            idDevoir: n,
            dateCahierTexte: d,
            idEleve: s
          });
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la mise à jour. Merci de réessayer !"));
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    updateStateDepotRenduCorrectifEleve(n, s, d, h, P = true) {
      if (!this.authStore.isProfesseur()) {
        return (0, I._)(() => new FwQ("Mise à jour impossible. Utilisateur interdit"));
      }
      const z = this.store.getCahierDeTexteEntryById(meW.ENSEIGNANT, this.authStore.currentUser.id, n);
      if (!Object.isExists(z)) {
        return (0, I._)(() => new FwQ("Mise à jour impossible. Cahier de texte inexistant."));
      }
      const Ae = a9d.formatCodeMatiere(z.matiereCode);
      return this.http.post(`cahierdetexte/${n}/${z.entityCode}/${Ae}/depot/${h}/${s}`, {
        isDepose: P
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Tt => Tt.code === GL1.OK ? (this.store.updateCahierDeTexteStore(undefined, this.authStore.variantForCurrentUser, "updateStateDepotRenduCorrectifEleve", {
        idDevoir: n,
        isDepose: P,
        dateCahierTexte: d,
        typeDepot: h,
        idEleve: s
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la mise à jour. Merci de réessayer !"))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    validerDepotCorrectifGlobal(n) {
      if (!this.authStore.isProfesseur()) {
        return (0, I._)(() => new FwQ("Mise à jour impossible. Utilisateur interdit"));
      }
      const s = this.store.getCahierDeTexteEntryById(meW.ENSEIGNANT, this.authStore.currentUser.id, n);
      return this.http.post(`cahierdetexte/${n}/${s.entityCode}/${a9d.formatCodeMatiere(s.matiereCode)}/depot/correctif`, {}, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(d => d.code === GL1.OK ? (this.store.updateCahierDeTexteStore(undefined, this.authStore.variantForCurrentUser, "validerDepotCorrectifGlobal", {
        idDevoir: n,
        isDepose: true
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la mise à jour. Merci de réessayer !"))), (0, W.K)(d => this.catchBadResponse(d)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nl), t.LFG(CnD), t.LFG(x1h), t.LFG(Pv));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
let jh = (() => {
  let R = class {
    constructor(n = {
      id: 0,
      nom: "",
      prenom: "",
      particule: "",
      role: ""
    }) {
      this.id = n.id;
      this.nom = n.nom;
      this.prenom = n.prenom;
      this.particule = n.particule;
      this.role = n.role;
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDCorrespondanceAuteur"
  })], R);
  return R;
})();
let Xf = (() => {
  let R = class {
    constructor(n = {
      idEleve: 0,
      nom: "",
      prenom: "",
      particule: ""
    }) {
      this.idEleve = n.idEleve;
      this.nom = n.nom;
      this.prenom = n.prenom;
      this.particule = n.particule;
      if (typeof n.signature !== "undefined") {
        this.signature = new Sej(n.signature);
      }
    }
    isCorrespondanceSignee() {
      return Object.isExists(this.signature) && this.signature.dateValidation !== "";
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDCorrespondanceGroupedEleve"
  })], R);
  return R;
})();
export class TSX {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    particule: "",
    civilite: "",
    type: "",
    lu: false
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.civilite = e.civilite;
    this.type = e.type;
    this.lu = e.lu;
    if (typeof e.dateLu !== "undefined") {
      this.dateLu = e.dateLu;
    }
  }
}
export class chz extends Xf {
  constructor(e = {
    idEleve: 0,
    nom: "",
    prenom: "",
    particule: "",
    dateCreation: "",
    contenu: "",
    type: "",
    isSignatureDemandee: false,
    auteur: new jh(),
    urlFichier: "",
    idSessionRDV: 0
  }) {
    super(e);
    this.dateCreation = e.dateCreation;
    this.contenu = e.contenu;
    this.type = e.type;
    this.isSignatureDemandee = e.isSignatureDemandee;
    this.auteur = new jh(e.auteur);
    this.idSessionRDV = e.idSessionRDV;
    if (typeof e.destinataire !== "undefined") {
      this.destinataire = new TSX(e.destinataire);
    }
    if (typeof e.id !== "undefined") {
      this.id = e.id;
    }
    if (Object.isExists(e.fichier)) {
      this.fichier = new eD9(e.fichier);
      this.urlFichier = e.fichier.url;
    } else if (typeof e.urlFichier !== "undefined") {
      this.setUrlFichier(e.urlFichier);
    }
  }
  setUrlFichier(e) {
    if (typeof e !== "undefined") {
      this.urlFichier = e;
      this.fichier = FSr.isNotEmptyString(e) ? new eD9({
        id: e,
        type: Y9E.CARNET_CORRESPONDANCE,
        displayText: "Document joint",
        libelle: `pj_correspondance_${this.dateCreation.replace(/[-:\s]/g, "")}_${Date.now()}.${e.split(".").pop()}`,
        url: e,
        unc: e
      }) : undefined;
    } else {
      this.urlFichier = e;
      this.fichier = undefined;
    }
  }
  isSupprime() {
    return this.contenu === gr;
  }
}
class Rv {
  constructor(e = {
    id: 0,
    code: "",
    libelle: ""
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
class M0 {
  constructor(e = {
    id: 0,
    code: "",
    libelle: ""
  }) {
    this.id = e.id;
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
export class qth {
  constructor(e = {
    idEleve: 0,
    nom: "",
    prenom: "",
    particule: "",
    dateCreation: "",
    contenu: "",
    travailAFaire: "",
    tagRecu: ""
  }) {
    this.idEleve = e.idEleve;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.dateCreation = e.dateCreation;
    this.contenu = e.contenu;
    this.type = new Rv(e.type);
    this.motif = new M0(e.motif);
    this.auteur = new jh(e.auteur);
    this.tagRecu = e.tagRecu;
    if (typeof e.travailAFaire !== "undefined") {
      this.travailAFaire = e.travailAFaire;
    }
  }
  get isTraiteVS() {
    return FSr.isNotEmptyString(this.tagRecu);
  }
}
class Fv {
  constructor(e = {
    id: 0,
    couleur: "",
    libelle: ""
  }) {
    this.id = e.id;
    this.couleur = e.couleur;
    this.libelle = e.libelle;
  }
}
export class gPZ extends Xf {
  constructor(e = {
    id: 0,
    dateCreation: "",
    contenu: "",
    idEleve: 0,
    nom: "",
    prenom: "",
    particule: ""
  }) {
    super(e);
    this.id = e.id;
    this.dateCreation = e.dateCreation;
    this.contenu = e.contenu;
    this.categorie = new Fv(e.categorie);
    this.auteur = new jh(e.auteur);
    if (Object.isExists(e.fichier)) {
      this.fichier = new eD9(e.fichier);
      this.urlFichier = e.fichier.url;
    } else if (typeof e.urlFichier !== "undefined") {
      this.setUrlFichier(e.urlFichier);
    }
  }
  setUrlFichier(e, n = false) {
    if (typeof e !== "undefined") {
      this.urlFichier = e;
      this.fichier = FSr.isNotEmptyString(e) ? new eD9({
        id: e,
        type: Y9E.CARNET_CORRESPONDANCE,
        displayText: "Document joint",
        libelle: `pj_suivi_${this.dateCreation.replace(/[-:\s]/g, "")}_${Date.now()}.${e.split(".").pop()}`,
        url: e,
        unc: n ? e : undefined
      }) : undefined;
    } else {
      this.urlFichier = e;
      this.fichier = undefined;
    }
  }
}
class Ey {
  constructor(e = {
    demandeSignatureActif: false,
    demandeSanctionActif: false,
    saisieCorrespondanceActif: false,
    suiviActif: false,
    suiviSeulPPAuteurModifiable: false,
    nbCaractMaxTravailAFaireSanction: 0
  }) {
    this.demandeSignatureActif = e.demandeSignatureActif;
    this.demandeSanctionActif = e.demandeSanctionActif;
    this.saisieCorrespondanceActif = e.saisieCorrespondanceActif;
    this.suiviActif = e.suiviActif;
    this.suiviSeulPPAuteurModifiable = e.suiviSeulPPAuteurModifiable;
    this.nbCaractMaxTravailAFaireSanction = e.nbCaractMaxTravailAFaireSanction;
  }
}
class xh {
  constructor(e = {
    classes: {},
    groupes: {},
    eleves: {}
  }) {
    this.classes = {
      ...e.classes
    };
    this.groupes = {
      ...e.groupes
    };
    this.eleves = {
      ...e.eleves
    };
  }
  get nbTotalForClasses() {
    return Object.values(this.classes).reduce((e, n) => n + e, 0);
  }
  get nbTotalForGroupes() {
    return Object.values(this.groupes).reduce((e, n) => n + e, 0);
  }
  get nbTotalForEleves() {
    return Object.values(this.eleves).reduce((e, n) => n + e, 0);
  }
}
export class o5j {
  constructor(e = {}) {
    this.correspondances = Array.isArray(e.correspondances) ? e.correspondances.map(n => new chz(n)) : [];
    this.demandesSanction = Array.isArray(e.demandesSanction) ? e.demandesSanction.map(n => new qth(n)) : [];
    this.suivis = Array.isArray(e.suivis) ? e.suivis.map(n => new gPZ(n)) : [];
    this.typesCorrespondance = Array.isArray(e.typesCorrespondance) ? [...e.typesCorrespondance] : [];
    this.typesSanction = Array.isArray(e.typesSanction) ? e.typesSanction.map(n => new Rv(n)) : [];
    this.motifsSanction = Array.isArray(e.motifsSanction) ? e.motifsSanction.map(n => new M0(n)) : [];
    this.categoriesSuivi = Array.isArray(e.categoriesSuivi) ? e.categoriesSuivi.map(n => new Fv(n)) : [];
    this.parametrage = new Ey(e.parametrage);
    if (typeof e.detailBadges !== "undefined") {
      this.detailBadges = new xh(e.detailBadges);
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
export class tPi {
  constructor(e = {
    dateCreation: "",
    contenu: "",
    type: "",
    isSignatureDemandee: false,
    urlFichier: ""
  }) {
    this.dateCreation = e.dateCreation;
    this.contenu = e.contenu;
    this.type = e.type;
    this.isSignatureDemandee = e.isSignatureDemandee;
    this.auteur = new jh(e.auteur);
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new Xf(n)) : [];
    if (typeof e.destinataire !== "undefined") {
      this.destinataire = new TSX(e.destinataire);
    }
    if (typeof e.id !== "undefined") {
      this.id = e.id;
    }
    if (Object.isExists(e.fichier)) {
      this.fichier = new eD9(e.fichier);
      this.urlFichier = e.fichier.url;
    } else if (typeof e.urlFichier !== "undefined") {
      this.setUrlFichier(e.urlFichier);
    }
    if (typeof e.nbSignatures !== "undefined") {
      this.nbSignatures = e.nbSignatures;
    }
  }
  setUrlFichier(e) {
    if (typeof e !== "undefined") {
      this.urlFichier = e;
      this.fichier = FSr.isNotEmptyString(e) ? new eD9({
        id: e,
        type: Y9E.CARNET_CORRESPONDANCE,
        displayText: "Document joint",
        libelle: `pj_correspondance_${this.dateCreation.replace(/[-:\s]/g, "")}_${Date.now()}.${e.split(".").pop()}`,
        url: e,
        unc: e
      }) : undefined;
    } else {
      this.urlFichier = e;
      this.fichier = undefined;
    }
  }
}
export class xfY {
  constructor(e = {
    dateCreation: "",
    contenu: ""
  }) {
    this.dateCreation = e.dateCreation;
    this.contenu = e.contenu;
    this.categorie = new Fv(e.categorie);
    this.auteur = new jh(e.auteur);
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new Xf(n)) : [];
    this.tabIds = Array.isArray(e.tabIds) ? [...e.tabIds] : [];
    if (Object.isExists(e.fichier)) {
      this.fichier = new eD9(e.fichier);
      this.urlFichier = e.fichier.url;
    } else if (typeof e.urlFichier !== "undefined") {
      this.setUrlFichier(e.urlFichier);
    }
  }
  setUrlFichier(e, n = false) {
    if (typeof e !== "undefined") {
      this.urlFichier = e;
      this.fichier = FSr.isNotEmptyString(e) ? new eD9({
        id: e,
        type: Y9E.CARNET_CORRESPONDANCE,
        displayText: "Document joint",
        libelle: `pj_suivi_${this.dateCreation.replace(/[-:\s]/g, "")}_${Date.now()}.${e.split(".").pop()}`,
        url: e,
        unc: n ? e : undefined
      }) : undefined;
    } else {
      this.urlFichier = e;
      this.fichier = undefined;
    }
  }
  isArchive(e) {
    return !!this.dateCreation && !CnD.isDateInAnneeCourante(C_1.stringToDate(this.dateCreation), e);
  }
}
class mg extends xh {
  constructor(e) {
    super(e);
  }
  static initialState() {
    return new mg({});
  }
}
class O0 {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new o5j(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  addCorrespondanceCarnetUser(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new o5j();
    }
    s.forEach(h => {
      let P = new chz(n);
      P.idEleve = h.id;
      P.nom = h.nom;
      P.prenom = h.prenom;
      P.particule = h.particule;
      this[e].correspondances.push(P);
    });
    Object.setExpired(this, d);
  }
  deleteCorrespondanceCarnetUser(e, n, s) {
    let d = this[e].correspondances.findIndex(h => h.idEleve === n.idEleve && h.dateCreation === n.dateCreation && h.auteur.id === n.auteur.id && h.auteur.role === n.auteur.role);
    if (d > -1) {
      let h = new chz(n);
      h.contenu = gr;
      h.idSessionRDV = 0;
      h.signature = new Sej();
      h.type = "";
      h.fichier = undefined;
      h.urlFichier = "";
      this[e].correspondances[d] = h;
      Object.setExpired(this, s);
    }
  }
  addDemandeSanctionCarnetUser(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new o5j();
    }
    s.forEach(h => {
      this[e].demandesSanction.push(new qth({
        ...n,
        idEleve: h.id,
        nom: h.nom,
        prenom: h.prenom,
        particule: h.particule
      }));
    });
    Object.setExpired(this, d);
  }
  addSuiviCarnetUser(e, n, s, d) {
    if (typeof this[e] === "undefined") {
      this[e] = new o5j();
    }
    s.forEach(h => {
      let P = new gPZ(n);
      P.idEleve = h.id;
      P.nom = h.nom;
      P.prenom = h.prenom;
      P.particule = h.particule;
      this[e].suivis.push(P);
    });
    Object.setExpired(this, d);
  }
  updateSuiviCarnetUser(e, n, s) {
    if (typeof this[e] !== "undefined") {
      for (let d of n.tabIds) {
        let h = this[e].suivis.findIndex(P => P.id === d);
        if (h > -1) {
          this[e].suivis[h].urlFichier = n.urlFichier;
          this[e].suivis[h].contenu = n.contenu;
          this[e].suivis[h].categorie = n.categorie;
          this[e].suivis[h].fichier = new gPZ(n).fichier;
        }
      }
      Object.setExpired(this, s);
    }
  }
  signerCorrespondanceCarnetUser(e, n, s) {
    if (typeof this[e] === "undefined") {
      return;
    }
    let d = this[e].correspondances.findIndex(h => h.idEleve === n.idEleve && h.dateCreation === n.dateCreation && h.auteur.id === n.auteur.id && h.auteur.role === n.auteur.role);
    if (d > -1) {
      this[e].correspondances[d] = n;
      Object.setExpired(this, s);
    }
  }
  deleteListeSuivisCarnetUser(e, n, s) {
    if (typeof this[e] !== "undefined") {
      for (let d of n) {
        let h = this[e].suivis.findIndex(P => P.id === d);
        if (h > -1) {
          this[e].suivis.splice(h, 1);
        }
      }
      Object.setExpired(this, s);
    }
  }
  markAsReadCorrespondanceCarnetUser(e, n, s) {
    if (typeof this[e] === "undefined") {
      return;
    }
    let d = this[e].correspondances.findIndex(h => h.id === n.id);
    if (d > -1) {
      this[e].correspondances[d].destinataire = n.destinataire;
      Object.setExpired(this, s);
    }
  }
}
export class BiX {
  constructor(e = {}) {
    if (Object.isExists(e.carnetCorrespondance)) {
      this.carnetCorrespondance = new o5j(e.carnetCorrespondance);
    }
    if (Object.isExists(e.typeEntity)) {
      this.typeEntity = e.typeEntity;
    }
    if (Object.isExists(e.idEntity)) {
      this.idEntity = e.idEntity;
    }
    if (Object.isExists(e.isPP)) {
      this.isPP = e.isPP;
    }
    if (Array.isArray(e.listeEleves)) {
      this.listeEleves = e.listeEleves.map(n => new CJ8(n));
    }
    if (Array.isArray(e.listeElevesSelected)) {
      this.listeElevesSelected = e.listeElevesSelected.map(n => new CJ8(n));
    }
    if (Array.isArray(e.listeCorrespondancesGrouped)) {
      this.listeCorrespondancesGrouped = e.listeCorrespondancesGrouped.map(n => new tPi(n));
    }
    if (Array.isArray(e.listeDemandesSanctionGrouped)) {
      this.listeDemandesSanctionGrouped = e.listeDemandesSanctionGrouped.map(n => new qth(n));
    }
    if (Array.isArray(e.listeSuiviGrouped)) {
      this.listeSuiviGrouped = e.listeSuiviGrouped.map(n => new xfY(n));
    }
    if (Array.isArray(e.listeCorrespondancesDisplayed)) {
      this.listeCorrespondancesDisplayed = e.listeCorrespondancesDisplayed.map(n => new tPi(n));
    }
    if (Array.isArray(e.listeDemandesSanctionDisplayed)) {
      this.listeDemandesSanctionDisplayed = e.listeDemandesSanctionDisplayed.map(n => new qth(n));
    }
    if (Array.isArray(e.listeSuiviDisplayed)) {
      this.listeSuiviDisplayed = e.listeSuiviDisplayed.map(n => new xfY(n));
    }
  }
}
export let TqJ = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      if (!Object.isExists(P[s])) {
        P[s] = new o5j({});
      }
      switch (d) {
        case "getCarnetCorrespondance":
        case "getCarnetCorrespondanceEleve":
          P[s] = new o5j(n);
          break;
        case "ajouterCorrespondance":
          P.addCorrespondanceCarnetUser(s, n, h.listeEleves, this.expireableTTL);
          break;
        case "supprimerCorrespondanceEleve":
          P.deleteCorrespondanceCarnetUser(s, n, this.expireableTTL);
          break;
        case "ajouterDemandeSanction":
          P.addDemandeSanctionCarnetUser(s, n, h.listeEleves, this.expireableTTL);
          break;
        case "ajouterSuivi":
          P.addSuiviCarnetUser(s, n, h.listeEleves, this.expireableTTL);
          break;
        case "updateSuivi":
          P.updateSuiviCarnetUser(s, n, this.expireableTTL);
          break;
        case "signerCorrespondance":
          P.signerCorrespondanceCarnetUser(s, n, this.expireableTTL);
          break;
        case "supprimerListeSuivis":
          P.deleteListeSuivisCarnetUser(s, n, this.expireableTTL);
          break;
        case "markAsRead":
          P.markAsReadCorrespondanceCarnetUser(s, n, this.expireableTTL);
      }
      Object.setExpired(P[s], this.expireableTTL);
      this.store = P;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: O0,
    className: "CarnetCorrespondanceStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
var kv;
export let $z9 = kv = class extends yh4 {
  constructor(e) {
    super(e);
    this.devTool = e;
  }
  static regrouperElevesParSaisie(e) {
    e.listeDemandesSanctionGrouped = e.carnetCorrespondance.demandesSanction;
    let n = {};
    let s = "";
    let d = 0;
    let h = "";
    for (let Vt of e.carnetCorrespondance.correspondances) {
      h = `${Vt.dateCreation}_${Vt.isSupprime().toString()}`;
      const Hn = Vt.auteur.role === dcH.FAMILLE_RESPONSABLE || Vt.auteur.role === dcH.FAMILLE_CONJOINT;
      if (Hn) {
        h += `|${Vt.auteur.role}|${Vt.auteur.nom}|${Vt.auteur.prenom}`;
      }
      if (s !== h || Hn) {
        s = h;
        d = 0;
        n[s] = new tPi({
          id: Vt.id,
          dateCreation: Vt.dateCreation,
          contenu: Vt.contenu,
          type: Vt.type,
          urlFichier: Vt.urlFichier,
          isSignatureDemandee: Vt.isSignatureDemandee,
          auteur: Vt.auteur,
          destinataire: Vt.destinataire,
          eleves: [new Xf({
            idEleve: Vt.idEleve,
            nom: Vt.nom,
            prenom: Vt.prenom,
            particule: Vt.particule,
            signature: Vt.signature
          })]
        });
        if (Object.isExists(Vt.fichier)) {
          n[s].fichier = Vt.fichier;
        }
        if (Object.isExists(Vt.signature)) {
          n[s].eleves[0].signature = Vt.signature;
          d++;
        }
        n[s].nbSignatures = d;
      } else {
        const Ci = new Xf({
          idEleve: Vt.idEleve,
          nom: Vt.nom,
          prenom: Vt.prenom,
          particule: Vt.particule,
          signature: Vt.signature
        });
        if (Object.isExists(Vt.signature)) {
          Ci.signature = Vt.signature;
          d++;
        }
        n[s].eleves.push(Ci);
        n[s].nbSignatures = d;
      }
    }
    let P = [];
    const z = Object.keys(n);
    for (let Vt of z) {
      P.push(n[Vt]);
    }
    e.listeCorrespondancesGrouped = P;
    let Ae = {};
    s = "";
    for (let Vt of e.carnetCorrespondance.suivis) {
      if (s !== Vt.dateCreation) {
        s = Vt.dateCreation;
        Ae[s] = new xfY({
          dateCreation: Vt.dateCreation,
          contenu: Vt.contenu,
          categorie: Vt.categorie,
          auteur: Vt.auteur,
          urlFichier: Vt.urlFichier,
          eleves: [new Xf({
            idEleve: Vt.idEleve,
            nom: Vt.nom,
            prenom: Vt.prenom,
            particule: Vt.particule
          })],
          tabIds: [Vt.id]
        });
        if (Object.isExists(Vt.fichier)) {
          Ae[s].fichier = Vt.fichier;
        }
      } else {
        const Hn = new Xf({
          idEleve: Vt.idEleve,
          nom: Vt.nom,
          prenom: Vt.prenom,
          particule: Vt.particule
        });
        Ae[s].eleves.push(Hn);
        Ae[s].tabIds.push(Vt.id);
      }
    }
    let Ve = [];
    const Tt = Object.keys(Ae);
    for (let Vt of Tt) {
      Ve.push(Ae[Vt]);
    }
    e.listeSuiviGrouped = Ve;
    return e;
  }
  updateStore(e, n, s) {
    let d = this.cloneDeep();
    if (!Object.isExists(d[n])) {
      d[n] = new BiX({});
    }
    if (s) {
      if (Object.isExists(e.carnetCorrespondance)) {
        e = kv.regrouperElevesParSaisie(e);
        e = this.filtrerCarnetParEleves(e, d[n]);
      }
      if (Array.isArray(e.listeElevesSelected)) {
        e = this.filtrerCarnetParEleves(e, d[n]);
      }
    }
    d[n] = new BiX({
      ...d[n],
      ...e
    });
    this.store = d;
  }
  filtrerCarnetParEleves(e, n) {
    let s;
    let d;
    let h;
    let P;
    if (Array.isArray(e.listeElevesSelected)) {
      s = e.listeElevesSelected.edPluckFlatten("id");
    } else {
      if (!Array.isArray(n.listeElevesSelected)) {
        return e;
      }
      s = n.listeElevesSelected.edPluckFlatten("id");
    }
    if (Array.isArray(e.listeCorrespondancesGrouped)) {
      d = e.listeCorrespondancesGrouped;
    } else if (Array.isArray(n.listeCorrespondancesGrouped)) {
      d = n.listeCorrespondancesGrouped;
    }
    if (Object.isExists(d)) {
      let z = d.filter(Ae => {
        const Ve = Ae.eleves.edPluckFlatten("idEleve");
        for (let Tt = 0; Tt < Ve.length; Tt++) {
          if (s.indexOf(Ve[Tt]) > -1) {
            return true;
          }
        }
        return false;
      });
      z = d0N.sortDatas(z, ["dateCreation|desc", "contenu|desc"]);
      e.listeCorrespondancesDisplayed = z;
    }
    if (Array.isArray(e.listeSuiviGrouped)) {
      h = e.listeSuiviGrouped;
    } else if (Array.isArray(n.listeSuiviGrouped)) {
      h = n.listeSuiviGrouped;
    }
    if (Object.isExists(h)) {
      let z = h.filter(Ae => {
        const Ve = Ae.eleves.edPluckFlatten("idEleve");
        for (let Tt = 0; Tt < Ve.length; Tt++) {
          if (s.indexOf(Ve[Tt]) > -1) {
            return true;
          }
        }
        return false;
      });
      z = d0N.sortDatas(z, ["dateCreation|desc", "contenu|desc"]);
      e.listeSuiviDisplayed = z;
    }
    if (Array.isArray(e.listeDemandesSanctionGrouped)) {
      P = e.listeDemandesSanctionGrouped;
    } else if (Array.isArray(n.listeDemandesSanctionGrouped)) {
      P = n.listeDemandesSanctionGrouped;
    }
    if (Object.isExists(P)) {
      e.listeDemandesSanctionDisplayed = P.filter(z => s.indexOf(z.idEleve) > -1);
    }
    return e;
  }
  selectCarnetCorrespondanceUser(e) {
    return this.select$(n => {
      if (Object.isExists(n[e])) {
        return n[e];
      }
    });
  }
  getCarnetCorrespondanceUser(e) {
    return this.snapshot[e];
  }
};
$z9.ɵfac = function (e) {
  return new (e || $z9)(t.LFG(lbX));
};
$z9.ɵprov = t.Yz7({
  token: $z9,
  factory: $z9.ɵfac,
  providedIn: "root"
});
$z9 = kv = (0, le.gn)([pcA({
  classInstanceRef: class Kd {
    constructor(e) {
      if (Object.isExists(e) && !Object.isEmpty(e)) {
        const n = Object.keys(e);
        for (let s of n) {
          this[s] = new BiX(e[s]);
        }
      }
    }
    static initialState() {
      return {};
    }
  },
  resetWhenSwipe: true,
  className: "CarnetCorrespondanceUserStore"
})], $z9);
export let Il9 = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    updateStore(n) {
      this.store = new mg(n);
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: mg,
    resetWhenSwipe: true,
    className: "CarnetCorrespondanceBadgesStore"
  })], R);
  return R;
})();
export let HmK = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.httpCacheService = n;
      this.http = s;
      this.store = d;
      this.authStore = h;
      this.badgesStore = P;
      this._datePipe = new ifA();
    }
    getCarnetCorrespondance(n, s, d, h, P = false, z = false) {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [h, d]);
      const Ve = Object.getEntity(this.store.snapshot, Ae);
      if (z || Object.isExpired(Ve)) {
        return this.http.post((h === "C" ? "classes/" : "groupes/") + d + "/carnetCorrespondance", {}, {
          params: new Et().set("verbe", "get").set("showAll", P ? 1 : 0)
        }).pipe((0, j.U)(Vt => this.store.updateStore(new o5j(Vt.data), Ae, "getCarnetCorrespondance")), (0, W.K)(Vt => this.catchBadResponse(Vt)));
      } else {
        return E.E;
      }
    }
    ajouterSaisie(n, s, d, h, P) {
      if (!(d instanceof chz) && !(d instanceof qth) && !(d instanceof gPZ)) {
        return (0, I._)(() => new FwQ("Saisie corrompue"));
      }
      let Ve;
      let Tt;
      let Vt;
      let z = (s === "C" ? "classes/" : "groupes/") + n + "/carnetCorrespondance";
      let Ae = {
        tabIdsEleves: h.edPluck("id")
      };
      if (Object.isExists(P)) {
        Ae.sessionRDV = P;
      }
      if (d instanceof chz) {
        Tt = "ajouterCorrespondance";
        Vt = new chz(d);
      }
      if (d instanceof qth) {
        Tt = "ajouterDemandeSanction";
        Vt = new qth(d);
      }
      if (d instanceof gPZ) {
        Tt = "ajouterSuivi";
        Vt = new gPZ(d);
      }
      Vt.dateCreation = this._datePipe.transform(new Date(), "y-MM-dd HH:mm:ss");
      Vt.auteur = new jh({
        id: this.authStore.currentUser.id,
        nom: this.authStore.currentUser.nom,
        prenom: this.authStore.currentUser.prenom,
        particule: this.authStore.currentUser.particule,
        role: this.authStore.currentUser.typeCompte
      });
      if (Vt instanceof chz) {
        Ae.correspondance = new chz(Vt);
        Ve = "correspondance";
        if (Object.isExists(Vt.fichier)) {
          Ae.correspondance.uncFichier = Vt.fichier.unc;
          delete Ae.correspondance.fichier;
          delete Ae.correspondance.urlFichier;
          Vt.fichier = undefined;
        }
      }
      if (Vt instanceof qth) {
        Ae.demandeSanction = Vt;
        Ve = "demandeSanction";
      }
      if (Vt instanceof gPZ) {
        Ae.suivi = new gPZ(Vt);
        Ve = "suivi";
        if (Object.isExists(Vt.fichier)) {
          Ae.suivi.uncFichier = Vt.fichier.unc;
          delete Ae.suivi.fichier;
          delete Ae.suivi.urlFichier;
          Vt.fichier = undefined;
        }
      }
      const Hn = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [s, n]);
      return this.http.post(z, Ae, {
        params: new Et().set("verbe", "post").set("typeAjout", Ve)
      }).pipe((0, F.w)(Ci => {
        if (Tt === "ajouterSuivi" || Tt === "ajouterCorrespondance") {
          Vt.urlFichier = Ci.data.urlFichier;
          Vt.setUrlFichier(Vt.urlFichier);
        }
        if (Ci.data.id > 0 && Tt === "ajouterSuivi") {
          Vt.id = Ci.data.id;
        }
        this.store.updateStore(Vt, Hn, Tt, {
          listeEleves: h
        });
        return (0, S.of)(true);
      }), (0, W.K)(Ci => this.catchBadResponse(Ci)));
    }
    updateSuivi(n, s, d) {
      const h = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [s, n]);
      let P = (s === "C" ? "classes/" : "groupes/") + n + "/carnetCorrespondance";
      let z = new xfY(d);
      let Ae = {
        suivi: new xfY(d)
      };
      if (Object.isExists(d.fichier) && Object.isExists(d.fichier.unc)) {
        Ae.suivi.uncFichier = d.fichier.unc;
        delete Ae.suivi.fichier;
        delete Ae.suivi.urlFichier;
        z.fichier = undefined;
      }
      return this.http.post(P, Ae, {
        params: new Et().set("verbe", "put").set("typeAjout", "suivi")
      }).pipe((0, F.w)(Ve => {
        z.urlFichier = Ve.data.urlFichier;
        z.setUrlFichier(z.urlFichier);
        this.store.updateStore(z, h, "updateSuivi");
        return (0, S.of)(true);
      }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    getCarnetCorrespondanceEleve(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [dcH.ELEVE, d]);
      const z = Object.getEntity(this.store.snapshot, P);
      if (h || Object.isExpired(z)) {
        return this.http.post(`eleves/${d}/eleveCarnetCorrespondance`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ve => this.store.updateStore(new o5j(Ve.data), P, "getCarnetCorrespondanceEleve")), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    signerCorrespondance(n, s, d) {
      let h = `eleves/${n.idEleve}/eleveCarnetCorrespondance`;
      let P = {
        correspondance: n,
        codeSecure: s,
        signatureCanvas: d
      };
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id, [dcH.ELEVE, n.idEleve]);
      return this.http.post(h, P, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ae => {
        if (Array.isArray(Ae.data.correspondances) && Ae.data.correspondances.length > 0) {
          const Ve = new chz(Ae.data.correspondances[0]);
          this.store.updateStore(Ve, z, "signerCorrespondance");
          return (0, S.of)(Ve);
        }
        return (0, I._)(() => new FwQ(Ae.message));
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    markCAsRead(n, s, d) {
      const h = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [d, s]);
      return this.http.post("carnetCorrespondance/badgesNonLues", {
        id: n.id,
        idDestinataire: n.destinataire.id,
        typeDestinataire: n.destinataire.type
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(z => {
        let Ae = new chz(n);
        Ae.destinataire = {
          ...Ae.destinataire,
          lu: true,
          dateLu: z.data.dateLu
        };
        this.store.updateStore(Ae, h, "markAsRead");
        const Ve = new xh(z.data.detailBadges);
        this.setBadgesStoreFromDetailBadges(Ve);
        return Ve;
      }), (0, W.K)(z => this.catchBadResponse(z)));
    }
    supprimerListeSuivis(n, s, d) {
      const h = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [s, n]);
      return this.http.post((s === "C" ? "classes/" : "groupes/") + n + "/carnetCorrespondance/suivis", {
        suivis: d
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Ae => Ae.code !== GL1.OK ? (0, I._)(() => new FwQ("...", Ae.code)) : (this.store.updateStore(d, h, "supprimerListeSuivis"), (0, S.of)(true))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    ajouterCorrespondanceEleve(n, s) {
      let d = `eleves/${s}/eleveCarnetCorrespondance`;
      n.dateCreation = this._datePipe.transform(new Date(), "y-MM-dd HH:mm:ss");
      if (Object.isExists(n.fichier)) {
        n.uncFichier = n.fichier.unc;
      }
      return this.http.post(d, {
        correspondance: n
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(h => h.code !== GL1.OK ? (0, I._)(() => new FwQ("...", h.code)) : (0, S.of)(n)), (0, W.K)(h => this.catchBadResponse(h)));
    }
    supprimerCorrespondanceEleve(n) {
      const s = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id, [dcH.ELEVE, n.idEleve]);
      return this.http.post(`eleves/${n.idEleve}/eleveCarnetCorrespondance`, {
        correspondance: n
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (this.store.updateStore(n, s, "supprimerCorrespondanceEleve"), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de la correspondance, merci de réessayer !", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getProfsContacts(n, s, d = false) {
      if (d) {
        this.httpCacheService.delete(`getProfsContactsCC${s.id}${s.classe.id}`);
      }
      let h = `eleves/${s.id}/eleveCarnetCorrespondance/contacts/professeurs`;
      const P = Y5f.buildSimpleQueryString({
        nom: n,
        idClasse: s.classe.id,
        cacheEnabled: 1,
        cacheKey: `getProfsContactsCC${s.id}${s.classe.id}`,
        verbe: "get"
      });
      return this.http.post(h, {}, {
        params: P
      }).pipe((0, j.U)(z => z.data), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getPersonnelsContacts(n, s = false) {
      if (s) {
        this.httpCacheService.delete(`getPersonnelsContactsCC${n.id}${n.classe.id}`);
      }
      let d = `eleves/${n.id}/eleveCarnetCorrespondance/contacts/personnels`;
      const h = Y5f.buildSimpleQueryString({
        idClasse: n.classe.id,
        cacheEnabled: 1,
        cacheKey: `getPersonnelsContactsCC${n.id}${n.classe.id}`,
        verbe: "get"
      });
      return this.http.post(d, {}, {
        params: h
      }).pipe((0, j.U)(P => P.data), (0, W.K)(P => this.catchBadResponse(P)));
    }
    getBadgesNonLues() {
      return this.http.post("carnetCorrespondance/badgesNonLues", {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(n => {
        this.setBadgesStoreFromDetailBadges(new xh(n.data));
        return n.data;
      }), (0, W.K)(n => this.catchBadResponse(n)));
    }
    setBadgesStoreFromDetailBadges(n) {
      const s = this.authStore.currentUser.id;
      const d = this.authStore.currentUser.typeCompte;
      let h = this.badgesStore.cloneDeep();
      h.updateBadgeForModule(n.nbTotalForClasses + n.nbTotalForGroupes, qzA.CARNET_CORRESPONDANCE, s, d, false);
      this.badgesStore.store = h;
      this.badgesStore.setStorage(h).catch(z => console.error("CarnetCorrespondanceService.markCAsRead badgesStore.setStorage : ", z));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(nl), t.LFG(pt), t.LFG(TqJ), t.LFG(CnD), t.LFG(et7));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class EiA extends eD9 {
  constructor(e = {
    id: "",
    date: "",
    libelle: "",
    isLoaded: false,
    quota: 0,
    taille: 0,
    type: ""
  }) {
    super(e);
    this.isLoaded = typeof e.isLoaded === "undefined" || e.isLoaded;
    if (typeof e.quota !== "undefined") {
      this.quota = e.quota;
    }
    if (Array.isArray(e.children)) {
      this.children = e.children.map(n => new EiA(n));
    }
    if (typeof e.proprietaire !== "undefined") {
      this.proprietaire = new XsP(e.proprietaire);
    }
    this.readonly = e.readonly || false;
  }
  isFolder() {
    return this.type === "folder";
  }
  isCasier() {
    return VEx.isCasierId(this.id);
  }
  isCasierDateNode() {
    return !!this.isFolder() && VEx.isCasierDateNodeId(this.id);
  }
  isCasierNodeRemovable() {
    return VEx.isCasierNodeRemovableId(this.id);
  }
  isFile() {
    return this.type === "file" && !this.isURL() && !this.isVisio() && !this.isPadFile();
  }
  isURL() {
    return !this.isPadFile() && !this.isVisio() && this.type === "file" && typeof this.url !== "undefined" && this.url !== "";
  }
  isPadFile() {
    return ["pad"].indexOf(VEx.getExtension(this.id)) > -1;
  }
  isFullyLoaded() {
    return !this.isFolder() || (Array.isArray(this.children) ? this.isLoaded && this.children.reduce((e, n) => e && n.isFullyLoaded(), true) : this.isLoaded);
  }
  isVisio() {
    return this.type === "file" && this.id.endsWith(".rtc");
  }
  isProprietaire(e, n) {
    return Object.isExists(this.proprietaire) && this.proprietaire.id === e && this.proprietaire.type === n;
  }
}
export class mCH extends EiA {
  constructor(e = {
    id: "",
    date: "",
    libelle: "",
    isLoaded: false,
    isExpanded: false,
    hasChildren: false,
    quota: 0,
    taille: 0,
    type: "",
    children: []
  }) {
    super(e);
    this.isExpanded = e.isExpanded || false;
    this.hasChildren = e.hasChildren || e.type === "folder" || false;
    this.children = Array.isArray(e.children) ? e.children.map(n => new mCH(n)) : [];
    if (this.children.length > 0 && !this.hasChildren) {
      this.hasChildren = true;
    }
    if (typeof e.isRoot !== "undefined") {
      this.isRoot = e.isRoot;
    }
  }
  getHiddenNodeIds() {
    let e = {};
    if (!this.isFolder()) {
      e[this.id] = true;
    }
    if (this.hasChildren) {
      this.children.forEach(n => e = {
        ...e,
        ...n.getHiddenNodeIds()
      });
    }
    return e;
  }
  getHiddenNodeLinkIds() {
    let e = {};
    if (this.isURL() || this.isStreamingTranscoding || this.isStreaming()) {
      e[this.id] = true;
    }
    if (this.hasChildren) {
      this.children.forEach(n => e = {
        ...e,
        ...n.getHiddenNodeLinkIds()
      });
    }
    return e;
  }
}
export class ijz {
  constructor(e = {
    publicAccess: false
  }) {
    this.publicAccess = e.publicAccess;
    this.urlVisio = Object.isExists(e.urlVisio) ? e.urlVisio : "";
  }
  get isAccessEnable() {
    return this.publicAccess && Object.isExists(this.urlVisio) && this.urlVisio !== "";
  }
}
class Lv {
  constructor(e = {
    meeting: "",
    libelle: "",
    description: "",
    heureDebut: "",
    heureFin: "",
    logoEtablissement: "",
    nomEtablissement: "",
    statusSuccess: 500
  }) {
    this.meeting = e.meeting;
    this.libelle = e.libelle;
    this.description = e.description;
    this.heureDebut = e.heureDebut;
    this.heureFin = e.heureFin;
    this.nomEtablissement = e.nomEtablissement;
    this.statusSuccess = e.statusSuccess;
    if (typeof e.urlVisio !== "undefined") {
      this.urlVisio = e.urlVisio;
    }
  }
  get isWaitingForModerateur() {
    return this.statusSuccess === 222;
  }
  get isWaitingForPseudo() {
    return this.statusSuccess === 225;
  }
  get isOk() {
    return this.statusSuccess === 200;
  }
}
export class Xp8 {
  constructor(e = {
    id: 0,
    type: "",
    libelle: "",
    droit: bvQ.DROIT_LECTURE
  }) {
    this.id = e.id;
    this.type = e.type;
    this.libelle = e.libelle;
    this.droit = e.droit;
  }
  static convertEntityToCloudEntity(e) {
    let n;
    switch (rd(e)) {
      case "MEDAccount":
        n = new Xp8({
          id: e.id,
          type: e.typeCompte,
          libelle: e.prenom,
          droit: bvQ.DROIT_ADMIN
        });
        break;
      case "MEDEleve":
        n = new Xp8({
          id: e.id,
          type: dcH.ELEVE,
          libelle: e.prenom,
          droit: bvQ.DROIT_ADMIN
        });
        break;
      case "MEDEspaceDeTravail":
        n = new Xp8({
          id: e.id,
          type: dcH.ESPACE_TRAVAIL,
          libelle: e.titre,
          droit: e.droitUtilisateur
        });
        break;
      case "MEDCahierDeTexteDCCEleve":
        n = new Xp8({
          id: e.eleve.id,
          type: dcH.ELEVE,
          libelle: "Copies / Correctifs",
          droit: 0
        });
    }
    return n;
  }
}
class Cm {
  constructor(e = {
    id: 0,
    unc: "",
    uncOld: "",
    action: "",
    date: ""
  }) {
    this.id = e.id;
    this.unc = e.unc;
    this.uncOld = e.uncOld;
    this.action = e.action;
    switch (this.action) {
      case "ajoutDossier":
        this.actionFormated = "Ajout d'un dossier";
        break;
      case "ajoutFichier":
        this.actionFormated = "Ajout d'un fichier";
        break;
      case "renommeDossier":
        this.actionFormated = "Renommage d'un dossier";
        break;
      case "renommeFichier":
        this.actionFormated = "Renommage d'un fichier";
        break;
      case "suppressionDoss":
        this.actionFormated = "Suppression d'un dossier";
        break;
      case "suppressionFich":
        this.actionFormated = "Suppression d'un fichier";
    }
    this.date = e.date;
  }
}
let yg = (() => {
  class R {
    constructor() {
      this._pendingRequests = [];
    }
    static compareRequest(n, s) {
      return n.urlWithParams === s.urlWithParams && n.method === s.method && n.body === s.body;
    }
    addPendingRequest(n, s) {
      this._pendingRequests.push({
        request: n,
        handler: s
      });
    }
    removePendingRequest(n) {
      this._pendingRequests.edRemove(s => R.compareRequest(s.request, n));
    }
    getPendingRequest(n) {
      const s = this.searchPendingRequestIndex(n);
      if (s > -1) {
        return this._pendingRequests[s];
      } else {
        return undefined;
      }
    }
    searchPendingRequestIndex(n) {
      return this._pendingRequests.findIndex(s => R.compareRequest(s.request, n));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)();
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
const wm = new lt(() => false);
const _g = new lt(() => false);
let Sm = (() => {
  class R {
    constructor(n, s, d, h, P, z, Ae, Ve, Tt) {
      this.inj = n;
      this.authStore = s;
      this.credentialsStore = d;
      this.httpCacheService = h;
      this.httpCancelService = P;
      this.httpAccessFailedService = z;
      this.httpPendingRequestsService = Ae;
      this.commonConfigService = Ve;
      this.uiService = Tt;
      this._refreshTokenInProgress = false;
      this._refreshTokenSubject = new x.X(null);
    }
    static isHTTPPaiementTransactionCodeError(n, s) {
      return s === "boutique/etatpaiement" && [cs.ERROR, cs.KO, cs.CANCEL].indexOf(n) > -1;
    }
    static interceptUrl(n, s, d) {
      return `${n}/${s}${s.indexOf(d) === -1 ? d : ""}`;
    }
    static isTokenResponseSet(n) {
      return typeof n == "string" && n !== "";
    }
    ngOnDestroy() {
      this._refreshTokenSubject.complete();
    }
    intercept(n, s) {
      if (n.url.indexOf("https://") >= 0 || n.url.indexOf("http://") >= 0) {
        return s.handle(n);
      }
      let {
        enableCache: d,
        newReq: h
      } = n.context.get(_g) === true ? this.manipuleRequestWSRest(n) : this.manipuleRequest(n);
      let P = "";
      if (d && (P = n.params.get("cacheKey"), this.httpCacheService.hasValidCachedValue(P))) {
        return (0, S.of)(this.httpCacheService.get(P).value);
      }
      const z = this.httpPendingRequestsService.getPendingRequest(h);
      if (Object.isExists(z)) {
        return z.handler;
      }
      const Ae = this.inj.get(e80);
      const Ve = (0, U.P)(() => {
        if (FSr.isNotEmptyString(this.credentialsStore.snapshot.authToken)) {
          h = h.clone({
            setHeaders: {
              [j9q.token]: this.credentialsStore.snapshot.authToken
            }
          });
        }
        return s.handle(h).pipe((0, F.w)(Tt => {
          if (Tt instanceof bt) {
            const Vt = +Tt.headers.get(j9q.code);
            const Hn = Tt.headers.get(j9q.token);
            const Ci = Tt.headers.get(j9q.wopiToken);
            const fr = Tt.headers.get(j9q.streamToken);
            if (Vt === 404) {
              return (0, I._)(() => new FwQ(K3B.e404, Vt, DOJ.e404));
            }
            if (Vt === GL1.NotAuthorized) {
              return (0, I._)(() => new FwQ(K3B.forbiddenAction, Vt, DOJ.e403));
            }
            if (Y5f.isHttpAuthTokenCodeError(Vt)) {
              if (this.commonConfigService.isBrowser) {
                this.httpAccessFailedService.addFailedRequest();
                return this.uiService.notifyError(new FwQ(K3B.userAccessTokenInvalid, Vt, DOJ.userAccessTokenInvalid));
              } else if (Object.isExists(this.authStore.currentUser) && this.authStore.currentUser.isLoggedInFromOAuth) {
                return (0, I._)(() => new FwQ(K3B.userOAuthTokenInvalid, Vt, DOJ.userAccessTokenInvalid));
              } else {
                return (0, I._)(() => new FwQ(K3B.userAccessTokenInvalid, Vt, DOJ.userAccessTokenInvalid));
              }
            }
            if (Y5f.isHttpCodeError(Vt) && !R.isHTTPPaiementTransactionCodeError(Vt, n.url)) {
              let ss = Tt.statusText || "";
              if (Object.isExists(Tt.body) && typeof Tt.body.message !== "undefined" && Tt.body.message !== "") {
                ss = Tt.body.message;
              }
              if (Object.isExists(Tt.body) && typeof Tt.body.type !== "undefined" && Tt.body.type === "text/html") {
                ss = "";
              }
              return (0, I._)(() => new FwQ(ss || "", Vt));
            }
            if (n.context.get(wm) !== true && R.isTokenResponseSet(Hn)) {
              this.credentialsStore.updateStore({
                authToken: Hn
              });
            }
            if (R.isTokenResponseSet(Ci)) {
              this.credentialsStore.updateClassMembers({
                wopiToken: Ci
              });
            }
            if (R.isTokenResponseSet(fr)) {
              this.credentialsStore.updateClassMembers({
                streamToken: fr
              });
            }
            if (d) {
              this.httpCacheService.set(P, Tt, +n.params.get("cacheTTL"));
            }
          }
          return (0, S.of)(Tt);
        }));
      }).pipe(function pe(R) {
        return (0, Le.e)((e, n) => {
          let s;
          let h;
          let d = false;
          const P = () => {
            s = e.subscribe((0, he.x)(n, undefined, undefined, z => {
              if (!h) {
                h = new v.x();
                R(h).subscribe((0, he.x)(n, () => s ? P() : d = true));
              }
              if (h) {
                h.next(z);
              }
            }));
            if (d) {
              s.unsubscribe();
              s = null;
              d = false;
              P();
            }
          };
          P();
        });
      }(Tt => Tt.pipe((0, F.w)(Vt => Y5f.isHttpAuthTokenCodeError(Vt.status) ? (0, S.of)(Vt) : (0, I._)(() => Vt)), (0, re.R)((Vt, Hn) => Vt + 1, 0), (0, Re.o)(Vt => Vt < R.RETRY_ATTEMPT + 1), (0, Ge.z)(() => this.commonConfigService.isBrowser ? this.httpAccessFailedService.authTokenRefreshed$.pipe((0, Ue.q)(1)) : (this._refreshTokenInProgress || (this._refreshTokenInProgress = true, this._refreshTokenSubject.next(null), Ae.refreshToken({
        ...this.credentialsStore.credentials,
        uuid: this.credentialsStore.uuid
      }).pipe((0, Z.b)(Vt => {
        if (Object.isExists(Vt) && Array.isArray(Vt.accounts) && Vt.accounts.length > 0) {
          this.authStore.refreshAccounts(Vt, true);
          this._refreshTokenSubject.next(true);
        } else {
          this._refreshTokenSubject.next(false);
        }
      }), (0, W.K)(Vt => {
        this._refreshTokenSubject.next(false);
        return E.E;
      }), (0, G.x)(() => this._refreshTokenInProgress = false)).subscribe()), this._refreshTokenSubject.pipe((0, se.h)(Vt => Vt !== null), (0, Ue.q)(1), (0, F.w)(Vt => Vt ? (0, S.of)(true) : this.uiService.notifyError(new FwQ(K3B.userAccessTokenInvalid, GL1.AccessTokenInvalid, DOJ.userAccessTokenInvalid)))))))), (0, G.x)(() => {
        this.httpPendingRequestsService.removePendingRequest(h);
      }), (0, ot.R)(this.httpCancelService.onCancelPendingRequests$));
      this.httpPendingRequestsService.addPendingRequest(h, Ve);
      return Ve;
    }
    manipuleRequestWSRest(n) {
      const s = R.interceptUrl(this.credentialsStore.apiRESTUrl, n.url, "");
      let d = n.clone({
        url: s
      });
      if (n.body && typeof n.body == "object") {
        const P = Y5f.interceptBodyWSRest(n.body);
        d = d.clone({
          body: P
        });
      }
      if (["POST", "PUT", "DELETE", "PATCH"].indexOf(n.method) > -1) {
        d = d.clone({
          setHeaders: {
            "Content-Type": "application/json"
          }
        });
      }
      let h = false;
      if (Object.isExists(n.params) && n.params.has("cacheEnabled")) {
        h = +n.params.get("cacheEnabled") == 1;
        const P = n.params.keys().reduce((z, Ae) => {
          if (["cacheEnabled", "cacheKey", "cacheTTL"].indexOf(Ae) === -1) {
            z = z.set(Ae, n.params.get(Ae));
          }
          return z;
        }, new Et());
        d = d.clone({
          params: P
        });
      }
      d = Object.isExists(d.params) ? d.clone({
        params: d.params.set("v", this.commonConfigService.packageVersion)
      }) : d.clone({
        params: new Et().set("v", this.commonConfigService.packageVersion)
      });
      return {
        enableCache: h,
        newReq: d
      };
    }
    manipuleRequest(n) {
      const s = R.interceptUrl(this.credentialsStore.apiUrl, n.url, this.commonConfigService.apiExtension);
      let d = n.clone({
        url: s
      });
      if (n.body && typeof n.body == "object") {
        const P = Y5f.interceptBody(n.body);
        d = d.clone({
          body: P
        });
      }
      if (["POST", "PUT", "DELETE", "PATCH"].indexOf(n.method) > -1) {
        d = d.clone({
          setHeaders: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        });
      }
      let h = false;
      if (Object.isExists(n.params) && n.params.has("cacheEnabled")) {
        h = +n.params.get("cacheEnabled") == 1;
        const P = n.params.keys().reduce((z, Ae) => {
          if (["cacheEnabled", "cacheKey", "cacheTTL"].indexOf(Ae) === -1) {
            z = z.set(Ae, n.params.get(Ae));
          }
          return z;
        }, new Et());
        d = d.clone({
          params: P
        });
      }
      d = Object.isExists(d.params) ? d.clone({
        params: d.params.set("v", this.commonConfigService.packageVersion)
      }) : d.clone({
        params: new Et().set("v", this.commonConfigService.packageVersion)
      });
      return {
        enableCache: h,
        newReq: d
      };
    }
  }
  R.RETRY_ATTEMPT = 1;
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(t.zs3), t.LFG(CnD), t.LFG(dSF), t.LFG(nl), t.LFG(nm), t.LFG(Lo), t.LFG(yg), t.LFG(vh), t.LFG(VLf));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac
  });
  return R;
})();
function Qh(R, e, n, s, d, h, P, z, Ae) {
  return new Sm(R, e, n, s, d, h, P, z, Ae);
}
export let eyc = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.authStore = n;
      this.http = s;
      this.httpCacheService = d;
      this.espaceDeTravailStore = h;
    }
    getCloudContents(n, s, d = "", h = false, P) {
      const z = s === dcH.PERSONNEL ? dcH.ENSEIGNANT : s;
      let Ae = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", `getCloudContents_${n}_${s}_${this.authStore.currentUser.codeOgec}_${FSr.isNotEmptyString(d) ? d : ""}`).set("cacheTTL", `${X9o.uneJournee}`);
      if (d !== "") {
        Ae = Ae.set("idFolder", d);
      }
      if (h) {
        this.clearCacheCloudContent(n, s, FSr.isNotEmptyString(d) ? d : "");
      }
      const Ve = {};
      if (Object.isExists(P)) {
        Ve.profondeur = P;
      }
      return this.http.post(`cloud/${z}/${n}`, Ve, {
        params: Ae
      }).pipe((0, j.U)(Tt => Tt.data[0]), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    uploadFileFromCloud(n, s, d, h, P) {
      let z = {
        idContexte: n,
        id: d
      };
      if (Object.isExists(P)) {
        z = {
          ...z,
          ...P
        };
      }
      if (FSr.isNotEmptyString(h)) {
        z.side = h;
      }
      const Ae = Y5f.buildSimpleQueryString({
        mode: s,
        verbe: "post"
      });
      return this.http.post("televersementFromCloud", z, {
        params: Ae
      }).pipe((0, j.U)(Ve => Ve.data), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    addUrlFile(n, s, d, h, P = qt_.CLOUD, z = {}) {
      let Ae = {
        ...z,
        file: `${d.libelle}.url;${d.url}`,
        description: d.description
      };
      const Ve = Y5f.buildSimpleQueryString({
        mode: P,
        dest: h.id,
        verbe: "post"
      });
      return this.http.post("televersement", Ae, {
        params: Ve
      }).pipe((0, F.w)(Tt => Tt.code !== GL1.OK ? (0, I._)(() => new FwQ("Ajout de l'URL impossible", Tt.code, DOJ.genericError)) : (s === dcH.ESPACE_TRAVAIL && this.espaceDeTravailStore.updateFilActivitesStore(n, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_CLOUD), this.clearCacheCloudContent(n, s, h.id), (0, S.of)(new EiA(Tt.data)))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    addPadFile(n, s, d, h, P = qt_.CLOUD, z = {}) {
      let Ae = {
        ...z,
        file: `${d.libelle}.pad;${d.url}`
      };
      const Ve = Y5f.buildSimpleQueryString({
        mode: P,
        dest: h.id,
        verbe: "post"
      });
      return this.http.post("televersement", Ae, {
        params: Ve
      }).pipe((0, F.w)(Tt => Tt.code !== GL1.OK ? (0, I._)(() => new FwQ("Ajout du pad impossible", Tt.code, DOJ.genericError)) : (s === dcH.ESPACE_TRAVAIL && this.espaceDeTravailStore.updateFilActivitesStore(n, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_CLOUD), this.clearCacheCloudContent(n, s, h.id), (0, S.of)(new EiA(Tt.data)))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    updateFile(n, s, d, h) {
      if (h.children.findIndex(z => z.libelle.toLowerCase() === d.libelle.toLowerCase() && z.id !== d.id) > -1) {
        return (0, I._)(() => new FwQ("Un élément du même nom existe déjà !"));
      }
      let P = {
        node: d,
        newLibelle: d.libelle
      };
      if (typeof d.url !== "undefined") {
        P.newUrl = d.url;
      }
      if (typeof d.description !== "undefined") {
        P.newDescription = d.description;
      }
      return this.http.post(`cloud/${s}/${n}`, P, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(z => {
        d.id = z.data.newId;
        d.libelle = z.data.newLibelle;
        if (typeof z.data.newUrl !== "undefined") {
          d.url = z.data.newUrl;
        }
        if (typeof z.data.newDescription !== "undefined") {
          d.description = z.data.newDescription;
        }
        d.isLoaded = false;
        if (s === dcH.ESPACE_TRAVAIL) {
          this.espaceDeTravailStore.updateFilActivitesStore(n, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_CLOUD);
        }
        this.clearCacheCloudContent(n, s, d.id);
        return (0, S.of)(d);
      }), (0, W.K)(z => this.catchBadResponse(z)));
    }
    deleteNode(n, s, d, h) {
      const P = s === dcH.PERSONNEL ? dcH.ENSEIGNANT : s;
      const z = {
        tabNodes: d.map(Ae => new EiA({
          ...Ae,
          children: []
        }))
      };
      return this.http.post(`cloud/${P}/${n}`, z, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Ae => Ae.code !== GL1.OK ? (0, I._)(() => new FwQ("Suppression impossible", Ae.code, DOJ.genericError)) : (s === dcH.ESPACE_TRAVAIL && this.espaceDeTravailStore.updateFilActivitesStore(n, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_CLOUD), d.forEach(Ve => {
        this.clearCacheCloudContent(n, s, Ve.id);
      }), FSr.isNotEmptyString(h) && this.clearCacheCloudContent(n, s, h), (0, S.of)(Ae.data.taille))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    addExternalRessource(n, s, d, h, P) {
      let z = new EiA(P);
      if (z.children.findIndex(Tt => Tt.libelle.toLowerCase() === h.toLowerCase()) > -1) {
        return this.catchBadResponse(new Error("Un élément du même nom existe déjà !"));
      } else {
        z.children.length = 0;
        return this.http.post(`cloud/${s === dcH.PERSONNEL ? dcH.ENSEIGNANT : s}/${n}`, {
          parentNode: z,
          libelle: h,
          typeRessource: d
        }, {
          params: new Et().set("verbe", "post")
        }).pipe((0, F.w)(Tt => Tt.code !== GL1.OK ? (0, I._)(() => new FwQ(Tt.message !== "" ? Tt.message : "Une erreur est survenue", Tt.code)) : (s === dcH.ESPACE_TRAVAIL && this.espaceDeTravailStore.updateFilActivitesStore(n, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_CLOUD), this.clearCacheCloudContent(n, s, P.id), (0, S.of)(new EiA(Tt.data)))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
      }
    }
    loadBlobFile(n, s, d, h = "telechargement") {
      let z = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", h + "_" + s + (Object.isExists(d) ? "_" + JSON.stringify(d) : "")).set("cacheTTL", `${X9o.uneHeure}`);
      if (h === "telechargement") {
        z = z.set("fichierId", s);
        z = z.set("leTypeDeFichier", n);
      }
      const Ae = this.setAdditionalDatasForDownload({
        forceDownload: 0
      }, z, d);
      return this.http.post(h, {
        ...Ae.data
      }, {
        params: Ae.params,
        responseType: "blob"
      }).pipe((0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    preloadDynamicFileCollabora(n, s) {
      let h = new Et().set("verbe", "get").set("preload", 1);
      const P = this.setAdditionalDatasForDownload({}, h, s);
      return this.http.post(n, {
        ...P.data
      }, {
        params: P.params
      }).pipe((0, j.U)(z => z.code !== GL1.OK ? (0, I._)(new FwQ(z.message !== "" ? z.message : "Une erreur est survenue", z.code)) : z.data.unc), (0, W.K)(z => this.catchBadResponse(z)));
    }
    setAdditionalDatasForDownload(n, s, d) {
      let h = false;
      if (Object.isExists(d)) {
        if (Object.isExists(d.data) && typeof d.data == "string") {
          if (/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(d.data)) {
            h = true;
          } else {
            d = JSON.parse(d.data);
          }
        }
        const P = Object.keys(d);
        for (let z of P) {
          if (z !== "data" || !h) {
            s = s.set(z, d[z]);
          }
          n[z] = d[z];
        }
      }
      return {
        data: n,
        params: s
      };
    }
    pasteNode(n, s, d, h, P, z, Ae, Ve) {
      if (Ve.isFile()) {
        return this.catchBadResponse(new Error("Vous pouvez seulement coller dans un dossier"));
      }
      if (!Ve.isFolder()) {
        Ve = VEx.findParentFolder(Ae, Ve.id);
      }
      if (!Object.isExists(Ve)) {
        return this.catchBadResponse(new Error("Une erreur s'est produite"));
      }
      let Tt = d.map(Ci => new EiA(Ci));
      let Vt = [];
      Tt.forEach(Ci => {
        if (!Ci.isFullyLoaded()) {
          Vt.push(this.getCloudContents(n, s, Ci.id.replace(h, ""), true, 999).pipe((0, j.U)(fr => {
            Ci.children = [...fr.children];
            return Ci;
          })));
        }
      });
      return (Vt.length > 0 ? (0, O.D)(Vt) : (0, S.of)([])).pipe((0, F.w)(() => {
        let fr = {
          parentNode: new EiA({
            ...Ve,
            children: []
          }),
          clipboard: Tt
        };
        return this.http.post(`cloud/${z}/${P}`, fr, {
          params: new Et().set("verbe", "copy")
        }).pipe((0, F.w)(ss => ss.code !== GL1.OK ? (0, I._)(() => new FwQ(ss.message !== "" ? ss.message : "Une erreur est survenue", ss.code)) : (this.clearCacheCloudContent(P, z, Ve.id), (0, S.of)(new EiA(ss.data)))), (0, W.K)(ss => this.catchBadResponse(ss)));
      }));
    }
    getVisioPublicAccess(n, s, d) {
      let h = {};
      if (FSr.isNotEmptyString(s)) {
        h.userSuffix = s;
      }
      if (Object.isExists(d)) {
        h.parametrageVisio = d;
      }
      return this.http.post(`visio/${n}/publicAccess`, h, {
        params: new Et().set("verbe", "get")
      }).pipe((0, F.w)(P => P.code !== 200 ? (0, I._)(() => new FwQ(P.message !== "" ? P.message : "Une erreur est survenue")) : (0, S.of)(new ijz(P.data))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    updateVisioPublicAccess(n, s) {
      return this.http.post(`visio/${n}/publicAccess`, {
        publicAccess: s
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(d => d.code === 200), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getVisioAnonyme(n, s) {
      return this.http.post(`visio/${n}`, {
        pseudo: s
      }, {
        observe: "response",
        params: new Et().set("verbe", "get")
      }).pipe((0, F.w)(d => {
        const h = +d.headers.get(j9q.code);
        if (h === 200 || h === 222 || h === 225) {
          return (0, S.of)(new Lv({
            ...d.body.data,
            statusSuccess: h
          }));
        } else {
          return (0, I._)(() => new FwQ(d.body.message !== "" ? d.body.message : "Impossible d'accéder à la visioconférence !", h));
        }
      }), (0, W.K)(d => this.catchBadResponse(d)));
    }
    clearCacheCloudContent(n, s, d = "") {
      if (d === `\\${this.authStore.currentUser.codeOgec}\\${s}\\${n}`) {
        d = "";
      }
      const h = `getCloudContents_${n}_${s}_${this.authStore.currentUser.codeOgec}_${d}`;
      this.httpCacheService.filter(P => h.startsWith(P));
    }
    clearCacheBlobFile(n, s = "telechargement") {
      const d = `${s}_${n}`;
      this.httpCacheService.filter(h => h.startsWith(d));
    }
    getVisioToday(n, s) {
      return this.http.post(`${s}/${n}/visios`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(d => Array.isArray(d.data) ? d.data.map(h => new B9I(h)) : []), (0, W.K)(d => this.catchBadResponse(d)));
    }
    generateToken(n, s, d) {
      return this.http.post(`${s}/${n}/grant/${d}`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(h => h.code === 200), (0, W.K)(h => this.catchBadResponse(h)));
    }
    transcodeVideoToStreaming(n, s, d, h) {
      return this.http.post(`${s}/${n}/streaming/transcode`, {
        node: d
      }, {
        context: new et().set(_g, true)
      }).pipe((0, F.w)(z => this.deleteNode(n, s, [d], h.id).pipe((0, j.U)(() => z))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getStreamingFilesStatus(n, s, d) {
      return this.http.get(`${s}/${n}/streaming/${YC.base64encode(d.id)}`, {
        context: new et().set(_g, true)
      }).pipe((0, j.U)(h => h.map(P => new EiA(P))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    exportToCloud(n, s, d) {
      let h = false;
      let P = false;
      let z = "";
      if (Object.isExists(d?.archive)) {
        h = d.archive;
      }
      if (Object.isExists(d?.isEternel)) {
        P = d.isEternel;
      }
      if (Object.isExists(d?.idVisiteStage)) {
        z = d.idVisiteStage;
      }
      const Ae = Y5f.buildSimpleQueryString({
        idFichier: n,
        typeModule: s,
        isArchive: h,
        isEternel: P,
        idVisiteStage: z,
        verbe: "post"
      });
      return this.http.post("exportToCloud", {}, {
        params: Ae
      }).pipe((0, F.w)(Ve => Ve.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ(FSr.isNotEmptyString(Ve.message) ? Ve.message : "Une erreur s'est produite lors du transfert de votre pièce-jointe vers votre Cloud", Ve.code, DOJ.genericError))), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    getCloudActivites(n, s, d = 0, h) {
      return this.http.post(`${s}/${n}/espacestravail/${d}/${h}/cloudactivites`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(P => Array.isArray(P.data) ? P.data.map(z => new Cm(z)) : []), (0, W.K)(P => this.catchBadResponse(P)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(pt), t.LFG(nl), t.LFG(EYm));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class Eg {
  constructor(e = {
    id: 0,
    libelle: "",
    ordre: 0
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.ordre = e.ordre;
  }
}
export class S2h {
  constructor(e = {
    code: "",
    libelle: "",
    etat: "",
    quantite: 0,
    img: "",
    numeroEtape: 0,
    idCateg: 0,
    libelleCateg: "",
    choix: {}
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.etat = e.etat;
    this.quantite = e.quantite;
    this.img = e.img;
    this.numeroEtape = e.numeroEtape;
    this.idCateg = e.idCateg;
    this.libelleCateg = e.libelleCateg;
    this.isSelected = !!Object.isExists(e.isSelected) && e.isSelected;
    this.choix = Object.isExists(e.choix) ? new Eg(e.choix) : new Eg();
    if (Object.isExists(e.indice)) {
      this.indice = e.indice;
    }
  }
}
export class wui {
  constructor(e = {
    id: 0,
    code: "",
    libelle: "",
    estFormule: false,
    montant: 0,
    quantite: 0
  }) {
    this.code = e.code;
    this.id = Object.isExists(e.id) ? e.id : 0;
    this.libelle = e.libelle;
    this.estFormule = e.estFormule;
    this.montant = e.montant;
    this.quantite = e.quantite;
    this.choix = Array.isArray(e.choix) ? e.choix.map(n => new S2h(n)) : [];
    if (Array.isArray(e.possibilites)) {
      this.possibilites = e.possibilites.map(n => new S2h(n));
    }
    if (Object.isExists(e.img)) {
      this.img = e.img;
    }
    if (Object.isExists(e.quantiteMax)) {
      this.quantiteMax = e.quantiteMax;
    }
    if (Object.isExists(e.etat)) {
      this.etat = e.etat;
    }
    if (Object.isExists(e.description)) {
      this.description = e.description;
    }
    if (Object.isExists(e.estObligatoire)) {
      this.estObligatoire = e.estObligatoire;
    }
    if (Object.isExists(e.ordre)) {
      this.ordre = e.ordre;
    }
    if (Object.isExists(e.idCateg)) {
      this.idCateg = e.idCateg;
    }
    if (Object.isExists(e.libelleCateg)) {
      this.libelleCateg = e.libelleCateg;
    }
  }
}
export class wrX extends wui {
  constructor(e = {
    idInPanier: 0,
    id: 0,
    code: "",
    libelle: "",
    estFormule: false,
    montant: 0,
    quantite: 0
  }) {
    super(e);
    const n = new ifA();
    this.idInPanier = e.idInPanier !== 0 && Object.isExists(e.idInPanier) ? e.idInPanier : parseInt(n.transform(new Date(), "yyyyMMddHHmmss") + Math.floor(Math.random() * 50), 10);
  }
  updateQuantiteArticlePanier(e, n) {
    if (e === jiO.AJOUT) {
      this.quantite++;
    } else if (e === jiO.MODIFICATION) {
      this.quantite = n.quantite;
    } else if (e === jiO.SUPPRESSION_MOBILE) {
      this.quantite = n.quantite - 1;
    } else {
      if (this.quantite === 0) {
        return false;
      }
      this.quantite = 0;
    }
    return true;
  }
  updateChoixFormulePanier(e, n) {
    if (n === jiO.AJOUT) {
      this.choix.push(e);
      e.isSelected = true;
    } else {
      let s = this.choix.findIndex(d => d.code === e.code);
      if (s > -1) {
        this.choix.splice(s, 1);
      }
    }
    return true;
  }
}
class g {
  constructor(e = {
    idCommande: 0,
    numeroCommande: "",
    codePM: "",
    etat: "",
    estHorsDelai: false,
    date: "",
    dateCreneau: "",
    creneau: "",
    idUser: 0,
    typeUser: "",
    articles: [],
    pointDePassage: {}
  }) {
    this.idCommande = e.idCommande;
    this.numeroCommande = e.numeroCommande;
    this.codePM = e.codePM;
    this.etat = e.etat;
    this.estHorsDelai = e.estHorsDelai;
    this.date = e.date;
    this.dateCreneau = e.dateCreneau;
    this.creneau = e.creneau;
    this.idUser = e.idUser;
    this.typeUser = e.typeUser;
    this.articles = Array.isArray(e.articles) ? e.articles.map(n => new wui(n)) : [];
    this.pointDePassage = e.pointDePassage;
  }
  montantTotalCommande() {
    let e = 0;
    for (let n = 0; n < this.articles.length; n++) {
      let s = this.articles[n];
      if (isNaN(s.montant) || isNaN(s.quantite)) {
        return 0;
      }
      e += s.montant * s.quantite;
    }
    return e;
  }
}
export class xqs {
  constructor(e = {
    id: 0,
    libelle: "",
    ordre: 0,
    articles: []
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.ordre = e.ordre;
    this.articles = Array.isArray(e.articles) ? e.articles.map(n => new wui(n)) : [];
  }
}
export class xzd {
  constructor(e = {
    estComplet: false,
    libelle: ""
  }) {
    this.estComplet = e.estComplet;
    this.libelle = e.libelle;
  }
}
export class nj$ {
  constructor(e = {
    id: 0,
    libelle: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.nbHeureLimiteAvantCommande = Object.isExists(e.nbHeureLimiteAvantCommande) ? e.nbHeureLimiteAvantCommande : 0;
    this.plafond = Object.isExists(e.plafond) ? e.plafond : 0;
    this.categoriesArticles = Array.isArray(e.categoriesArticles) ? e.categoriesArticles.map(n => new xqs(n)) : [];
    this.libellePM = Object.isExists(e.libellePM) ? e.libellePM : "";
    this.codePM = Object.isExists(e.codePM) ? e.codePM : "";
    this.soldePM = Object.isExists(e.soldePM) ? e.soldePM : 0;
    this.decouvertActif = !!Object.isExists(e.decouvertActif) && e.decouvertActif;
    this.montantDecouvert = Object.isExists(e.montantDecouvert) ? e.montantDecouvert : 0;
    this.panierMinimum = Object.isExists(e.panierMinimum) ? e.panierMinimum : 0;
    this.montantJournalierAtteint = !!Object.isExists(e.montantJournalierAtteint) && e.montantJournalierAtteint;
    this.montantSemaineAtteint = !!Object.isExists(e.montantSemaineAtteint) && e.montantSemaineAtteint;
    this.nbPassageSemaineAtteint = !!Object.isExists(e.nbPassageSemaineAtteint) && e.nbPassageSemaineAtteint;
    this.montantJournalier = Object.isExists(e.montantJournalier) ? e.montantJournalier : 0;
    this.montantSemaine = Object.isExists(e.montantSemaine) ? e.montantSemaine : 0;
    this.montantActuelSemaineUser = Object.isExists(e.montantActuelSemaineUser) ? e.montantActuelSemaineUser : 0;
    this.nbPassageSemaine = Object.isExists(e.nbPassageSemaine) ? e.nbPassageSemaine : 0;
    this.creneaux = Array.isArray(e.creneaux) ? e.creneaux.map(n => new xzd(n)) : [];
  }
  removeCreneauxNotAvailable(e, n) {
    this.creneaux = Array.isArray(n) ? n.map(d => new xzd(d)) : [];
    let s = [];
    if (e !== "") {
      this.creneaux.forEach(d => {
        const h = d.libelle.split("-")[0].split(":")[0];
        const P = d.libelle.split("-")[0].split(":")[1];
        const z = e.split("-")[0].split(":")[0];
        const Ae = e.split("-")[0].split(":")[1];
        if (h < z || z === h && P < Ae) {
          d.estComplet = true;
        }
        s.push(d);
      });
      this.creneaux = Array.isArray(s) ? s.map(d => new xzd(d)) : [];
    }
  }
  updateArticlesToDisplay(e, n) {
    let s = [];
    this.categoriesArticles.forEach(d => {
      let h = Array.isArray(d.articles) ? d.articles.map(P => new wui(P)) : [];
      for (let P = h.length; P-- > 0;) {
        const z = h[P];
        if (e.indexOf(z.code) > -1) {
          h.splice(P, 1);
          continue;
        }
        if (z.estFormule) {
          let Ve = false;
          const Tt = Array.isArray(z.possibilites) ? z.possibilites.map(Hn => new S2h(Hn)) : [];
          z.possibilites.edRemove(Hn => e.indexOf(Hn.code) > -1);
          const Vt = [...new Set(Tt.edPluckFlatten("choix").edPluck("ordre").sort())];
          for (let Hn = 0; Hn < Vt.length; Hn++) {
            const Ci = Vt[Hn];
            if (!Ve) {
              let fr = z.possibilites.find(ss => ss.choix.ordre === Ci);
              if (!Object.isExists(fr)) {
                h.splice(P, 1);
                Ve = true;
              }
            }
          }
          if (Ve) {
            continue;
          }
          if (z.possibilites.length <= 0) {
            h.splice(P, 1);
            continue;
          }
        }
        let Ae = n.find(Ve => Ve.code === z.code);
        if (Object.isExists(Ae)) {
          z.montant = Ae.montant;
        }
      }
      d.articles = h;
      if (h.length !== 0) {
        s.push(d);
      }
    });
    this.categoriesArticles = [];
    this.categoriesArticles = Array.isArray(s) ? s.map(d => new xqs(d)) : [];
  }
}
export class F2W {
  constructor(e = {}) {
    this.historiqueCommandes = Array.isArray(e.historiqueCommandes) ? e.historiqueCommandes.map(n => new g(n)) : [];
    this.joursFeries = Array.isArray(e.joursFeries) ? e.joursFeries.map(n => n) : [];
    this.tabPointsDePassage = Array.isArray(e.tabPointsDePassage) ? e.tabPointsDePassage.map(n => new nj$(n)) : [];
    this.pointDePassageJourCourant = Object.isExists(e.pointDePassageJourCourant) ? new nj$(e.pointDePassageJourCourant) : new nj$();
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  addCommande(e) {
    if (this.historiqueCommandes.findIndex(s => s.idCommande === e.idCommande) === -1) {
      this.historiqueCommandes.push(e);
    }
  }
  deleteCommande(e) {
    let n = this.historiqueCommandes.findIndex(s => s.idCommande === e.idCommande);
    if (n > -1) {
      this.historiqueCommandes.splice(n, 1);
    }
  }
  setInfosPdpForJour(e, n) {
    const s = this.tabPointsDePassage.find(d => n.idPointDePassage === d.id);
    if (!!Object.isExists(s)) {
      this.pointDePassageJourCourant = new nj$(s);
      this.pointDePassageJourCourant.libellePM = e.libellePM;
      this.pointDePassageJourCourant.soldePM = e.soldePM;
      this.pointDePassageJourCourant.codePM = e.codePM;
      this.pointDePassageJourCourant.montantDecouvert = e.montantDecouvert;
      this.pointDePassageJourCourant.montantJournalierAtteint = e.montantJournalierAtteint;
      this.pointDePassageJourCourant.montantSemaineAtteint = e.montantSemaineAtteint;
      this.pointDePassageJourCourant.nbPassageSemaineAtteint = e.nbPassageSemaineAtteint;
      this.pointDePassageJourCourant.montantSemaine = e.montantSemaine;
      this.pointDePassageJourCourant.montantJournalier = e.montantJournalier;
      this.pointDePassageJourCourant.montantActuelSemaineUser = e.montantActuelSemaineUser;
      this.pointDePassageJourCourant.nbPassageSemaine = e.nbPassageSemaine;
      this.pointDePassageJourCourant.updateArticlesToDisplay(e.articlesSansStock, e.articlesAvecStock);
      this.pointDePassageJourCourant.removeCreneauxNotAvailable(e.creneauMinRetrait, e.creneaux);
    }
  }
}
export class FNg {
  constructor(e = {
    articles: [],
    creneau: "",
    date: "",
    pointDePassage: 0
  }) {
    this.articles = Array.isArray(e.articles) ? e.articles.map(n => new wrX(n)) : [];
    this.creneau = e.creneau;
    this.date = e.date;
    this.pointDePassage = e.pointDePassage;
  }
  resetPanier() {
    this.articles = [];
  }
  resetPdpID() {
    this.pointDePassage = 0;
  }
  addInPanier(e) {
    let n = this.articles.find(s => s.code === e.code);
    if (Object.isExists(n) && !n.estFormule) {
      n.quantite++;
    } else {
      n = new wrX(e);
      n.quantite = 1;
      this.articles.push(n);
    }
    return n;
  }
  updateQtArticlePanier(e, n) {
    let s = this.articles.findIndex(d => d.idInPanier === e.idInPanier);
    if (s > -1) {
      let d = new wrX(this.articles[s]);
      if (d.updateQuantiteArticlePanier(n, e)) {
        if (d.quantite === 0) {
          this.articles.splice(s, 1);
        } else {
          this.articles[s] = d;
        }
        return d;
      }
    } else if (n === jiO.AJOUT) {
      return this.addInPanier(new wui(e));
    }
  }
  updateChoixArticleFormulePanier(e, n, s) {
    if (!e.estFormule) {
      return false;
    }
    let d = this.articles.findIndex(h => h.idInPanier === e.idInPanier);
    if (d > -1) {
      let h = new wrX(this.articles[d]);
      if (h.updateChoixFormulePanier(n, s)) {
        this.articles[d] = h;
        return true;
      }
    }
    return false;
  }
  deleteArticlePanier(e) {
    let n = this.articles.findIndex(s => s.idInPanier === e.idInPanier);
    return n > -1 && (this.articles.splice(n, 1), true);
  }
  montantTotalPanier() {
    let e = 0;
    for (let n = 0; n < this.articles.length; n++) {
      let s = this.articles[n];
      if (isNaN(s.montant) || isNaN(s.quantite)) {
        return 0;
      }
      e += s.montant * s.quantite;
    }
    return e;
  }
}
class Wr {
  constructor(e) {
    if (e && Object.keys(e).length > 0) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new F2W(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
class Cs {
  constructor(e) {
    if (e && Object.keys(e).length > 0) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new FNg(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let j1G = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateCommandePassageStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      if (!Object.isExists(P[s])) {
        P[s] = new F2W({});
      }
      switch (d) {
        case "listCommandesPassage":
          P[s] = new F2W(n);
          break;
        case "saveCommande":
          {
            const z = new g(n);
            P[s].addCommande(z);
            break;
          }
        case "deleteCommande":
          {
            const z = new g(n);
            P[s].deleteCommande(z);
            break;
          }
        case "setInfosPdpForJour":
          P[s].setInfosPdpForJour(n, h);
      }
      Object.setExpired(P[s], this.expireableTTL);
      this.store = P;
    }
    selectCommandesPassage(n, s, d) {
      const h = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(P => {
        const z = Object.getEntity(P, h);
        if (z) {
          return z.historiqueCommandes;
        } else {
          return [];
        }
      });
    }
    selectExistanteCommandesPassage(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(z => {
        const Ae = Object.getEntity(z, P);
        if (Object.isExists(Ae)) {
          let Ve = Ae.historiqueCommandes.find(Tt => Tt.idCommande === n);
          if (Object.isExists(Ve)) {
            return new g(Ve);
          } else {
            return new g();
          }
        }
        return new g();
      });
    }
    selectJoursFeries(n, s, d) {
      const h = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(P => {
        const z = Object.getEntity(P, h);
        if (z) {
          return z.joursFeries;
        } else {
          return [];
        }
      });
    }
    selectPointsDePassage(n, s, d) {
      const h = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(P => {
        const z = Object.getEntity(P, h);
        if (z) {
          return z.tabPointsDePassage;
        } else {
          return [];
        }
      });
    }
    selectPointDePassageCategorie(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(Ae => {
        const Ve = Object.getEntity(Ae, z);
        if (Object.isExists(Ve)) {
          let Tt = Ve.tabPointsDePassage.find(Vt => Vt.id === h);
          if (Object.isExists(Tt)) {
            let Vt = Tt.categoriesArticles.find(Hn => Hn.id === P);
            if (Object.isExists(Vt)) {
              return new xqs(Vt);
            } else {
              return new xqs();
            }
          }
          return new xqs();
        }
        return new xqs();
      });
    }
    selectInfosPdpJour(n, s, d) {
      const h = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(P => {
        const z = Object.getEntity(P, h);
        if (z) {
          return z.pointDePassageJourCourant;
        } else {
          return undefined;
        }
      });
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Wr,
    className: "CommandePassageStore",
    expire: {
      ttl: X9o.uneHeure * 4
    }
  })], R);
  return R;
})();
export let On7 = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.commandePassageStore = n;
      this.http = s;
    }
    getInfosCommandesPassage(n, s, d, h = false) {
      let P = $ej.edDBUserSpecificKey(n, s, d);
      const z = Object.getEntity(this.commandePassageStore.snapshot, P);
      if (h || Object.isExpired(z)) {
        return this.http.post(`${s}/${d}/commandesPassage`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => {
          this.commandePassageStore.updateCommandePassageStore(Ae.data, P, "listCommandesPassage");
        }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      } else {
        return E.E;
      }
    }
    saveCommande(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(n, s, d);
      return this.http.post(`${s}/${d}/commandesPassage`, h, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(z => !!Object.isExists(z.data) && (this.commandePassageStore.updateCommandePassageStore(z.data, P, "saveCommande"), true)), (0, W.K)(z => this.catchBadResponse(z)));
    }
    deleteCommande(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(n, s, d);
      return this.http.post(`${s}/${d}/commandesPassage/${h.idCommande}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, j.U)(Ae => {
        const Ve = Ae.code === 200;
        if (Ve) {
          this.commandePassageStore.updateCommandePassageStore(h, P, "deleteCommande");
        }
        return Ve;
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    checkCommandeJourPdpDispo(n, s, d, h, P) {
      let z = $ej.edDBUserSpecificKey(n, s, d);
      return this.http.post(`${s}/${d}/commandesPassage/pointsDePassage/${h}/${P}`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(Ae => {
        this.commandePassageStore.updateCommandePassageStore(Ae.data, z, "setInfosPdpForJour", {
          idPointDePassage: h
        });
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(j1G), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class VuE {
  static isSoldePorteMonnaieAtteint(e, n, s) {
    let d = 0;
    e.forEach(h => {
      if (s.codePM === h.codePM) {
        d += h.montantTotalCommande();
      }
    });
    d += n.montantTotalPanier();
    return Math.round(d * 100) / 100 > s.soldePM || s.soldePM < 0;
  }
  static isPlafondPDPAtteint(e, n) {
    return e.montantTotalPanier() > n.plafond && n.plafond > 0;
  }
  static isPlafondJournalierAtteint(e, n) {
    return e.montantTotalPanier() > n.montantJournalier && n.montantJournalier > 0;
  }
  static isPlafondHebdomadaireAtteint(e, n) {
    return e.montantTotalPanier() + n.montantActuelSemaineUser > n.montantSemaine && n.montantSemaine > 0;
  }
  static isQuantiteMaxAtteinte(e, n) {
    if (Object.isExists(n)) {
      let s = 0;
      let d = 0;
      if (e.estFormule) {
        n.articles.forEach(h => {
          if (h.code === e.code) {
            s++;
          }
        });
        d = s;
      } else {
        const h = n.articles.find(P => P.code === e.code);
        if (!Object.isExists(h)) {
          return false;
        }
        d = h.quantite;
      }
      return d + 1 > e.quantiteMax && e.quantiteMax > 0;
    }
    return e.quantite > e.quantiteMax && e.quantiteMax > 0;
  }
  static isDecouvertActif(e) {
    return e.decouvertActif;
  }
  static isDecouvertAtteint(e, n, s) {
    let d = false;
    let h = 0;
    e.forEach(P => {
      if (n.codePM === P.codePM) {
        h += P.montantTotalCommande();
      }
    });
    h += s?.montantTotalPanier();
    if (n.decouvertActif) {
      d = Math.round(h * 100) / 100 > n.soldePM + n.montantDecouvert;
    }
    return d;
  }
  static isPanierMinAtteint(e, n) {
    if (n.panierMinimum !== 0) {
      let s = 0;
      s = e?.montantTotalPanier();
      return Math.round(s * 100) / 100 >= n.panierMinimum;
    }
    return true;
  }
}
export let P9T = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    removePDPID(n, s, d) {
      let h = $ej.edDBUserSpecificKey(n, s, d);
      const P = Object.getEntity(this.store, h);
      let z = new FNg(P);
      z.resetPdpID();
      this.updatePanierCommandeArticlesStore(z, h, "viderPanierID");
    }
    viderPanierArticles(n, s, d) {
      let h = $ej.edDBUserSpecificKey(n, s, d);
      const P = Object.getEntity(this.store, h);
      let z = new FNg(P);
      z.resetPanier();
      this.updatePanierCommandeArticlesStore(z, h, "viderPanier");
    }
    ajoutArticlePanier(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(s, d, h);
      const z = Object.getEntity(this.store, P);
      let Ae = new FNg(z);
      let Ve = Ae.addInPanier(n);
      if (Object.isExists(Ve)) {
        this.updatePanierCommandeArticlesStore(Ae, P, "updateQuantiteArticlePanier");
      }
      return Ve;
    }
    ajoutpdpToPanier(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(s, d, h);
      const z = Object.getEntity(this.store, P);
      let Ae = new FNg(z);
      Ae.pointDePassage = n;
      this.updatePanierCommandeArticlesStore(Ae, P, "addPdpToPanier");
    }
    ajoutDateToPanier(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(s, d, h);
      const z = Object.getEntity(this.store, P);
      let Ae = new FNg(z);
      Ae.date = n;
      this.updatePanierCommandeArticlesStore(Ae, P, "addDateToPanier");
    }
    updateQuantiteArticlePanier(n, s, d, h, P) {
      let z = $ej.edDBUserSpecificKey(d, h, P);
      const Ae = Object.getEntity(this.store, z);
      let Ve = new FNg(Ae);
      let Tt = Ve.updateQtArticlePanier(n, s);
      if (Object.isExists(Tt)) {
        this.updatePanierCommandeArticlesStore(Ve, z, "updateQuantiteArticlePanier");
      }
      return Tt;
    }
    updateChoixArticleFormuleInPanier(n, s, d, h, P, z) {
      let Ae = $ej.edDBUserSpecificKey(h, P, z);
      const Ve = Object.getEntity(this.store, Ae);
      let Tt = new FNg(Ve);
      return !!Tt.updateChoixArticleFormulePanier(n, s, d) && (this.updatePanierCommandeArticlesStore(Tt, Ae, "updateChoixArticleFormuleInPanier"), true);
    }
    removeArticleFromPanier(n, s, d, h) {
      let P = $ej.edDBUserSpecificKey(s, d, h);
      const z = Object.getEntity(this.store, P);
      let Ae = new FNg(z);
      if (Ae.deleteArticlePanier(n)) {
        this.updatePanierCommandeArticlesStore(Ae, P, "removeArticleFromPanier");
      }
    }
    updatePanierCommandeArticlesStore(n, s, d) {
      let h = this.cloneDeep();
      if (!Object.isExists(h[s])) {
        h[s] = new FNg({});
      }
      switch (d) {
        case "removeArticleFromPanier":
        case "updateQuantiteArticlePanier":
        case "updateChoixArticleFormuleInPanier":
        case "viderPanier":
        case "viderPanierID":
        case "addPdpToPanier":
        case "addDateToPanier":
          h[s] = new FNg(n);
      }
      this.store = h;
    }
    selectCommandePanier(n, s, d) {
      const h = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(P => Object.getEntity(P, h) || undefined);
    }
    selectPanierArticlesCommande(n, s, d) {
      const h = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(P => {
        const z = Object.getEntity(P, h);
        if (z) {
          return z.articles;
        } else {
          return [];
        }
      });
    }
    getArticlesForCategInPanier(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      const z = Object.getEntity(this.snapshot, P);
      if (Object.isExists(z)) {
        return z.articles.filter(Ae => Ae.idCateg === n.id);
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Cs,
    className: "PanierCommandeArticlesStore"
  })], R);
  return R;
})();
export const cWI = {
  TYPE_AFFECTATION_PROF_PP: 0,
  TYPE_AFFECTATION_PROF_TOUS: 1,
  TYPE_AFFECTATION_PROF_PAR_CLASSE: 2
};
export class VkK {
  constructor(e = {
    id: 0,
    prenom: "",
    nom: "",
    particule: "",
    sexe: "",
    photo: ""
  }) {
    this.id = e.id;
    this.prenom = e.prenom;
    this.nom = e.nom;
    this.particule = e.particule;
    this.sexe = e.sexe;
    this.photo = e.photo;
  }
}
export class n5w {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    if (typeof e.domaine !== "undefined") {
      this.domaine = e.domaine;
    }
  }
}
export class Un3 {
  constructor(e = {
    libelle: ""
  }) {
    this.libelle = e.libelle;
    this.competences = Array.isArray(e.competences) ? e.competences.map(n => new n5w(n)) : [];
  }
}
export class kCi {
  constructor(e = {
    idEleve: 0,
    codeCompNum: "",
    niveau: 0
  }) {
    this.idEleve = e.idEleve;
    this.codeCompNum = e.codeCompNum;
    this.niveau = e.niveau;
    if (Object.isExists(e.color)) {
      this.color = e.color;
    }
    if (Object.isExists(e.libelle)) {
      this.libelle = e.libelle;
    }
    if (Object.isExists(e.domaine)) {
      this.domaine = e.domaine;
    }
  }
}
export class ARq {
  constructor(e = {
    idEleve: 0,
    appreciation: ""
  }) {
    this.idEleve = e.idEleve;
    this.appreciation = e.appreciation;
  }
}
export class FtU extends n5w {
  constructor(e = {
    code: "",
    libelle: "",
    niveau: 0
  }) {
    super(e);
    this.niveau = e.niveau;
  }
}
export class gem {
  constructor(e = {
    domaine: "",
    competences: []
  }) {
    this.domaine = e.domaine;
    this.competences = e.competences.map(n => new FtU(n));
  }
  updateNiveauCompetence(e, n) {
    const s = this.competences.findIndex(d => d.code === e);
    this.competences[s].niveau = n;
  }
}
export class hyh {
  constructor(e = {
    appreciation: {},
    evaluations: []
  }) {
    this.appreciation = new ARq(e.appreciation);
    this.evaluations = Array.isArray(e.evaluations) ? e.evaluations.map(n => new kCi(n)) : [];
  }
}
class uf {
  constructor(e = {
    libelleEval1: "",
    libelleEval2: "",
    libelleEval3: "",
    couleurEval1: "",
    couleurEval2: "",
    couleurEval3: "",
    longueurMaxAppreciation: 0
  }) {
    this.libelleEval1 = e.libelleEval1;
    this.libelleEval2 = e.libelleEval2;
    this.libelleEval3 = e.libelleEval3;
    this.couleurEval1 = e.couleurEval1;
    this.couleurEval2 = e.couleurEval2;
    this.couleurEval3 = e.couleurEval3;
    this.longueurMaxAppreciation = e.longueurMaxAppreciation;
  }
}
export class bcv {
  constructor(e = {}) {
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new VkK(n)) : undefined;
    this.appreciations = Array.isArray(e.appreciations) ? e.appreciations.map(n => new ARq(n)) : [];
    this.evaluations = Array.isArray(e.evaluations) ? e.evaluations.map(n => new kCi(n)) : [];
    this.parametrage = Object.isExists(e.parametrage) ? new uf(e.parametrage) : undefined;
  }
}
export let mii = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.authStore = n;
      this.http = s;
      this.httpCacheService = d;
    }
    getListeCompetencesNumeriques(n = "", s = false) {
      const d = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: `getListeCompetencesNumeriques_${n}`,
        cacheTTL: X9o.uneJournee,
        verbe: "get"
      });
      if (s) {
        this.httpCacheService.delete(d.get("cacheKey"));
      }
      return this.http.post("LSU/CompNumeriques/competences", {
        anneeScolaire: n
      }, {
        params: d
      }).pipe((0, j.U)(P => P.data), (0, W.K)(P => this.catchBadResponse(P)));
    }
    getListeEvaluationsCompetencesNumeriques(n, s, d, h, P, z = false) {
      const Ve = `getListeEvaluationsCompetencesNumeriques_${$ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [h, d, "P", P])}`;
      if (z) {
        this.httpCacheService.delete(Ve);
      }
      const Tt = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: Ve,
        verbe: "get"
      });
      return this.http.post(`${s}/${n}/${h}/${d}/periodes/${P}/CompNumeriques`, {}, {
        params: Tt
      }).pipe((0, j.U)(Hn => Hn.data), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    getListeEvaluationsCompetencesNumeriquesEleve(n, s, d, h, P = "", z = false) {
      const Ve = `getListeEvaluationsCompetencesNumeriquesEleve_${P}_${$ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, ["E", d, "P", h])}`;
      if (z) {
        this.httpCacheService.delete(Ve);
      }
      const Tt = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: Ve,
        verbe: "get"
      });
      return this.http.post(`eleves/${d}/periodes/${h}/CompNumeriques`, {
        anneeScolaire: P
      }, {
        params: Tt
      }).pipe((0, j.U)(Hn => Hn.data), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    saveEvaluationsCompetencesNumeriques(n, s, d, h, P, z) {
      const Ae = `${s}/${n}/${h}/${d}/periodes/${P}/CompNumeriques`;
      const Ve = new bcv({
        ...z,
        eleves: undefined,
        parametrage: undefined
      });
      return this.http.post(Ae, Ve, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Tt => Tt.code !== GL1.OK ? (0, I._)(() => new FwQ("...", Tt.code, DOJ.genericError)) : (this.httpCacheService.filter(Vt => Vt.startsWith("getListeEvaluationsCompetencesNumeriques")), (0, S.of)(true))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class $h {
  constructor(e = {
    civilite: "",
    nom: "",
    nomSimple: "",
    prenom: "",
    profession: "",
    societe: "",
    telMobile: "",
    telTravail: "",
    telDomicile: "",
    mailPerso: "",
    mailTravail: "",
    codePays: ""
  }) {
    this.civilite = e.civilite;
    this.nom = e.nom;
    this.nomSimple = e.nomSimple;
    this.prenom = e.prenom;
    this.profession = e.profession;
    this.societe = e.societe;
    this.telMobile = e.telMobile;
    this.telTravail = e.telTravail;
    this.telDomicile = e.telDomicile;
    this.mailPerso = e.mailPerso;
    this.mailTravail = e.mailTravail;
    this.codePays = e.codePays;
    this.csp = new sd(e.csp);
  }
}
export class VTX {
  constructor(e = {
    code: "",
    type: "",
    jour1: false,
    jour2: false,
    jour3: false,
    jour4: false,
    jour5: false,
    jour6: false,
    jour7: false
  }) {
    this.code = e.code;
    this.type = e.type;
    this.jour1 = e.jour1;
    this.jour2 = e.jour2;
    this.jour3 = e.jour3;
    this.jour4 = e.jour4;
    this.jour5 = e.jour5;
    this.jour6 = e.jour6;
    this.jour7 = e.jour7;
  }
}
export class XYO {
  constructor(e = {
    id: 0,
    idEtablissement: 0,
    prenom: "",
    email: "",
    telMobile: "",
    idRegime: 0,
    isModeEdit: false
  }) {
    this.id = e.id;
    this.idEtablissement = e.idEtablissement;
    this.prenom = e.prenom;
    this.email = e.email;
    this.telMobile = e.telMobile;
    this.idRegime = e.idRegime;
    this.activites = Array.isArray(e.activites) ? e.activites.map(n => new VTX(n)) : [];
    if (typeof e.isModeEdit !== "undefined") {
      this.isModeEdit = e.isModeEdit;
    }
  }
}
class Oo {
  constructor(e = {
    code: "",
    libelle: "",
    joursActifs: [],
    avecParametrage: false
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.joursActifs = Array.isArray(e.joursActifs) ? [...e.joursActifs] : [];
    this.avecParametrage = e.avecParametrage;
  }
}
class mo {
  constructor(e = {
    code: "",
    type: ""
  }) {
    this.code = e.code;
    this.type = e.type;
  }
}
class ia {
  constructor(e = {
    idEtab: 0,
    regime: false,
    restaurationMidi: false,
    restaurationSoir: false,
    activite: false
  }) {
    this.idEtab = e.idEtab;
    this.regime = e.regime;
    this.restaurationMidi = e.restaurationMidi;
    this.restaurationSoir = e.restaurationSoir;
    this.activite = e.activite;
    this.activitesOuvertes = Array.isArray(e.activitesOuvertes) ? e.activitesOuvertes.map(n => new mo(n)) : [];
  }
}
class il {
  constructor(e = {
    dateModifDebut: "",
    dateModifFin: "",
    modifRegimeEtCoche: false,
    modifDemandeActive: false
  }) {
    this.dateModifDebut = e.dateModifDebut;
    this.dateModifFin = e.dateModifFin;
    this.modifRegimeEtCoche = e.modifRegimeEtCoche;
    this.modifDemandeActive = e.modifDemandeActive;
    this.regimesScolaire = Array.isArray(e.regimesScolaire) ? e.regimesScolaire.map(n => new lu(n)) : [];
    this.activitesRestaurationScolaire = Array.isArray(e.activitesRestaurationScolaire) ? e.activitesRestaurationScolaire.map(n => new Oo(n)) : [];
    this.activitesScolaire = Array.isArray(e.activitesScolaire) ? e.activitesScolaire.map(n => new Oo(n)) : [];
    this.activationsModifDeRentree = Array.isArray(e.activationsModifDeRentree) ? e.activationsModifDeRentree.map(n => new ia(n)) : [];
  }
}
export class gbF {
  constructor(e = {
    adresseLigne1: "",
    adresseLigne2: "",
    adresseLigne3: "",
    codePostal: "",
    ville: "",
    typeLien: 0
  }) {
    this.adresseLigne1 = e.adresseLigne1;
    this.adresseLigne2 = e.adresseLigne2;
    this.adresseLigne3 = e.adresseLigne3;
    this.codePostal = e.codePostal;
    this.ville = e.ville;
    this.typeLien = e.typeLien;
    this.conjoint = new $h(e.conjoint);
    this.responsable = new $h(e.responsable);
    this.situationFamiliale = new ql(e.situationFamiliale);
    this.parametrages = new il(e.parametrages);
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new XYO(n)) : [];
  }
  get hasConjoint() {
    return this.conjoint.nom !== "" || this.conjoint.telTravail !== "" || this.conjoint.telMobile !== "";
  }
  get displayTypeContact() {
    if (Kc[this.typeLien]) {
      return Kc[this.typeLien];
    } else {
      return "";
    }
  }
}
class ud {
  constructor(e = {
    idEleve: 0,
    id: "",
    date: "",
    enAttenteSynchro: false
  }) {
    this.idEleve = e.idEleve;
    this.id = e.id;
    this.date = e.date;
    this.enAttenteSynchro = e.enAttenteSynchro;
  }
}
export class XMu {
  constructor(e = {
    id: 0,
    type: "",
    date: "",
    antenteSynchro: false,
    eleves: [],
    uncRIB: ""
  }) {
    this.id = Object.isExists(e.id) ? e.id : 0;
    this.type = Object.isExists(e.type) ? e.type : "";
    this.date = Object.isExists(e.date) ? e.date : "";
    this.antenteSynchro = !!Object.isExists(e.antenteSynchro) && e.antenteSynchro;
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new ud(n)) : [];
    this.uncRIB = Object.isExists(e.uncRIB) ? e.uncRIB : "";
    this.contenu = Object.isExists(e.contenu) ? e.contenu : "";
  }
  deleteModificationEleve(e) {
    this.eleves.edRemove(n => e.idEleve === n.idEleve && e.id === n.id);
  }
  forEleve(e) {
    return this.eleves.find(n => e === n.idEleve);
  }
}
export let lK = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.http = n;
      this.httpCacheService = s;
    }
    removeCoordCache() {
      this.httpCacheService.filter(n => n === "famillecoordonnees" || n.indexOf("coordonneesfamille") > -1 || n.startsWith("demandemodifications"));
    }
    familleCoordonneesByIdEleve(n, s = false) {
      const d = `eleves/${n}/coordonneesfamille`;
      if (s) {
        this.httpCacheService.delete(d);
      }
      const h = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: d,
        verbe: "get"
      });
      return this.http.post(d, {}, {
        params: h
      }).pipe((0, j.U)(P => P.data), (0, W.K)(P => this.catchBadResponse(P)));
    }
    familleCoordonnees(n = false) {
      if (n) {
        this.httpCacheService.delete("famillecoordonnees");
      }
      const s = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: "famillecoordonnees",
        verbe: "get"
      });
      return this.http.post("famillecoordonnees", {}, {
        params: s
      }).pipe((0, j.U)(d => d.data), (0, W.K)(d => this.catchBadResponse(d)));
    }
    listeDemandeModifications(n, s, d = false) {
      const h = `demandemodifications/${s}/${n}`;
      if (d) {
        this.httpCacheService.delete(h);
      }
      const P = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: h,
        verbe: "get"
      });
      return this.http.post(h, {}, {
        params: P
      }).pipe((0, j.U)(z => z.data), (0, W.K)(z => this.catchBadResponse(z)));
    }
    cancelDemande(n, s) {
      return this.http.post(`demandemodifications/${s}/${n.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (this.removeCoordCache(), (0, S.of)(true)) : (0, I._)(() => new FwQ("Votre demande d'annulation a échoué", h.code))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    demandeModification(n, s) {
      return this.http.post(`demandemodifications/${s}`, {
        modifications: n
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (this.removeCoordCache(), (0, S.of)(true)) : (0, I._)(() => new FwQ("Votre demande de modification a échoué", h.code))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    listeCodesSocioProfessionnels(n = false) {
      const s = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: "codesSocioProfessionnels",
        verbe: "get",
        cacheTTL: X9o.uneJournee
      });
      if (n) {
        this.httpCacheService.delete(s.get("cacheKey"));
      }
      return this.http.post("codesSocioP", {}, {
        params: s
      }).pipe((0, j.U)(d => Array.isArray(d.data) ? d.data.map(h => new sd({
        code: h.id,
        libelle: h.libelle
      })) : []), (0, W.K)(d => this.catchBadResponse(d)));
    }
    listeVilles(n, s = false) {
      const d = `villes_${n}`;
      if (s) {
        this.httpCacheService.delete(d);
      }
      const h = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: d,
        codePostal: n,
        verbe: "get"
      });
      return this.http.post("villes", {}, {
        params: h
      }).pipe((0, j.U)(P => Array.isArray(P.data.villes) ? P.data.villes.map(z => new liz({
        libelle: z
      })) : []), (0, W.K)(P => this.catchBadResponse(P)));
    }
    listeSituations(n = false) {
      let s = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", "situationsFamiliale").set("cacheTTL", `${X9o.uneJournee}`);
      if (n) {
        this.httpCacheService.delete(s.cacheKey);
      }
      return this.http.post("situationsFamiliale", {}, {
        params: s
      }).pipe((0, j.U)(d => Array.isArray(d.data) ? d.data.map(h => new ql({
        code: h.id,
        libelle: h.situation
      })) : []), (0, W.K)(d => this.catchBadResponse(d)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class iIl {
  static modifsToXml(e, n) {
    let s;
    let d;
    let h;
    let P;
    let z;
    let Ae;
    let Ve;
    let Tt;
    let Vt;
    let Hn;
    let Ci;
    let fr;
    let ss;
    let vo;
    let uo;
    let Cu;
    let Bm;
    let e0;
    let N_;
    let d_;
    let f_;
    let h_;
    let p_;
    let U_;
    s = new DOMParser().parseFromString("<demandeModifications></demandeModifications>", "text/xml");
    let $c = s.getElementsByTagName("demandeModifications")[0];
    d = s.createElement("adresse1");
    d.appendChild(s.createTextNode(e.get("adresseLigne1").value));
    h = s.createElement("adresse2");
    h.appendChild(s.createTextNode(e.get("adresseLigne2").value));
    P = s.createElement("adresse3");
    P.appendChild(s.createTextNode(e.get("adresseLigne3").value));
    z = s.createElement("codePostal");
    z.appendChild(s.createTextNode(e.get("codePostal").value));
    Ae = s.createElement("ville");
    Ae.appendChild(s.createTextNode(e.get("ville").value));
    e0 = s.createElement("situationFamiliale");
    e0.appendChild(s.createTextNode(n.situationFamiliale.code.toString()));
    fr = s.createElement("responsableMailPerso");
    fr.appendChild(s.createTextNode(e.get("resp1MailPerso").value));
    ss = s.createElement("responsableMailTravail");
    ss.appendChild(s.createTextNode(e.get("resp1MailTravail").value));
    vo = s.createElement("responsableNom");
    vo.appendChild(s.createTextNode(n.responsable.nom));
    uo = s.createElement("responsableTelMobile");
    uo.appendChild(s.createTextNode(e.get("resp1TelMobile").value));
    Cu = s.createElement("responsableTelTravail");
    Cu.appendChild(s.createTextNode(e.get("resp1TelTravail").value));
    Bm = s.createElement("responsableTelDomicile");
    Bm.appendChild(s.createTextNode(e.get("resp1TelDomicile").value));
    N_ = s.createElement("responsableCSP");
    N_.appendChild(s.createTextNode(e.get("csp").value));
    f_ = s.createElement("responsableProfession");
    f_.appendChild(s.createTextNode(e.get("profession").value));
    p_ = s.createElement("responsableSociete");
    p_.appendChild(s.createTextNode(e.get("societe").value));
    Ve = s.createElement("conjointMailPerso");
    Ve.appendChild(s.createTextNode(e.get("resp2MailPerso").value));
    Tt = s.createElement("conjointMailTravail");
    Tt.appendChild(s.createTextNode(e.get("resp2MailTravail").value));
    Vt = s.createElement("conjointNom");
    Vt.appendChild(s.createTextNode(n.conjoint.nom));
    Hn = s.createElement("conjointTelMobile");
    Hn.appendChild(s.createTextNode(e.get("resp2TelMobile").value));
    Ci = s.createElement("conjointTelTravail");
    Ci.appendChild(s.createTextNode(e.get("resp2TelTravail").value));
    d_ = s.createElement("conjointCSP");
    d_.appendChild(s.createTextNode(e.get("cspConjoint").value));
    h_ = s.createElement("conjointProfession");
    h_.appendChild(s.createTextNode(e.get("professionConjoint").value));
    U_ = s.createElement("conjointSociete");
    U_.appendChild(s.createTextNode(e.get("societeConjoint").value));
    $c.appendChild(d);
    $c.appendChild(h);
    $c.appendChild(P);
    $c.appendChild(z);
    $c.appendChild(Ae);
    $c.appendChild(e0);
    $c.appendChild(e0);
    $c.appendChild(Ve);
    $c.appendChild(Tt);
    $c.appendChild(Vt);
    $c.appendChild(Hn);
    $c.appendChild(Ci);
    $c.appendChild(d_);
    $c.appendChild(h_);
    $c.appendChild(U_);
    $c.appendChild(fr);
    $c.appendChild(ss);
    $c.appendChild(vo);
    $c.appendChild(uo);
    $c.appendChild(Cu);
    $c.appendChild(Bm);
    $c.appendChild(N_);
    $c.appendChild(f_);
    $c.appendChild(p_);
    return new XMLSerializer().serializeToString($c);
  }
  static isDispoEnModif(e, n, s, d, h = "") {
    const P = n.activationsModifDeRentree.find(Ae => Ae.idEtab === d);
    if (!Object.isExists(P)) {
      return false;
    }
    const z = P.activitesOuvertes.filter(Ae => Ae.type !== PhS.REPAS);
    if (FSr.isNotEmptyString(h) && !P.activitesOuvertes.find(Ve => Ve.code === h)) {
      return false;
    }
    if (z.length <= 0 && e === "activite") {
      const Ae = n.regimesScolaire.find(Ve => Ve.id === s);
      if (Object.isExists(Ae) && Ae.type !== m5_.DEMI_PENSIONNAIRE && Ae.type !== m5_.INTERNE) {
        return false;
      }
    }
    return (!FSr.isNotEmptyString(h) || h !== PhS.MIDI || !(e = "restaurationMidi", !this.isDispoForRegime(h, n, s))) && (!FSr.isNotEmptyString(h) || h !== PhS.SOIR || !(e = "restaurationSoir", !this.isDispoForRegime(h, n, s))) && !!Object.isExists(P) && P[e];
  }
  static isNowModifDispo(e) {
    return !!e.modifRegimeEtCoche && (C_1.isAfter(new Date(), C_1.stringToDate(e.dateModifDebut)) && C_1.isBefore(new Date(), C_1.stringToDate(e.dateModifFin)) || C_1.isSameDay(new Date(), C_1.stringToDate(e.dateModifFin)) || C_1.isSameDay(new Date(), C_1.stringToDate(e.dateModifDebut)));
  }
  static isDispoForRegime(e, n, s) {
    const d = n.regimesScolaire.find(P => s === P.id);
    let h = true;
    if (Object.isExists(d)) {
      if (e === PhS.MIDI) {
        h = d.type === m5_.DEMI_PENSIONNAIRE || d.type === m5_.INTERNE;
      }
      if (e === PhS.SOIR) {
        h = d.type === m5_.INTERNE;
      }
    }
    return h;
  }
  static isOneModuleRentreeInUpdate(e, n, s) {
    const d = e.activationsModifDeRentree.find(z => z.idEtab === s);
    const h = ["regime", "restaurationMidi", "restaurationSoir", "activite"];
    let P = false;
    if (Object.isExists(d)) {
      for (let z = 0; z < h.length && (P = d[h[z]] === true, (h[z] === "restaurationMidi" || h[z] === "restaurationSoir") && (P = d[h[z]] === true && this.isActiviteRepasOuvertePourRegime(e, n, s)), !P); z++);
    }
    return P;
  }
  static isActiviteRepasOuvertePourRegime(e, n, s) {
    const d = e.regimesScolaire.find(z => n === z.id);
    const h = e.activationsModifDeRentree.find(z => z.idEtab === s);
    return !!Object.isExists(h.restaurationMidi) && !!Object.isExists(h.restaurationSoir) && (!!h.restaurationMidi || !!h.restaurationSoir) && !!Object.isExists(d) && (d.type === PhS.MIDI || d.type === m5_.INTERNE) && (d.type !== PhS.MIDI || !!h.restaurationMidi) && (d.type !== m5_.INTERNE || !!h.restaurationMidi || !!h.restaurationSoir);
  }
  static isActiviteEleve(e, n, s) {
    const d = s.findIndex(h => h.code === e.code);
    return d !== -1 && s[d][`jour${n}`] === true;
  }
}
export let $IC = (() => {
  class R extends Y5f {
    constructor(n) {
      super();
      this.http = n;
    }
    demanderCode(n) {
      const s = Object.isExists(n) ? {
        signataire: n
      } : {};
      return this.http.post("3DSecure", s, {
        params: new Et().set("verbe", "get")
      }).pipe((0, F.w)(d => d.code === GL1.OK || d.code === 201 ? (0, S.of)(true) : (0, I._)(() => new FwQ("..."))), (0, W.K)(d => this.catchBadResponse(d)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class VZO extends eD9 {
  constructor(e = {
    id: "",
    type: "",
    typeContexte: ""
  }) {
    super(e);
    if (Object.isExists(e.signatureDemandee)) {
      this.signatureDemandee = e.signatureDemandee;
    }
    if (Object.isExists(e.signature)) {
      this.signature = new Sej(e.signature);
    }
    this.typeContexte = e.typeContexte;
  }
}
class du {
  constructor(e = {
    id: 0,
    libelle: "",
    type: "",
    description: "",
    dateLimiteTeleversement: "",
    signature_demandee: false
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.type = e.type;
    this.description = e.description;
    this.dateLimiteTeleversement = e.dateLimiteTeleversement;
    this.personnes = Array.isArray(e.personnes) ? [...e.personnes] : [];
    this.pieces = Array.isArray(e.pieces) ? [...e.pieces] : [];
    this.signature_demandee = e.signature_demandee;
  }
}
class Sh {
  constructor(e = {
    id: 0,
    libelle: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
  }
}
export class fuR {
  constructor(e = {
    idListePiece: 0,
    idPersonne: 0,
    idPiece: 0,
    date: "",
    isLock: false
  }) {
    this.idListePiece = e.idListePiece;
    this.idPersonne = e.idPersonne;
    this.idPiece = e.idPiece;
    this.date = e.date;
    this.isLock = e.isLock;
    if (Object.isExists(e.signature)) {
      this.signature = new Sej(e.signature);
    }
    if (Object.isExists(e.libelle)) {
      this.libelle = e.libelle;
    }
  }
}
class Tm {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    type: ""
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.type = e.type;
  }
}
export class S$e {
  constructor(e = {}) {
    this.listesPieces = Array.isArray(e.listesPieces) ? e.listesPieces.map(n => new du(n)) : [];
    this.pieces = Array.isArray(e.pieces) ? e.pieces.map(n => new Sh(n)) : [];
    this.personnes = Array.isArray(e.personnes) ? e.personnes.map(n => new Tm(n)) : [];
    this.televersements = Array.isArray(e.televersements) ? e.televersements.map(n => new fuR(n)) : [];
  }
}
export class rRz {
  constructor(e = {}) {
    this.factures = Array.isArray(e.factures) ? e.factures.map(n => new VZO({
      ...n,
      typeContexte: "factures"
    })) : [];
    this.notes = Array.isArray(e.notes) ? e.notes.map(n => new VZO({
      ...n,
      typeContexte: "notes"
    })) : [];
    this.viescolaire = Array.isArray(e.viescolaire) ? e.viescolaire.map(n => new VZO({
      ...n,
      typeContexte: "viescolaire"
    })) : [];
    this.administratifs = Array.isArray(e.administratifs) ? e.administratifs.map(n => new VZO({
      ...n,
      typeContexte: "administratifs"
    })) : [];
    this.adultes = Array.isArray(e.adultes) ? e.adultes.map(n => new VZO({
      ...n,
      typeContexte: "adultes"
    })) : [];
    this.listesPiecesAVerser = Object.isExists(e.listesPiecesAVerser) ? new S$e(e.listesPiecesAVerser) : undefined;
    this.inscriptions = Array.isArray(e.inscriptions) ? e.inscriptions.map(n => new VZO({
      ...n,
      typeContexte: "inscriptions"
    })) : [];
  }
}
class Mp extends rRz {
  constructor(e = {}) {
    super(e);
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  updateTeleversementListePiece(e) {
    this.listesPiecesAVerser.televersements.edInsertUpdate(e, n => n.idPersonne === e.idPersonne && n.idPiece === e.idPiece && n.idListePiece === e.idListePiece);
  }
  deleteTeleversementListePiece(e) {
    this.listesPiecesAVerser.televersements.edRemove(n => n.idPersonne === e.idPersonne && n.idPiece === e.idPiece && n.idListePiece === e.idListePiece);
  }
}
class I0 {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Mp(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  updateDocInStore(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new Mp();
    }
    let s = this[e];
    let d = s[n.typeContexte].findIndex(h => h.id === n.id);
    if (d > -1) {
      s[n.typeContexte][d] = n;
    }
  }
  updateDocsTeleverseInStore(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new Mp();
    }
    let s = this[e];
    n.forEach(d => {
      let h = s.listesPiecesAVerser.televersements.find(P => P.idListePiece === d.idListePiece && P.idPiece === d.idPiece && P.idPersonne === d.idPersonne);
      if (Object.isExists(h)) {
        h.signature = new Sej(d.signature);
      }
    });
  }
}
export let e1M = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        if (!Object.isExpired(n)) {
          Object.setExpired(n, 0);
          s = true;
        }
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateDocumentsStore(n, s, d) {
      let h = this.cloneDeep();
      switch (d) {
        case "familleDocuments":
        case "elevesDocuments":
        case "adultesDocuments":
        case "tuteursDocuments":
          h[s] = new Mp(new rRz(n));
          break;
        case "signerDocument":
          h.updateDocInStore(s, n);
          break;
        case "signerLesDocuments":
          h.updateDocsTeleverseInStore(s, n);
          break;
        case "televersementListePiece":
          h[s].updateTeleversementListePiece(n);
          break;
        case "deleteDocumentTeleverse":
          h[s].deleteTeleversementListePiece(n);
      }
      Object.setExpired(h[s], this.expireableTTL);
      this.store = h;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: I0,
    className: "DocumentsStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let SRx = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.http = n;
      this.authStore = s;
      this.documentsStore = d;
    }
    familleDocuments(n, s, d = "", h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [d]);
      const z = Object.getEntity(this.documentsStore.snapshot, P);
      if (h || !z || !h && Object.isExpired(z)) {
        const Ae = Y5f.buildSimpleQueryString({
          archive: `${d}`,
          verbe: "get"
        });
        return this.http.post("familledocuments", {}, {
          params: Ae
        }).pipe((0, j.U)(Ve => {
          this.documentsStore.updateDocumentsStore(new rRz(Ve.data), P, "familleDocuments");
        }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      }
      return E.E;
    }
    elevesDocuments(n, s, d = "", h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [d]);
      const z = Object.getEntity(this.documentsStore.snapshot, P);
      if (h || !z || !h && Object.isExpired(z)) {
        const Ae = Y5f.buildSimpleQueryString({
          archive: `${d}`,
          verbe: "get"
        });
        return this.http.post("elevesDocuments", {}, {
          params: Ae
        }).pipe((0, j.U)(Ve => {
          this.documentsStore.updateDocumentsStore(new rRz(Ve.data), P, "elevesDocuments");
        }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      }
      return E.E;
    }
    adultesDocuments(n, s, d = "", h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [d]);
      const z = Object.getEntity(this.documentsStore.snapshot, P);
      if (h || !z || !h && Object.isExpired(z)) {
        const Ae = Y5f.buildSimpleQueryString({
          archive: `${d}`,
          verbe: "get",
          listesPieces: 1
        });
        return this.http.post("adultesDocuments", {}, {
          params: Ae
        }).pipe((0, j.U)(Ve => {
          this.documentsStore.updateDocumentsStore(new rRz({
            adultes: Ve.data.documents,
            listesPiecesAVerser: Ve.data.listesPiecesAVerser
          }), P, "adultesDocuments");
        }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      }
      return E.E;
    }
    tuteursDocuments(n, s, d = "", h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [d]);
      const z = Object.getEntity(this.documentsStore.store, P);
      if (h || !z || !h && Object.isExpired(z)) {
        const Ae = Y5f.buildSimpleQueryString({
          archive: `${d}`,
          verbe: "get",
          listesPieces: 0
        });
        return this.http.post("adultesDocuments", {}, {
          params: Ae
        }).pipe((0, j.U)(Ve => {
          this.documentsStore.updateDocumentsStore(new rRz({
            adultes: Ve.data
          }), P, "tuteursDocuments");
        }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      }
      return E.E;
    }
    signerDocument(n, s, d) {
      return this.http.post(`familledocuments/${n.id}`, {
        doc: n,
        codeSecure: s,
        signatureCanvas: d
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(z => {
        this.documentsStore.updateDocumentsStore(new VZO({
          ...n,
          ...z.data
        }), this.authStore.variantForCurrentUser, "signerDocument");
        return true;
      }), (0, W.K)(z => this.catchBadResponse(z)));
    }
    signerLesDocumentsParIdListePiece(n, s, d, h) {
      return this.http.post("familledocuments", {
        idListePieceDossier: n,
        codeSecure: s,
        signatureCanvas: d,
        libelleListePiece: h
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(Ae => {
        let Ve = [];
        if (Array.isArray(Ae.data)) {
          Ve = Ae.data.map(Tt => new fuR(Tt));
        }
        this.documentsStore.updateDocumentsStore(Ve, this.authStore.variantForCurrentUser, "signerLesDocuments");
        return true;
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    deleteDocumentTeleverse(n) {
      return this.http.post(`listePiece/${n.idListePiece}/${n.idPersonne}/${n.idPiece}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(() => {
        this.documentsStore.updateDocumentsStore(n, this.authStore.variantForCurrentUser, "deleteDocumentTeleverse");
        return (0, S.of)(true);
      }), (0, W.K)(s => this.catchBadResponse(s)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(CnD), t.LFG(e1M));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class $y {
  constructor(e = {
    id: 0,
    libelle: "",
    valeur: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.valeur = e.valeur;
  }
}
class ku {
  constructor(e = {
    id: 0,
    libelle: "",
    type: "",
    valeur: "",
    ordre: 0,
    aide: "",
    obligatoire: false
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.type = e.type;
    this.valeur = e.valeur;
    this.ordre = e.ordre;
    this.aide = e.aide;
    this.obligatoire = e.obligatoire;
    this.options = Array.isArray(e.options) ? e.options.map(n => new $y(n)) : [];
  }
}
export class GYh {
  constructor(e = {
    code: "",
    libelle: "",
    codeMatiereInterne: "",
    langueRenforcee: "",
    modalite: "",
    type: "",
    codeRne: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.codeMatiereInterne = e.codeMatiereInterne;
    this.langueRenforcee = e.langueRenforcee;
    this.modalite = e.modalite;
    this.type = e.type;
    this.codeRne = e.codeRne;
    if (Object.isExists(this.isSelected)) {
      this.isSelected = e.isSelected;
    }
  }
}
class x_ {
  constructor(e = {
    code: "",
    libelle: "",
    isSelectionnee: false,
    numeroLigne: 0
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.isSelectionnee = e.isSelectionnee;
    this.numeroLigne = e.numeroLigne;
  }
}
class s1 {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    pourcentage: 0,
    responsablePrincipal: false,
    commentaire: ""
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.pourcentage = e.pourcentage;
    this.responsablePrincipal = e.responsablePrincipal;
    this.commentaire = e.commentaire;
  }
}
export class Hwo {
  constructor(e = {
    code: "",
    uid: "",
    libelle: "",
    etat: 0,
    isObligatoire: false,
    aide: "",
    urlModele: "",
    type: "",
    idFiliere: 0
  }) {
    this.code = e.code;
    this.uid = e.uid;
    this.libelle = e.libelle;
    this.etat = e.etat;
    this.isObligatoire = e.isObligatoire;
    this.aide = e.aide;
    this.urlModele = e.urlModele;
    this.type = e.type;
    this.idFiliere = e.idFiliere;
    if (Object.isExists(e.unc)) {
      this.unc = e.unc;
    }
  }
}
export class Gy3 {
  constructor(e = {
    code: "",
    libelle: "",
    jour1: false,
    jour2: false,
    jour3: false,
    jour4: false,
    jour5: false,
    jour6: false,
    jour7: false
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.jour1 = e.jour1;
    this.jour2 = e.jour2;
    this.jour3 = e.jour3;
    this.jour4 = e.jour4;
    this.jour5 = e.jour5;
    this.jour6 = e.jour6;
    this.jour7 = e.jour7;
  }
}
class by {
  constructor(e = {
    contenu: "",
    idResponsable: 0
  }) {
    this.contenu = e.contenu;
    this.idResponsable = e.idResponsable;
  }
}
export class TRw {
  constructor(e = {
    id: 0,
    idEtablissement: 0,
    libelle: ""
  }) {
    this.id = e.id;
    this.idEtablissement = e.idEtablissement;
    this.libelle = e.libelle;
  }
}
export class kEO {
  constructor(e = {
    codeMEF: "",
    codeMatiereInterne: "",
    codeSpecialite: "",
    idFiliere: 0,
    libelle: ""
  }) {
    this.codeMEF = e.codeMEF;
    this.codeMatiereInterne = e.codeMatiereInterne;
    this.codeSpecialite = e.codeSpecialite;
    this.idFiliere = e.idFiliere;
    this.libelle = e.libelle;
    if (Object.isExists(e.isPremierDegre)) {
      this.isPremierDegre = e.isPremierDegre;
    }
  }
}
class Xy {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
export class DKx {
  constructor(e = {
    code: "",
    libelle: "",
    type: 0
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    this.type = e.type;
  }
}
class qy {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new DKx(e[s]);
      }
    }
  }
}
class xg {
  constructor(e = {
    montant: 0,
    dejaPaye: 0,
    aPayer: 0,
    libelle: "",
    actif: false
  }) {
    this.montant = e.montant;
    this.dejaPaye = e.dejaPaye;
    this.aPayer = e.aPayer;
    this.libelle = e.libelle;
    this.actif = e.actif;
  }
}
class xy {
  constructor(e = {
    id: 0,
    type: "",
    prenom: "",
    nom: ""
  }) {
    this.id = e.id;
    this.type = e.type;
    this.prenom = e.prenom;
    this.nom = e.nom;
  }
}
export class oU4 {
  constructor(e = {
    id: 0,
    idInscriptionEleve: 0,
    activites: [],
    choixOptionsEtape2: false,
    AffichageOptionsEtape2: false,
    commentaire: "",
    commentaireFamille: {},
    dateSortie: "",
    etapeInscription: "",
    filiere: {},
    formation: {},
    idEtab: 0,
    informationsComplementaires: [],
    inscriptionEtabActive: false,
    libelleEtab: "",
    isReglementOK: false,
    motifSortie: {},
    motifSortieLibre: "",
    nom: "",
    prenom: "",
    telephone: "",
    sexe: "M",
    particule: "",
    optionsFormation: [],
    optionsInternes: [],
    payeurs: [],
    piecesDossier: [],
    regimeScolaire: 0,
    reinscription: false,
    quotients: {},
    confirmationLectureDocuments: false,
    tabSignatairesManquants: []
  }) {
    this.id = e.id;
    this.idInscriptionEleve = e.idInscriptionEleve;
    this.activites = Array.isArray(e.activites) ? e.activites.map(n => new Gy3(n)) : [];
    this.choixOptionsEtape2 = e.choixOptionsEtape2;
    this.AffichageOptionsEtape2 = e.AffichageOptionsEtape2;
    this.commentaire = e.commentaire;
    this.commentaireFamille = new by(e.commentaireFamille);
    this.dateSortie = e.dateSortie;
    this.etapeInscription = e.etapeInscription;
    this.filiere = new TRw(e.filiere);
    this.formation = new kEO(e.formation);
    this.idEtab = e.idEtab;
    this.informationsComplementaires = Array.isArray(e.informationsComplementaires) ? e.informationsComplementaires.map(n => new ku(n)) : [];
    this.inscriptionEtabActive = e.inscriptionEtabActive;
    this.libelleEtab = e.libelleEtab;
    this.isReglementOK = e.isReglementOK;
    this.motifSortie = new Xy(e.motifSortie);
    this.motifSortieLibre = e.motifSortieLibre;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.telephone = e.telephone;
    this.particule = e.particule;
    this.sexe = e.sexe;
    this.optionsFormation = Array.isArray(e.optionsFormation) ? e.optionsFormation.map(n => new GYh(n)) : [];
    this.optionsInternes = Array.isArray(e.optionsInternes) ? e.optionsInternes.map(n => new x_(n)) : [];
    this.payeurs = Array.isArray(e.payeurs) ? e.payeurs.map(n => new s1(n)) : [];
    this.piecesDossier = Array.isArray(e.piecesDossier) ? e.piecesDossier.map(n => new Hwo(n)) : [];
    this.regimeScolaire = e.regimeScolaire;
    this.reinscription = e.reinscription;
    this.quotients = new qy(e.quotients);
    if (Object.isExists(e.reg1)) {
      this.reg1 = new xg(e.reg1);
    }
    if (Object.isExists(e.reg2)) {
      this.reg2 = new xg(e.reg2);
    }
    if (Object.isExists(e.reg3)) {
      this.reg3 = new xg(e.reg3);
    }
    if (Object.isExists(e.enregistrementAlaVolee)) {
      this.enregistrementAlaVolee = e.enregistrementAlaVolee;
    }
    if (Object.isExists(e.optionsFormationsPossiblesParRang)) {
      this.optionsFormationsPossiblesParRang = Array.isArray(e.optionsFormationsPossiblesParRang) ? e.optionsFormationsPossiblesParRang.map(n => new GYh(n)) : [];
    }
    if (Object.isExists(e.confirmationLectureDocuments)) {
      this.confirmationLectureDocuments = e.confirmationLectureDocuments;
    }
    this.tabSignatairesManquants = e.tabSignatairesManquants.map(n => new xy(n));
  }
  get isSignatairesManquants() {
    return this.tabSignatairesManquants.length > 0;
  }
  get getListePiecesDossierFourni() {
    let e = [];
    this.piecesDossier.forEach(n => {
      if (this.getUrlPieceDossier(n) !== "") {
        e.push(n);
      }
    });
    return e;
  }
  getUrlPieceDossier(e) {
    let n = "";
    if (Object.isExists(e.unc) && e.unc !== "") {
      n = e.unc;
    } else if (Object.isExists(e.uid) && e.uid !== "") {
      n = e.uid;
    }
    return n;
  }
}
class wg extends eD9 {
  constructor(e = {
    id: 0,
    code: "",
    uid: "",
    ordre: 0,
    libelle: "",
    aide: "",
    url: ""
  }) {
    super(e);
    this.code = e.code;
    this.uid = e.uid;
    this.ordre = e.ordre;
    this.aide = e.aide;
  }
}
class Dh {
  constructor(e = {
    IBAN: "",
    cotisationAPEL: "",
    domiciliation: "",
    facturePapier: false,
    jourEcheance: 0,
    modeReglement: "",
    nbEnfantsACharge: 0,
    titulaireCompte: ""
  }) {
    this.IBAN = e.IBAN;
    this.cotisationAPEL = e.cotisationAPEL;
    this.domiciliation = e.domiciliation;
    this.facturePapier = e.facturePapier;
    this.jourEcheance = e.jourEcheance;
    this.modeReglement = e.modeReglement;
    this.nbEnfantsACharge = e.nbEnfantsACharge;
    this.quotients = new qy(e.quotients);
    this.titulaireCompte = e.titulaireCompte;
  }
}
class L0 {
  constructor(e = {
    type: "",
    mode: "",
    idEleve: 0,
    date: "",
    numTransaction: "",
    montant: 0
  }) {
    this.type = e.type;
    this.mode = e.mode;
    this.idEleve = e.idEleve;
    this.date = e.date;
    this.numTransaction = e.numTransaction;
    this.montant = e.montant;
  }
}
class n_ {
  constructor(e = {
    code: "",
    joursActifs: [],
    libelle: "",
    type: ""
  }) {
    this.code = e.code;
    this.joursActifs = Array.isArray(e.joursActifs) ? [...e.joursActifs] : [];
    this.libelle = e.libelle;
    this.type = e.type;
  }
}
class C_ {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = e[s];
      }
    }
  }
}
class i_ {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new C_(e[s]);
      }
    }
  }
}
class Cy {
  constructor(e = {
    libelle: "",
    type: 0,
    typeUser: "",
    obligatoire: false,
    aide: ""
  }) {
    this.libelle = e.libelle;
    this.type = e.type;
    this.typeUser = e.typeUser;
    this.obligatoire = e.obligatoire;
    this.aide = e.aide;
    this.quotients = Array.isArray(e.quotients) ? e.quotients.map(n => new DKx(n)) : [];
  }
}
export class O0X extends TRw {
  constructor(e = {
    aide: "",
    id: 0,
    idEtablissement: 0,
    isChoixOptionsInscriptionActif: false,
    isChoixOptionsReInscriptionActif: false,
    isEtape1Actif: false,
    isOptionsInterneActif: false,
    isPourcentagePayeurActif: false,
    isRegimeActif: false,
    isReglement1Actif: false,
    isReglement2Actif: false,
    isReglement3Actif: false,
    libelle: "",
    montantsReg1ParDefautInscription: 0,
    montantsReg1ParDefautReinscription: 0,
    montantsReg2ParDefautInscription: 0,
    montantsReg2ParDefautReinscription: 0,
    montantsReg3ParDefautInscription: 0,
    montantsReg3ParDefautReinscription: 0,
    nombreMaxOptionsAcademiques: 0,
    optionsInternesAide: "",
    pourcentagePayeurAide: "",
    regimeAide: "",
    reglement1Aide: "",
    reglement1Libelle: "",
    reglement2Aide: "",
    reglement2Libelle: "",
    reglement3Aide: "",
    reglement3Libelle: "",
    texteAideActivite: "",
    texteAideActiviteMidi: "",
    texteAideActiviteSoir: "",
    texteAideOptionsAcademiques: "",
    regimesActifs: []
  }) {
    super(e);
    this.activites = Array.isArray(e.activites) ? e.activites.map(n => new n_(n)) : [];
    this.aide = e.aide;
    this.documentsEtablissement = Array.isArray(e.documentsEtablissement) ? e.documentsEtablissement.map(n => new wg(n)) : [];
    this.id = e.id;
    this.idEtablissement = e.idEtablissement;
    this.isChoixOptionsInscriptionActif = e.isChoixOptionsInscriptionActif;
    this.isChoixOptionsReInscriptionActif = e.isChoixOptionsReInscriptionActif;
    this.isEtape1Actif = e.isEtape1Actif;
    this.isOptionsInterneActif = e.isOptionsInterneActif;
    this.isPourcentagePayeurActif = e.isPourcentagePayeurActif;
    this.isRegimeActif = e.isRegimeActif;
    this.regimesActifs = Array.isArray(e.regimesActifs) ? [...e.regimesActifs] : [];
    this.isReglement1Actif = e.isReglement1Actif;
    this.isReglement2Actif = e.isReglement2Actif;
    this.isReglement3Actif = e.isReglement3Actif;
    this.montantsReg1ParDefautInscription = e.montantsReg1ParDefautInscription;
    this.montantsReg1ParDefautReinscription = e.montantsReg1ParDefautReinscription;
    this.montantsReg1ParRegime = new i_(e.montantsReg1ParRegime);
    this.montantsReg2ParDefautInscription = e.montantsReg2ParDefautInscription;
    this.montantsReg2ParDefautReinscription = e.montantsReg2ParDefautReinscription;
    this.montantsReg2ParRegime = new i_(e.montantsReg2ParRegime);
    this.montantsReg3ParDefautInscription = e.montantsReg3ParDefautInscription;
    this.montantsReg3ParDefautReinscription = e.montantsReg3ParDefautReinscription;
    this.montantsReg3ParRegime = new i_(e.montantsReg3ParRegime);
    this.nombreMaxOptionsAcademiques = e.nombreMaxOptionsAcademiques;
    this.optionsInternesAide = e.optionsInternesAide;
    this.pourcentagePayeurAide = e.pourcentagePayeurAide;
    this.quotientsEtab = Array.isArray(e.quotientsEtab) ? e.quotientsEtab.map(n => new Cy(n)) : [];
    this.regimeAide = e.regimeAide;
    this.reglement1Aide = e.reglement1Aide;
    this.reglement1Libelle = e.reglement1Libelle;
    this.reglement2Aide = e.reglement2Aide;
    this.reglement2Libelle = e.reglement2Libelle;
    this.reglement3Aide = e.reglement3Aide;
    this.reglement3Libelle = e.reglement3Libelle;
    this.texteAideActivite = e.texteAideActivite;
    this.texteAideActiviteMidi = e.texteAideActiviteMidi;
    this.texteAideActiviteSoir = e.texteAideActiviteSoir;
    this.texteAideOptionsAcademiques = e.texteAideOptionsAcademiques;
  }
}
class Bv {
  constructor(e = {
    enfantsAChargeAide: "",
    isEnfantsAChargeActif: false,
    obligatoire: false
  }) {
    this.enfantsAChargeAide = e.enfantsAChargeAide;
    this.isEnfantsAChargeActif = e.isEnfantsAChargeActif;
    this.obligatoire = e.obligatoire;
  }
}
class w_ {
  constructor(e = {
    etape1Active: false,
    etape2Active: false,
    idEtab: 0,
    libelleEtab: ""
  }) {
    this.etape1Active = e.etape1Active;
    this.etape2Active = e.etape2Active;
    this.idEtab = e.idEtab;
    this.libelleEtab = e.libelleEtab;
  }
}
class wy {
  constructor(e = {
    aide: "",
    jourDefaut: 0
  }) {
    this.aide = e.aide;
    this.jourDefaut = e.jourDefaut;
    this.jours = Array.isArray(e.jours) ? [...e.jours] : [];
  }
}
export class AWX {
  constructor(e = {
    code: "",
    id: 0,
    libelle: "",
    type: ""
  }) {
    this.code = e.code;
    this.id = e.id;
    this.libelle = e.libelle;
    this.type = e.type;
  }
}
class r_ {
  constructor(e = {
    isModifModeReglementActif: false,
    isModifModeReglementChoixActif: false,
    isReglementParCBActif: false,
    isReglementParChequeActif: false,
    reglementAide: "",
    reglementParChequeAide: ""
  }) {
    this.isModifModeReglementActif = e.isModifModeReglementActif;
    this.isModifModeReglementChoixActif = e.isModifModeReglementChoixActif;
    this.isReglementParCBActif = e.isReglementParCBActif;
    this.isReglementParChequeActif = e.isReglementParChequeActif;
    this.reglementAide = e.reglementAide;
    this.reglementParChequeAide = e.reglementParChequeAide;
  }
}
class Om {
  constructor(e = {
    APELAide: "",
    anneeScolaireInscription: "",
    facturePapierAide: "",
    isAPELActif: false,
    isAPELExterieurActif: false,
    isCommentaireEtablissementActif: false,
    isFacturePapierActif: false,
    texteAideEtape1: "",
    texteAideEtape2: "",
    descriptionEntete: ""
  }) {
    this.APELAide = e.APELAide;
    this.anneeScolaireInscription = e.anneeScolaireInscription;
    this.facturePapierAide = e.facturePapierAide;
    this.filieres = Array.isArray(e.filieres) ? e.filieres.map(n => new O0X(n)) : [];
    this.formations = Array.isArray(e.formations) ? e.formations.map(n => new kEO(n)) : [];
    this.isAPELActif = e.isAPELActif;
    this.isAPELExterieurActif = e.isAPELExterieurActif;
    this.isCommentaireEtablissementActif = e.isCommentaireEtablissementActif;
    this.isFacturePapierActif = e.isFacturePapierActif;
    this.motifsSortie = Array.isArray(e.motifsSortie) ? e.motifsSortie.map(n => new Xy(n)) : [];
    this.nbEnfantsACharge = new Bv(e.nbEnfantsACharge);
    this.ouvertures = Array.isArray(e.ouvertures) ? e.ouvertures.map(n => new w_(n)) : [];
    this.paramsJourEcheance = new wy(e.paramsJourEcheance);
    this.quotientsEtab = Array.isArray(e.quotientsEtab) ? e.quotientsEtab.map(n => new Cy(n)) : [];
    this.regimesScolaire = Array.isArray(e.regimesScolaire) ? e.regimesScolaire.map(n => new AWX(n)) : [];
    this.reglement = new r_(e.reglement);
    this.texteAideEtape1 = e.texteAideEtape1;
    this.texteAideEtape2 = e.texteAideEtape2;
    this.descriptionEntete = e.descriptionEntete;
  }
}
class eu {
  constructor(e = {
    codeDocument: "",
    idDocument: 0,
    idSignataire: 0,
    idSignature: 0,
    date: "",
    nomSignataire: "",
    telSignataire: "",
    typeSignataire: "",
    typeSignature: ""
  }) {
    this.codeDocument = e.codeDocument;
    this.idDocument = e.idDocument;
    this.idSignataire = e.idSignataire;
    this.idSignature = e.idSignature;
    this.date = e.date;
    this.nomSignataire = e.nomSignataire;
    this.telSignataire = e.telSignataire;
    this.typeSignataire = e.typeSignataire;
    this.typeSignature = e.typeSignature;
  }
}
export class d7D extends class t_ {
  constructor(e = {
    isReinscription: false
  }) {
    this.isReinscription = e.isReinscription;
    if (Object.isExists(e.commentaireFamille)) {
      this.commentaireFamille = e.commentaireFamille;
    }
    if (Object.isExists(e.etatFamille)) {
      this.etatFamille = e.etatFamille;
    }
    if (Object.isExists(e.inscriptions)) {
      this.inscriptions = Array.isArray(e.inscriptions) ? e.inscriptions.map(n => new oU4(n)) : [];
    }
  }
} {
  constructor(e = {
    confirmationLectureDocuments: false
  }) {
    super(e);
    if (Object.isExists(e.idInscriptionResponsable)) {
      this.idInscriptionResponsable = e.idInscriptionResponsable;
    }
    if (Object.isExists(e.commentaire)) {
      this.commentaire = e.commentaire;
    }
    if (Array.isArray(e.documentsEtablissement)) {
      this.documentsEtablissement = e.documentsEtablissement.map(n => new wg(n));
    }
    if (Array.isArray(e.eleves)) {
      this.eleves = e.eleves.map(n => new oU4(n));
    }
    if (Object.isExists(e.facturation)) {
      this.facturation = new Dh(e.facturation);
    }
    if (Array.isArray(e.historiquePaiements)) {
      this.historiquePaiements = e.historiquePaiements.map(n => new L0(n));
    }
    if (Object.isExists(e.isPayeur)) {
      this.isPayeur = e.isPayeur;
    }
    if (Array.isArray(e.informationsComplementaires)) {
      this.informationsComplementaires = e.informationsComplementaires.map(n => new ku(n));
    }
    if (Object.isExists(e.parametrages)) {
      this.parametrages = new Om(e.parametrages);
    }
    if (Array.isArray(e.piecesDossier)) {
      this.piecesDossier = e.piecesDossier.map(n => new Hwo(n));
    }
    if (Array.isArray(e.signaturesDocsLus)) {
      this.signaturesDocsLus = e.signaturesDocsLus.map(n => new eu(n));
    }
    if (Object.isExists(e.etat)) {
      this.etat = e.etat;
    }
    if (Object.isExists(e.telephone)) {
      this.telephone = e.telephone;
    }
    if (Object.isExists(e.pieceDossierAdd)) {
      this.pieceDossierAdd = e.pieceDossierAdd;
    }
    if (Object.isExists(e.pieceDossierAddEleve)) {
      this.pieceDossierAddEleve = e.pieceDossierAddEleve;
    }
    if (Object.isExists(e.confirmationLectureDocuments)) {
      this.confirmationLectureDocuments = e.confirmationLectureDocuments;
    }
    if (Object.isExists(e.expired)) {
      this.expired = e.expired;
    }
  }
  deleteInfosPieceDossier(e, n, s) {
    if (n === Wqi.FAMILLE) {
      let d = this.piecesDossier.find(h => e === h.code);
      if (Object.isExists(d)) {
        d.unc = "";
        d.uid = "";
      }
    } else if (n === Wqi.ELEVE) {
      let h = this.eleves.find(P => s === P.idInscriptionEleve).piecesDossier.find(P => P.code === e);
      if (Object.isExists(h)) {
        h.unc = "";
        h.uid = "";
      }
    }
  }
  updateSignatureDossierFam() {
    this.etat = "valide";
  }
  updateSignatureDossierEl(e) {
    this.eleves.find(s => e === s.id).etapeInscription = HU.INSCR_ETAPE2_REMPLIE;
  }
  calculerAcompteFraisDossier(e) {
    e.reg1 = 0;
    e.reg2 = 0;
    e.reg3 = 0;
    this.eleves.forEach(n => {
      var s;
      var d;
      var h;
      var P;
      var z;
      var Ae;
      if (!!n.inscriptionEtabActive) {
        this.calculerAcompteFraisDossierEleve(n.id);
        if ((s = n.reg1) !== null && s !== undefined && s.aPayer) {
          e.reg1 += n.reg1.aPayer;
        }
        if ((d = n.reg2) !== null && d !== undefined && d.aPayer) {
          e.reg2 += n.reg2.aPayer;
        }
        if ((h = n.reg3) !== null && h !== undefined && h.aPayer) {
          e.reg3 += n.reg3.aPayer;
        }
        if ((P = n.reg1) !== null && P !== undefined && P.actif) {
          e.reg1Actif = true;
        }
        if ((z = n.reg2) !== null && z !== undefined && z.actif) {
          e.reg2Actif = true;
        }
        if ((Ae = n.reg3) !== null && Ae !== undefined && Ae.actif) {
          e.reg3Actif = true;
        }
      }
    });
  }
  calculerAcompteFraisDossierEleve(e) {
    let n = this.getEleve(e);
    if (!Object.isExists(n) || n.etapeInscription < HU.INSCR_ETAPE2_VIDE || n.etapeInscription >= HU.INSCR_ETAPE3) {
      return;
    }
    const s = this.parametrages.filieres.find(d => d.id === n.filiere.id);
    if (!!Object.isExists(s)) {
      n.reg1 = new xg();
      n.reg2 = new xg();
      n.reg3 = new xg();
      if (n.reinscription) {
        n.reg1.montant = Object.isExists(s.montantsReg1ParRegime.reinscription[n.regimeScolaire]) && n.regimeScolaire !== 0 ? s.montantsReg1ParRegime.reinscription[n.regimeScolaire] : s.montantsReg1ParDefautReinscription;
        n.reg1.libelle = s.reglement1Libelle;
        n.reg1.actif = s.isReglement1Actif;
        n.reg2.montant = Object.isExists(s.montantsReg2ParRegime.reinscription[n.regimeScolaire]) && n.regimeScolaire !== 0 ? s.montantsReg2ParRegime.reinscription[n.regimeScolaire] : s.montantsReg2ParDefautReinscription;
        n.reg2.libelle = s.reglement2Libelle;
        n.reg2.actif = s.isReglement2Actif;
        n.reg3.montant = Object.isExists(s.montantsReg3ParRegime.reinscription[n.regimeScolaire]) && n.regimeScolaire !== 0 ? s.montantsReg3ParRegime.reinscription[n.regimeScolaire] : s.montantsReg3ParDefautReinscription;
        n.reg3.libelle = s.reglement3Libelle;
        n.reg3.actif = s.isReglement3Actif;
      } else {
        n.reg1.montant = Object.isExists(s.montantsReg1ParRegime.inscription[n.regimeScolaire]) && n.regimeScolaire !== 0 ? s.montantsReg1ParRegime.inscription[n.regimeScolaire] : s.montantsReg1ParDefautInscription;
        n.reg1.libelle = s.reglement1Libelle;
        n.reg1.actif = s.isReglement1Actif;
        n.reg2.montant = Object.isExists(s.montantsReg2ParRegime.inscription[n.regimeScolaire]) && n.regimeScolaire !== 0 ? s.montantsReg2ParRegime.inscription[n.regimeScolaire] : s.montantsReg2ParDefautInscription;
        n.reg2.libelle = s.reglement2Libelle;
        n.reg2.actif = s.isReglement2Actif;
        n.reg3.montant = Object.isExists(s.montantsReg3ParRegime.inscription[n.regimeScolaire]) && n.regimeScolaire !== 0 ? s.montantsReg3ParRegime.inscription[n.regimeScolaire] : s.montantsReg3ParDefautInscription;
        n.reg3.libelle = s.reglement3Libelle;
        n.reg3.actif = s.isReglement3Actif;
      }
      this.historiquePaiements.filter(d => d.idEleve === n.id && d.type === "INSREG1").forEach(d => n.reg1.dejaPaye += d.montant);
      this.historiquePaiements.filter(d => d.idEleve === n.id && d.type === "INSREG2").forEach(d => n.reg2.dejaPaye += d.montant);
      this.historiquePaiements.filter(d => d.idEleve === n.id && d.type === "INSREG3").forEach(d => n.reg3.dejaPaye += d.montant);
      n.reg1.aPayer = Math.round((n.reg1.montant - n.reg1.dejaPaye) * 100) / 100;
      n.reg2.aPayer = Math.round((n.reg2.montant - n.reg2.dejaPaye) * 100) / 100;
      n.reg3.aPayer = Math.round((n.reg3.montant - n.reg3.dejaPaye) * 100) / 100;
    }
  }
  getParametrageFiliere(e) {
    let n = this.parametrages.filieres.find(s => e === s.id);
    if (Object.isExists(n)) {
      return n;
    } else {
      return new O0X();
    }
  }
  getEleve(e) {
    return this.eleves.find(n => n.id === e);
  }
  getListeDocsASignerEleve(e) {
    let n = this.getEleve(e);
    let s = [];
    if (n.etapeInscription !== HU.INSCR_ETAPE2_VIDE && n.etapeInscription !== HU.INSCR_ETAPE2_REMPLIE && n.etapeInscription !== HU.INSCR_ETAPE3_VALIDE || n.filiere.id === 0) {
      return s;
    }
    let d = this.parametrages.filieres.find(h => h.id === n.filiere.id);
    if (Object.isExists(d)) {
      return d.documentsEtablissement;
    } else {
      return s;
    }
  }
  isEleveSignatureOK(e, n) {
    if (this.getEleve(e).etapeInscription !== HU.INSCR_ETAPE2_VIDE || this.getListeDocsASignerEleve(e).length === 0) {
      return true;
    }
    for (let d = 0; d < this.getListeDocsASignerEleve(e).length; d++) {
      if (!Object.isExists(this.signaturesDocsLus.find(h => h.idSignataire === n?.id && h.typeSignataire === n?.typeCompte && h.idDocument === +this.getListeDocsASignerEleve(e)[d].id)) || !Object.isExists(this.signaturesDocsLus.find(h => h.idSignataire === e && h.typeSignataire === Wqi.ELEVE && h.idDocument === +this.getListeDocsASignerEleve(e)[d].id))) {
        return false;
      }
    }
    return true;
  }
  isSignaturesSignataireOK(e, n, s, d) {
    for (let h = 0; h < s.length; h++) {
      if (d.filter(P => P.idDocument === +s[h].id && P.idSignataire === e && P.typeSignataire === n).length === 0) {
        return false;
      }
    }
    return true;
  }
  getListeSignatairesDossier(e, n) {
    let s = [];
    let d = this.getEleve(n);
    let h = [];
    h = Object.isExists(d) ? this.getListeDocsASignerEleve(n) : this.documentsEtablissement;
    if (h.length === 0) {
      return s;
    }
    if (Object.isExists(d)) {
      let Ae = new eu();
      Ae.nomSignataire = d.prenom + " " + d.nom;
      let Ve = this.signaturesDocsLus.filter(Tt => Tt.idSignataire === n && Tt.typeSignataire === dcH.ELEVE);
      if (this.isSignaturesSignataireOK(n, dcH.ELEVE, h, Ve)) {
        let Tt = Ve.find(Vt => h[0].id === Vt.idDocument && Vt.idSignataire === n && Vt.typeSignataire === dcH.ELEVE);
        if (Object.isExists(Tt)) {
          Ae.date = Tt.date;
          Ae.idDocument = Tt.idDocument;
        }
      } else if (Ve.length > 0) {
        Ae.idDocument = Ve[0].idDocument;
      }
      s.push(Ae);
    }
    let P = new eu();
    P.nomSignataire = e?.prenom + " " + e?.nom;
    let z = this.signaturesDocsLus.filter(Ae => Ae.idSignataire === e?.id && Ae.typeSignataire !== dcH.ELEVE);
    if (this.isSignaturesSignataireOK(e?.id, e?.typeCompte, h, z)) {
      let Ae = z.find(Ve => h[0].id === Ve.idDocument && Ve.idSignataire === e?.id && Ve.typeSignataire === e?.typeCompte);
      if (Object.isExists(Ae)) {
        P.idDocument = Ae.idDocument;
        P.date = Ae.date;
      }
    } else if (z.length > 0) {
      P.idDocument = z[0].idDocument;
    }
    s.push(P);
    return s;
  }
  isResponsableSignatureOK(e) {
    if (this.documentsEtablissement.length === 0) {
      return true;
    }
    for (let n = 0; n < this.documentsEtablissement.length; n++) {
      if (this.signaturesDocsLus.filter(s => s.idDocument === +this.documentsEtablissement[n].id && s.idSignataire === e?.id).length === 0) {
        return false;
      }
    }
    return true;
  }
  isRegimesFiliereActif(e) {
    const n = this.parametrages.filieres.find(s => s.id === e.id);
    return Object.isExists(n) && n.isRegimeActif && n.regimesActifs.length > 0;
  }
  isRegimeOK(e) {
    let n = this.getEleve(e);
    return n.regimeScolaire > 0 || !this.isRegimesFiliereActif(n.filiere);
  }
  isClasseOK(e) {
    return this.getEleve(e).filiere.id > 0;
  }
  isOneEleveWithEtapeOuverte() {
    return this.eleves.filter(n => n.inscriptionEtabActive === true).length > 0;
  }
  listRegimesFiliere(e) {
    var n;
    let d;
    let s = this.parametrages.filieres.find(h => h.id === e.filiere.id);
    if (Object.isExists(s)) {
      d = s.regimesActifs;
    }
    if (e.regimeScolaire > 0 && ((n = d) === null || n === undefined ? undefined : n.findIndex(h => e.regimeScolaire === h)) === -1) {
      d.push(e.regimeScolaire);
    }
    if (Object.isExists(d)) {
      return d.map(h => this.parametrages.regimesScolaire.find(P => P.id === h));
    } else {
      return [];
    }
  }
}
export class CKD {
  constructor(e = {
    reg1: 0,
    reg2: 0,
    reg3: 0,
    reg1Actif: false,
    reg2Actif: false,
    reg3Actif: false
  }) {
    this.reg1 = e.reg1;
    this.reg2 = e.reg2;
    this.reg3 = e.reg3;
    this.reg1Actif = e.reg1Actif;
    this.reg2Actif = e.reg2Actif;
    this.reg3Actif = e.reg3Actif;
  }
}
export class Lpd {
  constructor(e = {
    document: new wg()
  }) {
    this.document = new wg(e.document);
    if (Array.isArray(e.tabNPElevesConcernes)) {
      this.tabNPElevesConcernes = [...e.tabNPElevesConcernes];
    }
  }
}
class S_ {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    particule: "",
    idInscription: 0,
    documentsEtablissement: [],
    piecesDossier: [],
    typeRecapDossier: ""
  }) {
    this.id = e.id;
    this.type = e.type;
    this.prenom = e.prenom;
    this.nom = e.nom;
    this.particule = e.particule;
    this.idInscription = e.idInscription;
    this.documentsEtablissement = e.documentsEtablissement.map(n => new wg(n));
    this.piecesDossier = e.piecesDossier.map(n => new Hwo(n));
    this.typeRecapDossier = e.typeRecapDossier;
  }
  get uniqID() {
    return this.typeRecapDossier + this.type + this.id;
  }
}
class Sy extends S_ {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    particule: "",
    idInscription: 0,
    documentsEtablissement: [],
    piecesDossier: [],
    etapeInscription: ""
  }) {
    super({
      ...e,
      type: dcH.ELEVE,
      typeRecapDossier: qPe.DOSSIER_ELEVE
    });
    this.etapeInscription = e.etapeInscription;
  }
}
class s_ extends S_ {
  constructor(e = {
    id: 0,
    type: "",
    prenom: "",
    nom: "",
    particule: "",
    telephone: "",
    idInscription: 0,
    idsEleves: [],
    etatDossier: "",
    documentsEtablissement: [],
    piecesDossier: [],
    idsElevesPayeur: [],
    idsElevesSignataireObligatoire: []
  }) {
    super({
      ...e,
      typeRecapDossier: qPe.DOSSIER_FAMILLE
    });
    this.telephone = e.telephone;
    this.idsEleves = [...e.idsEleves];
    this.etatDossier = e.etatDossier;
    this.idsElevesPayeur = [...e.idsElevesPayeur];
    this.idsElevesSignataireObligatoire = [...e.idsElevesSignataireObligatoire];
  }
  get isSignataireObligatoireDUnEleve() {
    return this.idsElevesSignataireObligatoire.length > 0;
  }
  isSignatureObligatoire(e) {
    return this.idsElevesSignataireObligatoire.findIndex(n => n === e) > -1;
  }
}
class Dg {
  constructor(e = {
    signatures: [],
    dossiersEleves: [],
    dossiersFamilles: [],
    tabIdsSignatairesManquants: []
  }) {
    this.signatures = e.signatures.map(n => new eu(n));
    this.dossiersEleves = e.dossiersEleves.map(n => new Sy(n));
    this.dossiersFamilles = e.dossiersFamilles.map(n => new s_(n));
    this.tabIdsSignatairesManquants = [...e.tabIdsSignatairesManquants];
    if (Object.isExists(e.expired)) {
      this.expired = e.expired;
    }
  }
  getRecapDossierFamille(e, n) {
    return this.dossiersFamilles.find(s => s.id === n && s.type === e);
  }
  getDossiersElevesResponsable(e, n) {
    const s = this.getRecapDossierFamille(e, n);
    if (Object.isExists(s)) {
      return this.dossiersEleves.filter(d => s.idsEleves.indexOf(d.id) > -1);
    } else {
      return [];
    }
  }
  getSignatureDocument(e, n, s, d) {
    return this.signatures.find(h => h.idSignataire === n && h.typeSignataire === e && h.typeSignature === s && `${h.idDocument}` === d);
  }
  isResponsableSignaturesOK(e, n) {
    return this.tabIdsSignatairesManquants.findIndex(s => s === n) === -1;
  }
  isResponsableDossiersValides(e, n) {
    const s = this.getRecapDossierFamille(e, n);
    if (!Object.isExists(s) || s.etatDossier !== "valide") {
      return false;
    }
    const d = this.getDossiersElevesResponsable(e, n);
    const h = d.length;
    for (let P = 0; P < h; P++) {
      if (d[P].etapeInscription !== HU.INSCR_ETAPE2_REMPLIE) {
        return false;
      }
    }
    return true;
  }
}
export const FcY = "Dossier d'inscription à compléter";
export class GRg {
  static getLibelleEtapeInscription(e) {
    switch (e.etapeInscription) {
      case HU.INSCR_ETAPE1_VIDE:
        return "Vous devez effectuer le choix de la scolarité";
      case HU.INSCR_ETAPE1_REMPLIE:
        return "En attente de traitement par l'établissement";
      case HU.INSCR_ETAPE2_VIDE:
        return FcY;
      case HU.INSCR_ETAPE2_REMPLIE:
        if (e.isReglementOK) {
          if (e.tabSignatairesManquants.length > 0) {
            let n = "Signatures manquantes : ";
            let s = "";
            e.tabSignatairesManquants.forEach(d => {
              if (s !== "") {
                s += ", ";
              }
              s += d.prenom + " " + d.nom;
            });
            return n + s;
          }
          return "En attente de traitement par l'établissement";
        }
        return "Inscription en attente de votre paiement";
      case HU.INSCR_ETAPE3:
        return e.prenom + " n'est pas ré-inscrit" + (e.sexe === "F" ? "e" : "");
      case HU.INSCR_ETAPE3_VALIDE:
        return "Inscription terminée et validée par l'établissement";
      default:
        return "";
    }
  }
}
class Ad {
  constructor(e = {}) {
    this.dossierInscription = new d7D(e.dossierInscription);
    if (Object.isExists(e.suiviSignatures)) {
      this.suiviSignatures = new Dg(e.suiviSignatures);
    }
  }
  postDossierInscriptionFouE(e, n) {
    if (n.typeDonnes !== "E") {
      this.dossierInscription = new d7D(e);
    } else if (Object.isExists(n.sortie)) {
      let s = new oU4(e);
      const d = new ifA();
      s.dateSortie = d.transform(new Date(), "y-MM-dd");
      delete s.reg1;
      delete s.reg2;
      delete s.reg3;
      s.etapeInscription = HU.INSCR_ETAPE3;
      this.dossierInscription.eleves.edInsertUpdate(s, h => s.id === h.id);
    } else {
      this.dossierInscription.eleves.edInsertUpdate(e, s => e.id === s.id);
    }
  }
}
class Pp {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Ad(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  updateSignaturesDocs(e, n, s) {
    if (typeof this[n] === "undefined") {
      this[n] = new Ad();
    }
    let d = this[n].dossierInscription.signaturesDocsLus;
    if (!Object.isExists(d)) {
      d = [];
    }
    let P = new ifA().transform(new Date(), "y-MM-dd HH:mm:ss");
    e.forEach(z => {
      let Ae = new eu({
        date: P,
        codeDocument: z.document.code,
        idDocument: z.document.id,
        idSignataire: s.idUtilisateur,
        telSignataire: s.telephone,
        typeSignataire: s.typeUtilisateur
      });
      d.edInsertUpdate(Ae, Ve => Ve.idSignataire === Ae.idSignataire && Ve.typeSignataire === Ae.typeSignataire && Ve.idDocument === Ae.idDocument);
    });
  }
  deleteInfoPiece(e, n, s) {
    if (typeof this[n] === "undefined") {
      this[n] = new Ad();
    }
    this[n].dossierInscription.deleteInfosPieceDossier(e, s.typeInscription, s.idInscription);
  }
  updateSignatureDossierFamille(e) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ad();
    }
    this[e].dossierInscription.updateSignatureDossierFam();
  }
  updateSignatureDossierEleve(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ad();
    }
    this[e].dossierInscription.updateSignatureDossierEl(n);
  }
  postDossierInscription(e, n, s) {
    if (typeof this[n] === "undefined") {
      this[n] = new Ad();
    }
    this[n].postDossierInscriptionFouE(e, s);
  }
  addSignaturesSuiviSignatures(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new Ad();
    }
    if (!Object.isExists(this[e].suiviSignatures)) {
      this[e].suiviSignatures = new Dg();
    }
    this[e].suiviSignatures.signatures.push(...n);
    this[e].suiviSignatures.tabIdsSignatairesManquants.edRemove(s => s === n[0].idSignataire);
  }
}
export let Jl7 = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          const P = n[h];
          if (Object.isExists(P)) {
            if (!Object.isExpired(P.dossierInscription)) {
              Object.setExpired(P.dossierInscription, 0);
              s = true;
            }
            if (!Object.isExpired(P.suiviSignatures)) {
              Object.setExpired(P.suiviSignatures, 0);
              s = true;
            }
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateDossierInscriptionStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      if (!Object.isExists(P[s])) {
        P[s] = new Ad();
      }
      switch (d) {
        case "getDossierInscription":
          P[s].dossierInscription = new d7D(n);
          break;
        case "signerDocuments":
          P.updateSignaturesDocs(n, s, h);
          if (Object.isExists(P[s].suiviSignatures)) {
            Object.setExpired(P[s].suiviSignatures, 0);
          }
          break;
        case "signerDossierFamille":
          P.updateSignatureDossierFamille(s);
          if (Object.isExists(P[s].suiviSignatures)) {
            Object.setExpired(P[s].suiviSignatures, 0);
          }
          break;
        case "signerDossierEleve":
          P.updateSignatureDossierEleve(s, h.idEleve);
          if (Object.isExists(P[s].suiviSignatures)) {
            Object.setExpired(P[s].suiviSignatures, 0);
          }
          break;
        case "deleteDocumentTeleverse":
          P.deleteInfoPiece(n, s, h);
          break;
        case "postDossierInscription":
          P.postDossierInscription(n, s, h);
          break;
        case "getSuiviSignatures":
          P[s].suiviSignatures = new Dg(n);
          break;
        case "signerDossiersElevesDejaValides":
          P.addSignaturesSuiviSignatures(s, n);
          if (Object.isExists(P[s].dossierInscription)) {
            Object.setExpired(P[s].dossierInscription, 0);
          }
      }
      Object.setExpired(d === "getSuiviSignatures" || d === "signerDossiersElevesDejaValides" ? P[s].suiviSignatures : P[s].dossierInscription, this.expireableTTL);
      this.store = P;
    }
    selectListeDossierInscription(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.dossierInscription;
        } else {
          return undefined;
        }
      });
    }
    getListeDossierInscription(n) {
      const s = this.snapshot[n];
      if (s) {
        return s.dossierInscription;
      } else {
        return undefined;
      }
    }
    selectSuiviSignatures(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.suiviSignatures;
        } else {
          return undefined;
        }
      });
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Pp,
    className: "DossierInscriptionStore"
  })], R);
  return R;
})();
export let hmA = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.http = n;
      this.httpCacheService = s;
      this.dossierInscriptionStore = d;
      this.authStore = h;
    }
    getDossierInscription(n, s, d, h = true, P = false) {
      const z = $ej.edDBUserSpecificKey(n, s, d);
      const Ae = Object.getEntity(this.dossierInscriptionStore.snapshot, z);
      if (!IDb.isFamille(s)) {
        return E.E;
      }
      if (h) {
        const Ve = `dossierInscriptionFamille_${d}_${s}`;
        if (P) {
          this.httpCacheService.delete(Ve);
        }
        const Tt = Y5f.buildSimpleQueryString({
          cacheEnabled: 1,
          cacheKey: Ve,
          verbe: "get"
        });
        return this.callWebServiceDossierInscription(h, Tt);
      }
      if (P || Object.isExpired(Ae?.dossierInscription)) {
        const Ve = Y5f.buildSimpleQueryString({
          verbe: "get"
        });
        return this.callWebServiceDossierInscription(h, Ve);
      }
      return E.E;
    }
    getOptionsFormation(n, s, d, h, P) {
      return this.http.post(`${n}/options`, {
        rangOption: d,
        codeOgec: s,
        specialite: h,
        idFiliere: P
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    signerDocument(n, s, d, h, P, z) {
      let Ve = {
        tabDocsASigner: n.map(Tt => ({
          idDocument: Tt.document.id,
          tabNPElevesConcernes: Tt.tabNPElevesConcernes
        })),
        idUtilisateur: s,
        typeUtilisateur: d,
        telephone: h,
        codeSecure: P,
        signatureCanvas: z
      };
      return this.http.post("inscriptions/familleDossierInscription", Ve, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(Tt => {
        this.dossierInscriptionStore.updateDossierInscriptionStore(n, this.authStore.variantForCurrentUser, "signerDocuments", Ve);
        return true;
      }), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    signerDossierFamille(n, s, d, h, P, z, Ae, Ve) {
      let Tt = {
        idInscriptionResponsable: n,
        idUtilisateur: s,
        typeUtilisateur: d,
        telephone: h,
        codeSecure: P,
        canvas: z,
        tabElevesScolarite: Ae,
        signatureCanvas: Ve
      };
      return this.http.post("inscriptions/familleDossierInscription", Tt, {
        params: new Et().set("verbe", "put2")
      }).pipe((0, j.U)(Hn => {
        this.dossierInscriptionStore.updateDossierInscriptionStore(Tt, this.authStore.variantForCurrentUser, "signerDossierFamille");
        return true;
      }), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    signerDossierEleve(n, s, d, h, P, z, Ae, Ve, Tt, Vt) {
      let Hn = {
        idInscriptionEleve: n,
        idUtilisateur: s,
        typeUtilisateur: d,
        telephone: h,
        codeSecure: P,
        canvas: z,
        tabElevesScolarite: Ve,
        tabInfosDocsASigner: Tt.map(ss => ({
          idDocument: ss.document.id,
          tabNPElevesConcernes: ss.tabNPElevesConcernes
        })),
        signatureCanvas: Vt
      };
      let Ci = {
        idEleve: Ae
      };
      return this.http.post("inscriptions/familleDossierInscription", Hn, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(ss => {
        this.dossierInscriptionStore.updateDossierInscriptionStore(Hn, this.authStore.variantForCurrentUser, "signerDossierEleve", Ci);
        return true;
      }), (0, W.K)(ss => this.catchBadResponse(ss)));
    }
    callWebServiceDossierInscription(n, s) {
      return this.http.post("inscriptions/familleDossierInscription", {
        isResumeEtats: n ? 1 : 0
      }, {
        params: s
      }).pipe((0, j.U)(d => n ? new d7D(d.data) : this.dossierInscriptionStore.updateDossierInscriptionStore(d.data, this.authStore.variantForCurrentUser, "getDossierInscription")), (0, W.K)(d => this.catchBadResponse(d)));
    }
    payerEnLigne(n) {
      return this.http.post("inscriptions/familleDossierInscription/paiement", n, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(s => s.data.urlSecure), (0, W.K)(s => this.catchBadResponse(s)));
    }
    deleteInfoPieceDossier(n, s, d) {
      let h = {
        idInscription: n,
        typeInscription: s,
        idPieceDossier: n
      };
      return this.http.post("inscriptions/familleDossierInscription/" + s + "/" + n + "/fichier/" + d, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(() => {
        this.dossierInscriptionStore.updateDossierInscriptionStore(d, this.authStore.variantForCurrentUser, "deleteDocumentTeleverse", h);
        return (0, S.of)(true);
      }), (0, W.K)(z => this.catchBadResponse(z)));
    }
    postDossierInscription(n, s, d, h, P) {
      let z;
      if (s === "E") {
        z = new oU4(n);
      } else {
        z = new d7D(n);
        for (let Ve = 0; Ve < z.eleves.length; Ve++) {
          if (z.eleves[Ve].etapeInscription !== HU.INSCR_ETAPE2_VIDE) {
            z.eleves.splice(Ve, 1);
          }
        }
        if (s === "F" && P) {
          z.etat = "valide";
        }
        z.eleves.forEach(Ve => {
          Ve.enregistrementAlaVolee = "1";
        });
      }
      let Ae = {
        dossierInscription: z,
        typeDonnes: s,
        sortie: h
      };
      return this.http.post("inscriptions/familleDossierInscription", Ae, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Ve => {
        if (Ve.code !== GL1.OK) {
          return (0, I._)(() => new FwQ("...", Ve.code));
        }
        let Tt;
        if (s === "F") {
          Tt = new d7D(n);
          if (Ve.data.idInscrUpdated > 0) {
            Tt.idInscriptionResponsable = Ve.data.idInscrUpdated;
          }
        } else if (s === "E" && d) {
          Tt = new oU4(n);
          if (Ve.data.idInscrUpdated > 0) {
            Tt.idInscriptionEleve = Ve.data.idInscrUpdated;
          }
          Tt.etapeInscription = HU.INSCR_ETAPE1_REMPLIE;
        } else if (s !== "E" || d) {
          Tt = new d7D(n);
        } else {
          Tt = new oU4(n);
          if (Ve.data.idInscrUpdated > 0) {
            Tt.idInscriptionEleve = Ve.data.idInscrUpdated;
          }
        }
        this.dossierInscriptionStore.updateDossierInscriptionStore(Tt, this.authStore.variantForCurrentUser, "postDossierInscription", Ae);
        return (0, S.of)(true);
      }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    getSuiviSignatures(n, s, d = false) {
      if (!IDb.isFamille(n)) {
        return E.E;
      }
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const P = Object.getEntity(this.dossierInscriptionStore.snapshot, h);
      if (d || !P || Object.isExpired(P.suiviSignatures)) {
        return this.http.post("inscriptions/familleDossierInscription/signatures", {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(z => this.dossierInscriptionStore.updateDossierInscriptionStore(z.data, h, "getSuiviSignatures")), (0, W.K)(z => this.catchBadResponse(z)));
      } else {
        return E.E;
      }
    }
    signerDossiersElevesDejaValides(n, s, d, h) {
      return this.http.post("inscriptions/familleDossierInscription/signatures", {
        idUtilisateur: n,
        typeUtilisateur: s,
        telephone: d,
        codeSecure: h
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(Ae => {
        this.dossierInscriptionStore.updateDossierInscriptionStore(Ae.data, this.authStore.variantForCurrentUser, "signerDossiersElevesDejaValides");
        return true;
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nl), t.LFG(Jl7), t.LFG(CnD));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class lTZ {
  constructor(e = {
    id: 0,
    text: "",
    matiere: "",
    codeMatiere: "",
    typeCours: "",
    start_date: "",
    end_date: "",
    color: "",
    dispensable: false,
    dispense: 0,
    prof: "",
    salle: "",
    classe: "",
    classeId: 0,
    classeCode: "",
    groupe: "",
    groupeCode: "",
    groupeId: 0,
    icone: "",
    isModifie: false,
    contenuDeSeance: false,
    devoirAFaire: false,
    isAnnule: false,
    isAbsenceProf: false,
    isFlexible: false
  }) {
    this.id = e.id;
    this.text = e.text;
    this.matiere = e.matiere;
    this.codeMatiere = e.codeMatiere;
    this.typeCours = e.typeCours;
    this.start_date = e.start_date;
    this.end_date = e.end_date;
    this.color = e.color;
    this.dispensable = e.dispensable;
    this.dispense = e.dispense;
    this.prof = e.prof;
    this.salle = e.salle;
    this.classe = e.classe;
    this.classeId = e.classeId;
    this.classeCode = e.classeCode;
    this.groupe = e.groupe;
    this.groupeCode = e.groupeCode;
    this.groupeId = e.groupeId;
    this.icone = e.icone;
    this.isModifie = e.isModifie;
    this.contenuDeSeance = e.contenuDeSeance;
    this.devoirAFaire = e.devoirAFaire;
    this.isAnnule = e.isAnnule;
    this.isAbsenceProf = e.isAbsenceProf;
    this.isFlexible = e.isFlexible;
  }
  get descriptionGenerate() {
    return this.classe + this.groupe + (this.salle.trim() !== "" ? " - " + this.salle : "");
  }
}
class Im {
  constructor(e = {}) {
    this.emploidutemps = Array.isArray(e.emploidutemps) ? e.emploidutemps.map(n => new lTZ(n)) : [];
    if (Object.isExists(e.periodeLoaded)) {
      this.periodeLoaded = {
        dateDebut: new Date(e.periodeLoaded.dateDebut),
        dateFin: new Date(e.periodeLoaded.dateFin)
      };
    }
    if (Object.isExists(e.periodeAvecTrousLoaded)) {
      this.periodeAvecTrousLoaded = {
        dateDebut: new Date(e.periodeAvecTrousLoaded.dateDebut),
        dateFin: new Date(e.periodeAvecTrousLoaded.dateFin)
      };
    }
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  setListEvents(e, n) {
    this.emploidutemps.edRemove(s => {
      const d = C_1.stringToDate(s.start_date);
      const h = C_1.stringToDate(s.end_date);
      return C_1.isPeriodeIncluded({
        dateDebut: d,
        dateFin: h
      }, n);
    });
    e.edSortBy("start_date").map(s => {
      this.emploidutemps.edInsertUpdate(s, d => JSON.stringify(d) === JSON.stringify(s));
    });
    if (n.avecTrous === true) {
      if (Object.isExists(this.periodeAvecTrousLoaded)) {
        if (n.dateDebut < this.periodeAvecTrousLoaded.dateDebut) {
          this.periodeAvecTrousLoaded = {
            ...this.periodeAvecTrousLoaded,
            dateDebut: n.dateDebut
          };
        }
        if (n.dateFin > this.periodeAvecTrousLoaded.dateFin) {
          this.periodeAvecTrousLoaded = {
            ...this.periodeAvecTrousLoaded,
            dateFin: n.dateFin
          };
        }
      } else {
        this.periodeAvecTrousLoaded = {
          ...n
        };
      }
    }
    if (Object.isExists(this.periodeLoaded)) {
      if (n.dateDebut < this.periodeLoaded.dateDebut) {
        this.periodeLoaded = {
          ...this.periodeLoaded,
          dateDebut: n.dateDebut
        };
      }
      if (n.dateFin > this.periodeLoaded.dateFin) {
        this.periodeLoaded = {
          ...this.periodeLoaded,
          dateFin: n.dateFin
        };
      }
    } else {
      this.periodeLoaded = {
        ...n
      };
    }
  }
}
class o_ {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Im(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  updateEDTStore(e, n, s, d) {
    if (typeof this[n] === "undefined") {
      this[n] = new Im();
    }
    this[n].setListEvents(e, s);
    Object.setExpired(this[n], d);
  }
}
export let hGx = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateEDTStore(n, s, d = {}) {
      let h = this.cloneDeep();
      h.updateEDTStore(n, s, d, this.expireableTTL);
      this.store = h;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: o_,
    className: "EmploiDuTempsStore"
  })], R);
  return R;
})();
export let Hhl = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.emploiDuTempsStore = n;
      this.http = s;
      this._datePipe = new ifA();
    }
    searchEvents(n, s, d, h, P = false) {
      const z = {
        dateDebut: this._datePipe.transform(n.dateDebut, "y-MM-dd"),
        dateFin: this._datePipe.transform(n.dateFin, "y-MM-dd"),
        avecTrous: n.avecTrous || false
      };
      let Ae = $ej.edDBUserSpecificKey(s, d, h);
      const Ve = Object.getEntity(this.emploiDuTempsStore.snapshot, Ae);
      let Tt = P;
      if (Object.isExists(Ve)) {
        const Vt = n.avecTrous === true ? Ve.periodeAvecTrousLoaded : Ve.periodeLoaded;
        if (Tt) {
          z.dateDebut = this._datePipe.transform(Vt.dateDebut, "y-MM-dd");
          z.dateFin = this._datePipe.transform(Vt.dateFin, "y-MM-dd");
        } else if (!Object.isExists(Vt) || Vt.dateDebut > n.dateDebut || n.dateFin > Vt.dateFin) {
          Tt = true;
        }
      }
      Tt ||= Object.isExpired(Ve);
      if (Tt) {
        return this.http.post(`${d}/${h}/emploidutemps`, z, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Vt => this.emploiDuTempsStore.updateEDTStore((Vt.data || []).map(Hn => new lTZ(Hn)), Ae, n)), (0, W.K)(Vt => this.catchBadResponse(Vt)));
      } else {
        return E.E;
      }
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(hGx), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let AUs = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.http = n;
      this.httpCacheService = s;
      this.authStore = d;
      this.espaceDeTravailStore = h;
      this.websocketService = P;
      this._datePipe = new ifA();
      this._displayNomPipe = new $t3();
      this._subscription = this.websocketService.wsMessages$.pipe((0, se.h)(z => typeof z !== "undefined" && Object.isExists(z.target) && z.target.espacesW.length > 0 && (z.author.idUser !== this.authStore.currentUser.id || z.author.profil !== this.authStore.currentUser.typeCompte || z.author.ogec !== this.authStore.currentUser.codeOgec)), (0, Z.b)(z => {
        let Ae = new VKt(z.data);
        this.espaceDeTravailStore.updateEspaceDeTravailStore({
          ajoutMessageTopic: Ae
        }, this.authStore.variantForCurrentUser, {
          idTopic: Ae.idTopic
        });
      })).subscribe();
    }
    ngOnDestroy() {
      if (this._subscription) {
        this._subscription.unsubscribe();
      }
    }
    listeEspacesTravail(n, s, d = false, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const z = Object.getEntity(this.espaceDeTravailStore.snapshot, P);
      let Ae = d || Object.isExpired(z);
      if (Object.isExists(z) && z.espacesDeTravail.length === 1 && z.espacesDeTravail[0].salleDesProfs === true) {
        Ae = true;
      }
      const Ve = `listeEspacesTravail_${n}_${s}`;
      if (Ae) {
        this.httpCacheService.delete(Ve);
      }
      if (Ae || h) {
        const Tt = Y5f.buildSimpleQueryString({
          cacheEnabled: 1,
          cacheKey: Ve,
          verbe: "get"
        });
        return this.http.post(`${s}/${n}/espacestravail`, {}, {
          params: Tt
        }).pipe((0, j.U)(Vt => {
          this.espaceDeTravailStore.updateEspaceDeTravailStore({
            listeEspacesTravail: Vt.data || [],
            account: this.authStore.currentUser
          }, P);
          return Vt.data || [];
        }), (0, W.K)(Vt => this.catchBadResponse(Vt)));
      }
      return E.E;
    }
    listerMembres(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const z = Object.getEntity(this.espaceDeTravailStore.snapshot, P);
      if (h || !z || Object.isExpired(z.membres[d])) {
        return this.http.post(`${s}/${n}/espacestravail/${d}/membres`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => this.espaceDeTravailStore.updateEspaceDeTravailStore({
          listerMembres: Ae.data || []
        }, P, {
          idEspaceDeTravail: d
        })), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      } else {
        return E.E;
      }
    }
    listTopics(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const z = Object.getEntity(this.espaceDeTravailStore.snapshot, P);
      if (h || !z || Object.isExpired(z.topics[d])) {
        return this.http.post(`${s}/${n}/espacestravail/${d}/topics`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => this.espaceDeTravailStore.updateEspaceDeTravailStore({
          listTopics: Ae.data
        }, P, {
          idEspaceDeTravail: d
        })), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      } else {
        return E.E;
      }
    }
    listDiscussion(n, s, d, h, P = false) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const Ae = Object.getEntity(this.espaceDeTravailStore.snapshot, z);
      if (P || !Ae || Object.isExpired(Ae.messages[h])) {
        return this.http.post(`${s}/${n}/espacestravail/${d}/topics/${h}/messages`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ve => this.espaceDeTravailStore.updateEspaceDeTravailStore({
          listDiscussion: Ve.data
        }, z, {
          idTopic: h
        })), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    ajoutMessageTopic(n, s, d, h, P, z = "") {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      let Ve = new VKt({
        idTopic: h,
        dateCreation: this._datePipe.transform(new Date(), "y-MM-dd HH:mm:ss"),
        isModere: false,
        contenu: YC.base64encode(P),
        auteur: new Yd({
          idAuteur: n,
          profil: s,
          nom: this.authStore.currentUser.nom,
          prenom: this.authStore.currentUser.prenom
        })
      });
      return this.http.post(`${s}/${n}/espacestravail/${d.id}/topics/${Ve.idTopic}/messages`, Ve, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Tt => Tt.code !== GL1.OK ? (0, I._)(() => new FwQ("...", Tt.code)) : (Ve.id = Tt.data.id, this.espaceDeTravailStore.updateEspaceDeTravailStore({
        ajoutMessageTopic: Ve
      }, Ae, {
        idTopic: h,
        idEspaceDeTravail: d.id
      }), this.websocketService.sendMessage("notification-message", Ve, new ln({
        espacesW: [{
          id: d.id
        }]
      }), new ni({
        action: `/{profile}/{idUser}/EspacesTravail/${d.id}?item=discussion&topic=${h}`,
        body: `${this._displayNomPipe.transform(this.authStore.currentUser, false, false, this.authStore.isFouE())} a ajout\xe9 un message dans l'espace de travail "<strong>${d.titre}</strong>"`,
        icon: "fa workplace",
        title: "Nouvelle discussion",
        type: "info"
      })), this.espaceDeTravailStore.updateFilActivitesStore(d.id, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD, VXF.CIBLE_TOPIC_MESSAGE, z), (0, S.of)(Ve))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    modifierMessageTopic(n, s, d, h, P, z = "") {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      let Ve = new VKt({
        ...P,
        idTopic: h,
        contenu: YC.base64encode(P.contenu)
      });
      return this.http.post(`${s}/${n}/espacestravail/${d.id}/topics/${h}/messages/${Ve.id}`, Ve, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Tt => Tt.code !== GL1.OK ? (0, I._)(() => new FwQ("...", Tt.code)) : (this.espaceDeTravailStore.updateFilActivitesStore(d.id, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_TOPIC_MESSAGE, z), this.espaceDeTravailStore.updateEspaceDeTravailStore({
        modifierMessageTopic: Ve
      }, Ae, {
        idTopic: h,
        idEspaceDeTravail: d.id
      }), (0, S.of)(true))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    effacerMessageTopic(n, s, d, h, P, z = "") {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d.id}/topics/${h}/messages/${P.id}`, {
        titleTopic: z
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Ve => Ve.code !== GL1.OK ? (0, I._)(() => new FwQ("...", Ve.code)) : (this.espaceDeTravailStore.updateFilActivitesStore(d.id, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_DELETE, VXF.CIBLE_TOPIC_MESSAGE, z), this.espaceDeTravailStore.updateEspaceDeTravailStore({
        effacerMessageTopic: P.id
      }, Ae, {
        idTopic: h,
        idEspaceDeTravail: d.id
      }), (0, S.of)(true))), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    rejoindreEspaceTravail(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d.id}/acces`, d, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(P => {
        if (P.code !== GL1.OK) {
          return (0, I._)(() => new FwQ("...", P.code));
        }
        this.espaceDeTravailStore.updateFilActivitesStore(d.id, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD, VXF.CIBLE_MEMBRE);
        let z = new zH9(d);
        z.estMembre = true;
        this.espaceDeTravailStore.updateEspaceDeTravailStore({
          rejoindreEspaceTravail: z
        }, h);
        return (0, S.of)(true);
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    quitterEspaceTravail(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d.id}/acces`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => {
        if (P.code !== GL1.OK) {
          return (0, I._)(() => new FwQ("...", P.code));
        }
        this.espaceDeTravailStore.updateFilActivitesStore(d.id, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_DELETE, VXF.CIBLE_MEMBRE);
        let z = new zH9(d);
        z.estMembre = false;
        this.espaceDeTravailStore.updateEspaceDeTravailStore({
          quitterEspaceTravail: z
        }, h);
        return (0, S.of)(true);
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    infosEspaceTravail(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const z = Object.getEntity(this.espaceDeTravailStore.snapshot, P);
      const Ae = Object.isExists(z) && z.espacesDeTravail.findIndex(Ve => Ve.id === d && Ve.fullLoaded === true) > -1;
      if (h || !Ae || Object.isExpired(z)) {
        return this.http.post(`${s}/${n}/espacestravail/${d}`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ve => this.espaceDeTravailStore.updateEspaceDeTravailStore({
          infoEspaceTravail: {
            ...Ve.data,
            fullLoaded: true
          }
        }, P)), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    ajoutEspaceTravail(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      let P = new zH9(d);
      P.resume = YC.base64encode(P.resume);
      return this.http.post(`${s}/${n}/espacestravail`, P, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("...", z.code)) : (this.espaceDeTravailStore.updateFilActivitesStore(d.id, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD, VXF.CIBLE_ACCUEIL), P.id = z.data.id, P.estMembre = true, P.estAdmin = true, this.espaceDeTravailStore.updateEspaceDeTravailStore({
        ajoutEspaceTravail: P
      }, h), (0, S.of)(true))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    modifierEspaceTravail(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      let P = new zH9(d);
      P.description = YC.base64encode(P.description);
      if (P.description.length > 1048576) {
        return (0, I._)(() => new FwQ("Enregistrement impossible. Votre saisie est trop grande (>1 Mo)."));
      } else {
        P.resume = YC.base64encode(P.resume);
        return this.http.post(`${s}/${n}/espacestravail/${d.id}`, P, {
          params: new Et().set("verbe", "put")
        }).pipe((0, j.U)(z => {
          d.estAdmin = z.data.estAdmin;
          P.estAdmin = z.data.estAdmin;
          this.espaceDeTravailStore.updateFilActivitesStore(d.id, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_ACCUEIL);
          this.espaceDeTravailStore.updateEspaceDeTravailStore({
            modifierEspaceTravail: P
          }, h);
          return P;
        }), (0, W.K)(z => this.catchBadResponse(z)));
      }
    }
    deleteEspaceTravail(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => P.code !== GL1.OK ? (0, I._)(() => new FwQ("...", P.code)) : (this.espaceDeTravailStore.updateEspaceDeTravailStore({
        deleteEspaceTravail: d.id
      }, h), (0, S.of)(true))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    getFilActivite(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const z = Object.getEntity(this.espaceDeTravailStore.snapshot, P);
      if (h || !z || Object.isExpired(z.activite[d])) {
        return this.http.post(`${s}/${n}/espacestravail/${d}/activites`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => this.espaceDeTravailStore.updateEspaceDeTravailStore({
          getFilActivite: Ae.data || []
        }, P, {
          idEspaceDeTravail: d
        })), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      } else {
        return E.E;
      }
    }
    deleteFilActivite(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d}/activites`, {
        all: h ? 1 : 0
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("...", z.code)) : (this.espaceDeTravailStore.updateEspaceDeTravailStore({
        deleteFilActivite: true
      }, P, {
        idEspaceDeTravail: d,
        isDeleteAll: h,
        idUser: n,
        typeUser: s
      }), (0, S.of)(true))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    ajoutMembres(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d}/membres`, {
        membres: h
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("...", z.code)) : (this.espaceDeTravailStore.updateEspaceDeTravailStore({
        ajoutMembres: h
      }, P, {
        idEspaceDeTravail: d
      }), (0, S.of)(true))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    supprimeMembre(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d}/membres/${h.profil}/${h.idMembre}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("...", z.code)) : (this.espaceDeTravailStore.updateEspaceDeTravailStore({
        supprimeMembre: h
      }, P, {
        idEspaceDeTravail: d
      }), (0, S.of)(true))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    ajouterTopic(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d}/topics`, {
        idEspace: d,
        titre: h.titre
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Ae => Ae.code !== GL1.OK ? (0, I._)(() => new FwQ("...", Ae.code)) : (h.id = Ae.data.id, h.dateCreation = this._datePipe.transform(new Date(), "y-MM-dd HH:mm:ss"), h.nbMessages = 0, h.idAuteur = n, h.profilAuteur = s, this.espaceDeTravailStore.updateFilActivitesStore(d, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD, VXF.CIBLE_TOPIC, h.titre), this.espaceDeTravailStore.updateEspaceDeTravailStore({
        ajouterTopic: h
      }, P, {
        idEspaceDeTravail: d
      }), (0, S.of)(true))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    modifierTopic(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d}/topics/${h.id}`, h, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("...", z.code)) : (this.espaceDeTravailStore.updateFilActivitesStore(d, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_TOPIC, h.titre), this.espaceDeTravailStore.updateEspaceDeTravailStore({
        modifierTopic: h
      }, P, {
        idEspaceDeTravail: d
      }), (0, S.of)(true))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    supprimerTopic(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      return this.http.post(`${s}/${n}/espacestravail/${d}/topics/${h.id}`, h, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("...", z.code)) : (this.espaceDeTravailStore.updateFilActivitesStore(d, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_DELETE, VXF.CIBLE_TOPIC, h.titre), this.espaceDeTravailStore.updateEspaceDeTravailStore({
        supprimerTopic: h
      }, P, {
        idEspaceDeTravail: d
      }), (0, S.of)(true))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    listeAgendaOuPostItsEspacesTravail(n, s = false) {
      let d = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", `listeAgendaOuPostItsEspacesTravail_${n}`).set("cacheTTL", `${X9o.uneJournee}`);
      if (s) {
        this.httpCacheService.delete(d.cacheKey);
      }
      return this.http.post(`${n}/espacesTravail`, {}, {
        params: d
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nl), t.LFG(CnD), t.LFG(EYm), t.LFG(sm));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let pGx = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      if (Object.isExists(n) && !Object.isExpired(n)) {
        Object.setExpired(n, 0);
        this.store = n;
      }
      super.markStoreAsExpired();
    }
    updateSallesStore(n) {
      let s = new S0({
        salles: n
      });
      Object.setExpired(s, this.expireableTTL);
      this.store = s;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: S0,
    className: "SallesStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let FrG = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.store = n;
      this.http = s;
    }
    listeSalles(n = false) {
      if (n || Object.isExpired(this.store.snapshot)) {
        return this.http.post("salles", {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(s => this.store.updateSallesStore(s.data)), (0, W.K)(s => this.catchBadResponse(s)));
      } else {
        return E.E;
      }
    }
    getSalleById(n) {
      return this.listeSalles().pipe((0, Pe.d)(null), (0, j.U)(s => this.store.snapshot.salles.find(d => d.id === n)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pGx), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class T_ {
  constructor(e = {
    date: "",
    montant: 0
  }) {
    this.date = e.date;
    this.montant = e.montant;
  }
}
class V0 {
  constructor(e = {
    date: "",
    libelle: "",
    infoComp: "",
    montant: 0,
    lettrage: ""
  }) {
    this.date = e.date;
    this.libelle = e.libelle;
    this.infoComp = e.infoComp;
    this.montant = e.montant;
    this.lettrage = e.lettrage;
    if (typeof e.idPieceJointe !== "undefined") {
      this.idPieceJointe = e.idPieceJointe;
    }
    if (Array.isArray(e.ecritures)) {
      this.ecritures = e.ecritures.map(n => new V0(n));
    }
  }
}
class Ty {
  constructor(e = {
    acompte: false,
    code: "",
    detail: "",
    id: "",
    img: "",
    infoComplementaire: "",
    libelle: "",
    montant: 0,
    montantModifiable: false,
    quantiteModifiable: false,
    typePaiement: ""
  }) {
    this.acompte = e.acompte;
    this.code = e.code;
    this.detail = e.detail;
    this.id = e.id;
    this.img = e.img;
    this.infoComplementaire = e.infoComplementaire;
    this.libelle = e.libelle;
    this.montant = Math.round(e.montant * 100) / 100;
    this.montantModifiable = e.montantModifiable;
    this.quantiteModifiable = e.quantiteModifiable;
    this.typePaiement = e.typePaiement;
    if (typeof e.idEleve !== "undefined") {
      this.idEleve = +e.idEleve;
    }
    if (typeof e.idServiceClasse !== "undefined") {
      this.idServiceClasse = e.idServiceClasse;
    }
    if (typeof e.soldeCompte !== "undefined") {
      this.soldeCompte = e.soldeCompte;
    }
    if (typeof e.libellePanier !== "undefined") {
      this.libellePanier = e.libellePanier;
    }
  }
}
class Zv extends Ty {
  constructor(e = {
    acompte: false,
    code: "",
    detail: "",
    id: "",
    img: "",
    infoComplementaire: "",
    libelle: "",
    montant: 0,
    montantModifiable: false,
    quantiteModifiable: false,
    typePaiement: "",
    quantite: 0,
    uid: "",
    idPaiement: ""
  }) {
    super(e);
    this.quantite = e.quantite;
    this.idPaiement = e.idPaiement;
    this.uid = e.uid;
  }
  isValide() {
    return this.montant > 0 && this.quantite > 0;
  }
  calculTotal() {
    return this.montant * this.quantite;
  }
  updateQtPaiementPanier(e = "+", n = 1) {
    if (!this.quantiteModifiable) {
      return false;
    }
    if (e === "+") {
      this.quantite += n;
    } else if (e === "-") {
      if (this.quantite === 0) {
        return false;
      }
      this.quantite -= n;
    } else if (e === "r") {
      this.quantite = n;
    }
    return true;
  }
}
export class Z9G {
  constructor(e = {
    montantMinimum: 0
  }) {
    this.listePaiementPanier = Array.isArray(e.listePaiementPanier) ? e.listePaiementPanier.map(n => new Zv(n)) : [];
    this.montantMinimum = e.montantMinimum >= 0 ? e.montantMinimum : 0;
  }
  static createPanier(e) {
    return new Z9G(Object.isExists(e) ? {
      montantMinimum: +Kg5.getModuleParametre(qzA.PAIEMENT_EN_LIGNE, "montantMinimum", e)
    } : undefined);
  }
  calculTotal(e = "montant") {
    let n = false;
    let s = 0;
    s = this.listePaiementPanier.reduce((d, h) => n ? 0 : isNaN(h.montant) || isNaN(h.quantite) ? (n = true, 0) : e === "montant" ? d + h.calculTotal() : e === "quantite" ? d + h.quantite : 0, s);
    if (n) {
      return 0;
    } else {
      return s;
    }
  }
  calculQtTotal() {
    let e = false;
    let n = 0;
    n = this.listePaiementPanier.reduce((s, d) => e ? 0 : isNaN(d.montant) || isNaN(d.quantite) ? (e = true, 0) : s + d.montant * d.quantite, n);
    if (e) {
      return 0;
    } else {
      return n;
    }
  }
  addPaiementToPanier(e, n = true, s = 1) {
    let d = {
      isOk: true,
      message: "",
      action: DOJ.genericWarning
    };
    let h = this.listePaiementPanier.find(P => P.id === e.id);
    if (n && Object.isExists(h)) {
      if (h.quantiteModifiable) {
        d.message = "Ce service est déjà présent dans votre panier : sa quantité a été modifiée";
        h.quantite += s;
      } else {
        d.message = "Attention : ce service est déjà présent dans votre panier";
        d.isOk = false;
      }
    } else {
      h = new Zv(e);
      h.quantite = s;
      h.idPaiement = e.id;
      h.uid = this.calculUID();
      this.listePaiementPanier.push(h);
      d.message = "Le service a été ajouté au panier";
      d.action = DOJ.genericSuccess;
    }
    return d;
  }
  removePaiementFromPanier(e) {
    let n = {
      isOk: false,
      message: "",
      action: DOJ.genericWarning
    };
    let s = this.listePaiementPanier.findIndex(d => d.uid === e.uid);
    if (s > -1) {
      this.listePaiementPanier.splice(s, 1);
      n.message = "Le service a été supprimé du panier";
      n.action = DOJ.genericSuccess;
      n.isOk = true;
    }
    return n;
  }
  updateQtPaiementPanier(e, n = "+", s = 1) {
    let d = {
      isOk: false,
      message: "",
      action: DOJ.genericWarning
    };
    if (!e.quantiteModifiable) {
      return d;
    }
    let h = this.listePaiementPanier.findIndex(P => P.uid === e.uid);
    if (h > -1) {
      let P = new Zv(this.listePaiementPanier[h]);
      if (P.updateQtPaiementPanier(n, s)) {
        this.listePaiementPanier[h] = P;
        d.message = "Ce service est déjà présent dans votre panier. Sa quantité a été modifiée";
        d.action = DOJ.genericSuccess;
        d.isOk = true;
      }
    }
    return d;
  }
  updateMontantPaiementPanier(e, n) {
    if (!e.montantModifiable) {
      return false;
    }
    let s = this.listePaiementPanier.findIndex(d => d.uid === e.uid);
    if (s > -1) {
      let d = new Zv(this.listePaiementPanier[s]);
      d.montant = n;
      this.listePaiementPanier[s] = d;
      return true;
    }
    return false;
  }
  viderPanier() {
    this.listePaiementPanier.length = 0;
  }
  isPanierMontantMinimum() {
    return this.calculTotal() >= this.montantMinimum;
  }
  isValide() {
    if (!this.isPanierMontantMinimum()) {
      return false;
    }
    for (let e of this.listePaiementPanier) {
      if (!e.isValide()) {
        return false;
      }
    }
    return true;
  }
  calculUID() {
    return `${new Date().getTime()}-${Math.floor(Math.random() * 1000000000000000)}`;
  }
}
class Rm {
  constructor(e = {
    libelle: ""
  }) {
    this.libelle = e.libelle;
    this.paiements = Array.isArray(e.paiements) ? e.paiements.map(n => new Ty(n)) : [];
  }
}
class My {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Z9G(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export class ind {
  constructor(e = {
    id: 0,
    idEleve: 0,
    typeCompte: "",
    disponible: false,
    montantVersement: 0,
    montantModifiable: false,
    quantiteModifiable: false,
    idServiceClasse: 0,
    libelle: "",
    libelleCompte: "",
    solde: 0
  }) {
    this.id = e.id;
    this.idEleve = e.idEleve;
    this.typeCompte = e.typeCompte;
    this.disponible = e.disponible;
    this.montantVersement = e.montantVersement;
    this.montantModifiable = e.montantModifiable;
    this.quantiteModifiable = e.quantiteModifiable;
    this.idServiceClasse = e.idServiceClasse;
    this.libelle = e.libelle;
    this.libelleCompte = e.libelleCompte;
    this.solde = e.solde;
    if (typeof e.codeCompte !== "undefined") {
      this.codeCompte = e.codeCompte;
    }
    if (Array.isArray(e.accomptesEtCautions)) {
      this.accomptesEtCautions = [...e.accomptesEtCautions];
    }
    if (Array.isArray(e.echeances)) {
      this.echeances = e.echeances.map(n => new T_(n));
    }
    if (Array.isArray(e.avenir)) {
      this.avenir = e.avenir.map(n => new V0(n));
    }
    if (Array.isArray(e.ecritures)) {
      this.ecritures = e.ecritures.map(n => new V0(n));
    }
  }
  genererPaiement(e, n) {
    let s = true;
    let d = false;
    let h = "service";
    let P = "";
    let z = this.libelle;
    let Ae = this.id.toString();
    if (this.typeCompte !== f3K.pm && this.typeCompte !== f3K.pmactivite) {
      this.montantModifiable = true;
      this.quantiteModifiable = false;
    }
    if (this.idEleve === 0) {
      this.montantModifiable = true;
      this.quantiteModifiable = false;
    }
    if (this.typeCompte === "standard") {
      P = "SOLDE";
      if (Object.isExists(n)) {
        const Ve = Kg5.getModuleParametre(qzA.PAIEMENT_EN_LIGNE, "libelleSoldeDebiteur", n);
        const Tt = Kg5.getModuleParametre(qzA.PAIEMENT_EN_LIGNE, "libelleSoldeCrediteur", n);
        z = this.solde >= 0 ? Tt : Ve;
      } else {
        z = this.solde >= 0 ? "Versement sur votre compte" : "Règlement du solde de votre compte";
      }
      h = "solde";
    }
    if (this.typeCompte === f3K.pm || this.typeCompte === f3K.pmactivite) {
      P = this.codeCompte;
      Ae = `${P}_${this.id}`;
      s = this.montantModifiable;
      d = this.quantiteModifiable;
      h = "pm";
    }
    return new Ty({
      acompte: false,
      code: P,
      detail: "",
      id: Ae,
      img: "",
      infoComplementaire: "",
      libelle: z,
      montant: e,
      montantModifiable: s,
      quantiteModifiable: d,
      typePaiement: h,
      idEleve: this.idEleve
    });
  }
}
class Fm {
  constructor(e = {
    paiementSoldeCrediteur: false,
    porteMonnaie: false
  }) {
    this.paiementSoldeCrediteur = e.paiementSoldeCrediteur;
    this.porteMonnaie = e.porteMonnaie;
  }
}
export class gM5 {
  constructor(e = {
    demandeencours: false,
    modedereglement: ""
  }) {
    this.demandeencours = e.demandeencours;
    this.modedereglement = e.modedereglement;
    if (typeof e.iban !== "undefined") {
      this.iban = e.iban;
    }
    if (typeof e.domiciliation !== "undefined") {
      this.domiciliation = e.domiciliation;
    }
    if (typeof e.tire !== "undefined") {
      this.tire = e.tire;
    }
  }
}
export class _8B {
  constructor(e = {}) {
    this.comptes = Array.isArray(e.comptes) ? e.comptes.map(n => new ind(n)) : [];
    this.parametrage = new Fm(e.parametrage);
    this.familleModeReglement = new gM5(e.familleModeReglement);
    this.factures = Array.isArray(e.factures) ? e.factures.map(n => new eD9(n)) : [];
    this.hasAtLeastOnePM = this.comptes.some(n => n.typeCompte !== f3K.s && n.disponible);
    this.hasCompteSMouvemente = this.comptes.some(n => {
      return n.typeCompte === f3K.s && n.disponible && n.ecritures?.length > 0;
    });
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class Og {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new _8B(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let XTY = (() => {
  let R = class extends Gd {
    constructor(n, s) {
      super(n, s);
      this.storage = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
          this._lastModified = undefined;
          this.setStorage(n).catch(h => console.error("FinanceStore.markStoreAsExpired setStorage : ", "FinanceStore", h));
        }
      }
    }
    updateFinanceStore(n, s, d) {
      let h = this.cloneDeep();
      if (!Object.isExists(h[s])) {
        h[s] = new _8B();
      }
      switch (d) {
        case "modeDeReglement":
          h[s].familleModeReglement = new gM5(n);
          break;
        case "factures":
          h[s].factures = Array.isArray(n) ? n.map(P => new eD9(P)) : [];
          break;
        case "getComptes":
          {
            const P = new _8B(n);
            h[s].comptes = P.comptes;
            h[s].parametrage = P.parametrage;
            break;
          }
      }
      Object.setExpired(h[s], this.expireableTTL);
      this.store = h;
      this.setStorage(h).catch(P => console.error("FinanceStore.updateFinanceStore setStorage : ", P));
    }
    markAsExpired(n) {
      const s = this.cloneDeep();
      if (Object.isExists(s[n])) {
        Object.setExpired(s[n], 0);
        this.store = s;
        this.setStorage(s).catch(d => console.error("FinanceStore.markAsExpired setStorage : ", d));
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG("StorageService"), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Og,
    className: "FinanceStore",
    idDBKey: "finances"
  })], R);
  return R;
})();
export let wgl = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.authStore = n;
      this.financeStore = s;
      this.http = d;
    }
    refreshFinances(n, s, d, h = "detail", P = false, z = false) {
      const Ae = $ej.edDBUserSpecificKey(n, s, d);
      const Ve = Object.getEntity(this.financeStore.snapshot, Ae);
      if (z || Object.isExpired(Ve)) {
        const Tt = this.getComptes(h);
        const Vt = this.factures();
        let Hn = [Tt];
        if (IDb.isFamille(s)) {
          Hn.push(this.familleModeDeReglement());
          if (Kg5.isModuleEnabled(this.authStore.currentUser, qzA.FACTURES)) {
            Hn.push(Vt);
          }
        }
        return (0, B.z)(...Hn).pipe((0, j.U)(() => {}), (0, W.K)(Ci => this.catchBadResponse(Ci)));
      }
      return E.E;
    }
    familleModeDeReglement() {
      return this.http.post("famillemodedereglement", {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(n => this.financeStore.updateFinanceStore(n.data, this.authStore.variantForCurrentUser, "modeDeReglement")), (0, W.K)(n => this.catchBadResponse(n)));
    }
    getComptes(n = "detail") {
      return this.http.post(`comptes/${n}`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(s => {
        if (n !== "sansdetails") {
          this.financeStore.updateFinanceStore(s.data, this.authStore.variantForCurrentUser, "getComptes");
        }
        return new _8B(s.data);
      }), (0, W.K)(s => this.catchBadResponse(s)));
    }
    factures(n) {
      let s = Y5f.buildSimpleQueryString({
        verbe: "get"
      });
      if (Object.isExists(n)) {
        s = s.set("archive", n);
      }
      return this.http.post("factures", {}, {
        params: s
      }).pipe((0, j.U)(d => this.financeStore.updateFinanceStore(d.data, this.authStore.variantForCurrentUser, "factures")), (0, W.K)(d => this.catchBadResponse(d)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(XTY), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class hf {
  constructor(e = {
    idClasse: 0,
    codeClasse: "",
    libelleClasse: ""
  }) {
    this.idClasse = e.idClasse;
    this.codeClasse = e.codeClasse;
    this.libelleClasse = e.libelleClasse;
  }
}
class Pg {
  constructor(e = {
    nom: "",
    prenom: ""
  }) {
    this.nom = e.nom;
    this.prenom = e.prenom;
  }
}
export let bqC = (() => {
  let R = class {
    constructor(n = {
      id: 0,
      classeId: 0,
      classeCode: "",
      classeLibelle: "",
      nom: "",
      prenom: "",
      particule: "",
      photo: ""
    }) {
      this.id = n.id;
      this.classeId = n.classeId;
      this.classeCode = n.classeCode;
      this.classeLibelle = n.classeLibelle;
      this.nom = n.nom;
      this.prenom = n.prenom;
      this.particule = n.particule;
      this.photo = n.photo;
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDGroupeFlexibleEleve"
  })], R);
  return R;
})();
export class HR_ {
  constructor(e = {
    id: 0,
    idGroupe: 0,
    dateDebut: "",
    dateFin: "",
    isCurrent: false,
    isInscriptionLibre: false,
    nbElevesMax: 0,
    dateLimiteInscription: ""
  }) {
    this.id = e.id;
    this.idGroupe = e.idGroupe;
    this.dateDebut = e.dateDebut;
    this.dateFin = e.dateFin;
    this.isCurrent = e.isCurrent;
    this.isInscriptionLibre = e.isInscriptionLibre;
    this.nbElevesMax = e.nbElevesMax;
    this.dateLimiteInscription = e.dateLimiteInscription;
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new bqC(n)) : [];
    if (typeof e.isInscrit !== "undefined") {
      this.isInscrit = e.isInscrit;
    }
  }
}
export class oQM {
  constructor(e = {
    id: 0,
    libelle: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.classes = Array.isArray(e.classes) ? e.classes.map(n => new hf(n)) : [];
    this.enseignants = Array.isArray(e.enseignants) ? e.enseignants.map(n => new Pg(n)) : [];
    this.periodes = Array.isArray(e.periodes) ? e.periodes.map(n => new HR_(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  isVersionDetaillee() {
    return this.periodes.length > 0 || this.classes.length > 0 || this.enseignants.length > 0;
  }
}
class Ig {
  constructor(e = {}) {
    this.liste = Array.isArray(e.liste) ? e.liste.map(n => new oQM(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class M_ {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Ig(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let WME = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(s);
      this.authStore = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && (Object.isExpired(n[h]) || (Object.setExpired(n[h], 0), s = true), Array.isArray(n[h].liste))) {
            for (let P of n[h].liste) {
              if (!Object.isExpired(P)) {
                Object.setExpired(P, 0);
                s = true;
              }
            }
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateGroupeFlexibleStore(n, s, d, h = {}) {
      let z;
      let P = this.cloneDeep();
      switch (d) {
        case "getGroupesFlexibles":
          if (Array.isArray(n)) {
            if (Object.isExists(P[s])) {
              n.forEach(Ae => {
                Ae = new oQM(Ae);
                let Ve = P[s].liste.findIndex(Tt => Tt.id === Ae.id);
                if (Ve > -1) {
                  z = P[s].liste[Ve];
                  if (!z.isVersionDetaillee() || Ae.isVersionDetaillee()) {
                    P[s].liste[Ve] = Ae;
                  }
                } else {
                  P[s].liste.push(Ae);
                }
              });
            } else {
              P[s] = new Ig({
                liste: n.map(Ae => new oQM(Ae))
              });
            }
            Object.setExpired(P[s], this.expireableTTL);
          }
          break;
        case "getDetailGroupeFlexible":
          n = new oQM(n);
          Object.setExpired(n, this.expireableTTL);
          if (!Object.isExists(P[s])) {
            P[s] = new Ig();
          }
          P[s].liste.edInsertUpdate(n, Ve => Ve.id === n.id);
          break;
        case "savePeriode":
          n = new HR_(n);
          z = P[s].liste.find(Ae => Ae.id === n.idGroupe);
          if (Object.isExists(z)) {
            z.periodes.edInsertUpdate(n, Ae => Ae.id === n.id);
            Object.setExpired(z, this.expireableTTL);
          }
          break;
        case "deletePeriode":
          z = P[s].liste.find(Ae => Ae.id === n.idGroupe);
          if (Object.isExists(z)) {
            let Ae = z.periodes.findIndex(Ve => Ve.id === n.id);
            if (Ae > -1) {
              z.periodes.splice(Ae, 1);
            }
            Object.setExpired(z, this.expireableTTL);
          }
          break;
        case "inscrireEleve":
          n = new bqC(n);
          z = P[s].liste.find(Ae => Ae.id === h.idGroupe);
          if (Object.isExists(P[s])) {
            let Ae = z.periodes.find(Ve => Ve.id === h.idPeriode);
            if (this.authStore.isProfesseur()) {
              if (Object.isExists(Ae) && Ae.eleves.findIndex(Ve => Ve.id === n.id) === -1) {
                Ae.eleves.push(n);
              }
            } else {
              Ae.isInscrit = true;
            }
            Object.setExpired(z, this.expireableTTL);
          }
      }
      this.store = P;
    }
    selectListeGroupesFlexibles(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.liste;
        } else {
          return [];
        }
      });
    }
    getListeGroupesFlexibles(n) {
      const s = Object.getEntity(this.snapshot, n);
      if (s) {
        return s.liste;
      } else {
        return [];
      }
    }
    getDetailGroupeFlexible(n, s) {
      const d = Object.getEntity(this.snapshot, n);
      if (d) {
        return d.liste.find(h => h.id === s);
      } else {
        return undefined;
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: M_,
    className: "GroupeFlexibleStore"
  })], R);
  return R;
})();
export let K6q = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.http = n;
      this.httpCacheService = s;
      this.authStore = d;
      this.groupeFlexibleStore = h;
    }
    getGroupesFlexibles(n, s, d, h, P, z = false) {
      const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, typeof P !== "undefined" ? [P] : []);
      const Tt = Object.getEntity(this.groupeFlexibleStore.snapshot, Ve);
      if (z || Object.isExpired(Tt)) {
        let Vt = {};
        let Hn = typeof P !== "undefined" ? P : 0;
        if (typeof d !== "undefined") {
          Vt.dateDebut = d;
        }
        if (typeof h !== "undefined") {
          Vt.dateFin = h;
        }
        let Ci = new Et().set("verbe", "get").set("idEleve", Hn.toString());
        return this.http.post("groupesFlexibles", Vt, {
          params: Ci
        }).pipe((0, j.U)(fr => {
          this.groupeFlexibleStore.updateGroupeFlexibleStore(fr.data, Ve, "getGroupesFlexibles");
        }), (0, W.K)(fr => this.catchBadResponse(fr)));
      }
      return E.E;
    }
    getDetailGroupeFlexible(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const z = Object.getEntity(this.groupeFlexibleStore.snapshot, P);
      let Ae = Object.isExists(z) ? z.liste.find(Ve => Ve.id === d) : undefined;
      if (h || !z || Object.isExpired(Ae)) {
        return this.http.post(`groupesFlexibles/${d}`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ve => this.groupeFlexibleStore.updateGroupeFlexibleStore(Ve.data, P, "getDetailGroupeFlexible")), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    getListElevesPossiblesGroupeFlexible(n, s = true) {
      const d = `listeElevesPossiblesGroupeFlexl_${n}`;
      if (s) {
        this.httpCacheService.delete(d);
      }
      const h = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: d,
        verbe: "get"
      });
      return this.http.post(`groupesFlexibles/${n}/elevesPossibles`, {}, {
        params: h
      }).pipe((0, j.U)(z => z.data), (0, W.K)(z => this.catchBadResponse(z)));
    }
    savePeriode(n) {
      return this.http.post(n.id > 0 ? `groupesFlexibles/${n.idGroupe}/periode/${n.id}` : `groupesFlexibles/${n.idGroupe}/periodes`, n, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(d => {
        if (d.code === GL1.OK) {
          this.groupeFlexibleStore.updateGroupeFlexibleStore(d.data, this.authStore.variantForCurrentUser, "savePeriode");
          return (0, S.of)(true);
        }
        {
          const h = Object.isExists(d.message) ? d.message : "Une erreur est survenue lors de l'enregistrement de la période, merci de réessayer !";
          return (0, I._)(() => new FwQ(h, d.code));
        }
      }), (0, W.K)(d => this.catchBadResponse(d)));
    }
    deletePeriode(n) {
      return this.http.post(`groupesFlexibles/${n.idGroupe}/periode/${n.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(d => {
        if (d.code === GL1.OK) {
          this.groupeFlexibleStore.updateGroupeFlexibleStore(n, this.authStore.variantForCurrentUser, "deletePeriode");
          return (0, S.of)(true);
        }
        {
          const h = Object.isExists(d.message) ? d.message : "Une erreur est survenue lors de la suppression, merci de réessayer !";
          return (0, I._)(() => new FwQ(h, d.code));
        }
      }), (0, W.K)(d => this.catchBadResponse(d)));
    }
    inscrireEleve(n, s, d, h, P) {
      let z = `groupesFlexibles/${P}/periode/${h}/inscription/${d.id}`;
      let Ae = this.authStore.isFamille() ? [d.id] : [];
      const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, Ae);
      return this.http.post(z, {}, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Tt => {
        if (Tt.code === GL1.OK) {
          this.groupeFlexibleStore.updateGroupeFlexibleStore(d, Ve, "inscrireEleve", {
            idPeriode: h,
            idGroupe: P
          });
          return (0, S.of)(true);
        }
        {
          const Vt = Object.isExists(Tt.message) ? Tt.message : "Une erreur est survenue lors de votre inscription, merci de réessayer !";
          return (0, I._)(() => new FwQ(Vt, Tt.code));
        }
      }), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    inscrireEleveMultiPeriodes(n, s) {
      return this.http.post(`groupesFlexibles/inscriptions/${n}`, {
        periodes: s
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(h => {
        if (h.code === GL1.OK) {
          return (0, S.of)(true);
        }
        {
          const P = Object.isExists(h.message) ? h.message : "Une erreur est survenue lors de votre inscription, merci de réessayer !";
          return (0, I._)(() => new FwQ(P, h.code));
        }
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nl), t.LFG(CnD), t.LFG(WME));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let LD8 = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(s);
      this.authStore = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h])) {
            const P = Object.keys(n[h]);
            for (let z of P) {
              if (Object.isExists(n[h][z]) && !Object.isExpired(n[h][z])) {
                Object.setExpired(n[h][z], 0);
                s = true;
              }
            }
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateLSUStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      const z = this.authStore.variantForCurrentUser;
      switch (d) {
        case "liste":
          P.setCatalogue(n, s, z);
          Object.setExpired(P[z][s], this.expireableTTL);
          break;
        case "updateC":
        case "createC":
          P.setCompetence(h.matiere, h.competence, s, z);
          break;
        case "deleteC":
          P.deleteCompetence(h.idMatiere, h.idCompetence, s, z);
          break;
        case "updateEP":
        case "createEP":
          P.setEP(h.matiere, h.competence, h.elemProg, s, z);
          break;
        case "updateCA":
        case "createCA":
          P.setCA(h.matiere, h.competence, h.elemProg, h.ca, s, z);
          break;
        case "deleteEP":
        case "deleteCA":
          P.deleteEPCA(h.idMatiere, h.idCompetence, h.elemProg, h.ca, s, z);
      }
      this.store = P;
    }
    markAsExpired(n) {
      let s = this.cloneDeep();
      const d = this.authStore.variantForCurrentUser;
      if (Object.isExists(s[d]) && Object.isExists(s[d][n])) {
        Object.setExpired(s[d][n], 0);
        this.store = s;
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: v0,
    className: "LsuStore"
  })], R);
  return R;
})();
export let s6h = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.authStore = n;
      this.lsuStore = s;
      this.http = d;
    }
    get(n, s = false) {
      const d = Object.getEntity(this.lsuStore.snapshot, this.authStore.variantForCurrentUser);
      if (s || Object.isExpired(d && d[n] || undefined)) {
        return this.http.post(`${n}/competences/catalogue`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(P => this.lsuStore.updateLSUStore(P.data.catalogue, n, "liste")), (0, W.K)(P => this.catchBadResponse(P)));
      } else {
        return E.E;
      }
    }
    enregistreCompetence(n, s, d) {
      return this.http.post(`${n}/catalogue/${s.id}/competences`, {
        libelle: d.libelle
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(P => {
        this.lsuStore.updateLSUStore(undefined, n, "createC", {
          matiere: s,
          competence: {
            ...d,
            id: P.data.id,
            isSysteme: P.data.isSysteme,
            editable: false,
            temporaire: false
          }
        });
        return P.data.id;
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    modifieCompetence(n, s, d) {
      return this.http.post(`${n}/catalogue/${s.id}/competences/${d.id}`, {
        libelle: d.libelle
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.lsuStore.updateLSUStore(undefined, n, "updateC", {
        matiere: s,
        competence: {
          ...d,
          editable: false
        }
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la modification de la compétence", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    supprimeCompetence(n, s, d) {
      return this.http.post(`${n}/catalogue/${s}/competences/${d}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.lsuStore.updateLSUStore(undefined, n, "deleteC", {
        idMatiere: s,
        idCompetence: d
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la suppression de votre compétence", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    modifieElementProgramme(n, s, d, h) {
      return this.http.post(`${n}/catalogue/${s.id}/elements/${h.idOrigineCatalogue}`, h, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(z => z.code === GL1.OK ? (this.lsuStore.updateLSUStore(undefined, n, "updateEP", {
        matiere: s,
        competence: d,
        elemProg: h
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la modification de l'élément de programme", z.code, DOJ.genericError))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    enregistreElementProgramme(n, s, d, h) {
      return this.http.post(`${n}/catalogue/${s.id}/competences/${d.id}/elements`, h, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(z => {
        h = new tnE({
          ...h,
          ...z.data
        });
        this.lsuStore.updateLSUStore(undefined, n, "createEP", {
          matiere: s,
          competence: d,
          elemProg: h
        });
        return h;
      }), (0, W.K)(z => this.catchBadResponse(z)));
    }
    supprimeElementProgramme(n, s, d, h) {
      return this.http.post(`${n}/catalogue/${s}/elements/${h.idOrigineCatalogue}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(z => z.code === GL1.OK ? (this.lsuStore.updateLSUStore(undefined, n, "deleteEP", {
        idMatiere: s,
        idCompetence: d,
        elemProg: h,
        ca: undefined
      }), (0, S.of)(true)) : (0, I._)(new FwQ("Une erreur s'est produite lors de la suppression de l'élément de programme", z.code, DOJ.genericError))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    modifieCA(n, s, d, h, P) {
      return this.http.post(`${n}/catalogue/${s.id}/elements/${h.idOrigineCatalogue}/ca/${P.id}`, P, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (this.lsuStore.updateLSUStore(undefined, n, "updateCA", {
        matiere: s,
        competence: d,
        elemProg: h,
        ca: P
      }), (0, S.of)(true)) : (0, I._)(new FwQ("Une erreur s'est produite lors de la modification de la connaissance associée", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    enregistreCA(n, s, d, h, P) {
      return this.http.post(`${n}/catalogue/${s.id}/elements/${h.idOrigineCatalogue}/ca`, P, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(Ae => {
        P = new a_R({
          ...P,
          ...Ae.data
        });
        this.lsuStore.updateLSUStore(undefined, n, "createCA", {
          matiere: s,
          competence: d,
          elemProg: h,
          ca: P
        });
        return P;
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    supprimeConnaissanceAssociee(n, s, d, h, P) {
      return this.http.post(`${n}/catalogue/${s}/elements/${h.idOrigineCatalogue}/ca/${P.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (this.lsuStore.updateLSUStore(undefined, n, "deleteCA", {
        idMatiere: s,
        idCompetence: d,
        elemProg: h,
        ca: P
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la suppression de l'élément de programme", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(LD8), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class jv {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
export class lvy {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
class Py {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
  }
}
export class PtT {
  constructor(e = {
    code: "",
    date: "",
    nomAuteur: "",
    prenomAuteur: "",
    texte: "",
    type: "",
    isPartieEffectueeEtranger: false,
    nbSemaines: 0
  }) {
    this.code = e.code;
    this.date = e.date;
    this.nomAuteur = e.nomAuteur;
    this.prenomAuteur = e.prenomAuteur;
    this.texte = e.texte;
    this.type = e.type;
    this.isPartieEffectueeEtranger = e.isPartieEffectueeEtranger;
    this.nbSemaines = e.nbSemaines;
  }
}
export class ftv {
  constructor(e = {
    code: "",
    isActif: false,
    libelle: "",
    type: ""
  }) {
    this.code = e.code;
    this.isActif = e.isActif;
    this.libelle = e.libelle;
    this.type = e.type;
  }
}
class kg {
  constructor(e = {
    code: "",
    libelle: ""
  }) {
    this.code = e.code;
    if (typeof e.evaluation !== "undefined") {
      this.evaluation = e.evaluation;
    }
    this.libelle = e.libelle;
  }
}
export class Dqy {
  constructor(e = {
    code: "",
    libelle: "",
    contenu: ""
  }) {
    this.code = e.code;
    this.libelle = e.libelle;
    if (Object.isExists(e.contenu)) {
      this.contenu = e.contenu;
    }
    if (Object.isExists(e.nbMaxCaracteres)) {
      this.nbMaxCaracteres = e.nbMaxCaracteres;
    }
  }
  get contenuDecode() {
    return YC.base64decode(this.contenu);
  }
}
class Fp {
  constructor(e = {
    code: "",
    codeInterne: "",
    modaliteElection: "",
    libelle: "",
    competences: [],
    appreciations: []
  }) {
    this.code = e.code;
    this.codeInterne = e.codeInterne;
    this.modaliteElection = e.modaliteElection;
    this.libelle = e.libelle;
    this.competences = Array.isArray(e.competences) ? e.competences.map(n => new kg(n)) : [];
    this.appreciations = Array.isArray(e.appreciations) ? e.appreciations.map(n => new Dqy(n)) : [];
  }
}
export class hTu extends Fp {
  constructor(e = {
    appAnnuelle: "",
    code: "",
    dateValidation: "",
    effectif: "",
    entre8et12: "",
    inf8: "",
    libelle: "",
    moyenneClasse: "",
    moyennePeriode1: "",
    moyennePeriode2: "",
    moyennePeriode3: "",
    sup12: ""
  }) {
    super(e);
    this.appAnnuelle = e.appAnnuelle;
    this.dateValidation = e.dateValidation;
    this.effectif = e.effectif;
    this.entre8et12 = e.entre8et12;
    this.inf8 = e.inf8;
    this.moyenneClasse = e.moyenneClasse;
    this.moyennePeriode1 = e.moyennePeriode1;
    this.moyennePeriode2 = e.moyennePeriode2;
    this.moyennePeriode3 = e.moyennePeriode3;
    this.sup12 = e.sup12;
  }
}
export class L4i {
  constructor(e = {
    codeFormation: "",
    id: 0,
    idClasse: 0,
    nom: "",
    ordreArrivee: "",
    particule: "",
    photo: "",
    prenom: "",
    sexe: ""
  }) {
    this.avisEleve = Array.isArray(e.avisEleve) ? e.avisEleve.map(n => new PtT(n)) : [];
    this.codeFormation = e.codeFormation;
    this.engagementsEleve = Array.isArray(e.engagementsEleve) ? e.engagementsEleve.map(n => new ftv(n)) : [];
    this.engagementsEleveAvecPrecision = Array.isArray(e.engagementsEleveAvecPrecision) ? e.engagementsEleveAvecPrecision.map(n => new ftv(n)) : [];
    this.id = e.id;
    this.idClasse = e.idClasse;
    this.matieres = Array.isArray(e.matieres) ? e.matieres.map(n => new hTu(n)) : [];
    this.nom = e.nom;
    this.ordreArrivee = e.ordreArrivee;
    this.particule = e.particule;
    this.photo = e.photo;
    this.prenom = e.prenom;
    this.sexe = e.sexe;
  }
}
class Lm {
  constructor(e = {
    idClasse: 0,
    isClasseTerminale: false,
    isPP: false,
    libelle: "",
    isFilierePro: false
  }) {
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new L4i(n)) : [];
    this.idClasse = e.idClasse;
    this.isClasseTerminale = e.isClasseTerminale;
    this.isPP = e.isPP;
    this.libelle = e.libelle;
    this.matieres = Array.isArray(e.matieres) ? e.matieres.map(n => new Fp(n)) : [];
    this.isFilierePro = e.isFilierePro;
  }
}
export class $Gn {
  constructor(e = {
    saisieAvisCESeulementParPersonnel: false,
    saisieAvisEngagementsSeulementPP: false
  }) {
    this.avisExamens = Array.isArray(e.avisExamens) ? e.avisExamens.map(n => new lvy(n)) : [];
    this.classes = Array.isArray(e.classes) ? e.classes.map(n => new Lm(n)) : [];
    this.engagementsScolaire = Array.isArray(e.engagementsScolaire) ? e.engagementsScolaire.map(n => new jv(n)) : [];
    this.engagementsScolaireAvecPrecision = Array.isArray(e.engagementsScolaireAvecPrecision) ? e.engagementsScolaireAvecPrecision.map(n => new jv(n)) : [];
    this.notations = Array.isArray(e.notations) ? e.notations.map(n => new Py(n)) : [];
    this.appreciations = Array.isArray(e.appreciations) ? e.appreciations.map(n => new Dqy(n)) : [];
    this.saisieAvisCESeulementParPersonnel = e.saisieAvisCESeulementParPersonnel;
    this.saisieAvisEngagementsSeulementPP = e.saisieAvisEngagementsSeulementPP;
  }
}
export let $aN = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.authStore = n;
      this.httpCacheService = s;
      this.http = d;
    }
    get(n = false) {
      if (n) {
        this.httpCacheService.delete("LSL");
      }
      const s = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: "LSL",
        verbe: "get"
      });
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/LSL`, {}, {
        params: s
      }).pipe((0, j.U)(d => d.data), (0, W.K)(d => this.catchBadResponse(d)));
    }
    saveEleve(n) {
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/LSL/eleves/${n.id}`, {
        eleve: n
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(s => {
        this.httpCacheService.delete("LSL");
        return s.data;
      }), (0, W.K)(s => this.catchBadResponse(s)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(nl), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class Oev {
  constructor(e = {
    affecte: false,
    id: 0,
    nom: ""
  }) {
    this.affecte = e.affecte;
    this.id = e.id;
    this.nom = e.nom;
  }
}
export class Rs6 {
  constructor(e = {
    idRessource: 0,
    libelle: "",
    url: "",
    urlCouverture: "",
    urlTelechargement: "",
    affecte: false,
    editeur: "",
    ogec: ""
  }) {
    this.idRessource = e.idRessource;
    this.libelle = e.libelle;
    this.url = e.url;
    this.urlCouverture = e.urlCouverture;
    this.urlTelechargement = e.urlTelechargement;
    this.affecte = e.affecte;
    this.editeur = e.editeur;
    this.ogec = e.ogec;
    this.disciplines = Array.isArray(e.disciplines) ? [...e.disciplines] : [];
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new Oev(n)) : [];
  }
  get isServeurCAS() {
    return ["CNS", "KNE", "EDUCARTE", "VOLTAIRE", "GEN5", "LDE", "EDULIB", "CRISTALWEB", "ARBS"].some(n => this.editeur === n);
  }
  get isCanalMultimedia() {
    return this.isUniversalis || ["EDUCARTE", "LUMNI"].some(n => this.editeur === n);
  }
  get isUniversalis() {
    return ["UNI", "UNIJ", "UNIE", "UNIBIQ", "UNIBS"].some(e => this.editeur === e);
  }
}
export class yN1 {
  constructor(e = {
    typeManuel: "E"
  }) {
    this.listeManuels = Array.isArray(e.listeManuels) ? e.listeManuels.map(n => new Rs6(n)) : [];
    this.typeManuel = e.typeManuel;
  }
}
class Qv extends yN1 {
  constructor(e = {
    typeManuel: "E"
  }) {
    super(e);
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  updateManuelDistribution(e) {
    this.listeManuels.edInsertUpdate(e, n => n.idRessource === e.idRessource);
  }
  updateManuelUtilisateur(e) {
    if (this.listeManuels.findIndex(n => n.idRessource === e.idRessource) > -1) {
      this.listeManuels.edRemove(n => n.idRessource === e.idRessource);
    } else {
      this.listeManuels.edInsertUpdate(e, n => n.idRessource === e.idRessource);
    }
  }
}
class W0 {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Qv(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  updateManuelDistribution(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new Qv();
    }
    this[e].updateManuelDistribution(n);
  }
  updateManuelUtilisateur(e, n) {
    if (typeof this[e] === "undefined") {
      this[e] = new Qv();
    }
    this[e].updateManuelUtilisateur(n);
  }
}
export let Fh3 = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateManuelsNumeriquesStore(n, s = "", d) {
      let h = this.cloneDeep();
      switch (s) {
        case "getManuels":
          h[d] = new Qv({
            listeManuels: n
          });
          break;
        case "updateManuelDistribution":
          h.updateManuelDistribution(d, new Rs6(n));
          break;
        case "updateManuelUtilisateur":
          h.updateManuelUtilisateur(d, new Rs6(n));
      }
      Object.setExpired(h[d], this.expireableTTL);
      this.store = h;
    }
    selectListeManuelsNumeriques(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.listeManuels;
        } else {
          return [];
        }
      });
    }
    selectListeManuelsNumeriquesByMatiere(n, s) {
      return this.selectListeManuelsNumeriques(n).pipe((0, j.U)(d => Array.isArray(d) ? s === JBS.CLASSE ? [] : d.filter(h => h.disciplines.indexOf(s) > -1) : []));
    }
    selectListeManuelsNumeriquesMatieresSpecifiees(n) {
      return this.selectListeManuelsNumeriques(n).pipe((0, j.U)(s => Array.isArray(s) ? s.filter(d => d.disciplines.length > 0) : []));
    }
    selectListeManuelsNumeriquesToutesMatieres(n) {
      return this.selectListeManuelsNumeriques(n).pipe((0, j.U)(s => Array.isArray(s) ? s.filter(d => d.disciplines.length === 0) : []));
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: W0,
    className: "ManuelsNumeriquesStore"
  })], R);
  return R;
})();
export let rP1 = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.authStore = n;
      this.manuelsNumeriquesStore = s;
      this.http = d;
      this.httpCacheService = h;
    }
    manuelsNumeriques(n, s, d = "", h, P = false, z = false, Ae = false) {
      const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [d, "D", P ? 1 : 0, "ALL", z ? 1 : 0]);
      const Tt = Object.getEntity(this.manuelsNumeriquesStore.snapshot, Ve);
      if (Ae || Object.isExpired(Tt)) {
        const Vt = FSr.translateTypeUser(s);
        let Hn = {};
        if (d !== "") {
          Hn.codeClasse = d;
        }
        if (P) {
          Hn.modeDistribution = "1";
          Hn.codeMatiere = h;
          Hn.showAll = z;
        }
        return this.http.post(`${Vt}/${n}/manuelsNumeriques`, Hn, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ci => this.manuelsNumeriquesStore.updateManuelsNumeriquesStore(Ci.data, "getManuels", Ve)), (0, W.K)(Ci => this.catchBadResponse(Ci)));
      }
      return E.E;
    }
    updateAssociationProfManuel(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, d, s, [h, "D", 1, "ALL", 0]);
      const Ae = FSr.translateTypeUser(d);
      let Ve = {};
      Ve.target = FSr.translateTypeUser(dcH.ENSEIGNANT);
      Ve.codeClasse = h;
      Ve.modeDistribution = "1";
      if (Object.isExists(P)) {
        Ve.codeMatiere = P;
      }
      let Tt = new Rs6(n);
      Tt.affecte = !Tt.affecte;
      Ve.manuel = Tt;
      return this.http.post(`${Ae}/${s}/manuelsNumeriques`, Ve, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Vt => Vt.code === GL1.OK ? (this.manuelsNumeriquesStore.updateManuelsNumeriquesStore(Tt, "updateManuelDistribution", z), this.manuelsNumeriquesStore.updateManuelsNumeriquesStore(Tt, "updateManuelUtilisateur", $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, d, s, [h, "D", 0, "ALL", 0])), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la mise à jour. Merci de réessayer !"))), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    updateAssociationEleveManuel(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, d, s, [h, "D", 1, "ALL", 0]);
      const Ae = FSr.translateTypeUser(d);
      let Ve = {};
      Ve.target = FSr.translateTypeUser(dcH.ELEVE);
      Ve.codeClasse = h;
      Ve.modeDistribution = "1";
      if (Object.isExists(P)) {
        Ve.codeMatiere = P;
      }
      Ve.manuel = n;
      return this.http.post(`${Ae}/${s}/manuelsNumeriques`, Ve, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Tt => Tt.code === GL1.OK ? (this.manuelsNumeriquesStore.updateManuelsNumeriquesStore(n, "updateManuelDistribution", z), this.manuelsNumeriquesStore.updateManuelsNumeriquesStore(n, "updateManuelUtilisateur", $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, d, s, [h, "D", 0, "ALL", 0])), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la mise à jour. Merci de réessayer !"))), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    listeRessourcesVoltaire(n, s, d = 0, h = false) {
      const P = `listeRessourcesVoltaire${n}${s}${d}`;
      if (h) {
        this.httpCacheService.delete(P);
      }
      const z = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: P,
        cacheTTL: `${X9o.uneJournee}`,
        verbe: "get"
      });
      return this.http.post(`projetVoltaire/${d}/ressources`, {}, {
        params: z
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    getCASRedirectUrl(n, s) {
      const d = Y5f.buildSimpleQueryString({
        retourJson: "1",
        ...s
      });
      return this.http.post(n, {}, {
        context: new et().set(wm, true),
        params: d
      }).pipe((0, j.U)(h => h.data.urlRedirect || ""), (0, W.K)(h => this.catchBadResponse(h)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(Fh3), t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class j9y {
  constructor(e = {
    date: "",
    typeElement: "",
    idElement: 0,
    titre: "",
    soustitre: "",
    contenu: ""
  }) {
    this.date = e.date;
    this.typeElement = e.typeElement;
    this.idElement = e.idElement;
    this.titre = e.titre;
    this.soustitre = e.soustitre;
    this.contenu = e.contenu;
    if (typeof e.afficherHeure !== "undefined") {
      this.afficherHeure = e.afficherHeure;
    }
    if (typeof e.description !== "undefined") {
      this.description = e.description;
    }
    if (typeof e.typeUser !== "undefined") {
      this.typeUser = e.typeUser;
    }
    if (typeof e.idUser !== "undefined") {
      this.idUser = e.idUser;
    }
  }
  get href() {
    let e = {
      Note: new Ke({
        route: `/E/${this.idUser}/Notes`,
        queryParams: {
          date: this.date
        }
      }),
      VieScolaire: new Ke({
        route: `/E/${this.idUser}/VieScolaire/evenements`
      }),
      ReunionPP: new Ke({
        route: `/${this.typeUser}/${this.idUser}/RPP`
      }),
      ReunionPPFamille: new Ke({
        route: `/E/${this.idUser}/RPP`
      }),
      Actualite: new Ke({
        route: ""
      }),
      Messagerie: new Ke({
        route: "open-message",
        queryParams: {
          idMessage: this.idElement,
          typeUser: this.typeUser,
          idUser: this.idUser
        }
      }),
      DocumentFamille: new Ke({
        route: "/Documents"
      }),
      Document: new Ke({
        route: "/Documents"
      })
    };
    if (Object.isExists(e[this.typeElement])) {
      return e[this.typeElement];
    } else {
      return "";
    }
  }
  get icon() {
    let e = {
      Note: "icon-ed_carnetnotes",
      VieScolaire: "icon-ed_viescolaire-light",
      ReunionPP: "icon-ed_reunionspp-light",
      ReunionPPFamille: "icon-ed_reunionspp-light",
      Actualite: "",
      Messagerie: "icon-ed_messagerie-light",
      DocumentFamille: "icon-ed_documents-light",
      Document: "icon-ed_documents-light"
    };
    if (Object.isExists(e[this.typeElement])) {
      return e[this.typeElement];
    } else {
      return "";
    }
  }
  get bgFor() {
    const e = "text-";
    let n = {
      Note: `${e}primary`,
      VieScolaire: `${e}danger`,
      Document: `${e}primary`,
      DocumentFamille: `${e}primary`,
      ReunionPP: `${e}danger`,
      ReunionPPFamille: `${e}danger`,
      Actualite: `${e}primary`,
      Messagerie: `${e}primary`
    };
    if (Object.isExists(n[this.typeElement])) {
      return n[this.typeElement];
    } else {
      return `${e}info`;
    }
  }
  get fileFormated() {
    let e = new eD9();
    e.libelle = this.contenu;
    e.id = this.idElement.toString();
    e.type = this.typeElement;
    return e;
  }
}
export class ZUG {
  constructor(e = {
    id: 0,
    type: "",
    contenu: "",
    dateCreation: "",
    dateDebut: "",
    dateFin: ""
  }) {
    this.id = e.id;
    this.type = e.type;
    this.contenu = e.contenu;
    this.dateCreation = e.dateCreation;
    this.dateDebut = e.dateDebut;
    this.dateFin = e.dateFin;
    this.cible = Array.isArray(e.cible) ? [...e.cible] : [];
    this.ciblesEtab = Array.isArray(e.ciblesEtab) ? [...e.ciblesEtab] : [];
    this.ciblesConcatenees = Array.isArray(e.ciblesConcatenees) ? [...e.ciblesConcatenees] : [];
    this.auteur = new XsP(e.auteur);
    if (Object.isExists(e.ordre)) {
      this.ordre = e.ordre;
    }
    if (Object.isExists(e.couleur)) {
      this.couleur = e.couleur;
    }
    if (Object.isExists(e.titreEspaceTravail)) {
      this.titreEspaceTravail = e.titreEspaceTravail;
    }
  }
  isPast(e) {
    let n;
    let s;
    let d = false;
    if (e.dateFin !== "") {
      s = e.dateFin.replace(/\//g, "-");
      s = s.split("-").reverse().join("-");
      n = C_1.stringToDate(s);
      d = C_1.isBefore(n, new Date()) && !C_1.isSameDay(n, new Date());
    }
    return d;
  }
  isPostItEspaceTravail() {
    return this.cible.length === 1 && this.cible[0].startsWith(dcH.ESPACE_TRAVAIL);
  }
}
class A {
  constructor(e = {}) {
    this.postits = Array.isArray(e.postits) ? e.postits.map(n => new ZUG(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class m {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new A(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  updatePostitStorage(e, n, s, d) {
    if (!Object.isExists(this[e])) {
      this[e] = new A();
    }
    let h = this[e];
    let P = h.postits.findIndex(z => z.id === n.id);
    if (P === -1) {
      h.postits.unshift(n);
    } else if (s) {
      h.postits.splice(P, 1);
    } else {
      h.postits[P] = n;
    }
    Object.setExpired(h, d);
  }
}
class T {
  constructor(e = {
    horaire: "",
    enseignantId: 0
  }) {
    this.horaire = e.horaire;
    this.enseignantId = e.enseignantId;
    if (typeof e.enseignantLibelle !== "undefined") {
      this.enseignantLibelle = e.enseignantLibelle;
    }
    if (typeof e.etat !== "undefined") {
      this.etat = e.etat;
    }
    if (typeof e.matiere !== "undefined") {
      this.matiere = e.matiere;
    }
    if (typeof e.heureDebut !== "undefined") {
      this.heureDebut = e.heureDebut;
    }
    if (typeof e.heureFin !== "undefined") {
      this.heureFin = e.heureFin;
    }
    if (typeof e.salle !== "undefined") {
      this.salle = new Px8(e.salle);
    }
  }
}
class te {
  constructor(e = {
    id: 0,
    civilite: "",
    nom: "",
    prenom: "",
    type: "",
    matiere: "",
    isPP: false
  }) {
    this.id = e.id;
    this.civilite = e.civilite;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.type = e.type;
    this.matiere = e.matiere;
    this.isPP = e.isPP;
  }
}
class Se {
  constructor(e = {
    id: 0,
    libelle: "",
    nbMaxCreneaux: 0,
    plages: 0,
    isConsecutifActive: false,
    heureDebut: "",
    heureFin: "",
    dureeRdv: 0,
    date: "",
    dateFinReservation: "",
    isVisio: false
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.nbMaxCreneaux = e.nbMaxCreneaux;
    this.plages = e.plages;
    this.isConsecutifActive = e.isConsecutifActive;
    this.heureDebut = e.heureDebut;
    this.heureFin = e.heureFin;
    this.dureeRdv = e.dureeRdv;
    this.date = e.date;
    this.dateFinReservation = e.dateFinReservation;
    this.isVisio = e.isVisio;
  }
}
class ge {
  constructor(e = {
    libelle: ""
  }) {
    this.libelle = e.libelle;
    this.creneaux = Array.isArray(e.creneaux) ? e.creneaux.map(n => new T(n)) : [];
  }
}
class Dt {
  constructor(e = {}) {
    this.creneauxFermes = Array.isArray(e.creneauxFermes) ? e.creneauxFermes.map(n => new T(n)) : [];
    this.mesCreneaux = Array.isArray(e.mesCreneaux) ? e.mesCreneaux.map(n => new T(n)) : [];
    this.enseignants = Array.isArray(e.enseignants) ? e.enseignants.map(n => new te(n)) : [];
    this.parametrage = new Se(e.parametrage);
    if (Array.isArray(e.plages)) {
      this.plages = e.plages.map(n => new ge(n));
    }
    if (typeof e.isClose !== "undefined") {
      this.isClose = e.isClose;
    }
    if (typeof e.urlPDF !== "undefined") {
      this.urlPDF = e.urlPDF;
    }
  }
  get isReunionToday() {
    return C_1.isSameDay(new Date(this.parametrage.date), new Date());
  }
  get fileRPP() {
    const e = new eD9();
    e.libelle = this.parametrage.libelle;
    const n = this.urlPDF.split("/").slice(-4);
    const s = n[3].split(".");
    e.url = n[0] + "/" + n[1] + "/" + n[2] + "/" + s[0];
    e.id = this.parametrage.id.toString();
    return e;
  }
}
export class EGu {
  constructor(e = {}) {
    this.reunions = Array.isArray(e.reunions) ? e.reunions.map(n => new Dt(n)) : [];
  }
}
class tn extends EGu {
  constructor(e = {}) {
    super(e);
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class vn {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new tn(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let q0O = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(s);
      this.authStore = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h])) {
            const P = Object.keys(n[h]);
            for (let z of P) {
              if (z === "signature") {
                if (Object.isExists(n[h][z]) && !Object.isExpired(n[h][z])) {
                  Object.setExpired(n[h][z], 0);
                  s = true;
                }
              } else if (z !== "parametrage" && Object.isExists(n[h][z])) {
                let Ae = n[h][z];
                for (let Ve of Ae.messages) {
                  if (!Object.isExpired(Ve)) {
                    Object.setExpired(Ve, 0);
                    s = true;
                  }
                }
                for (let Ve of Ae.inboxList) {
                  if (!Object.isExpired(Ve)) {
                    Object.setExpired(Ve, 0);
                    s = true;
                  }
                }
              }
            }
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateMessagerieStore(n, s, d, h, P, z = {}) {
      let Ae = this.cloneDeep();
      switch (P) {
        case "updateSignature":
          Ae.setSignature(s, n, this.expireableTTL);
          break;
        case "updateMessagerie":
          Ae.setNewMessagesRecuperes(s, d, h, n, z.page, z && z.cacheResults === false ? 0 : this.expireableTTL);
          Ae.refreshPaginationStorage(s, d, h, z.page);
          break;
        case "updateMessage":
          Ae.setMessage(s, d, n, n.brouillon ? undefined : this.expireableTTL);
          Ae.refreshPaginationStorage(s, d, h);
          break;
        case "deplacerMessages":
          Ae.deplacerMessages(s, d, n, h);
          Ae.refreshPaginationStorage(s, d, h);
          break;
        case tHm.ACT_ON_MESSAGE.archiver:
        case tHm.ACT_ON_MESSAGE.desarchiver:
          Ae.zipMessages(s, d, n, h);
          Ae.refreshPaginationStorage(s, d, h);
          break;
        case tHm.ACT_ON_MESSAGE.marquerCommeNonLu:
          {
            const Ve = n.map(Tt => new s2V({
              ...Tt,
              read: false,
              expired: 0
            }));
            Ae.updateMessages(s, d, Ve);
            Ae.refreshPaginationStorage(s, d, h);
            break;
          }
        case tHm.ACT_ON_MESSAGE.supprimer:
        case tHm.ACT_ON_MESSAGE.annuler:
          Ae.deleteMessages(s, d, n);
          Ae.refreshPaginationStorage(s, d, h);
          break;
        case "createClasseur":
        case "updateClasseur":
          Ae.setClasseur(s, d, n, this.expireableTTL);
          break;
        case "deleteClasseur":
          Ae.removeClasseur(s, d, n);
          break;
        case "updateParams":
          Ae.updateParams(s, n);
          break;
        case "sendMessage":
          {
            let Ve = tHm.transformSendMessageToMessage(n);
            if (!FSr.isNotEmptyString(Ve.from.nom) && Ve.from.id === this.authStore.currentUser.id) {
              Ve.from = new zg({
                ...Ve.from,
                nom: this.authStore.currentUser.nom,
                prenom: this.authStore.currentUser.prenom,
                particule: this.authStore.currentUser.particule,
                civilite: this.authStore.currentUser.civilite
              });
            }
            Ae.setMessage(s, d, Ve);
            if (h !== 0) {
              Ae.refreshPaginationStorage(s, d, h);
            }
            if (h === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE && (typeof n.idDossier === "undefined" || n.idDossier === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT)) {
              Ae.refreshPaginationStorage(s, d, tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT);
            }
            if (n.forwardId > 0 && n.idDossier < 0) {
              Ae.setMessageTransferred(s, d, n.forwardId, n.idDossier, n.idClasseur);
            }
            if (!n.brouillon && n.responseId > 0) {
              Ae.setMessageAnswered(s, d, n.responseId, tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION, n.idClasseur);
            }
            break;
          }
      }
      this.store = Ae;
    }
    getMessagerieParametrage(n) {
      const s = Kg5.getModuleParams(qzA.MESSAGERIE, this.authStore.currentUser);
      if (Object.isExists(s)) {
        return new aA2(s);
      } else {
        return this.snapshot.getMessagerieParametrage(n);
      }
    }
    getMessagerieSignature(n) {
      return this.snapshot.getMessagerieSignature(n);
    }
    getMessagerie(n, s) {
      return this.snapshot.getMessagerie(n, s);
    }
    getMessages(n, s, d = 0) {
      return this.snapshot.getMessages(n, s, d);
    }
    hasMessage(n, s, d, h, P = 0) {
      return this.snapshot.hasMessage(n, s, d, h, P);
    }
    hasMessageFromMessage(n, s, d) {
      return this.snapshot.hasMessage(n, s, d.id, d.idDossier, d.idClasseur);
    }
    getMessage(n, s, d, h, P = 0) {
      if (!FSr.isNotEmptyString(s)) {
        s = this.authStore.currentUser.anneeScolaireCourante;
      }
      return this.snapshot.getMessage(n, s, d, h, P);
    }
    getMessageFromMessage(n, s, d) {
      return this.getMessage(n, s, d.id, d.idDossier, d.idClasseur);
    }
    getInbox(n, s, d) {
      return this.getMessagerie(n, s).inboxList.find(P => P.id === d);
    }
    getLastPageLoaded(n, s, d) {
      const h = this.getMessagerie(n, s);
      if (Object.isExists(h.pagination.lastPageLoaded[d])) {
        return h.pagination.lastPageLoaded[d];
      } else {
        return 0;
      }
    }
    canSendMessageUser(n) {
      let s = Kg5.getModuleParams(qzA.MESSAGERIE, this.authStore.currentUser);
      if (!Object.isExists(s) || s.isActif !== "1") {
        return false;
      }
      let d = false;
      switch (n) {
        case dcH.ELEVE:
          d = s.destEleve === "1";
          break;
        case dcH.FAMILLE_RESPONSABLE:
        case dcH.FAMILLE_CONJOINT:
        case dcH.FAMILLE:
          d = s.destFamille === "1";
          break;
        case dcH.ENSEIGNANT:
          d = s.destProf === "1";
          break;
        case dcH.PERSONNEL:
          d = s.destAdmin === "1";
          break;
        case dcH.ESPACE_TRAVAIL:
          d = s.destEspTravail === "1";
      }
      return d;
    }
    selectMessages(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKey(s, d, h);
      return this.select$(Ae => {
        const Ve = Ae.getMessagerie(z, n);
        if (!Object.isExists(Ve)) {
          return;
        }
        let Tt;
        Tt = Ve.messages.filter(Vt => Vt.read === false).map(Vt => new j9y({
          date: Vt.date,
          contenu: Vt.content,
          description: Vt.subject,
          titre: Vt.from.civilite + " " + Vt.from.prenom + " " + Vt.from.nom,
          idElement: Vt.id,
          typeElement: "Messagerie",
          idUser: h,
          typeUser: d,
          afficherHeure: false
        }));
        return Tt.slice(0, P);
      });
    }
    canReplyToTypeDest(n) {
      const d = this.getMessagerieParametrage(this.authStore.variantForCurrentUser);
      return Object.isExists(d) && {
        A: h => h.destAdmin,
        E: h => h.destEleve,
        P: h => h.destProf,
        1: h => h.destFamille,
        2: h => h.destFamille,
        W: h => h.destEspTravail
      }[n](d);
    }
    canWrite() {
      let n = false;
      n = n || this.canReplyToTypeDest("A");
      n = n || this.canReplyToTypeDest("E");
      n = n || this.canReplyToTypeDest("P");
      n = n || this.canReplyToTypeDest("1");
      n = n || this.canReplyToTypeDest("2");
      n = n || this.canReplyToTypeDest("W");
      return n;
    }
    canReply(n) {
      let s = n.idDossier === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION;
      s = s && n.from.id > 0;
      s = s && n.canAnswer;
      if (this.authStore.isFouE() && s) {
        s = !n.from.listeRouge;
      }
      return s;
    }
    canDeleteClasseur(n, s, d) {
      return this.getMessages(n, s, d).length === 0;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: d0,
    className: "MessagerieStore",
    expire: {
      ttl: X9o.uneHeure
    }
  })], R);
  return R;
})();
export let KRh = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.authStore = n;
      this.badgesStore = s;
      this.http = d;
      this.httpCacheService = h;
      this.store = P;
    }
    getSignatureMessage(n = false) {
      const s = this.authStore.variantForCurrentUser;
      const d = Object.getEntity(this.store.snapshot, s);
      if (n || Object.isExpired(d && d.signature || undefined)) {
        return this.http.post("signatureMessage", {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(P => this.store.updateMessagerieStore(P.data, s, "", 0, "updateSignature")), (0, W.K)(P => this.catchBadResponse(P)));
      } else {
        return E.E;
      }
    }
    saveSignatureMessage(n) {
      const s = this.authStore.variantForCurrentUser;
      return this.http.post("signatureMessage", {
        value: n.signature
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(d => d.code === GL1.OK ? (this.store.updateMessagerieStore(n, s, "", 0, "updateSignature"), (0, S.of)(true)) : (0, I._)(() => new FwQ("Impossible de sauvegarder votre signature", d.code, DOJ.genericError))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getUnreadMessages(n, s) {
      const d = Fn[n] || n;
      let P = Y5f.buildSimpleQueryString({
        typeRecuperation: tHm.MESSAGERIE_STATE.received,
        orderBy: "date",
        order: "desc",
        onlyRead: "0",
        getAll: 1
      });
      return this.http.post(`${d}/${s}/messages`, {}, {
        params: P.set("verbe", "get")
      }).pipe((0, j.U)(z => z.data.messages.received), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getMessages(n, s, d, h, P = false, z = true, Ae) {
      const Ve = tHm.getMessagerieStateFromIdBox(h);
      if (Ve === undefined) {
        return E.E;
      }
      const Tt = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const Vt = Object.getEntity(this.store.snapshot, Tt);
      const Hn = Vt && Vt[d] || undefined;
      let Ci = !Object.isExists(Hn);
      if (!Ci && Ve !== tHm.MESSAGERIE_STATE.settings) {
        const fr = Hn.inboxList.find(ss => ss.id === h);
        Ci = Object.isExpired(fr);
      }
      if (P || Ci) {
        const fr = Fn[n] || n;
        let ss = {
          force: P,
          typeRecuperation: Ve,
          idClasseur: Ve === tHm.MESSAGERIE_STATE.classeur ? h : 0,
          orderBy: "date",
          order: "desc",
          query: "",
          onlyRead: "",
          page: 0,
          itemsPerPage: Vqi,
          getAll: 0
        };
        if (Object.isExists(Ae)) {
          ss = {
            ...ss,
            ...Ae
          };
        }
        let vo = Y5f.buildSimpleQueryString(ss);
        return this.http.post(`${fr}/${s}/messages`, {
          anneeMessages: d
        }, {
          params: vo.set("verbe", "get")
        }).pipe((0, j.U)(uo => {
          this.store.updateMessagerieStore(uo.data, Tt, d, h, "updateMessagerie", {
            cacheResults: z,
            page: ss.page
          });
          if (uo.data.pagination.messagesRecusNotReadCount >= 0 && h === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION) {
            let Cu = this.badgesStore.cloneDeep();
            Cu.updateBadgeForModule(uo.data.pagination.messagesRecusNotReadCount, qzA.MESSAGERIE, s, n, this.authStore.isHimself(n, s));
            this.badgesStore.store = Cu;
            this.badgesStore.setStorage(Cu).catch(Bm => console.error("MessagerieService.getMessages badgesStore.setStorage : ", Bm));
          }
        }), (0, W.K)(uo => this.catchBadResponse(uo)));
      }
      return E.E;
    }
    getMessage(n, s, d, h, P = false) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const Ae = Object.getEntity(this.store.snapshot, z);
      const Ve = Ae && Ae[d] || undefined;
      let Tt = true;
      if (Object.isExists(Ve)) {
        const Vt = Ve.messages.find(Hn => Hn.id === h.id && Hn.idDossier === h.idDossier && Hn.idClasseur === h.idClasseur);
        Tt = Object.isExpired(Vt);
      }
      if (P || Tt) {
        let Vt;
        let Hn = h.idDossier;
        if (h.idClasseur > 0) {
          Vt = h.mtype === tHm.MESSAGERIE_STATE.received ? tHm.MODE_MESSAGE.MODE_DESTINATAIRE : tHm.MODE_MESSAGE.MODE_EXPEDITEUR;
          Hn = h.idClasseur;
        } else {
          Vt = h.idDossier === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION || h.idDossier === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE ? tHm.MODE_MESSAGE.MODE_DESTINATAIRE : tHm.MODE_MESSAGE.MODE_EXPEDITEUR;
        }
        return this.http.post(`${Fn[n] || n}/${s}/messages/${h.id}`, {
          anneeMessages: d
        }, {
          params: new Et().set("verbe", "get").set("mode", Vt)
        }).pipe((0, j.U)(fr => {
          this.store.updateMessagerieStore(fr.data, z, d, Hn, "updateMessage");
          if (Hn === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION && fr.data.read !== h.read && fr.data.read === true) {
            let ss = this.badgesStore.cloneDeep();
            const vo = ss.getBadgeFromModule(qzA.MESSAGERIE, s, n);
            if (vo > 0) {
              ss.updateBadgeForModule(vo - 1, qzA.MESSAGERIE, s, n, this.authStore.isHimself(n, s));
              this.badgesStore.store = ss;
              this.badgesStore.setStorage(ss).catch(uo => console.error("MessagerieService.getMessage badgesStore.setStorage : ", uo));
            }
          }
        }), (0, W.K)(fr => this.catchBadResponse(fr)));
      }
      return E.E;
    }
    supprimerOuAnnulerMessages(n, s, d, h, P, z = tHm.ACT_ON_MESSAGE.supprimer) {
      const Ae = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const Ve = Fn[n] || n;
      const Tt = {
        action: z,
        ids: P.edPluck("id"),
        anneeMessages: d,
        idDossier: h
      };
      return this.http.post(`${Ve}/${s}/messages`, Tt, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Vt => {
        if (Vt.code === GL1.OK) {
          this.store.updateMessagerieStore(P, Ae, d, h, tHm.ACT_ON_MESSAGE.supprimer);
          if (h === tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION) {
            let Hn = this.badgesStore.cloneDeep();
            const Ci = this.store.getMessages(Ae, d, h).filter(fr => fr.read === false).length;
            Hn.updateBadgeForModule(Ci, qzA.MESSAGERIE, s, n, this.authStore.isHimself(n, s));
            this.badgesStore.store = Hn;
            this.badgesStore.setStorage(Hn).catch(fr => console.error("MessagerieService.supprimerMessages badgesStore.setStorage : ", fr));
          }
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Suppression des messages impossible", Vt.code, DOJ.genericError));
      }), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    markMessagesAsUnread(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const z = Fn[n] || n;
      const Ae = {
        action: tHm.ACT_ON_MESSAGE.marquerCommeNonLu,
        ids: h.edPluck("id"),
        anneeMessages: d
      };
      return this.http.post(`${z}/${s}/messages`, Ae, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ve => {
        if (Ve.code === GL1.OK) {
          this.store.updateMessagerieStore(h, P, d, tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION, tHm.ACT_ON_MESSAGE.marquerCommeNonLu);
          let Tt = this.badgesStore.cloneDeep();
          const Vt = Tt.getBadgeFromModule(qzA.MESSAGERIE, s, n);
          if (Vt >= 0) {
            Tt.updateBadgeForModule(Vt + h.length, qzA.MESSAGERIE, s, n, this.authStore.isHimself(n, s));
            this.badgesStore.store = Tt;
            this.badgesStore.setStorage(Tt).catch(Hn => console.error("MessagerieService.markMessagesAsUnread badgesStore.setStorage : ", Hn));
          }
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Création du dossier impossible", Ve.code, DOJ.genericError));
      }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    archiveMessages(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const z = Fn[n] || n;
      const Ae = {
        action: tHm.ACT_ON_MESSAGE.archiver,
        ids: h.edPluck("id"),
        anneeMessages: d
      };
      return this.http.post(`${z}/${s}/messages`, Ae, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ve => Ve.code === GL1.OK ? (this.store.updateMessagerieStore(h, P, d, tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ARCHIVE, tHm.ACT_ON_MESSAGE.archiver), (0, S.of)(true)) : (0, I._)(() => new FwQ("Archivage des messages impossible", Ve.code, DOJ.genericError))), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    unArchiveMessages(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const z = Fn[n] || n;
      const Ae = {
        action: tHm.ACT_ON_MESSAGE.desarchiver,
        ids: h.edPluck("id"),
        anneeMessages: d
      };
      return this.http.post(`${z}/${s}/messages`, Ae, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ve => Ve.code === GL1.OK ? (this.store.updateMessagerieStore(h, P, d, tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION, tHm.ACT_ON_MESSAGE.desarchiver), (0, S.of)(true)) : (0, I._)(() => new FwQ("Déplacement des messages impossible", Ve.code, DOJ.genericError))), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    createClasseur(n, s, d) {
      return this.http.post("messagerie/classeurs", {
        libelle: d
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(h => this.store.updateMessagerieStore(h.data, n, s, 0, "createClasseur")), (0, W.K)(h => this.catchBadResponse(h)));
    }
    updateClasseur(n, s, d) {
      return this.http.post(`messagerie/classeur/${d.id}`, d, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(h => this.store.updateMessagerieStore(h.data, n, s, 0, "updateClasseur")), (0, W.K)(h => this.catchBadResponse(h)));
    }
    deleteClasseur(n, s, d) {
      return this.http.post(`messagerie/classeur/${d.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (this.store.updateMessagerieStore(d.id, n, s, 0, "deleteClasseur"), (0, S.of)(true)) : (0, I._)(() => new FwQ("Suppression du dossier impossible", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    deplacerMessages(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const Ae = Fn[n] || n;
      let Ve = {
        action: "deplacer",
        idClasseur: P,
        ids: []
      };
      h.forEach(Tt => Ve.ids.push(`${Tt.id}:${Tt.idDossier}`));
      return this.http.post(`${Ae}/${s}/messages`, Ve, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Tt => {
        if (Tt.code === GL1.OK) {
          this.store.updateMessagerieStore(h, z, d, P, "deplacerMessages");
          let Vt = this.badgesStore.cloneDeep();
          const Hn = this.store.getMessages(z, d, tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_RECEPTION).filter(Ci => Ci.read === false).length;
          Vt.updateBadgeForModule(Hn, qzA.MESSAGERIE, s, n, this.authStore.isHimself(n, s));
          this.badgesStore.store = Vt;
          this.badgesStore.setStorage(Vt).catch(Ci => console.error("MessagerieService.deplacerMessages badgesStore.setStorage : ", Ci));
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Déplacement impossible", Tt.code, DOJ.genericError));
      }), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    convertToMail(n, s, d, h, P) {
      return this.http.post(`${Fn[n] || n}/${s}/messages/${h.id}`, {
        anneeMessages: d,
        action: "convertirMail",
        email: P,
        idDossier: h.idDossier
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Conversion en email impossible", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    pieceJointeToCloud(n, s) {
      const d = Y5f.buildSimpleQueryString({
        mode: "PJ_TO_CLOUD",
        idMessage: n.id,
        idPJ: s.id,
        verbe: "post"
      });
      return this.http.post("televersement", {}, {
        params: d
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ(FSr.isNotEmptyString(h.message) ? h.message : "Une erreur s'est produite lors du téléchargement de votre pièce-jointe vers votre Cloud", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    envoyerTestMailNotification(n, s) {
      return this.http.post(`${n}/${s}/testMailNotification`, {}, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(d => d.data.resultat === true ? (0, S.of)(true) : (0, I._)(() => new FwQ("Impossible d'envoyer un email de test.", d.code, DOJ.genericError))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getProfsContacts(n, s, d, h = lFO.MESSAGERIE, P = false) {
      const Ae = `${tHm.getTypeContextContactsBySourceModule(h)}/contacts/professeurs`;
      const Ve = `${Ae}${n}${s}${d}`;
      if (P) {
        this.httpCacheService.delete(Ve);
      }
      const Tt = Y5f.buildSimpleQueryString({
        nom: d,
        cacheEnabled: 1,
        cacheKey: Ve,
        [n]: s,
        verbe: "get"
      });
      return this.http.post(Ae, {}, {
        params: Tt
      }).pipe((0, j.U)(Vt => Vt.data), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    getElevesContacts(n, s = lFO.MESSAGERIE, d = false) {
      const P = `${tHm.getTypeContextContactsBySourceModule(s)}/contacts/eleves`;
      const z = `${P}${n.idClasse}${n.idGroupe}${n.idMatiere}${n.nom}${n.recupAll}${n.idEspace}${n.onlyPresents}`;
      if (d) {
        this.httpCacheService.delete(z);
      }
      const Ae = Y5f.buildSimpleQueryString({
        ...n,
        codeMatiere: "",
        cacheEnabled: 1,
        cacheKey: z,
        verbe: "get"
      });
      return this.http.post(P, {}, {
        params: Ae
      }).pipe((0, j.U)(Ve => Ve.data), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    getFamillesContacts(n, s = lFO.MESSAGERIE, d = false) {
      const P = `${tHm.getTypeContextContactsBySourceModule(s)}/contacts/familles`;
      if (d) {
        this.httpCacheService.delete(`${P}${n.idClasse}${n.idGroupe}${n.idMatiere}${n.codeMatiere}${n.nom}${n.recupAll}${n.onlyPresents}`);
      }
      const z = Y5f.buildSimpleQueryString({
        ...n,
        cacheEnabled: 1,
        cacheKey: `${P}${n.idClasse}${n.idGroupe}${n.idMatiere}${n.codeMatiere}${n.nom}${n.recupAll}${n.onlyPresents}`,
        verbe: "get"
      });
      return this.http.post(P, {}, {
        params: z
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    getPersonnelsContacts(n = lFO.MESSAGERIE, s = false) {
      const h = `${tHm.getTypeContextContactsBySourceModule(n)}/contacts/personnels`;
      if (s) {
        this.httpCacheService.delete(h);
      }
      const P = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: h,
        verbe: "get"
      });
      return this.http.post(h, {}, {
        params: P
      }).pipe((0, j.U)(z => z.data), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getEspaceTravailContacts(n = 0, s = false) {
      if (s) {
        this.httpCacheService.delete(`messagerie/contacts/espacesTravail/${n}`);
      }
      const d = Y5f.buildSimpleQueryString({
        idEspace: n,
        cacheEnabled: 1,
        cacheKey: `messagerie/contacts/espacesTravail/${n}`,
        verbe: "get"
      });
      return this.http.post("messagerie/contacts/espacesTravail", {}, {
        params: d
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getListesContacts(n = false) {
      if (n) {
        this.httpCacheService.delete("messagerie/contacts/listesContacts");
      }
      const s = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: "messagerie/contacts/listesContacts",
        verbe: "get"
      });
      return this.http.post("messagerie/contacts/listesContacts", {}, {
        params: s
      }).pipe((0, j.U)(d => {
        d.data.contacts.forEach(h => {
          h.combien = h.contacts.edPluckFlatten("destinataires").length;
        });
        return d.data;
      }), (0, W.K)(d => this.catchBadResponse(d)));
    }
    createListeContacts(n, s) {
      this.httpCacheService.delete("messagerie/contacts/listesContacts");
      return this.http.post("messagerie/contacts/listesContacts", {
        libelle: n,
        contacts: s
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(d => d.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("La création de liste de contacts a échoué", d.code, DOJ.genericError))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    deleteListeContacts(n) {
      this.httpCacheService.delete("messagerie/contacts/listesContacts");
      return this.http.post("messagerie/contacts/listesContacts", {
        idListeContacts: n
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(s => s.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de la liste de contacts", s.code, DOJ.genericError))), (0, W.K)(s => this.catchBadResponse(s)));
    }
    sendMessage(n, s, d) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.http.post(`${Fn[n] || n}/${s}/messages`, {
        message: d,
        anneeMessages: ""
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(Ae => {
        let Ve = 0;
        if (!d.brouillon || Object.isExists(d.draftId) && d.draftId !== 0) {
          if (!d.brouillon) {
            Ve = tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_ENVOYE;
          }
        } else {
          Ve = tHm.ID_DOSSIER_MESSAGERIE.ID_DOSSIER_DRAFT;
        }
        this.store.updateMessagerieStore({
          ...d,
          id: Ae.data.id
        }, h, this.authStore.currentUser.anneeScolaireCourante, Ve, "sendMessage");
        return {
          id: Ae.data.id,
          infos: Ae.message
        };
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(et7), t.LFG(pt), t.LFG(nl), t.LFG(q0O));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class ic6 {
  constructor(e = {
    indice: 0,
    libelle: ""
  }) {
    this.doc = new eD9(e.doc);
    this.indice = e.indice;
    this.libelle = e.libelle;
  }
}
export class Bzc {
  constructor(e = {
    semaine: ""
  }) {
    this.libelle = new Date(e.libelle);
    this.weeks = Array.isArray(e.weeks) ? e.weeks.map(n => new ic6(n)) : [];
    if (Object.isExists(e.indice)) {
      this.indice = e.indice;
    }
  }
}
export let DMM = (() => {
  class R extends Y5f {
    constructor(n) {
      super();
      this.http = n;
    }
    listeMenusRestauration() {
      const s = Y5f.buildSimpleQueryString({
        verbe: "get"
      });
      return this.http.post("menusRestaurationScolaire", {}, {
        params: s
      }).pipe((0, j.U)(d => d.data), (0, W.K)(d => this.catchBadResponse(d)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let UbD = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.authStore = n;
      this.http = s;
      this.httpCacheService = d;
    }
    eleveNotes(n, s = "", d = false) {
      const P = `eleveNotes_${s}_${$ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [n])}`;
      if (d) {
        this.httpCacheService.delete(P);
      }
      const z = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: P,
        verbe: "get"
      });
      return this.http.post(`eleves/${n}/notes`, {
        anneeScolaire: s
      }, {
        params: z
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    getComposantes(n, s, d, h = "", P = false, z) {
      const Ae = Fn[this.authStore.currentUser.typeCompte] || this.authStore.currentUser.typeCompte;
      const Ve = `${Ae}/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/composantes`;
      const Tt = z ? {
        idEleve: z,
        anneeScolaire: h
      } : {
        anneeScolaire: h
      };
      let Vt = `getComposantes_${Ae}_${h}_${this.authStore.currentUser.id}_${n}_${s}_${d}/composantes`;
      if (Object.isExists(z)) {
        Vt += `_${z}`;
      }
      if (P) {
        this.httpCacheService.delete(Vt);
      }
      const Hn = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: Vt,
        verbe: "get"
      });
      return this.http.post(Ve, Tt, {
        params: Hn
      }).pipe((0, j.U)(Ci => Ci.data), (0, W.K)(Ci => this.catchBadResponse(Ci)));
    }
    getDetail(n, s, d, h, P, z = "", Ae = false) {
      const Ve = `${n}/${s}/eleves/${d}/periodes/${P}/composantes/${h}`;
      if (Ae) {
        const Hn = new RegExp("getDetail_" + n + "/" + s + "/eleves/" + d + "/periodes/A\\d{3}Z?X?\\d{0,3}/composantes/" + h, "g");
        this.httpCacheService.filter(Ci => Ci.match(Hn) !== null);
      }
      const Tt = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: `getDetail_${z}_${Ve}`,
        verbe: "get"
      });
      return this.http.post(Ve, {
        anneeScolaire: z
      }, {
        params: Tt
      }).pipe((0, j.U)(Vt => Vt.data), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    saveComposantes(n, s, d, h) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte] || this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/composantes`, {
        eleves: h
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (this.removeComposanteCache(), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la sauvegarde des évaluations.", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    removeComposanteCache() {
      this.httpCacheService.filter(n => (n.startsWith("getDetail_") || n.startsWith("getComposantes_")) && n.indexOf("/composantes") > -1);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let Lps = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.authStore = n;
      this.lsuStore = s;
      this.httpCacheService = d;
      this.http = h;
    }
    getDevoirsProf(n, s, d, h, P) {
      let z = `${h}${IZV}`;
      if (P) {
        z += P;
      }
      const Ae = Object.keys(As);
      for (let Tt of Ae) {
        z = z.replace(Tt, As[Tt]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${z}/notes`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(Tt => Tt.data), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    getAppreciations(n, s, d, h) {
      let P = `${d}${IZV}`;
      if (h) {
        P += h;
      }
      const z = Object.keys(As);
      for (let Ve of z) {
        P = P.replace(Ve, As[Ve]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/ALL/matieres/${P}/appreciations`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(Ve => Ve.data), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    getAppreciationsPredefinies(n, s, d, h = false) {
      if (!d || d === "") {
        d = GjK.TYPE_APP.ENSEIGNANT;
      }
      const P = `${d}/${this.authStore.currentUser.id}/${n}/${s}/appreciationsPredefinies`;
      if (h) {
        this.httpCacheService.delete(P);
      }
      const z = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: P,
        verbe: "get"
      });
      return this.http.post(P, {}, {
        params: z
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    saveAppreciationPredefinie(n, s, d) {
      const h = `${d.type}/${this.authStore.currentUser.id}/${n}/${s}/appreciationsPredefinies`;
      return this.http.post(h, {
        code: d.code,
        libelle: d.libelle
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(z => z.code === GL1.OK ? (this.httpCacheService.delete(h), (0, S.of)(true)) : (0, I._)(z.code === 235 ? () => new FwQ("Ce code appréciation existe déjà, veuillez en choisir un autre !", z.code, DOJ.genericError) : () => new FwQ("Une erreur s'est produite lors de l'ajout de votre appréciation", z.code, DOJ.genericError))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    updateAppreciationPredefinie(n, s, d) {
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/appreciationsPredefinies/${d.id}`, {
        code: d.code,
        typeAppreciation: d.type,
        libelle: d.libelle
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(z => z.code === GL1.OK ? (0, S.of)(z.data) : (0, I._)(z.code === 235 ? () => new FwQ("Ce code appréciation existe déjà, veuillez en choisir un autre !", z.code, DOJ.genericError) : () => new FwQ("Une erreur s'est produite lors de la modification de votre appréciation", z.code, DOJ.genericError))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    supprimerAppreciationPredefinie(n, s, d) {
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/appreciationsPredefinies/${d.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la suppression de votre appréciation", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    dupliquerAppreciationPredefinie(n, s, d, h, P, z) {
      let Ae = `${h}${IZV}`;
      if (P) {
        Ae += P;
      }
      const Ve = Object.keys(As);
      for (let Vt of Ve) {
        Ae = Ae.replace(Vt, As[Vt]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${Ae}/appreciations/duplication`, {
        periodeDestination: {
          codePeriode: z.code
        }
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Vt => Vt.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de duplication des appréciations", Vt.code, DOJ.genericError))), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    getEleves(n, s, d, h, P) {
      return this.http.post(`${Fn[n] || n}/${s}/${d}/${h}/periodes/${P}/conseilDeClasse`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(Ve => Ve.data), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    saveEleve(n, s, d, h, P) {
      const z = this.authStore.currentUser.typeCompte;
      return this.http.post(`${Fn[z] || z}/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/conseilDeClasse/eleves/${h.id}`, {
        eleve: h,
        appreciationGeneraleClasse: P
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, Z.b)(Tt => this.removeEleveNotesCache()), (0, j.U)(Tt => Tt.data), (0, W.K)(Tt => this.catchBadResponse(Tt)));
    }
    saveNotes(n, s, d, h, P, z, Ae) {
      let Ve = `${h}${IZV}`;
      if (P) {
        Ve += P;
      }
      const Tt = Object.keys(As);
      for (let Ci of Tt) {
        Ve = Ve.replace(Ci, As[Ci]);
      }
      const Vt = `enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${Ve}/notes`;
      const Hn = z.filter(Ci => Ci.readOnly === false).reduce((Ci, fr) => {
        let ss = new n3h(fr);
        ss.eleves = Ae.filter(vo => vo.hasOwnProperty("eleve")).map(vo => {
          let uo = [];
          if (Object.isExists(vo.devoirs[ss.id])) {
            let Cu = new tGo({
              ...Object.edDefaults(vo.devoirs[ss.id], ss),
              idDevoir: ss.id
            });
            uo.push(Cu);
          }
          return {
            nom: vo.eleve.nom,
            prenom: vo.eleve.prenom,
            particule: vo.eleve.particule,
            id: vo.eleve.id,
            devoirs: uo
          };
        });
        Ci.push(ss);
        return Ci;
      }, []);
      return this.http.post(Vt, {
        devoirs: Hn
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Ci => Ci.code === GL1.OK ? (this.removeEleveNotesCache(), (0, S.of)(true)) : (0, I._)(() => new FwQ("Impossible de sauvegarder vos évaluations", Ci.code, DOJ.genericError))), (0, W.K)(Ci => this.catchBadResponse(Ci)));
    }
    saveAppreciations(n, s, d, h, P, z, Ae) {
      let Ve = `${h}${IZV}`;
      if (P) {
        Ve += P;
      }
      const Tt = Object.keys(As);
      for (let Hn of Tt) {
        Ve = Ve.replace(Hn, As[Hn]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${Ve}/appreciations`, {
        eleves: z,
        appreciationClasse: Ae
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Hn => Hn.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la sauvegarde de vos appréciations", Hn.code, DOJ.genericError))), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    duplicationAppreciations(n, s, d, h, P) {
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/appreciations/${P}/duplication`, {
        codePeriodeDestination: h
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de duplication des appréciations", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    createDevoir(n, s, d, h, P, z) {
      let Ae = `${h}${IZV}`;
      if (P) {
        Ae += P;
      }
      const Ve = Object.keys(As);
      for (let Vt of Ve) {
        Ae = Ae.replace(Vt, As[Vt]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${Ae}/devoirs`, {
        devoir: z
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(Vt => Vt.data), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    updateDevoir(n, s, d, h, P, z) {
      let Ae = `${h}${IZV}`;
      if (P) {
        Ae += P;
      }
      const Ve = Object.keys(As);
      for (let Vt of Ve) {
        Ae = Ae.replace(Vt, As[Vt]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${Ae}/devoirs/${z.id}`, {
        devoir: z
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(Vt => Vt.data), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    deleteDevoir(n, s, d) {
      let h = `${d.codeMatiere}${IZV}`;
      if (d.codeSSMatiere) {
        h += d.codeSSMatiere;
      }
      const P = Object.keys(As);
      for (let Ae of P) {
        h = h.replace(Ae, As[Ae]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d.idPeriode}/matieres/${h}/devoirs/${d.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la suppression de votre évaluation", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    duplicateDevoirAndNotes(n, s, d, h, P, z, Ae) {
      let Ve = `${h}${IZV}`;
      if (P) {
        Ve += P;
      }
      const Tt = Object.keys(As);
      for (let Hn of Tt) {
        Ve = Ve.replace(Hn, As[Hn]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${Ve}/devoirs/duplication`, {
        ...z,
        periodeDestination: {
          codePeriode: Ae
        }
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Hn => Hn.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la duplication de votre devoir", Hn.code, DOJ.genericError))), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    duplicateInfosDevoir(n, s, d, h, P, z, Ae) {
      let Ve = `${h}${IZV}`;
      if (P) {
        Ve += P;
      }
      const Tt = Object.keys(As);
      for (let Hn of Tt) {
        Ve = Ve.replace(Hn, As[Hn]);
      }
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${Ve}/devoirs/duplicationAutresClasses`, {
        ...z,
        classes: Ae
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Hn => Hn.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la duplication de votre devoir", Hn.code, DOJ.genericError))), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    getExceptionsElementsProgrammePeriodes(n, s, d, h, P = false) {
      let z = `${d}${IZV}`;
      if (h) {
        z += h;
      }
      const Ae = Object.keys(As);
      for (let Vt of Ae) {
        z = z.replace(Vt, As[Vt]);
      }
      const Ve = `${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/${n}/${s}/matieres/${z}/exceptionsElementsProgrammePeriodes`;
      if (P) {
        this.httpCacheService.delete(Ve);
      }
      const Tt = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: Ve,
        verbe: "get"
      });
      return this.http.post(Ve, {}, {
        params: Tt
      }).pipe((0, j.U)(Vt => Vt.data), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    addExceptionElemProgPeriode(n, s, d, h, P, z) {
      let Ae = `${d}${IZV}`;
      if (h) {
        Ae += h;
      }
      const Ve = Object.keys(As);
      for (let Vt of Ve) {
        Ae = Ae.replace(Vt, As[Vt]);
      }
      const Tt = `${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/${n}/${s}/matieres/${Ae}/exceptionsElementsProgrammePeriodes`;
      return this.http.post(Tt, {
        listeIdsElement: P.edPluck("idOrigineCatalogue"),
        codePeriode: z.codePeriode
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Vt => Vt.code === GL1.OK ? (this.lsuStore.markAsExpired(s), this.httpCacheService.delete(Tt), (0, S.of)(true)) : (0, I._)(() => new FwQ("Erreur lors de l'ajout de l'exception période pour l'élément de programme", Vt.code, DOJ.genericError))), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    deleteExceptionElemProgPeriode(n, s, d, h, P, z) {
      let Ae = `${d}${IZV}`;
      if (h) {
        Ae += h;
      }
      const Ve = Object.keys(As);
      for (let Vt of Ve) {
        Ae = Ae.replace(Vt, As[Vt]);
      }
      const Tt = `${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/${n}/${s}/matieres/${Ae}/exceptionsElementsProgrammePeriodes`;
      return this.http.post(Tt, {
        listeIdsElement: P.edPluck("idOrigineCatalogue"),
        codePeriode: z.codePeriode
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Vt => Vt.code === GL1.OK ? (this.lsuStore.markAsExpired(s), this.httpCacheService.delete(Tt), (0, S.of)(true)) : (0, I._)(() => new FwQ("Erreur lors de la suppression de l'exception période pour l'élément de programme", Vt.code, DOJ.genericError))), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    modifieBaremesElementsProgramme(n) {
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/elementsProgramme/baremes`, {
        elementsProgramme: n
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(d => d.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la modification du barême", d.code, DOJ.genericError))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getPE(n, s, d, h) {
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/pratiquesEnseignement/${h}`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(z => z.data), (0, W.K)(z => this.catchBadResponse(z)));
    }
    saveEP(n, s, d, h, P) {
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/pratiquesEnseignement/${h}`, {
        eleves: P
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la sauvegarde des commentaires.", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    updatePositionPeriodiqueEleve(n, s, d) {
      return this.http.post(`positionPeriodique/periodes/${s}/matieres/${d.codeMatiere}${IZV}${d.codeSousMatiere}/elementsProgramme/${d.id}/eleves/${n}`, d, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la modification.", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    updateModeCalculProf(n) {
      return this.http.post("LSU/modeCalcul", {
        modeCalcul: n
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(s => s.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la modification.", s.code, DOJ.genericError))), (0, W.K)(s => this.catchBadResponse(s)));
    }
    getElementsProgramme(n, s, d, h, P, z, Ae) {
      let Ve = `${z}${IZV}`;
      if (Ae) {
        Ve += Ae;
      }
      const Tt = Object.keys(As);
      for (let Hn of Tt) {
        Ve = Ve.replace(Hn, As[Hn]);
      }
      return this.http.post(`${n}/${s}/${d}/${h}/periodes/${P}/matieres/${Ve}/elementsProgramme`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(Hn => Hn.data), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    updateElementProgramme(n, s, d, h, P, z, Ae, Ve) {
      let Tt = `${z}${IZV}`;
      if (Ae) {
        Tt += Ae;
      }
      const Vt = Object.keys(As);
      for (let Ci of Vt) {
        Tt = Tt.replace(Ci, As[Ci]);
      }
      return this.http.post(`${n}/${s}/${d}/${h}/periodes/${P}/matieres/${Tt}/elementsProgramme/${Ve.id}`, Ve, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(Ci => Ci.data), (0, W.K)(Ci => this.catchBadResponse(Ci)));
    }
    editAppreciation(n, s, d, h, P, z, Ae, Ve) {
      const Tt = this.authStore.currentUser.typeCompte;
      const Vt = Fn[Tt] || Tt;
      let Hn = `${h}${IZV}`;
      if (P) {
        Hn += P;
      }
      const Ci = Object.keys(As);
      for (let vo of Ci) {
        Hn = Hn.replace(vo, As[vo]);
      }
      const fr = `${Vt}/${this.authStore.currentUser.id}/${n}/${s}/periodes/${d}/matieres/${Hn}/appreciations`;
      const ss = {
        idEleve: z,
        appreciations: [{
          code: Ae,
          contenu: YC.base64encode(Ve)
        }]
      };
      return this.http.post(fr, {
        eleves: [ss]
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, Z.b)(vo => this.removeEleveNotesCache()), (0, j.U)(vo => {}), (0, W.K)(vo => this.catchBadResponse(vo)));
    }
    removeEleveNotesCache() {
      this.httpCacheService.filter(n => n.startsWith("eleveNotes_"));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(LD8), t.LFG(nl), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let dwh = (() => {
  let R = class extends Gd {
    constructor(n, s, d, h, P) {
      super(h, d);
      this.authStore = n;
      this.financeStore = s;
      this.devTool = d;
      this.storage = h;
      this.uiService = P;
    }
    updatePanierStore(n, s, d) {
      let h = this.cloneDeep();
      switch (d) {
        case "addPaiementToPanier":
        case "removePaiementFromPanier":
        case "updateQtPaiementPanier":
        case "updateMontantPaiementPanier":
        case "viderPanier":
          h[s] = n;
      }
      this.store = h;
      this.setStorage(h).catch(P => console.error("PaiementStore.updatePanierStore setStorage : ", P));
    }
    addPaiementToPanier(n, s = true, d = 1) {
      const h = Object.getEntity(this.snapshot, this.authStore.variantForCurrentUser) || Z9G.createPanier(this.authStore.currentUser);
      let P = new Z9G(h);
      const z = P.addPaiementToPanier(n, s, d);
      if (z.isOk) {
        this.updatePanierStore(P, this.authStore.variantForCurrentUser, "addPaiementToPanier");
      }
      this.uiService.notifyEvent(z.action, z.message, "Panier", "icon-ed_panier");
    }
    removePaiementFromPanier(n) {
      const s = Object.getEntity(this.snapshot, this.authStore.variantForCurrentUser) || Z9G.createPanier(this.authStore.currentUser);
      let d = new Z9G(s);
      const h = d.removePaiementFromPanier(n);
      if (h.isOk) {
        this.updatePanierStore(d, this.authStore.variantForCurrentUser, "removePaiementFromPanier");
        this.uiService.notifyEvent(h.action, h.message, "Panier", "icon-ed_panier");
      }
    }
    updateQtPaiementPanier(n, s = "+", d = 1) {
      const h = Object.getEntity(this.snapshot, this.authStore.variantForCurrentUser) || Z9G.createPanier(this.authStore.currentUser);
      let P = new Z9G(h);
      const z = P.updateQtPaiementPanier(n, s, d);
      if (z.isOk) {
        this.updatePanierStore(P, this.authStore.variantForCurrentUser, "updateQtPaiementPanier");
        this.uiService.notifyEvent(z.action, z.message, "Panier", "icon-ed_panier");
      }
    }
    updateMontantPaiementPanier(n, s) {
      const d = Object.getEntity(this.snapshot, this.authStore.variantForCurrentUser) || Z9G.createPanier(this.authStore.currentUser);
      let h = new Z9G(d);
      if (h.updateMontantPaiementPanier(n, s)) {
        this.updatePanierStore(h, this.authStore.variantForCurrentUser, "updateMontantPaiementPanier");
      }
    }
    viderPanier() {
      const n = Object.getEntity(this.snapshot, this.authStore.variantForCurrentUser);
      let s = new Z9G(n);
      s.viderPanier();
      this.updatePanierStore(s, this.authStore.variantForCurrentUser, "viderPanier");
      this.financeStore.markAsExpired(this.authStore.variantForCurrentUser);
    }
    selectPanier(n) {
      return this.select$(s => Object.getEntity(s, n));
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(XTY), t.LFG(lbX), t.LFG("StorageService"), t.LFG(VLf));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: My,
    className: "PaiementStore",
    resetWhenSwipe: true,
    idDBKey: "panier"
  })], R);
  return R;
})();
export let NRE = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.authStore = n;
      this.financeService = s;
      this.paiementStore = d;
      this.httpCacheService = h;
      this.http = P;
    }
    boutiquePaiementsEnLigne(n = false) {
      const s = "boutique/paiementsenligne";
      if (n) {
        this.httpCacheService.delete(s);
      }
      const d = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: s,
        verbe: "get"
      });
      return (0, O.D)([this.http.post(s, {}, {
        params: d
      }).pipe((0, j.U)(h => Array.isArray(h.data) ? h.data.map(P => new Rm(P)) : [])), this.financeService.getComptes("sansdetails").pipe((0, j.U)(h => h.comptes))]).pipe((0, j.U)(h => {
        for (let P of h[0]) {
          for (let z of P.paiements) {
            let Ae = this.authStore.isFamille() ? h[1].find(Ve => Ve.codeCompte === z.code && Ve.idEleve === z.idEleve) : h[1].find(Ve => Ve.codeCompte === z.code);
            if (Ae) {
              z.soldeCompte = Ae.solde;
            }
          }
        }
        return h[0];
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    validationPanier(n) {
      const s = Object.getEntity(this.paiementStore.snapshot, this.authStore.variantForCurrentUser);
      if (!Object.isExists(s) || !s.isValide()) {
        return (0, I._)(() => new FwQ("Panier invalide !"));
      }
      const d = {
        mail: n,
        panier: s.listePaiementPanier,
        montant: s.calculTotal()
      };
      return this.http.post("boutique/paiementsenligne", d, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(h => {
        this.httpCacheService.delete("boutique/paiementsenligne");
        return h.data.urlSecure;
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getEtatTransaction(n) {
      const s = Y5f.buildSimpleQueryString({
        idtransaction: n,
        verbe: "get"
      });
      return this.http.post("boutique/etatpaiement", {}, {
        params: s
      }).pipe((0, j.U)(d => d.code), (0, W.K)(d => this.catchBadResponse(d)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(wgl), t.LFG(dwh), t.LFG(nl), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class rRP {
  constructor(e = {
    idPassageWeb: 0,
    idPassant: 0,
    typePassant: "",
    date: "",
    heure: "",
    idPDP: 0,
    dateTransmission: "",
    dateAcq: "",
    nom: "",
    prenom: "",
    particule: "",
    dateNaissance: "",
    sexe: "",
    photo: "",
    badge: ""
  }) {
    this.idPassageWeb = e.idPassageWeb;
    this.idPassant = e.idPassant;
    this.typePassant = e.typePassant;
    this.date = e.date;
    this.heure = e.heure;
    this.idPDP = e.idPDP;
    this.dateTransmission = e.dateTransmission;
    this.dateAcq = e.dateAcq;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.dateNaissance = e.dateNaissance;
    this.sexe = e.sexe;
    this.photo = e.photo;
    this.badge = e.badge;
  }
  isAnniversaire() {
    const e = new ifA();
    return e.transform(this.dateNaissance, "MM-dd") === e.transform(new Date(), "MM-dd");
  }
}
class pc {
  constructor(e = {
    date: "",
    listePassages: []
  }) {
    this.date = e.date;
    this.listePassages = Array.isArray(e.listePassages) ? e.listePassages.map(n => new rRP(n)) : [];
  }
}
class kf {
  constructor(e = {
    etablissementID: "",
    etablissementCode: "",
    etablissementLibelle: "",
    classeID: 0,
    classeCode: "",
    classeLibelle: "",
    nom: "",
    prenom: "",
    particule: "",
    dateNaissance: "",
    idEleve: 0,
    regimeID: 0,
    regimeCode: "",
    regimeLibelle: "",
    badge: "",
    photo: "",
    sexe: ""
  }) {
    this.etablissementID = e.etablissementID;
    this.etablissementCode = e.etablissementCode;
    this.etablissementLibelle = e.etablissementLibelle;
    this.classeID = e.classeID;
    this.classeCode = e.classeCode;
    this.classeLibelle = e.classeLibelle;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.particule = e.particule;
    this.dateNaissance = e.dateNaissance;
    this.idEleve = e.idEleve;
    this.regimeID = e.regimeID;
    this.regimeCode = e.regimeCode;
    this.regimeLibelle = e.regimeLibelle;
    this.badge = e.badge;
    this.photo = e.photo;
    this.sexe = e.sexe;
  }
}
class ju {
  constructor(e = {
    idPDP: 0,
    listePassagesPrevus: [],
    historiquePassagesWeb: []
  }) {
    this.idPDP = e.idPDP;
    this.listePassagesPrevus = e.listePassagesPrevus.map(n => new kf(n));
    this.historiquePassagesWeb = e.historiquePassagesWeb.map(n => new pc(n));
  }
  setHistoriquePassagesWeb(e, n) {
    let s = this.getHistoriquePassageWeb(e);
    if (!Object.isExists(s)) {
      s = new pc({
        date: e,
        listePassages: []
      });
      this.historiquePassagesWeb.push(s);
    }
    s.listePassages = n.map(d => new rRP(d));
  }
  getHistoriquePassageWeb(e) {
    return this.historiquePassagesWeb.find(n => n.date === e);
  }
  deletePassageWeb(e, n) {
    let s = this.getHistoriquePassageWeb(e);
    if (!Object.isExists(s)) {
      s = new pc({
        date: e,
        listePassages: []
      });
      this.historiquePassagesWeb.push(s);
    }
    s.listePassages.edRemove(d => d.idPassageWeb === n);
  }
  addPassageWeb(e, n) {
    let s = this.getHistoriquePassageWeb(e);
    if (!Object.isExists(s)) {
      s = new pc({
        date: e,
        listePassages: []
      });
      this.historiquePassagesWeb.push(s);
    }
    s.listePassages.push(n);
  }
}
class fd {
  constructor(e = {
    id: 0,
    libelle: "",
    heureDebut: "",
    heureFin: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.heureDebut = e.heureDebut;
    this.heureFin = e.heureFin;
    if (Object.isExists(e.restrictions)) {
      this.restrictions = e.restrictions;
    }
    if (Array.isArray(e.tabClassesRestreintes)) {
      this.tabClassesRestreintes = e.tabClassesRestreintes.map(n => new Mn7(n));
    }
  }
}
class bc {
  constructor(e = {
    idPDP: 0,
    tabIDClassesNonAutorisees: [],
    tabIDRegimesNonAutorisees: []
  }) {
    this.idPDP = e.idPDP;
    this.tabIDClassesNonAutorisees = Array.isArray(e.tabIDClassesNonAutorisees) ? [...e.tabIDClassesNonAutorisees] : [];
    this.tabIDRegimesNonAutorisees = Array.isArray(e.tabIDRegimesNonAutorisees) ? [...e.tabIDRegimesNonAutorisees] : [];
  }
}
class fu {
  constructor(e = {
    listePassagesParPDP: [],
    tabPDPAutorises: []
  }) {
    this.listePassagesParPDP = e.listePassagesParPDP.map(n => new ju(n));
    this.tabPDPAutorises = Array.isArray(e.tabPDPAutorises) ? e.tabPDPAutorises.map(n => new fd(n)) : [];
  }
  getListPassagesPDP(e) {
    return this.listePassagesParPDP.find(n => n.idPDP === e);
  }
  setListePassagesPrevus(e, n) {
    let s = this.getListPassagesPDP(e);
    if (!Object.isExists(s)) {
      s = new ju({
        idPDP: e,
        listePassagesPrevus: [],
        historiquePassagesWeb: []
      });
      this.listePassagesParPDP.push(s);
    }
    s.listePassagesPrevus = n.map(d => new kf(d));
  }
  setListePassagesWeb(e, n, s) {
    let d = this.getListPassagesPDP(e);
    if (!Object.isExists(d)) {
      d = new ju({
        idPDP: e,
        listePassagesPrevus: [],
        historiquePassagesWeb: []
      });
      this.listePassagesParPDP.push(d);
    }
    d.setHistoriquePassagesWeb(n, s);
  }
  deletePassageWeb(e, n, s) {
    let d = this.getListPassagesPDP(e);
    if (!Object.isExists(d)) {
      d = new ju({
        idPDP: e,
        listePassagesPrevus: [],
        historiquePassagesWeb: []
      });
      this.listePassagesParPDP.push(d);
    }
    d.deletePassageWeb(n, s);
  }
  addPassageWeb(e, n, s) {
    let d = this.getListPassagesPDP(e);
    if (!Object.isExists(d)) {
      d = new ju({
        idPDP: e,
        listePassagesPrevus: [],
        historiquePassagesWeb: []
      });
      this.listePassagesParPDP.push(d);
    }
    d.addPassageWeb(n, s);
  }
  setListePDP(e) {
    this.tabPDPAutorises = e;
  }
  setListeClassesRestreintesPDP(e, n) {
    const s = this.tabPDPAutorises.findIndex(d => d.id === n);
    if (s > 0 && e.length > 0) {
      this.tabPDPAutorises[s].tabClassesRestreintes = e.map(d => new Mn7(d));
    }
  }
  setRestrictionsPDP(e, n) {
    const s = this.tabPDPAutorises.findIndex(d => d.id === n);
    if (s > 0 && Object.isExists(e)) {
      this.tabPDPAutorises[s].restrictions = e;
    }
  }
}
class pf {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new fu(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let ICN = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(n);
      this.devTool = n;
      this.authstore = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updatePassageWebStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      if (!Object.isExists(P[s])) {
        P[s] = new fu({
          listePassagesParPDP: [],
          tabPDPAutorises: []
        });
      }
      const z = P[s];
      switch (d) {
        case "getListePassagesPrevus":
          z.setListePassagesPrevus(h.idPDP, n);
          Object.setExpired(z, this.expireableTTL);
          break;
        case "getListePassagesWeb":
          z.setListePassagesWeb(h.idPDP, h.date, n);
          Object.setExpired(z, this.expireableTTL);
          break;
        case "deletePassageWeb":
          z.deletePassageWeb(h.idPDP, h.date, n);
          Object.setExpired(z, this.expireableTTL);
          break;
        case "addPassageWeb":
        case "addPassageWebFromScanReponse":
          z.addPassageWeb(h.idPDP, h.date, n);
          Object.setExpired(z, this.expireableTTL);
          break;
        case "getListePDP":
          z.setListePDP(n);
          Object.setExpired(z, this.expireableTTL);
          break;
        case "getListeClassesRestreintesPDP":
          z.setListeClassesRestreintesPDP(n, h.idPDP);
          Object.setExpired(z, this.expireableTTL);
          break;
        case "getRestrictionsPDP":
          z.setRestrictionsPDP(n, h.idPDP);
          Object.setExpired(z, this.expireableTTL);
      }
      this.store = P;
    }
    selectListPassagesWebPourPDP(n, s, d, h, P = C_1.dateToString(new Date())) {
      const z = $ej.edDBUserSpecificKey(n, s, d);
      return this.select$(Ae => {
        if (!Object.isExists(Ae[z]) || !Object.isExists(Ae[z].listePassagesParPDP)) {
          return;
        }
        const Ve = Ae[z].getListPassagesPDP(h);
        if (!Object.isExists(Ve)) {
          return;
        }
        const Tt = Ve.getHistoriquePassageWeb(P);
        if (Object.isExists(Tt)) {
          return Tt.listePassages;
        } else {
          return undefined;
        }
      });
    }
    getListPassagesWebPourPDP(n, s, d, h, P = C_1.dateToString(new Date())) {
      const z = $ej.edDBUserSpecificKey(n, s, d);
      if (!Object.isExists(this.snapshot[z]) || !Object.isExists(this.snapshot[z].listePassagesParPDP)) {
        return;
      }
      const Ae = this.snapshot[z].getListPassagesPDP(h);
      if (!Object.isExists(Ae)) {
        return;
      }
      const Ve = Ae.getHistoriquePassageWeb(P);
      if (Object.isExists(Ve)) {
        return Ve.listePassages;
      } else {
        return undefined;
      }
    }
    getListePassagesPrevusPourPDP(n) {
      const s = this.authstore.variantForCurrentUser;
      if (!Object.isExists(this.snapshot[s]) || !Object.isExists(this.snapshot[s].listePassagesParPDP)) {
        return;
      }
      const d = this.snapshot[s].getListPassagesPDP(n);
      if (!Object.isExists(d)) {
        return;
      }
      const h = d.listePassagesPrevus;
      if (Object.isExists(h)) {
        return h;
      } else {
        return undefined;
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX), t.LFG(CnD));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: pf,
    className: "PassageWebStore"
  })], R);
  return R;
})();
export let bzt = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.http = n;
      this.authStore = s;
      this.passageWebStore = d;
      this.httpCacheService = h;
    }
    getListePassagesPrevus(n, s = false) {
      const d = Object.getEntity(this.passageWebStore.snapshot, this.authStore.variantForCurrentUser);
      let h = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", `getListePassagesPrevus_${n}`).set("cacheTTL", `${X9o.uneHeure}`);
      if (s || Object.isExpired(d)) {
        return this.http.post(`PassageWeb/${typeof n !== "undefined" ? n : 0}/recupDesPassagesPrevus`, {}, {
          params: h
        }).pipe((0, j.U)(z => {
          this.passageWebStore.updatePassageWebStore(z.data, this.authStore.variantForCurrentUser, "getListePassagesPrevus", {
            idPDP: n
          });
        }), (0, W.K)(z => this.catchBadResponse(z)));
      } else {
        return E.E;
      }
    }
    getListePassagesWeb(n, s = C_1.dateToString(new Date()), d = false) {
      const h = Object.getEntity(this.passageWebStore.snapshot, this.authStore.variantForCurrentUser);
      if (d || Object.isExpired(h)) {
        return this.http.post(`PassageWeb/${typeof n !== "undefined" ? n : 0}/recupDesPassagesWeb/${s}`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(z => {
          this.passageWebStore.updatePassageWebStore(z.data, this.authStore.variantForCurrentUser, "getListePassagesWeb", {
            idPDP: n,
            date: s
          });
        }), (0, W.K)(z => this.catchBadResponse(z)));
      } else {
        return E.E;
      }
    }
    addPassageWeb(n, s, d) {
      return this.http.post(`PassageWeb/${d.idPDP}/recupDesPassagesWeb/${d.date}`, {
        passageWeb: d
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(h => {
        if (h.code === GL1.OK) {
          const P = new rRP({
            ...d,
            idPassageWeb: h.data.idPassageWeb
          });
          this.passageWebStore.updatePassageWebStore(P, this.authStore.variantForCurrentUser, "addPassageWeb", {
            idPDP: P.idPDP,
            date: P.date
          });
          return (0, S.of)(true);
        }
        {
          const P = Object.isExists(h.message) ? h.message : "Une erreur est survenue lors de l'ajout du passage, merci de réessayer !";
          return (0, I._)(() => new FwQ(P, h.code));
        }
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    addPassageWebFromScanReponse(n, s) {
      const d = new Date();
      const h = new rRP({
        idPassant: n.id,
        typePassant: n.type,
        idPDP: s,
        date: C_1.dateToString(d),
        heure: C_1.convertHoursToString(d),
        badge: n.numeroBadge,
        nom: n.nom,
        prenom: n.prenom,
        photo: n.photo,
        sexe: n.sexe
      });
      return this.http.post(`PassageWeb/${h.idPDP}/recupDesPassagesWeb/${h.date}`, {
        passageWeb: h
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(P => {
        if (P.code === GL1.OK) {
          const z = new rRP({
            ...h,
            idPassageWeb: P.data.idPassageWeb
          });
          this.passageWebStore.updatePassageWebStore(z, this.authStore.variantForCurrentUser, "addPassageWebFromScanReponse", {
            idPDP: z.idPDP,
            date: z.date
          });
          return (0, S.of)(true);
        }
        {
          const z = Object.isExists(P.message) ? P.message : "Une erreur est survenue lors de l'ajout du passage, merci de réessayer !";
          return (0, I._)(() => new FwQ(z, P.code));
        }
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    deletePassageWeb(n, s, d, h, P) {
      return this.http.post("PassageWeb/" + d, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(z => {
        if (z.code === GL1.OK) {
          this.passageWebStore.updatePassageWebStore(d, this.authStore.variantForCurrentUser, "deletePassageWeb", {
            idPDP: h,
            date: P
          });
          return (0, S.of)(true);
        }
        {
          const Ae = Object.isExists(z.message) ? z.message : "Une erreur est survenue lors de la suppression du passage, merci de réessayer !";
          return (0, I._)(() => new FwQ(Ae, z.code));
        }
      }), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getListePDP() {
      const s = Kg5.getModuleParametre(qzA.PASSAGEWEB, "listePDP", this.authStore.currentUser).split("||");
      let d = [];
      s.forEach(h => {
        const P = h.split(":");
        let z = new fd();
        z.id = +P[0];
        z.libelle = P[1];
        z.heureDebut = P[2].slice(0, 2) + ":" + P[2].slice(-2);
        z.heureFin = P[3].slice(0, 2) + ":" + P[3].slice(-2);
        d.push(z);
      });
      this.passageWebStore.updatePassageWebStore(d, this.authStore.variantForCurrentUser, "getListePDP");
      return d;
    }
    getListeClassesRestreintesPDP(n, s = false) {
      const d = `getListeClassesPDP${n}`;
      if (s) {
        this.httpCacheService.delete(d);
      }
      const h = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: d,
        verbe: "get"
      });
      return this.http.post(`PassageWeb/${n}/recupDesClasses`, {}, {
        params: h
      }).pipe((0, F.w)(P => {
        if (P.code === GL1.OK) {
          let z = [];
          P.data.forEach(Ae => {
            const Ve = new Mn7();
            Ve.id = Ae.classeID;
            Ve.code = Ae.classeCode;
            Ve.libelle = Ae.classeLibelle;
            Ve.etabId = Ae.etablissementID;
            Ve.etabLibelle = Ae.etablissementLibelle;
            z.push(Ve);
          });
          this.passageWebStore.updatePassageWebStore(z, this.authStore.variantForCurrentUser, "getListeClassesRestreintesPDP", {
            idPDP: n
          });
          return (0, S.of)(z);
        }
        {
          const z = Object.isExists(P.message) ? P.message : "Une erreur est survenue lors de la récupération des classes, merci de réessayer !";
          return (0, I._)(() => new FwQ(z, P.code));
        }
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    getRestrictionsPDP(n) {
      let s = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", `getRestrictionsPDP_${n}`).set("cacheTTL", `${X9o.uneHeure}`);
      return this.http.post(`PassageWeb/${n}/recupDesRestrictions`, {}, {
        params: s
      }).pipe((0, F.w)(d => {
        if (d.code === GL1.OK) {
          const h = new bc(d.data);
          this.passageWebStore.updatePassageWebStore(h, this.authStore.variantForCurrentUser, "getRestrictionsPDP", {
            idPDP: n
          });
          return (0, S.of)(h);
        }
        {
          const h = Object.isExists(d.message) ? d.message : "Une erreur est survenue lors de la récupération des passages prévus, merci de réessayer !";
          return (0, I._)(() => new FwQ(h, d.code));
        }
      }), (0, W.K)(d => this.catchBadResponse(d)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(CnD), t.LFG(ICN), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let XQ5 = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updatePostitsStore(n, s, d) {
      let h = this.cloneDeep();
      switch (d) {
        case "listePostits":
          h[s] = new A({
            postits: n
          });
          Object.setExpired(h[s], this.expireableTTL);
          break;
        case "savePostit":
        case "updatePostit":
        case "deletePostit":
          h.updatePostitStorage(s, n, d === "deletePostit", this.expireableTTL);
      }
      this.store = h;
    }
    selectListePostits(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.postits;
        } else {
          return [];
        }
      });
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: m,
    className: "PostitsStore"
  })], R);
  return R;
})();
export let wlB = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.httpCacheService = n;
      this.store = s;
      this.http = d;
      this.espaceDeTravailStore = h;
    }
    listePostits(n, s, d, h = false, P = false) {
      const z = $ej.edDBUserSpecificKey(n, s, d);
      const Ae = Object.getEntity(this.store.snapshot, z);
      let Ve = new Et().set("verbe", "get");
      if (P) {
        Ve = Ve.set("administrable", "o");
      }
      if (h || Object.isExpired(Ae)) {
        return this.http.post(`${s}/${d}/postits`, {}, {
          params: Ve
        }).pipe((0, j.U)(Tt => this.store.updatePostitsStore(Tt.data, z, "listePostits")), (0, W.K)(Tt => this.catchBadResponse(Tt, Vt => this.handleError(Vt))));
      } else {
        return E.E;
      }
    }
    savePostit(n, s, d, h) {
      let P = new ifA();
      let z = new ZUG(n);
      if (FSr.isNotEmptyString(n.dateFin)) {
        z.dateFin = P.transform(new Date(n.dateFin), "yyyyMMdd");
      }
      if (FSr.isNotEmptyString(n.dateDebut)) {
        z.dateDebut = P.transform(new Date(n.dateDebut), "yyyyMMdd");
      }
      const Ae = $ej.edDBUserSpecificKey(s, d, h);
      const Ve = n.cible;
      z.cible = n.ciblesConcatenees;
      return this.http.post(`${d}/${h}/postits`, {
        postit: z
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Tt => {
        if (Tt.code === GL1.OK) {
          const Vt = new ZUG({
            ...n,
            id: Tt.data.id,
            cible: Ve
          });
          let Hn = new ifA();
          Vt.dateCreation = Hn.transform(new Date(), "dd/MM/YYYY");
          if (FSr.isNotEmptyString(n.dateDebut)) {
            Vt.dateDebut = Hn.transform(new Date(n.dateDebut), "dd/MM/YYYY");
          }
          if (FSr.isNotEmptyString(n.dateFin)) {
            Vt.dateFin = Hn.transform(new Date(n.dateFin), "dd/MM/YYYY");
          }
          if (n.cible[0].substring(0, 1) === meW.ESPACE_TRAVAIL) {
            let fr = z.cible[0].substring(1);
            this.espaceDeTravailStore.updateFilActivitesStore(+fr, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_ADD, VXF.CIBLE_POSTIT);
          }
          this.store.updatePostitsStore(Vt, Ae, "savePostit");
          if (n.isPostItEspaceTravail()) {
            this.httpCacheService.delete("listeAgendaOuPostItsEspacesTravail_postits");
          } else {
            this.httpCacheService.delete(`timelineCommun_${d}_${h}`);
          }
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la création du postit, merci de réessayer !", Tt.code, DOJ.genericError));
      }), (0, W.K)(Tt => this.catchBadResponse(Tt, Vt => this.handleError(Vt))));
    }
    updatePostit(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      n.cible = n.ciblesConcatenees;
      return this.http.post(`postits/${n.id}`, {
        postit: n
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(z => {
        if (z.code === GL1.OK) {
          const Ae = new ZUG({
            ...n,
            dateDebut: z.data.dateDebut,
            dateFin: z.data.dateFin,
            dateCreation: z.data.dateCreation,
            cible: z.data.cible
          });
          if (n.cible[0].substring(0, 1) === meW.ESPACE_TRAVAIL) {
            let Tt = n.cible[0].substring(1);
            this.espaceDeTravailStore.updateFilActivitesStore(+Tt, VXF.ESPACE_TRAVAIL_TYPE_ACTIVITE_UPDATE, VXF.CIBLE_POSTIT);
          }
          this.store.updatePostitsStore(Ae, P, "updatePostit");
          if (n.isPostItEspaceTravail()) {
            this.httpCacheService.delete("listeAgendaOuPostItsEspacesTravail_postits");
          } else {
            this.httpCacheService.delete(`timelineCommun_${d}_${h}`);
          }
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la mise à jour du postit, merci de réessayer !", z.code, DOJ.genericError));
      }), (0, W.K)(z => this.catchBadResponse(z, Ae => this.handleError(Ae))));
    }
    updateOrdrePostit(n) {
      return this.http.post(`postits/${n.id}`, {
        action: "updateordre",
        postit: n
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(d => d.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la mise à jour de l'ordre, merci de réessayer !", d.code, DOJ.genericError))), (0, W.K)(d => this.catchBadResponse(d, h => this.handleError(h))));
    }
    deletePostit(n, s, d, h) {
      const P = $ej.edDBUserSpecificKey(s, d, h);
      return this.http.post(`postits/${n.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(Ae => Ae.code === GL1.OK ? (this.store.updatePostitsStore(new ZUG(n), P, "deletePostit"), n.isPostItEspaceTravail() ? this.httpCacheService.delete("listeAgendaOuPostItsEspacesTravail_postits") : this.httpCacheService.delete(`timelineCommun_${d}_${h}`), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de votre post-it, merci de réessayer !", Ae.code, DOJ.genericError))), (0, W.K)(Ae => this.catchBadResponse(Ae, Ve => this.handleError(Ve))));
    }
    handleError(n) {
      if (n.status === 512) {
        n.message = K3B.dateInvalidError;
        n.action = DOJ.genericError;
      }
      return (0, I._)(() => n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(nl), t.LFG(XQ5), t.LFG(pt), t.LFG(EYm));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export const mZK = (R, e, n) => s => {
  let d;
  switch (R) {
    case xq9.radio.id:
      {
        const h = s.get("radio");
        if (h) {
          if (`${h.value}` == `${e}`) {
            return null;
          } else {
            return {
              invalidQuestion: true
            };
          }
        } else {
          return null;
        }
      }
    case xq9.checkbox.id:
      {
        d = s.get(["checkbox"]);
        if (!d) {
          return null;
        }
        let h = e.map(z => `${z}`);
        const P = d.value.map(z => `${z}`).sort();
        h.sort();
        if (P.join("") === h.join("")) {
          return null;
        } else {
          return {
            invalidQuestion: true
          };
        }
      }
    case xq9.textholes.id:
      d = s.get(["textholes", n]);
      if (d) {
        if (d.value.every((P, z) => e[z].split("|").some(Ve => QR_.getCleanValue(P) === QR_.getCleanValue(Ve)))) {
          return null;
        } else {
          return {
            invalidQuestion: true,
            idPropTrous: n
          };
        }
      } else {
        return null;
      }
    default:
      return null;
  }
};
export let W$X = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(n);
      this.devTool = n;
      this.etablissementStore = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateQCMStore(n, s, d) {
      let h = this.cloneDeep();
      h.setNewQCMsRecuperes(d, n, s, uKw.getProfClassesGroupesTreeConcatUnique(this.etablissementStore.snapshot), this.expireableTTL);
      this.store = h;
    }
    patchQCMStore(n, s, d) {
      let h = this.cloneDeep();
      if (Object.isExists(h[s]) || n === "cloneQCM" || n === "saveQCM" || n === "reuseQCM") {
        switch (n) {
          case "saveQCM":
            if (!Object.isExists(h[s])) {
              h[s] = new ll();
            }
            h[s].saveQCM(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "startQCM":
          case "stopQCM":
            h[s].startStopQCM(n === "startQCM", d);
            this.store = h;
            break;
          case "editParametresAssociation":
            h[s].editParametresAssociation(d);
            this.store = h;
            break;
          case "deleteAutomatisationAssociation":
            h[s].deleteAutomatisationAssociation(d);
            this.store = h;
            break;
          case "cloneQCM":
            if (!Object.isExists(h[s])) {
              h[s] = new ll();
            }
            h[s].cloneQCM(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "supprimerQCM":
            h[s].supprimerQCM(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "reuseQCM":
            if (!Object.isExists(h[s])) {
              h[s] = new ll();
            }
            h[s].reuseQCM(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "shareQCM":
            h[s].shareQCM(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "unshareQCM":
            h[s].unshareQCM(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "updateEtiquettes":
            h[s].updateEtiquettes(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "supprimerTag":
            h[s].supprimerTag(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "deleteAssociation":
            h[s].deleteAssociation(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "manageTag":
            h[s].manageTag(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "associerDevoir":
            h[s].associerDevoir(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "associerTAF":
            h[s].associerTAF(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "saveQuestion":
            h[s].saveQuestion(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
            break;
          case "supprimerQuestion":
            h[s].supprimerQuestion(d);
            Object.setExpired(h[s], this.expireableTTL);
            this.store = h;
        }
      }
    }
    selectAllQCMs(n) {
      return this.select$(s => Object.getEntity(s, n));
    }
    selectQCMsFilterByEtiquette(n, s) {
      return this.selectAllQCMs(s).pipe((0, j.U)(d => Object.isExists(d) ? Object.isExists(n) ? Array.isArray(n) && n.length === 0 ? d.qcms.filter(h => h.etiquettes.length === 0) : d.qcms.filter(h => h.etiquettes.some(P => Array.isArray(n) && n.includes(P) || n === P)) : d.qcms : []));
    }
    selectQCM(n, s) {
      return this.selectAllQCMs(s).pipe((0, j.U)(d => Object.isExists(d) && d.qcms.find(h => h.id === n) || undefined));
    }
    getQCM(n, s) {
      if (Object.isExists(this.snapshot[s])) {
        return this.snapshot[s].qcms.find(d => d.id === n);
      }
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX), t.LFG(VD2));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: ccH,
    className: "QCMStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let Jqz = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.authStore = n;
      this.qcmStore = s;
      this.cdtStore = d;
      this.httpCacheService = h;
      this.http = P;
    }
    getQCMs(n, s = false) {
      if (s || Object.isExpired(this.qcmStore.snapshot[n])) {
        const h = Fn[this.authStore.currentUser.typeCompte];
        return (0, O.D)([this.http.post(`${h}/${this.authStore.currentUser.id}/qcms`, {
          anneeQCMs: n
        }, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(P => P.data)), this.http.post(`${h}/${this.authStore.currentUser.id}/qcms/etiquettes`, {
          anneeQCMs: n
        }, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(P => P.data))]).pipe((0, j.U)(P => this.qcmStore.updateQCMStore(P[0], P[1], n)), (0, W.K)(P => this.catchBadResponse(P)));
      }
      return E.E;
    }
    saveQCM(n) {
      const s = Fn[this.authStore.currentUser.typeCompte];
      const h = n.id > 0 ? "put" : "post";
      return this.http.post(n.id > 0 ? `${s}/${this.authStore.currentUser.id}/qcms/${n.id}` : `${s}/${this.authStore.currentUser.id}/qcms`, {
        qcm: n
      }, {
        params: new Et().set("verbe", h)
      }).pipe((0, j.U)(P => {
        n.id = P.data.id > 0 ? P.data.id : n.id;
        n.created = P.data.created ? P.data.created : n.created;
        this.qcmStore.patchQCMStore("saveQCM", this.authStore.currentUser.anneeScolaireCourante, {
          qcm: n
        });
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    startQCM(n, s, d) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}`, {
        action: "startQCM",
        idAssociation: s
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(P => this.qcmStore.patchQCMStore("startQCM", d, {
        idQCM: n,
        idAssociation: s
      })), (0, W.K)(P => this.catchBadResponse(P)));
    }
    stopQCM(n, s, d) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}`, {
        action: "stopQCM",
        idAssociation: s
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(P => {
        this.qcmStore.patchQCMStore("stopQCM", d, {
          idQCM: n,
          idAssociation: s
        });
        return P.data;
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    associerDevoir(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/associations`, {
        idEntite: s.idEntite,
        typeEntite: "EVALUATION"
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(h => {
        const P = new Ldb({
          ...s,
          id: h.data.id
        });
        this.qcmStore.patchQCMStore("associerDevoir", this.authStore.currentUser.anneeScolaireCourante, {
          idQCM: n,
          newDev: P
        });
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    associerTAF(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/associations`, {
        idEntite: s.idEntite,
        typeEntite: "CDT"
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(h => {
        this.cdtStore.markAsExpired($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id));
        const P = new NyH({
          ...s,
          id: h.data.id
        });
        this.qcmStore.patchQCMStore("associerTAF", this.authStore.currentUser.anneeScolaireCourante, {
          idQCM: n,
          newTaf: P
        });
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    supprimerAssociation(n, s, d) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/associations/${s.id}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.qcmStore.patchQCMStore("deleteAssociation", d, {
        idQCM: n,
        association: s
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de l'association, merci de réessayer !", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    editParametresAssociation(n, s, d) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/associations/${s}`, d, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(P => this.qcmStore.patchQCMStore("editParametresAssociation", this.authStore.currentUser.anneeScolaireCourante, {
        idQCM: n,
        idAssociation: s,
        ...d
      })), (0, W.K)(P => this.catchBadResponse(P)));
    }
    deleteAutomatisationAssociation(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/associations/${s}`, {
        action: "deleteAutomatisation"
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(h => this.qcmStore.patchQCMStore("deleteAutomatisationAssociation", this.authStore.currentUser.anneeScolaireCourante, {
        idQCM: n,
        idAssociation: s
      })), (0, W.K)(h => this.catchBadResponse(h)));
    }
    updateEtiquettes(n, s, d, h, P) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}`, {
        action: "updateEtiquettes",
        etiquettes: s
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(Ae => this.qcmStore.patchQCMStore("updateEtiquettes", P, {
        idQCM: n,
        etiquettes: s,
        idTag: d,
        howmany: h
      })), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    cloneQCM(n, s, d) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}`, {
        anneeQCMs: d,
        qcm: s
      }, {
        params: new Et().set("verbe", "copy")
      }).pipe((0, j.U)(P => {
        s.id = P.data.id;
        s.created = P.data.created;
        this.qcmStore.patchQCMStore("cloneQCM", this.authStore.currentUser.anneeScolaireCourante, {
          clone: s
        });
      }), (0, W.K)(P => this.catchBadResponse(P)));
    }
    supprimerQCM(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}`, {
        anneeQCMs: s
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (this.qcmStore.patchQCMStore("supprimerQCM", s, {
        idQCM: n
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression du qcm, merci de réessayer !", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    manageTag(n) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/etiquettes`, {
        etiquette: n
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(d => this.qcmStore.patchQCMStore("manageTag", this.authStore.currentUser.anneeScolaireCourante, {
        etiquette: n,
        id: d.data.id
      })), (0, W.K)(d => this.catchBadResponse(d)));
    }
    supprimerTag(n) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/etiquettes`, {
        anneeQCMs: this.authStore.currentUser.anneeScolaireCourante,
        ids: [n.id]
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(d => d.code === GL1.OK ? (this.qcmStore.patchQCMStore("supprimerTag", this.authStore.currentUser.anneeScolaireCourante, n), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de l'étiquette, merci de réessayer !", d.code, DOJ.genericError))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getQCMSEleveEvalues(n) {
      return this.http.post(`${Fn[dcH.ELEVE]}/${n}/qcms/0/associations`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(d => Array.isArray(d.data) ? d.data.map(h => new sc(h)) : []), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getResultatQuestionnaire(n, s, d, h) {
      return this.http.post(`${Fn[n] || n}/${s}/qcms/${d}/associations/${h}/resultat`, {
        anneeQCMs: this.authStore.currentUser.anneeScolaireCourante
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(z => z.data), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getResultatsQuestionnaire(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/associations/${s}/resultats`, {
        anneeQCMs: this.authStore.currentUser.anneeScolaireCourante
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getParticipantQuestionnaire(n, s, d, h, P, z) {
      return this.http.post(`${Fn[n] || n}/${s}/${P ? "national/" : ""}qcms/${d}/associations/${h}`, {
        anneeQCMs: z
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(Vt => Vt.data), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    saveParticipantReponse(n, s, d, h, P) {
      return this.http.post(`${Fn[dcH.ELEVE]}/${n}/qcms/${s}/associations/${d}/participants/${h}/reponse/${P.id}`, {
        reponse: P
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(Ve => Ve.data), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    setStartDateQCMEleve(n, s, d, h) {
      return this.http.post(`${Fn[dcH.ELEVE]}/${n}/qcms/${s}/associations/${d}/participants/${h}`, {
        action: "updateStartDate"
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    setEndDateQCMEleve(n, s, d, h) {
      return this.http.post(`${Fn[dcH.ELEVE]}/${n}/qcms/${s}/associations/${d}/participants/${h}`, {
        action: "updateEndDate"
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    getAssociationsPotentielles(n) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/associations`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getQuestions(n) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/questions`, {
        anneeQCMs: this.authStore.currentUser.anneeScolaireCourante
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
    updateQuestionOrdre(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/questions/${s.id}`, {
        action: "updateordre",
        question: s
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la mise à jour de l'ordre.", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    supprimerQuestion(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/questions/${s}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (this.qcmStore.patchQCMStore("supprimerQuestion", this.authStore.currentUser.anneeScolaireCourante, {
        idQCM: n
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de la question, merci de réessayer !", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    supprimerQuestionSon(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/questions/${s.id}`, {
        action: "supprimeson",
        question: s
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (0, S.of)(true) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la suppression du son.", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    updateQuestionSon(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/${n}/questions/${s.id}`, {
        action: "updateson",
        question: s
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
    saveQuestion(n, s, d = false) {
      const h = Fn[this.authStore.currentUser.typeCompte];
      const z = s.id > 0 ? "put" : "post";
      return this.http.post(s.id > 0 ? `${h}/${this.authStore.currentUser.id}/qcms/${n}/questions/${s.id}` : `${h}/${this.authStore.currentUser.id}/qcms/${n}/questions`, s.id > 0 ? {
        question: s
      } : {
        question: s,
        duplicate: d
      }, {
        params: new Et().set("verbe", z)
      }).pipe((0, j.U)(Ve => {
        if (s.id === 0) {
          this.qcmStore.patchQCMStore("saveQuestion", this.authStore.currentUser.anneeScolaireCourante, {
            idQCM: n
          });
        }
        return Ve.data;
      }), (0, W.K)(Ve => this.catchBadResponse(Ve)));
    }
    getTaxonomie(n = false) {
      const d = `${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/qcms/taxonomie`;
      if (n) {
        this.httpCacheService.delete(d);
      }
      const h = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: d,
        verbe: "get"
      });
      return this.http.post(d, {}, {
        params: h
      }).pipe((0, j.U)(P => P.data), (0, W.K)(P => this.catchBadResponse(P)));
    }
    shareQCM(n) {
      const s = Fn[this.authStore.currentUser.typeCompte];
      return this.http.post(`${s}/${this.authStore.currentUser.id}/qcms/${n.id}`, {
        share: true,
        qcm: n
      }, {
        params: new Et().set("verbe", "copy")
      }).pipe((0, j.U)(d => {
        this.httpCacheService.delete(`${s}/${this.authStore.currentUser.id}/qcms/taxonomie`);
        this.httpCacheService.filter(h => h.indexOf("/national/") > -1);
        n.guid = d.data.guid ? d.data.guid : n.guid;
        this.qcmStore.patchQCMStore("shareQCM", this.authStore.currentUser.anneeScolaireCourante, {
          qcm: n
        });
      }), (0, W.K)(d => this.catchBadResponse(d)));
    }
    unshareQCM(n, s) {
      const d = Fn[this.authStore.currentUser.typeCompte];
      return this.http.post(`${d}/${this.authStore.currentUser.id}/national/qcms/${n.id}`, {
        guid: n.guid
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, j.U)(h => {
        this.httpCacheService.delete(`${d}/${this.authStore.currentUser.id}/qcms/taxonomie`);
        this.httpCacheService.filter(P => P.indexOf("/national/") > -1);
        this.qcmStore.patchQCMStore("unshareQCM", s, {
          idQCM: n.id
        });
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getQCMsNational(n, s, d = false) {
      const P = `${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/national/${n}/qcms`;
      if (d) {
        this.httpCacheService.delete(P);
      }
      const z = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: P,
        cacheTTL: `${X9o.unQuartDHeure}`,
        verbe: "get"
      });
      return this.http.post(P, {
        search: s
      }, {
        params: z
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    rateQCM(n, s) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/national/qcms/${n.id}`, {
        rating: s,
        action: "rateQCM"
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
    reuseQCM(n) {
      return this.http.post(`${Fn[this.authStore.currentUser.typeCompte]}/${this.authStore.currentUser.id}/national/qcms/${n.id}`, {
        qcm: n
      }, {
        params: new Et().set("verbe", "copy")
      }).pipe((0, j.U)(d => {
        n.natNbTelecharge = typeof d.data.natNbTelecharge !== "undefined" ? d.data.natNbTelecharge : n.natNbTelecharge;
        n.nbQuestions = typeof d.data.nbQuestions !== "undefined" ? d.data.nbQuestions : n.nbQuestions;
        let h = Gmi.create(this.authStore.currentUser.id, n);
        h.id = d.data.id;
        h.created = d.data.created;
        h.guid = "";
        this.qcmStore.patchQCMStore("reuseQCM", this.authStore.currentUser.anneeScolaireCourante, {
          newQCM: h
        });
      }), (0, W.K)(d => this.catchBadResponse(d)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(W$X), t.LFG(x1h), t.LFG(nl), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export const Q$ = {
  privated: 0,
  published: 1,
  0: "privé",
  1: "publié"
};
export let Noz = (() => {
  let R = class {
    constructor(n = {
      id: 0
    }) {
      this.id = n.id;
      if (typeof n.idUser !== "undefined" && n.idUser !== "") {
        this.idUser = n.idUser;
      }
      if (typeof n.typeUser !== "undefined" && n.typeUser !== "") {
        this.typeUser = n.typeUser;
      }
      if (typeof n.prenom !== "undefined" && n.prenom !== "") {
        this.prenom = n.prenom;
      }
      if (typeof n.nom !== "undefined" && n.nom !== "") {
        this.nom = n.nom;
      }
      if (typeof n.particule !== "undefined" && n.particule !== "") {
        this.particule = n.particule;
      }
      if (typeof n.civilite !== "undefined" && n.civilite !== "") {
        this.civilite = n.civilite;
      }
      if (typeof n.versQui !== "undefined" && n.versQui !== "") {
        this.versQui = n.versQui;
      }
      if (typeof n.fini !== "undefined" && n.fini !== "") {
        this.fini = n.fini;
      }
      if (typeof n.signature !== "undefined") {
        this.signature = new Sej(n.signature);
      }
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDFSParticipant"
  })], R);
  return R;
})();
export class U0N {
  constructor(e = {
    id: 0,
    typeF: "",
    titre: "",
    resume: "",
    introduction: "",
    conclusion: "",
    signature: false,
    created: "",
    idAuteur: 0,
    typeAuteur: "",
    efface: false,
    reviewState: 0,
    nbQuestions: 0,
    fInsteadOfE: false
  }) {
    this.id = e.id;
    this.typeF = e.typeF;
    this.titre = e.titre;
    this.resume = e.resume;
    this.introduction = e.introduction;
    this.conclusion = e.conclusion;
    this.signature = e.signature;
    this.created = e.created;
    this.idAuteur = e.idAuteur;
    this.typeAuteur = e.typeAuteur;
    this.efface = e.efface;
    this.reviewState = e.reviewState;
    this.nbQuestions = e.nbQuestions;
    this.fInsteadOfE = e.fInsteadOfE === true;
    this.participants = Array.isArray(e.participants) ? e.participants.map(n => new Noz(n)) : [];
    if (typeof e.introductionDecode !== "undefined") {
      this.introductionDecode = e.introductionDecode;
    }
    if (typeof e.conclusionDecode !== "undefined") {
      this.conclusionDecode = e.conclusionDecode;
    }
    if (typeof e.debute !== "undefined" && e.debute !== "") {
      this.debute = e.debute;
    }
    if (typeof e.fini !== "undefined" && e.fini !== "") {
      this.fini = e.fini;
    }
  }
  static create(e) {
    let n = new U0N();
    n.idAuteur = e.id;
    n.typeAuteur = e.typeCompte;
    return n;
  }
  get isDatesOK() {
    return FSr.isNotEmptyString(this.debute) && FSr.isNotEmptyString(this.fini);
  }
  get isActive() {
    if (this.isDatesOK) {
      const e = new Date();
      const n = new Date(C_1.formatDate(this.fini));
      return !C_1.isEqual(e, n, true) && !C_1.isAfter(e, n, true) && (this.reviewState === Q$.published || C_1.isBetween(e, new Date(C_1.formatDate(this.debute)), n, true, true, false));
    }
    return this.reviewState === Q$.published;
  }
  get typeToLibelleEDForms() {
    return xl[this.typeF];
  }
  get etiquettes() {
    let e = [xl[this.typeF]];
    if (this.signature === true) {
      e.push("signature requise");
    }
    if (this.fInsteadOfE === true) {
      e.push("Les familles répondent à la place des élèves");
    }
    e.push(this.participants.length + " participant(s)");
    return e;
  }
  get participantsAsContacts() {
    return this.participants.map(e => tHm.convertUserToContactMessagerie(e));
  }
  get nonFinisAsContacts() {
    return this.participants.filter(e => !FSr.isNotEmptyString(e.fini)).map(e => tHm.convertUserToContactMessagerie(e));
  }
}
class ws {
  constructor(e = {
    forms: []
  }) {
    this.forms = Array.isArray(e.forms) ? e.forms.map(n => new U0N(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  saveFS(e) {
    const n = this.forms.findIndex(s => e.id === s.id);
    if (n === -1) {
      this.forms.unshift(e);
    } else {
      this.forms[n] = e;
    }
  }
  supprimerFS(e) {
    const n = this.forms.findIndex(s => e === s.id);
    if (n > -1) {
      this.forms.splice(n, 1);
    }
  }
  cloneFS(e) {
    this.forms.unshift(new U0N(e));
  }
  startStopFS(e, n) {
    let s = this.forms.find(d => n === d.id);
    if (Object.isExists(s)) {
      s.reviewState = e;
      let d = e === Q$.privated;
      if (!d && s.isDatesOK) {
        const h = new Date();
        const P = new Date(C_1.formatDate(s.fini));
        if (C_1.isEqual(h, P, true) || C_1.isAfter(h, P, true)) {
          d = true;
        }
      }
      if (d) {
        this.deleteProgrammation({
          idFS: n
        });
      }
    }
  }
  supprimerQuestion(e) {
    const n = this.forms.findIndex(s => e === s.id);
    if (n > -1) {
      this.forms[n].nbQuestions--;
    }
  }
  saveQuestion(e) {
    const n = this.forms.findIndex(s => e === s.id);
    if (n > -1) {
      this.forms[n].nbQuestions++;
    }
  }
  editParametresProgrammation(e) {
    let n = this.forms.find(s => s.id === e.idFS);
    if (Object.isExists(n)) {
      n.debute = e.debute;
      n.fini = e.fini;
    }
  }
  deleteProgrammation(e) {
    let n = this.forms.find(s => s.id === e.idFS);
    if (Object.isExists(n)) {
      delete n.debute;
      delete n.fini;
    }
  }
}
class co {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new ws(e[s]);
      }
    }
  }
  setNewFormsRecuperes(e, n, s) {
    if (!Object.isExists(this[e])) {
      this[e] = new ws();
    }
    const d = new ws({
      forms: n
    });
    Object.setExpired(d, s);
    this[e] = d;
  }
}
class Xs {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new co(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  setNewFormsRecuperes(e, n, s, d) {
    if (!Object.isExists(this[e])) {
      this[e] = new co();
    }
    this[e].setNewFormsRecuperes(n, s, d);
  }
}
class ka {
  constructor(e = {
    id: 0,
    idParticipant: 0,
    typeF: "",
    titre: ""
  }) {
    this.id = e.id;
    this.idParticipant = e.idParticipant;
    this.typeF = e.typeF;
    this.titre = e.titre;
    if (typeof e.introduction !== "undefined") {
      this.introduction = e.introduction;
    }
    if (typeof e.conclusion !== "undefined") {
      this.conclusion = e.conclusion;
    }
    if (typeof e.signature !== "undefined") {
      this.signature = e.signature;
    }
    if (typeof e.created !== "undefined") {
      this.created = e.created;
    }
  }
  get typeToLibelleEDForms() {
    return xl[this.typeF];
  }
}
export class Qek {
  constructor(e = {}) {
    this.formulaire = new ka(e.formulaire);
    this.participant = new Noz(e.participant);
    this.questions = Array.isArray(e.questions) ? e.questions.map(n => new woQ(n)) : [];
    this.reponses = Array.isArray(e.reponses) ? e.reponses.map(n => new XBz(n)) : [];
  }
  get combien() {
    return this.questions.length;
  }
  get hasAtLeastOneRequired() {
    return this.questions.some(e => e.required === true);
  }
}
export class yQw {
  constructor(e = {
    id: 0,
    titre: ""
  }) {
    this.id = e.id;
    this.titre = e.titre;
    this.questions = Array.isArray(e.questions) ? e.questions.map(n => new woQ(n)) : [];
  }
  get combien() {
    return this.questions.length;
  }
}
export class Xhd {
  constructor(e = {
    combienParticipants: 0,
    combienEnded: 0
  }) {
    this.combienParticipants = e.combienParticipants;
    this.combienEnded = e.combienEnded;
    this.questions = Array.isArray(e.questions) ? e.questions.map(n => new woQ(n)) : [];
  }
  get pourcentageTermine() {
    if (this.combienParticipants === 0) {
      return 0;
    } else {
      return Math.round(this.combienEnded / this.combienParticipants * 100);
    }
  }
}
class Ac {
  constructor(e = {
    forms: []
  }) {
    this.forms = Array.isArray(e.forms) ? e.forms.map(n => new Qek(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
class Ic {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Ac(e[s]);
      }
    }
  }
  setNewFormsRecuperes(e, n, s) {
    if (!Object.isExists(this[e])) {
      this[e] = new Ac();
    }
    const d = new Ac({
      forms: n
    });
    Object.setExpired(d, s);
    this[e] = d;
  }
}
class Au {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Ic(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  setNewFormsRecuperes(e, n, s, d) {
    if (!Object.isExists(this[e])) {
      this[e] = new Ic();
    }
    this[e].setNewFormsRecuperes(n, s, d);
  }
}
export let GBF = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(s);
      this.authStore = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h])) {
            const P = Object.keys(n[h]);
            for (let z of P) {
              if (Object.isExists(n[h][z]) && !Object.isExpired(n[h][z])) {
                Object.setExpired(n[h][z], 0);
                s = true;
              }
            }
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateEDFStore(n, s) {
      let d = this.cloneDeep();
      d.setNewFormsRecuperes(this.authStore.variantForCurrentUser, s, n, this.expireableTTL);
      this.store = d;
    }
    patchEDFStore(n, s, d) {
      let h = this.cloneDeep();
      const z = Object.getEntity(h, this.authStore.variantForCurrentUser);
      if (Object.isExists(z[s]) || n === "cloneFS" || n === "saveFS") {
        switch (n) {
          case "saveFS":
            if (typeof z[s] === "undefined") {
              z[s] = new ws();
            }
            z[s].saveFS(d.fs);
            Object.setExpired(z[s], 0);
            this.store = h;
            break;
          case "startFS":
          case "stopFS":
            z[s].startStopFS(n === "startFS" ? Q$.published : Q$.privated, d);
            this.store = h;
            break;
          case "cloneFS":
            if (typeof z[s] === "undefined") {
              z[s] = new ws();
            }
            z[s].cloneFS(d.clone);
            Object.setExpired(z[s], this.expireableTTL);
            this.store = h;
            break;
          case "supprimerFS":
            z[s].supprimerFS(d);
            Object.setExpired(z[s], this.expireableTTL);
            this.store = h;
            break;
          case "supprimerQuestion":
            z[s].supprimerQuestion(d);
            Object.setExpired(z[s], this.expireableTTL);
            this.store = h;
            break;
          case "saveQuestion":
            z[s].saveQuestion(d);
            Object.setExpired(z[s], this.expireableTTL);
            this.store = h;
            break;
          case "editParametresProgrammation":
            z[s].editParametresProgrammation(d);
            this.store = h;
            break;
          case "deleteProgrammation":
            z[s].deleteProgrammation(d);
            this.store = h;
        }
      }
    }
    getSubStore(n) {
      const s = Object.getEntity(this.snapshot, this.authStore.variantForCurrentUser);
      const d = Object.isExists(s) ? Object.getEntity(s, n !== "" ? n : this.authStore.currentUser.anneeScolaireCourante) : undefined;
      if (d) {
        return d.forms;
      } else {
        return [];
      }
    }
    selectSubStore(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, this.authStore.variantForCurrentUser);
        const h = Object.isExists(d) ? Object.getEntity(d, n !== "" ? n : this.authStore.currentUser.anneeScolaireCourante) : undefined;
        if (h) {
          return h.forms;
        } else {
          return [];
        }
      });
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Xs,
    className: "EDFormsStore",
    expire: {
      ttl: X9o.uneHeure * 4
    }
  })], R);
  return R;
})();
export let pIS = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(s);
      this.authStore = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h])) {
            const P = Object.keys(n[h]);
            for (let z of P) {
              if (Object.isExists(n[h][z]) && !Object.isExpired(n[h][z])) {
                Object.setExpired(n[h][z], 0);
                s = true;
              }
            }
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateEDFStore(n, s, d) {
      let h = this.cloneDeep();
      h.setNewFormsRecuperes(s, d, n, this.expireableTTL);
      this.store = h;
    }
    getSubStore(n, s) {
      const d = Object.getEntity(this.snapshot, n);
      const h = Object.isExists(d) ? Object.getEntity(d, s !== "" ? s : this.authStore.currentUser.anneeScolaireCourante) : undefined;
      if (h) {
        return h.forms;
      } else {
        return [];
      }
    }
    selectSubStore(n, s) {
      return this.select$(d => {
        const h = Object.getEntity(d, n);
        const P = Object.isExists(h) ? Object.getEntity(h, s !== "" ? s : this.authStore.currentUser.anneeScolaireCourante) : undefined;
        if (P) {
          return P.forms;
        } else {
          return [];
        }
      });
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Au,
    className: "EDFormsParticipantsStore",
    expire: {
      ttl: X9o.uneHeure * 4
    }
  })], R);
  return R;
})();
export let i4Q = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.authStore = n;
      this.edFormsParticipantsStore = s;
      this.edFormsStore = d;
      this.http = h;
      this.httpCacheService = P;
    }
    listForms(n, s, d, h, P = false) {
      const z = Object.getEntity(this.edFormsParticipantsStore.snapshot, d);
      const Ae = Object.isExists(z) ? Object.getEntity(z, h) : undefined;
      if (P || Object.isExpired(Ae)) {
        return this.http.post("edforms", {
          anneeForms: h,
          typeEntity: n,
          idEntity: s
        }, {
          params: new Et().set("verbe", "getlist")
        }).pipe((0, j.U)(Ve => this.edFormsParticipantsStore.updateEDFStore(Ve.data, d, h)), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    manageForms(n, s = false) {
      const d = Object.getEntity(this.edFormsStore.snapshot, this.authStore.variantForCurrentUser);
      const h = Object.isExists(d) ? Object.getEntity(d, n) : undefined;
      if (s || Object.isExpired(h)) {
        return this.http.post("edforms", {
          anneeForms: n
        }, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(P => this.edFormsStore.updateEDFStore(P.data, n)), (0, W.K)(P => this.catchBadResponse(P)));
      } else {
        return E.E;
      }
    }
    saveFS(n) {
      const d = n.id > 0 ? "put" : "post";
      return this.http.post(n.id > 0 ? `edforms/${n.id}` : "edforms", {
        fs: n
      }, {
        params: new Et().set("verbe", d)
      }).pipe((0, j.U)(h => {
        n.id = h.data.id > 0 ? h.data.id : n.id;
        n.created = h.data.created ? h.data.created : n.created;
        this.edFormsStore.patchEDFStore("saveFS", this.authStore.currentUser.anneeScolaireCourante, {
          fs: n
        });
        this.httpCacheService.delete(`edforms/${n.id}/resultats_${this.authStore.currentUser.anneeScolaireCourante}`);
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    supprimerFS(n, s) {
      return this.http.post(`edforms/${n}`, {
        anneeForms: s
      }, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(d => d.code === GL1.OK ? (this.edFormsStore.patchEDFStore("supprimerFS", s, n), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression du questionnaire, merci de réessayer !", d.code, DOJ.genericError))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    cloneFS(n, s, d) {
      return this.http.post(`edforms/${n}`, {
        fs: s,
        anneeForms: d
      }, {
        params: new Et().set("verbe", "copy")
      }).pipe((0, j.U)(h => {
        s.id = h.data.id;
        s.created = h.data.created;
        this.edFormsStore.patchEDFStore("cloneFS", this.authStore.currentUser.anneeScolaireCourante, {
          clone: s
        });
      }), (0, W.K)(h => this.catchBadResponse(h)));
    }
    startFS(n) {
      return this.http.post(`edforms/${n}`, {
        action: "startFS"
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(s => this.edFormsStore.patchEDFStore("startFS", this.authStore.currentUser.anneeScolaireCourante, n)), (0, W.K)(s => this.catchBadResponse(s)));
    }
    stopFS(n) {
      return this.http.post(`edforms/${n}`, {
        action: "stopFS"
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(s => {
        this.edFormsStore.patchEDFStore("stopFS", this.authStore.currentUser.anneeScolaireCourante, n);
        this.httpCacheService.delete(`edforms/${n}/resultats_${this.authStore.currentUser.anneeScolaireCourante}`);
      }), (0, W.K)(s => this.catchBadResponse(s)));
    }
    saveQuestion(n, s, d = false) {
      const P = s.id > 0 ? "put" : "post";
      return this.http.post(s.id > 0 ? `edforms/${n}/questions/${s.id}` : `edforms/${n}/questions`, s.id > 0 ? {
        question: s
      } : {
        question: s,
        duplicate: d
      }, {
        params: new Et().set("verbe", P)
      }).pipe((0, j.U)(Ae => {
        if (s.id === 0) {
          this.edFormsStore.patchEDFStore("saveQuestion", this.authStore.currentUser.anneeScolaireCourante, n);
        }
        return Ae.data;
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    getQuestions(n) {
      return this.http.post(`edforms/${n}/questions`, {
        anneeForms: this.authStore.currentUser.anneeScolaireCourante
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(s => s.data), (0, W.K)(s => this.catchBadResponse(s)));
    }
    supprimerQuestion(n, s) {
      return this.http.post(`edforms/${n}/questions/${s}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(d => d.code === GL1.OK ? (this.edFormsStore.patchEDFStore("supprimerQuestion", this.authStore.currentUser.anneeScolaireCourante, n), this.httpCacheService.delete(`edforms/${n}/resultats_${this.authStore.currentUser.anneeScolaireCourante}`), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de la question, merci de réessayer !", d.code, DOJ.genericError))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    updateQuestionOrdre(n, s) {
      return this.http.post(`edforms/${n}/questions/${s.id}`, {
        action: "updateordre",
        question: s
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (this.httpCacheService.delete(`edforms/${n}/resultats_${this.authStore.currentUser.anneeScolaireCourante}`), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur s'est produite lors de la mise à jour de l'ordre.", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h)));
    }
    getFS(n, s) {
      if (Kg5.isModuleEnabled(this.authStore.currentUser, qzA.EDFORMS)) {
        return this.http.post("edforms", {
          typeEntity: n,
          idEntity: s
        }, {
          params: new Et().set("verbe", "list")
        }).pipe((0, j.U)(d => Array.isArray(d.data) ? d.data.map(h => new ka(h)) : []), (0, W.K)(d => this.catchBadResponse(d)));
      } else {
        return (0, S.of)([]);
      }
    }
    getParticipantFormulaire(n, s, d) {
      return this.http.post(`edforms/${n}`, {
        idParticipant: s,
        anneeForms: d
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(h => h.data), (0, W.K)(h => this.catchBadResponse(h)));
    }
    saveParticipantReponse(n, s) {
      return this.http.post(`edforms/${n.formulaire.id}/participants/${n.participant.id}`, {
        reponses: s
      }, {
        params: new Et().set("verbe", "post")
      }).pipe((0, W.K)(h => this.catchBadResponse(h)));
    }
    signerFormulaire(n, s, d, h) {
      return this.http.post(`edforms/${n}/participants/${s}`, {
        codeSecure: d,
        signatureCanvas: h
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(z => z.data.signature), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getResultatsFormulaire(n, s, d = false) {
      const h = `edforms/${n}/resultats`;
      const P = `${h}_${s}`;
      if (d) {
        this.httpCacheService.delete(P);
      }
      const z = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: P,
        verbe: "list"
      });
      return this.http.post(h, {
        anneeForms: s
      }, {
        params: z
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    editParametresProgrammation(n, s) {
      return this.http.post(`edforms/${n}`, {
        action: "editParametresProgrammation",
        ...s
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(d => this.edFormsStore.patchEDFStore("editParametresProgrammation", this.authStore.currentUser.anneeScolaireCourante, {
        idFS: n,
        ...s
      })), (0, W.K)(d => this.catchBadResponse(d)));
    }
    deleteProgrammation(n) {
      return this.http.post(`edforms/${n}`, {
        action: "deleteProgrammation"
      }, {
        params: new Et().set("verbe", "patch")
      }).pipe((0, j.U)(s => this.edFormsStore.patchEDFStore("deleteProgrammation", this.authStore.currentUser.anneeScolaireCourante, {
        idFS: n
      })), (0, W.K)(s => this.catchBadResponse(s)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(pIS), t.LFG(GBF), t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class TAs {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    codeClasse: "",
    libelleClasse: "",
    photo: "",
    sexe: ""
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.codeClasse = e.codeClasse;
    this.libelleClasse = e.libelleClasse;
    this.photo = e.photo;
    this.sexe = e.sexe;
  }
}
export let b1F = (() => {
  let R = class extends XsP {
    constructor(n = {
      civilite: "",
      nom: "",
      prenom: "",
      particule: "",
      type: "",
      idInvite: 0,
      idRDVSession: 0
    }) {
      super(n);
      this.idInvite = n.idInvite;
      this.idRDVSession = n.idRDVSession;
      if (typeof n.eleve !== "undefined") {
        this.eleve = new TAs(n.eleve);
      }
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDRDVInvite"
  })], R);
  return R;
})();
class Rc {
  constructor(e = {
    id: 0,
    idRDVSession: 0,
    date: "",
    heureDebut: "",
    heureFin: "",
    isDisponible: false
  }) {
    this.id = e.id;
    this.idRDVSession = e.idRDVSession;
    this.date = e.date;
    this.heureDebut = e.heureDebut;
    this.heureFin = e.heureFin;
    this.isDisponible = e.isDisponible;
    if (Object.isExists(e.invite)) {
      this.invite = new b1F(e.invite);
    }
    if (Object.isExists(e.visio)) {
      this.visio = new whR(e.visio);
    }
    if (Object.isExists(e.evenement)) {
      this.evenement = new gBp(e.evenement);
    }
  }
  get isDisabled() {
    return !this.isDisponible && !Object.isExists(this.invite);
  }
  get isReserve() {
    return !this.isDisponible && Object.isExists(this.invite);
  }
  get isToday() {
    return C_1.isToday(this.date);
  }
  get isPasse() {
    return C_1.isDatePassee(C_1.stringToDate(this.date + " " + this.heureDebut), true);
  }
  get dateAsDate() {
    if (FSr.isNotEmptyString(this.date)) {
      return C_1.stringToDate(this.date);
    } else {
      return undefined;
    }
  }
  get inviteAsContact() {
    if (Object.isExists(this.invite)) {
      return tHm.convertUserToContactMessagerie(this.invite);
    } else {
      return undefined;
    }
  }
  generateEventAgenda(e) {
    return new gBp({
      libelle: e.libelle,
      description: YC.base64encode(FSr.escapeHTMLEncode(e.description)),
      dateDebut: this.date,
      heureDebut: this.heureDebut,
      dateFin: this.date,
      heureFin: this.heureFin,
      cibles: [eTt.RDVPP + this.id],
      addVisio: e.isVisio,
      idAuteur: e.auteur.id,
      typeAuteur: e.auteur.type
    });
  }
  isReservePar(e, n, s) {
    let h = true;
    if (s > 0 && Object.isExists(this.invite)) {
      h = this.invite.eleve?.id === s;
    }
    return !this.isDisponible && Object.isExists(this.invite) && this.invite.type === e && this.invite.id === n && h;
  }
}
class jd {
  constructor(e = {
    id: 0,
    type: "",
    date: "",
    heureDebut: "",
    heureFin: "",
    idCreneau: 0
  }) {
    this.id = e.id;
    this.type = e.type;
    this.date = e.date;
    this.heureDebut = e.heureDebut;
    this.heureFin = e.heureFin;
    this.idCreneau = e.idCreneau;
  }
  get dateAsDate() {
    if (FSr.isNotEmptyString(this.date)) {
      return C_1.stringToDate(this.date);
    } else {
      return undefined;
    }
  }
}
export class CAN {
  constructor(e = {
    id: 0,
    libelle: "",
    description: "",
    isVisio: false,
    auteur: new XsP(),
    dateDebut: "",
    dateFin: "",
    heureDebut: "",
    heureFin: "",
    nbJourCloture: 1,
    dureeRDV: "00:15",
    creneaux: [],
    creneauxIndisposAuteur: [],
    invites: [],
    isSaturdayEnable: false,
    isIndividuel: false,
    isSpectateur: false
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.description = e.description;
    this.isVisio = e.isVisio;
    this.auteur = new XsP(e.auteur);
    this.dateDebut = e.dateDebut;
    this.dateFin = e.dateFin;
    this.heureDebut = e.heureDebut;
    this.heureFin = e.heureFin;
    this.nbJourCloture = e.nbJourCloture;
    this.dureeRDV = e.dureeRDV;
    this.creneaux = e.creneaux.map(n => new Rc(n));
    this.creneauxIndisposAuteur = Array.isArray(e.creneauxIndisposAuteur) ? e.creneauxIndisposAuteur.map(n => new jd(n)) : [];
    this.invites = e.invites.map(n => new b1F(n));
    this.isSaturdayEnable = e.isSaturdayEnable;
    this.isIndividuel = false;
    this.isSpectateur = e.isSpectateur;
  }
  get listJours() {
    if (!Array.isArray(this._listJours)) {
      this.initListJours();
    }
    return this._listJours;
  }
  get listJoursParSemaine() {
    if (!Object.isExists(this._listJoursParSemaine)) {
      this.initListJoursParSemaine();
    }
    return this._listJoursParSemaine;
  }
  get nbSemaines() {
    return Object.keys(this.listJoursParSemaine).length;
  }
  get dateDebutAsDate() {
    if (FSr.isNotEmptyString(this.dateDebut)) {
      return C_1.stringToDate(this.dateDebut);
    } else {
      return undefined;
    }
  }
  get dateFinAsDate() {
    if (FSr.isNotEmptyString(this.dateFin)) {
      return C_1.stringToDate(this.dateFin);
    } else {
      return undefined;
    }
  }
  get heureDebutAsDate() {
    const e = this.heureDebut.split(":").map(s => +s);
    let n = new Date();
    if (e.length === 2) {
      n.setHours(e[0], e[1]);
      return n;
    }
  }
  get heureFinAsDate() {
    const e = this.heureFin.split(":").map(s => +s);
    let n = new Date();
    if (e.length === 2) {
      n.setHours(e[0], e[1]);
      return n;
    }
  }
  get dureeRDVAsDate() {
    const e = this.dureeRDV.split(":").map(s => +s);
    let n = new Date();
    if (e.length === 2) {
      n.setHours(e[0], e[1]);
      return n;
    }
  }
  get invitesAsGroupeDestinataire() {
    return {
      destinataires: this.invites.map(e => new b1F(e)),
      selection: {
        type: qzA.RDVPP
      }
    };
  }
  get isSessionDejaReservee() {
    if (!Object.isExists(this._isSessionDejaReservee)) {
      this._isSessionDejaReservee = this.creneaux.filter(e => e.isReserve).length > 0;
    }
    return this._isSessionDejaReservee;
  }
  get listInvitesDisponibles() {
    if (Array.isArray(this._listInvitesDisponibles)) {
      return this._listInvitesDisponibles;
    }
    const e = this.creneaux.filter(n => Object.isExists(n.invite)).edPluckFlatten("invite").edPluckFlatten("idInvite");
    this._listInvitesDisponibles = this.invites.filter(n => e.indexOf(n.idInvite) === -1 && (n.type === dcH.FAMILLE_RESPONSABLE || n.type === dcH.FAMILLE_CONJOINT));
    return this._listInvitesDisponibles;
  }
  get invitesAsContacts() {
    if (!Array.isArray(this._invitesAsContacts)) {
      this._invitesAsContacts = this.invites.map(e => tHm.convertUserToContactMessagerie(e));
    }
    return this._invitesAsContacts;
  }
  get invitesAlreadyReserveAsContacts() {
    if (!Array.isArray(this._invitesAlreadyReserveAsContacts)) {
      this._invitesAlreadyReserveAsContacts = this.creneaux.filter(e => e.isReserve).edPluckFlatten("invite").map(e => tHm.convertUserToContactMessagerie(e));
    }
    return this._invitesAlreadyReserveAsContacts;
  }
  get invitesNotReserveAsContacts() {
    if (!Array.isArray(this._invitesNotReserveAsContacts)) {
      this._invitesNotReserveAsContacts = this.listInvitesDisponibles.map(e => tHm.convertUserToContactMessagerie(e));
    }
    return this._invitesNotReserveAsContacts;
  }
  get isTerminee() {
    return C_1.isDatePassee(this.dateFin, false);
  }
  isReservable(e, n, s) {
    if (!Object.isExists(this._isReservable)) {
      this._isReservable = !this.isTerminee && this.listJours.length !== 0 && Object.keys(this.listJoursParSemaine).filter(d => this.isSemaineReservable(+d, e, n, s)).length > 0;
    }
    return this._isReservable;
  }
  isJourReservableToday(e) {
    const n = new Date();
    const s = C_1.addNbJourToDate(e, -this.nbJourCloture);
    return C_1.isBetween(e, this.dateDebutAsDate, this.dateFinAsDate, false) && (C_1.isBefore(n, s, false) || C_1.isSameDay(n, s));
  }
  initListJours() {
    const e = C_1.getMondayOfCurrentWeek(C_1.stringToDate(this.dateDebut));
    const n = C_1.getSundayOfCurrentWeek(C_1.stringToDate(this.dateFin));
    let s = new Date(e);
    let d = [];
    for (; s <= n;) {
      if (s.getDay() !== 0 && (this.isSaturdayEnable || s.getDay() !== 6)) {
        d.push(s);
      }
      s = C_1.addNbJourToDate(s, 1);
    }
    this._listJours = d;
  }
  initListJoursParSemaine() {
    let n = {};
    let s = 0;
    this.listJours.forEach(d => {
      const h = C_1.getWeekNumber(d);
      if (s !== h) {
        s = h;
        n[s] = [];
      }
      n[s].push(d);
    });
    this._listJoursParSemaine = n;
  }
  listCreneauxJour(e, n, s) {
    const d = C_1.dateToString(e);
    if (!Object.isExists(this._listCreneauxJour)) {
      this._listCreneauxJour = {};
    }
    if (Array.isArray(this._listCreneauxJour[d])) {
      return this._listCreneauxJour[d];
    }
    let h = [];
    const P = this.heureDebut.split(":").map(Vt => +Vt);
    e.setHours(P[0], P[1]);
    let z = e;
    const Ae = this.heureFin.split(":").map(Vt => +Vt);
    let Ve = new Date(e);
    Ve.setHours(Ae[0], Ae[1]);
    const Tt = this.dureeRDV.split(":").map(Vt => +Vt);
    for (; z < Ve;) {
      const Vt = C_1.addNbMinutesToDate(z, Tt[0] * 60 + Tt[1]);
      const Hn = C_1.convertHoursToString(z);
      const Ci = new ifA();
      let fr;
      fr = this.creneaux.find(vo => C_1.isSameDay(C_1.stringToDate(vo.date), e) && vo.heureDebut === Hn);
      if (!Object.isExists(fr)) {
        fr = new Rc({
          id: 0,
          idRDVSession: this.id,
          date: Ci.transform(e, "yyyy-MM-dd"),
          heureDebut: Hn,
          heureFin: C_1.convertHoursToString(Vt),
          isDisponible: this.auteur.id === s && this.auteur.type === n || this.isJourReservableToday(e)
        });
      }
      let ss = new jd();
      if (this.creneauxIndisposAuteur.length > 0) {
        ss = this.creneauxIndisposAuteur.find(vo => fr.date === vo.date && fr.heureDebut === vo.heureDebut && fr.heureFin === vo.heureFin && vo.id === this.auteur.id && vo.type === this.auteur.type);
        if (!Object.isExists(ss) || ss.id === 0) {
          h.push(fr);
        }
      } else {
        h.push(fr);
      }
      z = Vt;
    }
    this._listCreneauxJour[d] = h;
    return h;
  }
  updateCreneau(e) {
    this.creneaux.edInsertUpdate(e, n => n.id === e.id);
  }
  deleteCreneau(e) {
    this.creneaux.edRemove(n => n.id === e.id);
  }
  getInvite(e, n, s) {
    return this.invites.find(d => {
      let h = true;
      if (s > 0) {
        h = d.eleve.id === s;
      }
      return d.id === n && d.type === e && h;
    });
  }
  isReservePar(e, n, s) {
    return this.creneaux.findIndex(d => d.isReservePar(e, n, s)) > -1;
  }
  getCreneauReserve(e, n, s) {
    return this.creneaux.find(d => d.isReservePar(e, n, s));
  }
  isJourSession(e) {
    return C_1.isBetween(e, C_1.stringToDate(this.dateDebut), C_1.stringToDate(this.dateFin), false);
  }
  isJourPasse(e) {
    return C_1.isDatePassee(e, false);
  }
  nbCreneauxDisposJour(e, n, s) {
    return this.listCreneauxJour(e, n, s).filter(d => d.isDisponible).length;
  }
  isSemaineReservable(e, n, s, d) {
    const h = this.listJoursParSemaine[e];
    let P;
    let z = h.length;
    for (let Ae = 0; Ae < z; Ae++) {
      P = h[Ae];
      if (this.isJourSession(P) && !this.isJourPasse(P) && (n === dcH.ENSEIGNANT || n === dcH.PERSONNEL || this.isJourReservableToday(P) && this.listCreneauxJour(h[Ae], n, s).filter(Ve => Ve.isDisponible === true || Ve.isReservePar(n, s, d)).length > 0)) {
        return true;
      }
    }
    return false;
  }
  getInviteForEleve(e) {
    return this.invites.find(n => n.eleve.id === e);
  }
}
class Ju {
  constructor(e = {
    sessions: []
  }) {
    this.sessions = e.sessions.map(n => new CAN(n));
    this.indisposInvites = Array.isArray(e.indisposInvites) ? e.indisposInvites.map(n => new jd(n)) : undefined;
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  updateListSessionsRDVFromWS(e) {
    this.sessions = e.sessions.map(n => {
      const s = new XsP(e.auteurs.find(z => z.id === n.auteur));
      const d = n.invites.map(z => new b1F(e.invites.find(Ae => Ae.idInvite === z)));
      const h = n.creneaux.map(z => new Rc({
        ...z,
        invite: e.invites.find(Ae => z.invite === Ae.idInvite)
      }));
      let P = new CAN(n);
      P.auteur = s;
      P.invites = d;
      P.creneaux = h;
      return P;
    });
    if (Array.isArray(e.indisposInvites)) {
      this.indisposInvites = e.indisposInvites.map(n => new jd(n));
    }
  }
  updateSessionRDV(e) {
    this.sessions.edInsertUpdate(e, n => n.id === e.id, false);
  }
  deleteSessionRDV(e) {
    this.sessions.edRemove(n => n.id === e);
  }
  updateCreneauRDV(e, n) {
    let s = this.sessions.find(d => d.id === e);
    if (Object.isExists(s)) {
      s.updateCreneau(n);
      if (n.isDisponible) {
        this.indisposInvites.edRemove(d => d.idCreneau === n.id);
      }
    }
  }
  deleteCreneauRDV(e, n) {
    let s = this.sessions.find(d => d.id === e);
    if (Object.isExists(s)) {
      s.deleteCreneau(n);
      this.indisposInvites.edRemove(d => d.idCreneau === n.id);
    }
  }
  updateListCreneauxRDV(e, n) {
    let s = this.sessions.find(d => d.id === e);
    if (Object.isExists(s)) {
      n.forEach(d => {
        s.updateCreneau(d);
      });
    }
  }
}
class $u {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Ju(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let nUJ = (() => {
  let R = class extends yh4 {
    constructor(n, s) {
      super(s);
      this.agendaStore = n;
      this.devTool = s;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateStore(n, s, d) {
      let h = this.cloneDeep();
      if (!Object.isExists(h[s])) {
        h[s] = new Ju();
      }
      let P = h[s];
      switch (n) {
        case "createSessionRDV":
        case "updateSessionRDV":
          {
            const z = new CAN(d);
            P.updateSessionRDV(z);
            if (n === "updateSessionRDV") {
              const Ae = s.split("_");
              const Ve = $ej.edDBUserSpecificKey(Ae[0], eTt.RDVPP, Ae[2]);
              z.creneaux.edPluck("evenement").filter(Vt => Object.isExists(Vt)).forEach(Vt => {
                Vt.libelle = z.libelle;
                Vt.description = YC.base64encode(z.description);
                this.agendaStore.updateAgendaStore(Vt, Ve, "updateEvent");
              });
            }
            break;
          }
        case "deleteSessionRDV":
          P.deleteSessionRDV(d.idSession);
          break;
        case "createCreneauRDV":
        case "updateCreneauRDV":
          P.updateCreneauRDV(d.idSession, new Rc(d.creneau));
          break;
        case "deleteCreneauRDV":
          P.deleteCreneauRDV(d.idSession, d.creneau);
          break;
        case "listSessionsRDV":
          P.updateListSessionsRDVFromWS(d);
          break;
        case "toggleDispoListCreneauxRDV":
          P.updateListCreneauxRDV(d.idSession, d.creneaux);
      }
      Object.setExpired(P, this.expireableTTL);
      this.store = h;
    }
    selectListeSessionsRDV(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.sessions;
        } else {
          return [];
        }
      });
    }
    getSessionRDV(n, s) {
      const d = Object.getEntity(this.snapshot, n);
      if (Object.isExists(d)) {
        return d.sessions.find(h => h.id === s);
      }
    }
    selectListeSessionsRDVEleve(n, s) {
      return this.select$(d => {
        const h = Object.getEntity(d, n);
        let P = h && Array.isArray(h.sessions) ? h.sessions.map(z => new CAN(z)) : [];
        if (P.length > 0 && P[0] instanceof CAN) {
          return P.filter(z => {
            let Ae = Array.isArray(h.indisposInvites) ? h.indisposInvites : [];
            if (Ae.length > 0) {
              Ae.forEach(Ve => {
                let Tt = new jd(Ve);
                Tt.type = z.auteur.type;
                Tt.id = z.auteur.id;
                z.creneauxIndisposAuteur.push(new jd(Ve));
              });
            }
            return z.invites.edPluckFlatten("eleve").edPluckFlatten("id").findIndex(Ve => Ve === s) > -1;
          });
        } else {
          return [];
        }
      });
    }
    selectListeSessionsRDVToday(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        let h = (d ? d.sessions : []).map(P => new CAN(P));
        h.forEach(P => {
          P.creneaux.edRemove(z => !C_1.isToday(z.date) || z.isDisponible || !Object.isExists(z.invite));
        });
        h.edRemove(P => P.creneaux.length === 0);
        return h;
      });
    }
    selectListeSessionsRDVTodayEleve(n, s) {
      return this.select$(d => {
        const h = Object.getEntity(d, n);
        let P = (h ? h.sessions.filter(z => z.invites.edPluckFlatten("eleve").edPluckFlatten("id").findIndex(Ae => Ae === s) > -1) : []).map(z => new CAN(z));
        P.forEach(z => {
          z.creneaux.edRemove(Ae => C_1.isDatePassee(Ae.date, false) || Ae.isDisponible || !Object.isExists(Ae.invite));
        });
        P.edRemove(z => z.creneaux.length === 0);
        return P;
      });
    }
    getReservationsForOtherSession(n, s) {
      const d = Object.getEntity(this.snapshot, n);
      if (Object.isExists(d)) {
        return d.sessions.filter(h => h.id !== s).edPluckFlatten("creneaux").filter(h => h.isReserve);
      } else {
        return [];
      }
    }
    selectReservationsForOtherSession(n, s) {
      return this.select$(d => {
        const h = Object.getEntity(d, n);
        if (Object.isExists(h)) {
          return h.sessions.filter(P => P.id !== s).edPluckFlatten("creneaux").filter(P => P.isReserve);
        } else {
          return [];
        }
      });
    }
    getCreneauRDV(n, s) {
      const d = Object.getEntity(this.snapshot, n);
      if (Object.isExists(d)) {
        return d.sessions.edPluckFlatten("creneaux").find(h => h.id === s);
      }
    }
    getEvenementAgendaCreneauRDV(n, s) {
      const d = Object.getEntity(this.agendaStore.snapshot, n);
      if (Object.isExists(d)) {
        return d.evenements.find(h => h.cibles.findIndex(P => P === eTt.RDVPP + s) > -1);
      }
    }
    isCreneauInviteDispo(n, s, d) {
      const h = Object.getEntity(this.snapshot, n);
      return !!Object.isExists(h) && h.indisposInvites.findIndex(P => s.type === P.type && s.id === P.id && d.date === P.date && d.heureDebut < P.heureFin && d.heureFin > P.heureDebut) === -1;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(Tf5), t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: $u,
    className: "RDVStore",
    resetWhenSwipe: true
  })], R);
  return R;
})();
export let vIF = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.http = n;
      this.store = s;
      this.authStore = d;
      this.agendaService = h;
    }
    listSessionsRDV(n, s, d = false) {
      let h = this.authStore.variantForCurrentUser;
      if (this.authStore.isProfOuPersonnel() && n === dcH.ELEVE) {
        h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      }
      const P = Object.getEntity(this.store.snapshot, h);
      if (d || Object.isExpired(P)) {
        return this.http.post(`${n}/${s}/sessionsRdv`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur s'est produite lors de la récupération de la liste des sessions de rendez-vous", z.code)) : (this.store.updateStore("listSessionsRDV", h, z.data), E.E)), (0, W.K)(z => this.catchBadResponse(z)));
      } else {
        return E.E;
      }
    }
    createSessionRDV(n, s, d) {
      let h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.http.post(`${n}/${s}/sessionsRdv`, d, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.store.updateStore("createSessionRDV", h, P.data), (0, S.of)(new CAN(P.data))) : (0, I._)(() => new FwQ("Une erreur est survenue lors de l'enregistrement de vos modifications, merci de réessayer !", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    updateSessionRDV(n, s, d) {
      let h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.http.post(`${n}/${s}/sessionsRdv/${d.id}`, d, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.store.updateStore("updateSessionRDV", h, P.data), this.agendaService.markAsExpired($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, eTt.RDVPP, s)), (0, S.of)(new CAN(P.data))) : (0, I._)(() => new FwQ("Une erreur est survenue lors de l'enregistrement de vos modifications, merci de réessayer !", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    deleteSessionRDV(n, s, d) {
      let h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      return this.http.post(`${n}/${s}/sessionsRdv/${d}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.store.updateStore("deleteSessionRDV", h, {
        idSession: d
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression de la session, merci de réessayer !", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
    createCreneauRDV(n, s, d, h) {
      let z;
      let P = this.authStore.variantForCurrentUser;
      return this.http.post(`${n}/${s}/sessionsRdv/${d.id}/creneaux`, h, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(Ae => {
        if (Ae.code === GL1.OK) {
          z = new Rc(Ae.data);
          if (!z.isDisponible && Object.isExists(z.invite)) {
            const Ve = z.generateEventAgenda(d);
            return this.agendaService.addEvent(this.authStore.currentUser.codeOgec, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id, Ve);
          }
          return (0, S.of)(undefined);
        }
        return (0, I._)(() => new FwQ("Une erreur est survenue lors de l'enregistrement de vos modifications, merci de réessayer !", Ae.code, DOJ.genericError));
      }), (0, F.w)(Ae => {
        if (Ae === true) {
          z.evenement = this.store.getEvenementAgendaCreneauRDV($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, eTt.RDVPP, this.authStore.currentUser.id), z.id);
        }
        this.store.updateStore("createCreneauRDV", P, {
          idSession: d.id,
          creneau: z
        });
        if (Ae === true) {
          this.agendaService.markAsExpired($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, eTt.RDVPP, s));
        }
        return (0, S.of)(!Object.isExists(Ae) || Ae === true);
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    updateCreneauRDV(n, s, d, h) {
      let P = this.authStore.variantForCurrentUser;
      let z = false;
      return this.http.post(`${n}/${s}/sessionsRdv/${d.id}/creneaux/${h.id}`, h, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Ae => {
        if (Ae.code === GL1.OK) {
          const Ve = new Rc(this.store.getCreneauRDV(P, h.id));
          if (Ve.isDisponible && !h.isDisponible && Object.isExists(h.invite)) {
            const Tt = h.generateEventAgenda(d);
            return this.agendaService.addEvent(this.authStore.currentUser.codeOgec, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id, Tt);
          }
          if (!Ve.isDisponible && h.isDisponible && (z = true, Object.isExists(Ve.evenement))) {
            return this.agendaService.deleteEvent(this.authStore.currentUser.codeOgec, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id, Ve.evenement);
          } else {
            return (0, S.of)(undefined);
          }
        }
        return (0, I._)(() => new FwQ("Une erreur est survenue lors de l'enregistrement de vos modifications, merci de réessayer !", Ae.code, DOJ.genericError));
      }), (0, F.w)(Ae => {
        if (Ae === true) {
          h.evenement = this.store.getEvenementAgendaCreneauRDV($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, eTt.RDVPP, this.authStore.currentUser.id), h.id);
        }
        this.store.updateStore(z ? "deleteCreneauRDV" : "updateCreneauRDV", P, {
          idSession: d.id,
          creneau: h
        });
        if (Ae === true) {
          this.agendaService.markAsExpired($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, eTt.RDVPP, s));
        }
        return (0, S.of)(!Object.isExists(Ae) || Ae === true);
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
    toggleCreneau(n, s, d) {
      let h = new Rc(s);
      let P = this.authStore.currentUser.typeCompte;
      let z = this.authStore.currentUser.id;
      if (h.isReserve) {
        h.invite = undefined;
        h.isDisponible = true;
        if (this.authStore.isFamille()) {
          P = dcH.ELEVE;
          z = s.invite.eleve.id;
        }
      } else if (h.isDisponible) {
        if (Object.isExists(d)) {
          h.invite = d;
          if (this.authStore.isFamille()) {
            P = dcH.ELEVE;
            z = d.eleve.id;
          }
        }
        h.isDisponible = false;
      } else {
        h.isDisponible = true;
      }
      if (h.id > 0) {
        return this.updateCreneauRDV(P, z, n, h);
      } else {
        return this.createCreneauRDV(P, z, n, h);
      }
    }
    toggleDispoListCreneauxRDV(n, s, d) {
      if (!this.authStore.isHimself(n.auteur.type, n.auteur.id)) {
        return (0, I._)(() => new FwQ("Mise à jour des créneaux interdite"));
      }
      let h = n.listCreneauxJour(s, this.authStore.currentUser.typeCompte, this.authStore.currentUser.id).filter(z => !z.isReserve && !z.isPasse).map(z => new Rc({
        ...z,
        isDisponible: d
      }));
      let P = this.authStore.variantForCurrentUser;
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/sessionsRdv/${n.id}/creneaux`, {
        creneaux: h
      }, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(z => {
        if (z.code === GL1.OK) {
          let Ae = z.data.map(Ve => new Rc(Ve));
          this.store.updateStore("toggleDispoListCreneauxRDV", P, {
            idSession: n.id,
            creneaux: Ae
          });
          return (0, S.of)(true);
        }
        return (0, I._)(() => new FwQ("Une erreur est survenue lors de l'enregistrement de vos modifications, merci de réessayer !", z.code, DOJ.genericError));
      }), (0, W.K)(z => this.catchBadResponse(z)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nUJ), t.LFG(CnD), t.LFG(img));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class $v extends XsP {
  constructor(e = {
    id: 0,
    type: "",
    civilite: "",
    nom: "",
    prenom: "",
    particule: "",
    idEleve: 0,
    idRDV: 0,
    idInvite: 0
  }) {
    super(e);
    this.idInvite = e.idInvite;
    this.idRDV = e.idRDV;
    this.idEleve = e.idEleve > 0 ? e.idEleve : 0;
  }
}
class Ng extends XsP {
  constructor(e = {
    civilite: "",
    nom: "",
    prenom: "",
    particule: "",
    id: 0,
    type: "",
    codeClasse: "",
    libelleClasse: "",
    photo: "",
    sexe: ""
  }) {
    super(e);
    this.codeClasse = e.codeClasse;
    this.libelleClasse = e.libelleClasse;
    this.photo = e.photo;
    this.sexe = e.sexe;
  }
}
export class LMm {
  constructor(e = {
    id: 0,
    libelle: "",
    description: "",
    date: "",
    heureDebut: "",
    heureFin: "",
    isVisio: false,
    isExterieurs: false,
    idAuteur: 0,
    isIndividuel: true,
    isSpectateur: true
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.description = e.description;
    this.date = e.date;
    this.heureDebut = e.heureDebut;
    this.heureFin = e.heureFin;
    this.isVisio = e.isVisio;
    this.isExterieurs = e.isExterieurs;
    this.idAuteur = e.idAuteur;
    this.isSpectateur = e.isSpectateur;
    this.idsInvites = Array.isArray(e.idsInvites) ? [...e.idsInvites] : [];
    this.isTerminee = C_1.isDatePassee(new Date(`${C_1.formatDate(this.date)} ${this.heureFin}:59`), true);
    this.isIndividuel = true;
    if (typeof e.auteur !== "undefined") {
      this.auteur = new Ng(e.auteur);
    }
    if (typeof e.invites !== "undefined") {
      this.invites = Array.isArray(e.invites) ? e.invites.map(n => new b1F(n)) : [];
    }
    if (typeof e.invitesAsContacts !== "undefined") {
      this.invitesAsContacts = Array.isArray(e.invitesAsContacts) ? e.invitesAsContacts.map(n => new iJ0(n)) : [];
    }
    if (typeof e.evenement !== "undefined") {
      this.evenement = new gBp(e.evenement);
    }
    if (typeof e.vid !== "undefined") {
      this.vid = e.vid;
    }
  }
  get invitesAsGroupeDestinataire() {
    return {
      destinataires: Array.isArray(this.invites) ? this.invites.map(e => new b1F(e)) : [],
      selection: {
        type: qzA.RDVPP
      }
    };
  }
  get isToday() {
    return C_1.isToday(this.date);
  }
  get dateAsDate() {
    if (FSr.isNotEmptyString(this.date)) {
      return C_1.stringToDate(this.date);
    } else {
      return undefined;
    }
  }
  get heureDebutAsDate() {
    const e = this.heureDebut.split(":").map(s => +s);
    let n = new Date();
    if (e.length === 2) {
      n.setHours(e[0], e[1]);
      return n;
    }
  }
  get heureFinAsDate() {
    const e = this.heureFin.split(":").map(s => +s);
    let n = new Date();
    if (e.length === 2) {
      n.setHours(e[0], e[1]);
      return n;
    }
  }
}
class Np {
  constructor(e = {}) {
    this.invites = Array.isArray(e.invites) ? e.invites.map(n => new $v(n)) : [];
    this.personnes = Array.isArray(e.personnes) ? e.personnes.map(n => new Ng(n)) : [];
    this.rdvs = Array.isArray(e.rdvs) ? e.rdvs.map(n => {
      let s = new LMm(n);
      s.auteur = this.detailAuteur(s.idAuteur);
      s.invites = s.idsInvites.map(d => this.detailInvite(d)).filter(d => Object.isExists(d));
      s.invitesAsContacts = s.invites.map(d => tHm.convertUserToContactMessagerie(d));
      return s;
    }) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  deleteRDV(e) {
    this.rdvs.edRemove(n => e === n.id);
    this.invites.edRemove(n => e === n.idRDV);
  }
  detailInvite(e) {
    if (e > 0) {
      const n = this.invites.find(s => e === s.idInvite);
      if (Object.isExists(n)) {
        const s = this.personnes.find(d => n.id === d.id && n.type === d.type);
        if (Object.isExists(s)) {
          let d = new b1F(s);
          d.idInvite = e;
          d.idRDVSession = n.idRDV;
          if (n.idEleve > 0) {
            const h = this.personnes.find(P => n.idEleve === P.id && dcH.ELEVE === P.type);
            if (Object.isExists(h)) {
              d.eleve = new TAs(h);
            }
          } else if (n.type === dcH.ELEVE) {
            d.eleve = new TAs(s);
          }
          return d;
        }
      }
    }
  }
  detailAuteur(e) {
    if (e > 0) {
      return this.personnes.find(n => e === n.id);
    }
  }
}
class Xv {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new Np(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  listRDV(e, n, s) {
    const d = new Np({
      ...n
    });
    Object.setExpired(d, s);
    this[e] = d;
  }
}
export let eJw = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateStore(n, s, d) {
      let h = this.cloneDeep();
      switch (n) {
        case "listRDV":
          h.listRDV(s, d, this.expireableTTL);
          this.store = h;
          break;
        case "deleteRDV":
          if (Object.isExists(h[s])) {
            h[s].deleteRDV(d);
            this.store = h;
          }
      }
    }
    selectRDVs(n, s) {
      return this.select$(d => {
        const h = Object.getEntity(d, n);
        if (h) {
          return h.rdvs.map(P => new LMm(P)).filter(P => s <= 0 || P.invites.edPluckFlatten("eleve").edPluckFlatten("id").some(z => s === z));
        } else {
          return [];
        }
      });
    }
    selectRDVsToday(n, s) {
      return this.selectRDVs(n, s).pipe((0, j.U)(d => d.filter(h => (C_1.isToday(h.date) || C_1.isDateFuture(h.date, false)) && (h.invites.length > 0 || h.isExterieurs))));
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Xv,
    className: "RDVIStore"
  })], R);
  return R;
})();
export let EvC = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.http = n;
      this.store = s;
      this.authStore = d;
      this.agendaStore = h;
    }
    listRDV(n, s, d = false) {
      let h = this.authStore.variantForCurrentUser;
      if (this.authStore.isProfOuPersonnel() && n === dcH.ELEVE) {
        h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      }
      const P = Object.getEntity(this.store.snapshot, h);
      if (d || Object.isExpired(P)) {
        return this.http.post(`${n}/${s}/rdvi`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur s'est produite lors de la récupération des rendez-vous", z.code)) : (this.store.updateStore("listRDV", h, z.data), E.E)), (0, W.K)(z => this.catchBadResponse(z)));
      } else {
        return E.E;
      }
    }
    createRDV(n) {
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/rdvi`, n, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(s => s.data.logs), (0, Z.b)(s => {
        this.agendaStore.markAsExpired($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, eTt.RDVPP, this.authStore.currentUser.id));
      }), (0, W.K)(s => this.catchBadResponse(s)));
    }
    updateRDV(n) {
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/rdvi/${n.id}`, n, {
        params: new Et().set("verbe", "put")
      }).pipe((0, j.U)(s => s.data), (0, Z.b)(s => {
        this.agendaStore.markAsExpired($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, eTt.RDVPP, this.authStore.currentUser.id));
      }), (0, W.K)(s => this.catchBadResponse(s)));
    }
    deleteRDV(n) {
      return this.http.post(`${this.authStore.currentUser.typeCompte}/${this.authStore.currentUser.id}/rdvi/${n}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(s => s.code === GL1.OK ? (this.store.updateStore("deleteRDV", this.authStore.variantForCurrentUser, n), this.agendaStore.markAsExpired($ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, eTt.RDVPP, this.authStore.currentUser.id)), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la suppression du rendez-vous, merci de réessayer !", s.code, DOJ.genericError))), (0, W.K)(s => this.catchBadResponse(s)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(eJw), t.LFG(CnD), t.LFG(Tf5));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let Esv = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateRPPStore(n, s) {
      let d = this.cloneDeep();
      d = new vn(this.snapshot ? this.snapshot : {
        [s]: new tn()
      });
      d[s] = new tn(n);
      Object.setExpired(d[s], this.expireableTTL);
      this.store = d;
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: vn,
    className: "RPPStore"
  })], R);
  return R;
})();
class Qd {
  static decorateReunions(e, n) {
    let s = new EGu();
    let d = new $t3();
    e.reunions.forEach(h => {
      let P = new Dt({
        parametrage: h.parametrage,
        enseignants: h.enseignants,
        plages: [],
        isClose: false
      });
      let z = new Date(C_1.formatDate(h.parametrage.dateFinReservation));
      let Ae = new Date(`${C_1.formatDate(h.parametrage.date)} ${h.parametrage.heureDebut}:00`);
      if (C_1.compareAsc(z) < 1) {
        P.isClose = true;
      }
      for (let Ve = 0; Ve < h.parametrage.plages; Ve++) {
        let Tt = C_1.addNbMinutesToDate(Ae, h.parametrage.dureeRdv * Ve);
        let Vt = C_1.addNbMinutesToDate(Tt, h.parametrage.dureeRdv);
        let Hn = new ge({
          libelle: `${Tt.getHours().toString().padStart(2, "0")}:${Tt.getMinutes().toString().padStart(2, "0")}`,
          creneaux: []
        });
        for (let Ci of P.enseignants) {
          let fr = new T({
            enseignantId: Ci.id,
            enseignantLibelle: d.transform(Ci, false, true, n),
            matiere: Ci.matiere,
            horaire: Hn.libelle,
            etat: g7k.BLOQUE,
            heureDebut: Hn.libelle,
            heureFin: `${Vt.getHours().toString().padStart(2, "0")}:${Vt.getMinutes().toString().padStart(2, "0")}`
          });
          if (h.creneauxFermes.findIndex(uo => uo.enseignantId === Ci.id && uo.horaire === Hn.libelle) === -1) {
            fr.etat = g7k.DISPONIBLE;
          }
          let vo = h.mesCreneaux.findIndex(uo => uo.enseignantId === Ci.id && uo.horaire === Hn.libelle);
          if (vo > -1) {
            fr.etat = g7k.PARMOI;
            if (typeof h.mesCreneaux[vo].salle !== "undefined") {
              fr.salle = h.mesCreneaux[vo].salle;
            }
          }
          Hn.creneaux.push(fr);
          if (fr.etat === g7k.PARMOI) {
            P.mesCreneaux.push(fr);
          }
        }
        P.plages.push(Hn);
      }
      Qd.setStateForReunion(P);
      s.reunions.push(P);
    });
    return s;
  }
  static setStateForReunion(e) {
    e.plages.edPluckFlatten("creneaux").map(n => {
      if (n.etat !== g7k.BLOQUE && n.etat !== g7k.PARMOI) {
        n.etat = g7k.DISPONIBLE;
      }
      return n;
    });
    e.plages.edPluckFlatten("creneaux").filter(n => n.etat === g7k.PARMOI).forEach(n => {
      e.plages.edPluckFlatten("creneaux").map(s => {
        if (s.horaire === n.horaire && s.etat !== g7k.BLOQUE && s.etat !== g7k.PARMOI) {
          s.etat = g7k.IMPOSSIBLE;
        }
        return s;
      });
      e.plages.edPluckFlatten("creneaux").map(s => {
        if (s.enseignantId === n.enseignantId && s.etat !== g7k.BLOQUE && s.etat !== g7k.PARMOI) {
          s.etat = g7k.IMPOSSIBLE;
        }
        return s;
      });
      if (!e.parametrage.isConsecutifActive) {
        let s = new Date(`${C_1.formatDate(e.parametrage.date)} ${n.horaire}:00`);
        let d = C_1.addNbMinutesToDate(s, -e.parametrage.dureeRdv);
        let h = C_1.addNbMinutesToDate(s, e.parametrage.dureeRdv);
        let P = e.plages.edPluckFlatten("creneaux").filter(Ae => Ae.horaire === `${d.getHours().toString().padStart(2, "0")}:${d.getMinutes().toString().padStart(2, "0")}` && Ae.etat === g7k.DISPONIBLE);
        let z = e.plages.edPluckFlatten("creneaux").filter(Ae => Ae.horaire === `${h.getHours().toString().padStart(2, "0")}:${h.getMinutes().toString().padStart(2, "0")}` && Ae.etat === g7k.DISPONIBLE);
        P.forEach(Ae => {
          Ae.etat = g7k.IMPOSSIBLE;
        });
        z.forEach(Ae => {
          Ae.etat = g7k.IMPOSSIBLE;
        });
      }
    });
  }
  static getUrlPDFDetailReunion(e, n, s, d, h) {
    return `${s ? `${d}/v3` : `http://${d}/EDV3WEBSERVICES_WEB/FR/v3`}/enseignants/${n.id}/reunions/${e.parametrage.id}${h}?verbe=get`;
  }
  static getUrlPDFDetailReunionForEleve(e, n, s, d, h) {
    return `${s ? `${d}/v3` : `http://${d}/EDV3WEBSERVICES_WEB/FR/v3`}/eleves/${n}/reunions/${e.parametrage.id}${h}?verbe=get`;
  }
}
export let XK$ = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.rppStore = n;
      this.authStore = s;
      this.http = d;
      this.commonConfigService = h;
    }
    getReunionsParentProf(n, s, d, h = false) {
      const P = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [d]);
      const z = Object.getEntity(this.rppStore.snapshot, P);
      if (h || !z || !h && Object.isExpired(z)) {
        return this.http.post(`eleves/${d}/reunions`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => {
          const Ve = Qd.decorateReunions(new EGu(Ae.data), this.authStore.isFouE());
          Ve.reunions.map(Tt => Tt.urlPDF = Qd.getUrlPDFDetailReunionForEleve(Tt, d, this.commonConfigService.production, this.commonConfigService.apip, this.commonConfigService.apiExtension));
          this.rppStore.updateRPPStore(Ve, P);
        }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      } else {
        return E.E;
      }
    }
    getEnseignantRPP(n, s, d = false) {
      const h = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n);
      const P = Object.getEntity(this.rppStore.snapshot, h);
      if (d || !P || !d && Object.isExpired(P)) {
        return this.http.post(`enseignants/${n}/reunions`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(z => {
          let Ae = new EGu(z.data);
          Ae.reunions.map(Ve => Ve.urlPDF = Qd.getUrlPDFDetailReunion(Ve, this.authStore.currentUser, this.commonConfigService.production, this.commonConfigService.apip, this.commonConfigService.apiExtension));
          this.rppStore.updateRPPStore(Ae, h);
        }), (0, W.K)(z => this.catchBadResponse(z)));
      } else {
        return E.E;
      }
    }
    reserveCreneau(n, s, d, h, P) {
      return this.http.post(`eleves/${P}/reunions/${s.parametrage.id}`, n, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(z => z.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur s'est produite lors de la réservation du créneau", z.code)) : this.getReunionsParentProf(d, h, P, true)), (0, j.U)(() => true), (0, W.K)(z => this.catchBadResponse(z)));
    }
    getVisioRPPForFamille(n, s) {
      return this.http.post(`familles/${this.authStore.currentUser.id}/reunions/${n}/enseignants/${s}/visio`, {}, {
        params: new Et().set("verbe", "get")
      }).pipe((0, F.w)(d => d.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur s'est produite lors de la récupération de la visio", d.code)) : (0, S.of)(d.data)), (0, W.K)(d => this.catchBadResponse(d)));
    }
    getVisioRPPForProf(n) {
      return this.http.post(`enseignants/${this.authStore.currentUser.id}/reunions/${n}/visio`, {}, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(s => s.code !== GL1.OK ? (0, I._)(() => new FwQ("Une erreur s'est produite lors de la récupération de la visio", s.code)) : (0, S.of)(s.data)), (0, W.K)(s => this.catchBadResponse(s)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(Esv), t.LFG(CnD), t.LFG(pt), t.LFG(vh));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class Qnf {
  constructor(e = {
    format: "",
    text: "",
    cancelled: false
  }) {
    this.format = e.format;
    this.text = e.text;
    this.cancelled = e.cancelled;
  }
}
export class A65 {
  constructor(e = {
    type: "",
    id: 0,
    nom: "",
    prenom: "",
    classeId: 0,
    regime: "",
    idRegime: 0,
    sexe: "",
    dateSortie: "",
    dateEntree: "",
    etabId: 0,
    numeroBadge: ""
  }) {
    this.type = e.type;
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.classeId = e.classeId;
    this.regime = e.regime;
    this.idRegime = e.idRegime;
    this.photo = e.photo;
    this.sexe = e.sexe;
    this.classeLibelle = e.classeLibelle;
    this.dateSortie = e.dateSortie;
    this.dateEntree = e.dateEntree;
    this.etabId = e.etabId;
    this.numeroBadge = e.numeroBadge;
    if (typeof e.anomalie !== "undefined") {
      this.anomalie = e.anomalie;
    }
  }
}
export let jcO = (() => {
  class R extends Y5f {
    constructor(n) {
      super();
      this.http = n;
    }
    get(n) {
      return this.http.post("scanBadge", {
        scan: n
      }, {
        params: new Et().set("verbe", "get")
      }).pipe((0, j.U)(s => s.data), (0, W.K)(s => this.catchBadResponse(s, d => this.handleError(d))));
    }
    handleError(n) {
      switch (n.status) {
        case 610:
        case 611:
          n.action = DOJ.genericError;
      }
      return (0, I._)(() => n);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class X9J {
  constructor(e = {
    idVisiteStage: 0,
    idRef: 0,
    compteRendu: "",
    dateVisite: "",
    heureVisite: "",
    visiteEffectuee: false,
    isDocExist: false
  }) {
    this.idVisiteStage = e.idVisiteStage;
    this.compteRendu = e.compteRendu;
    this.dateVisite = e.dateVisite;
    this.heureVisite = e.heureVisite;
    this.visiteEffectuee = e.visiteEffectuee;
    this.idRef = e.idRef;
    this.isDocExist = e.isDocExist;
    this.uniqID = `${this.idVisiteStage}_${this.dateVisite}_${this.heureVisite}`;
    if (typeof e.unc !== "undefined") {
      this.unc = e.unc;
    }
    if (typeof e.heureVisiteFormated !== "undefined") {
      this.heureVisiteFormated = e.heureVisiteFormated;
    }
    if (typeof e.dateVisiteFormated !== "undefined") {
      this.dateVisiteFormated = e.dateVisiteFormated;
    }
  }
}
export class mwQ {
  constructor(e = {
    id: 0,
    intitule: "",
    sujet: "",
    dateDebutStage: "",
    dateFinStage: "",
    dateStage: "",
    commentaireVisite: "",
    visiteEffectuee: false
  }) {
    this.id = e.id;
    this.intitule = e.intitule;
    this.sujet = e.sujet;
    this.dateDebutStage = e.dateDebutStage;
    this.dateFinStage = e.dateFinStage;
    this.periodesStage = Array.isArray(e.periodesStage) ? e.periodesStage.map(n => new u1(n)) : [];
    this.eleve = new sp(e.eleve);
    this.entreprise = new a1(e.entreprise);
    this.refsEtab = Array.isArray(e.refsEtab) ? e.refsEtab.map(n => new xXG(n)).sort((n, s) => Number(s.estRefPrincipal) - Number(n.estRefPrincipal)) : [];
    this.tuteursEnt = Array.isArray(e.tuteursEnt) ? e.tuteursEnt.map(n => new Yg1(n)).sort((n, s) => Number(s.estTuteurPrincipal) - Number(n.estTuteurPrincipal)) : [];
    this.visites = Array.isArray(e.visites) ? e.visites.map(n => new X9J(n)) : [];
  }
  get refEtabPrincipal() {
    let e = this.refsEtab.find(n => n.estRefPrincipal);
    if (Object.isExists(e)) {
      return e;
    } else {
      return new xXG();
    }
  }
  get tuteurEntPrincipal() {
    let e = this.tuteursEnt.find(n => n.estTuteurPrincipal);
    if (Object.isExists(e)) {
      return e;
    } else {
      return new Yg1();
    }
  }
  get refsEtabOnly() {
    let e = this.refsEtab.filter(n => n.estRef);
    if (Object.isExists(e)) {
      return e;
    } else {
      return [];
    }
  }
}
export class tak {
  constructor(e = {
    idSession: 0,
    intitule: ""
  }) {
    this.idSession = e.idSession;
    this.intitule = e.intitule;
    this.stages = Array.isArray(e.stages) ? e.stages.map(n => new mwQ(n)) : [];
  }
}
class pd {
  constructor(e = {}) {
    this.sessionsList = Array.isArray(e.sessionsList) ? e.sessionsList.map(n => new tak(n)) : [];
    this.stagesList = Array.isArray(e.stagesList) ? e.stagesList.map(n => new mwQ(n)) : [];
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
  saveStageV3(e) {
    let n;
    this.sessionsList.forEach(s => {
      if (!Object.isExists(n)) {
        n = s.stages.find(d => d.id === e.id);
        if (Object.isExists(n)) {
          s.stages.edInsertUpdate(e, d => d.id === e.id);
        }
      }
    });
    this.stagesList.edInsertUpdate(e, s => s.id === e.id);
  }
  deletePJVisite(e) {
    let n;
    let s;
    e.unc = "";
    e.isDocExist = false;
    this.sessionsList.forEach(d => {
      if (!Object.isExists(n)) {
        d.stages.forEach(h => {
          if (!Object.isExists(n)) {
            n = h.visites.find(P => P.idVisiteStage === e.idVisiteStage);
            if (Object.isExists(n)) {
              h.visites.edInsertUpdate(e, P => P.idVisiteStage === e.idVisiteStage);
            }
          }
        });
      }
    });
    this.stagesList.forEach(d => {
      if (!Object.isExists(n)) {
        s = d.visites.find(h => h.idVisiteStage === e.idVisiteStage);
        if (Object.isExists(s)) {
          d.visites.edInsertUpdate(e, h => h.idVisiteStage === e.idVisiteStage);
        }
      }
    });
  }
}
class Jd {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new pd(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
  saveStageV3(e, n) {
    let s;
    if (typeof this[e] === "undefined") {
      this[e] = new pd();
    }
    s = e.split("_");
    let d = s[0] + "_" + s[1] + "_" + s[2];
    const P = Object.keys(this).filter(z => z.startsWith(d));
    for (let z of P) {
      this[z].saveStageV3(n);
    }
  }
  deletePJVisite(e, n) {
    let s;
    if (typeof this[e] === "undefined") {
      this[e] = new pd();
    }
    s = e.split("_");
    let d = s[0] + "_" + s[1] + "_" + s[2];
    const P = Object.keys(this).filter(z => z.startsWith(d));
    for (let z of P) {
      this[z].deletePJVisite(n);
    }
  }
}
class rh {
  constructor(e = {
    id: 0,
    libelle: "",
    adresse1: "",
    adresse2: "",
    adresse3: "",
    email: "",
    telephone: "",
    ville: "",
    cp: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.adresse1 = e.adresse1;
    this.adresse2 = e.adresse2;
    this.adresse3 = e.adresse3;
    this.email = e.email;
    this.telephone = e.telephone;
    this.ville = e.ville;
    this.cp = e.cp;
  }
}
class Bp extends rh {
  constructor(e = {
    id: 0,
    libelle: "",
    adresse1: "",
    adresse2: "",
    adresse3: "",
    email: "",
    telephone: "",
    ville: "",
    cp: "",
    nafCode: "",
    nafLibelle: "",
    nbOffreEnCours: 0,
    nbStageEffectue: 0,
    noteMoyenne: 0,
    secteurActivite: ""
  }) {
    super(e);
    this.historiqueStage = Array.isArray(e.historiqueStage) ? e.historiqueStage.map(n => new Z1(n)) : [];
    this.intervenantEntreprise = Array.isArray(e.intervenantEntreprise) ? e.intervenantEntreprise.map(n => new G1(n)) : [];
    this.nafCode = e.nafCode;
    this.nafLibelle = e.nafLibelle;
    this.nbOffreEnCours = e.nbOffreEnCours;
    this.nbStageEffectue = e.nbStageEffectue;
    this.noteMoyenne = e.noteMoyenne;
    this.offreStage = Array.isArray(e.offreStage) ? e.offreStage.map(n => new mwQ(n)) : [];
    this.secteurActivite = e.secteurActivite;
    this.suivi = Array.isArray(e.suivi) ? e.suivi.map(n => new Y1(n)) : [];
  }
}
let sp = (() => {
  let R = class {
    constructor(n = {
      id: 0,
      nom: "",
      prenom: "",
      sexe: "",
      classeId: 0,
      classeLibelle: "",
      portable: "",
      particule: "",
      photo: ""
    }) {
      this.id = n.id;
      this.nom = n.nom;
      this.prenom = n.prenom;
      this.sexe = n.sexe;
      this.classeId = n.classeId;
      this.classeLibelle = n.classeLibelle;
      this.portable = n.portable;
      this.particule = n.particule;
      this.photo = n.photo;
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDStageEleve"
  })], R);
  return R;
})();
class ky {
  constructor(e = {
    idNoteCritere: 0,
    idNoteValeur: 0,
    libelle: "",
    note: 0
  }) {
    this.idNoteCritere = e.idNoteCritere;
    this.idNoteValeur = e.idNoteValeur;
    this.libelle = e.libelle;
    this.note = e.note;
  }
}
class a1 extends rh {
  constructor(e = {
    id: 0,
    libelle: "",
    adresse1: "",
    adresse2: "",
    adresse3: "",
    email: "",
    telephone: "",
    ville: "",
    cp: ""
  }) {
    super(e);
    this.appreciations = Array.isArray(e.appreciations) ? e.appreciations.map(n => new ky(n)) : [];
  }
}
export class Yg1 {
  constructor(e = {
    id: 0,
    nom: "",
    prenom: "",
    email: "",
    civilite: "",
    telephoneB: "",
    telephoneP: "",
    estTuteurPrincipal: false
  }) {
    this.id = e.id;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.civilite = e.civilite;
    this.email = e.email;
    this.telephoneB = e.telephoneB;
    this.telephoneP = e.telephoneP;
    this.estTuteurPrincipal = e.estTuteurPrincipal;
  }
}
export let xXG = (() => {
  let R = class {
    constructor(n = {
      id: 0,
      nom: "",
      prenom: "",
      civilite: "",
      email: "",
      particule: "",
      tel: ""
    }) {
      this.id = n.id;
      this.nom = n.nom;
      this.prenom = n.prenom;
      this.civilite = n.civilite;
      this.email = n.email;
      this.tel = n.tel;
      this.particule = n.particule;
      if (typeof n.estRefPrincipal !== "undefined") {
        this.estRefPrincipal = n.estRefPrincipal;
      }
      if (typeof n.estRef !== "undefined") {
        this.estRef = n.estRef;
      }
    }
  };
  R = (0, le.gn)([jl({
    className: "MEDStageTuteurEtablissement"
  })], R);
  return R;
})();
class O_ {
  constructor(e = {
    cp: 0,
    ville: ""
  }) {
    this.cp = e.cp;
    this.ville = e.ville;
    this.fullCodePostal = this.ville + " (" + this.cp + ")";
  }
}
class l1 {
  constructor(e = {
    id: 0,
    libelle: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
  }
}
class W1 {
  constructor(e = {
    id: 0,
    libelle: ""
  }) {
    this.id = e.id;
    this.libelle = e.libelle;
    this.fullCodeNaf = this.id + "-" + this.libelle;
  }
}
export class CIK {
  constructor(e = {}) {
    this.codeNaf = Array.isArray(e.codeNaf) ? e.codeNaf.map(n => new W1(n)) : [];
    this.codePostal = Array.isArray(e.codePostal) ? e.codePostal.map(n => new O_(n)) : [];
    this.secteurActivite = Array.isArray(e.secteurActivite) ? e.secteurActivite.map(n => new l1(n)) : [];
  }
}
class Y1 {
  constructor(e = {
    libelle: "",
    date: "",
    contactEtablissement: "",
    contactEntreprise: "",
    type: ""
  }) {
    this.libelle = e.libelle;
    this.date = e.date;
    this.contactEtablissement = e.contactEtablissement;
    this.contactEntreprise = e.contactEntreprise;
    this.type = e.type;
  }
}
class u1 {
  constructor(e = {
    dateDebutPeriode: "",
    dateFinPeriode: ""
  }) {
    this.dateDebutPeriode = e.dateDebutPeriode;
    this.dateFinPeriode = e.dateFinPeriode;
  }
}
class Z1 {
  constructor(e = {
    intitule: "",
    sujet: "",
    classe: "",
    debutStage: "",
    finStage: ""
  }) {
    this.intitule = e.intitule;
    this.sujet = e.sujet;
    this.classe = e.classe;
    this.debutStage = e.debutStage;
    this.finStage = e.finStage;
    this.periodesStage = Array.isArray(e.periodesStage) ? e.periodesStage.map(n => new u1(n)) : [];
  }
}
class G1 {
  constructor(e = {
    id: 0,
    fonction: "",
    civilite: "",
    nom: "",
    prenom: "",
    tel: "",
    mail: ""
  }) {
    this.id = e.id;
    this.fonction = e.fonction;
    this.civilite = e.civilite;
    this.nom = e.nom;
    this.prenom = e.prenom;
    this.tel = e.tel;
    this.mail = e.mail;
  }
}
export let g98 = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateStagesStore(n, s, d = "") {
      let h = this.cloneDeep();
      switch (d) {
        case "Stagiaires":
        case "StagiairesHisto":
        case "EleveTuteurEnt":
        case "TuteurEntreprise":
        case "EleveFamille":
        case "Eleve":
          h[s] = new pd({
            stagesList: n
          });
          break;
        case "Visites":
        case "VisitesHisto":
          h[s] = new pd({
            sessionsList: n
          });
          break;
        case "saveStage":
          h.saveStageV3(s, new mwQ(n));
          break;
        case "deletePJVisite":
          h.deletePJVisite(s, new X9J(n));
      }
      Object.setExpired(h[s], this.expireableTTL);
      this.store = h;
    }
    selectListeSessions(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.sessionsList;
        } else {
          return [];
        }
      });
    }
    getStage(n, s) {
      let d;
      const h = Object.getEntity(this.snapshot, n);
      if (h) {
        d = h.sessionsList.edPluckFlatten("stages").find(P => P.id === s);
        return d;
      }
    }
    getStagePP(n, s) {
      let d;
      const h = Object.getEntity(this.snapshot, n);
      if (h) {
        d = h.stagesList.find(P => P.id === s);
        return d;
      }
    }
    selectListeStages(n) {
      return this.select$(s => {
        const d = Object.getEntity(s, n);
        if (d) {
          return d.stagesList;
        } else {
          return [];
        }
      });
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: Jd,
    className: "SessionsStore"
  })], R);
  return R;
})();
export let Sac = (() => {
  class R extends Y5f {
    constructor(n, s, d, h) {
      super();
      this.authStore = n;
      this.stagesV3Store = s;
      this.httpCacheService = d;
      this.http = h;
    }
    listeSessionssV3(n, s, d = false) {
      const h = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [n, s]);
      const P = Object.getEntity(this.stagesV3Store.snapshot, h);
      let z = `${n}/${s}/stagesV3`;
      if (d || Object.isExpired(P)) {
        return this.http.post(z, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ae => this.stagesV3Store.updateStagesStore(Ae.data, h, n)), (0, W.K)(Ae => this.catchBadResponse(Ae)));
      } else {
        return E.E;
      }
    }
    listeStagesV3(n, s, d = false, h) {
      let P = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [n, s]);
      if (h > 0) {
        P = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [n, s, h]);
      }
      const z = Object.getEntity(this.stagesV3Store.snapshot, P);
      let Ae = `${n}/${s}/stagesV3`;
      if (h > 0) {
        Ae = `${n}/${s}/${h}/stagesEleve`;
      }
      if (d || Object.isExpired(z)) {
        return this.http.post(Ae, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Ve => this.stagesV3Store.updateStagesStore(Ve.data, P, n)), (0, W.K)(Ve => this.catchBadResponse(Ve)));
      } else {
        return E.E;
      }
    }
    saveV3(n, s, d) {
      const P = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [s, d]);
      if (n.visites?.length > 0) {
        n.visites.forEach(z => {
          if (z.unc !== "") {
            z.unc = YC.base64encode(z.unc);
          }
        });
      }
      return this.http.post(`stageV3/${n.id}`, n, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(z => z.code === GL1.OK ? (this.stagesV3Store.updateStagesStore(z.data, P, "saveStage"), (0, S.of)(true)) : (0, I._)(() => new FwQ("La sauvegarde du stage a échoué", z.code, DOJ.genericError))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    listeEntreprisesFiltreV3(n = false) {
      let s = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", "entreprisesFiltres").set("cacheTTL", `${X9o.uneJournee}`);
      if (n) {
        this.httpCacheService.delete(s.cacheKey);
      }
      return this.http.post("entreprisesFiltresV3", {}, {
        params: s
      }).pipe((0, j.U)(d => new CIK(d.data)), (0, W.K)(d => this.catchBadResponse(d)));
    }
    listeEntreprisesEleveV3(n, s) {
      return this.http.post(`eleve/${s}/entreprisesV3`, n, {
        params: new Et().set("verbe", "post")
      }).pipe((0, j.U)(d => d.data.map(h => new Bp(h))), (0, W.K)(d => this.catchBadResponse(d)));
    }
    listeEntreprisesV3(n, s, d, h = false) {
      let P = new Et().set("verbe", "get");
      if (h) {
        this.httpCacheService.delete(P.cacheKey);
      }
      return this.http.post(s + "/" + d + "/entreprisesV3", n, {
        params: P
      }).pipe((0, j.U)(z => z.data.map(Ae => new Bp(Ae))), (0, W.K)(z => this.catchBadResponse(z)));
    }
    deletePJVisite(n, s, d) {
      const h = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [s, d]);
      return this.http.post(`stageV3/${n.idVisiteStage}`, {}, {
        params: new Et().set("verbe", "delete")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.stagesV3Store.updateStagesStore(n, h, "deletePJVisite"), (0, S.of)(true)) : (0, I._)(() => new FwQ("La suppression des éléments a échoué", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(CnD), t.LFG(g98), t.LFG(nl), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let uSF = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.http = n;
      this.httpCacheService = s;
    }
    eleveTimeline(n, s = false) {
      const d = `eleves/${n}/timeline`;
      const h = `timeline_E_${n}`;
      if (s) {
        this.httpCacheService.delete(h);
      }
      const P = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: h,
        cacheTTL: `${X9o.uneHeure}`,
        verbe: "get"
      });
      return this.http.post(d, {}, {
        params: P
      }).pipe((0, j.U)(z => Array.isArray(z.data) ? z.data.map(Ae => new j9y(Ae)) : []), (0, W.K)(z => this.catchBadResponse(z)));
    }
    communTimeline(n, s, d = false) {
      const h = `${n}/${s}/timelineAccueilCommun`;
      const P = `timelineCommun_${n}_${s}`;
      if (d) {
        this.httpCacheService.delete(P);
      }
      const z = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: P,
        cacheTTL: `${X9o.uneHeure}`,
        verbe: "get"
      });
      return this.http.post(h, {}, {
        params: z
      }).pipe((0, j.U)(Ae => Ae.data), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class f1 {
  constructor(e = {
    id: "",
    idCDT: 0,
    libelle: "",
    dateMiseAJour: "",
    contenu: "",
    commentaires: null
  }) {
    this.id = e.id;
    this.idCDT = e.idCDT;
    this.libelle = e.libelle;
    this.dateMiseAJour = e.dateMiseAJour;
    this.contenu = e.contenu;
    this.commentaires = Array.isArray(e.commentaires) ? e.commentaires.map(n => new j2C(n)) : null;
    this.fichiers = Array.isArray(e.fichiers) ? e.fichiers.map(n => new eD9(n)) : [];
    if (Object.isExists(e.classe)) {
      this.classe = e.classe;
    }
  }
  get contenuDecode() {
    return YC.base64decode(this.contenu);
  }
}
export class bIF {
  constructor(e = {
    idCDT: 0,
    classe: "",
    profPrincipal: false,
    contenu: "",
    commentaires: null
  }) {
    this.idCDT = e.idCDT;
    this.classe = e.classe;
    this.profPrincipal = e.profPrincipal;
    this.contenu = e.contenu;
    this.commentaires = Array.isArray(e.commentaires) ? e.commentaires.map(n => new j2C(n)) : null;
    this.fichiers = Array.isArray(e.fichiers) ? e.fichiers.map(n => new eD9(n)) : [];
    this.matieres = Array.isArray(e.matieres) ? e.matieres.map(n => new f1(n)) : [];
    if (Object.isExists(e.expired)) {
      this.expired = e.expired;
    }
    if (Object.isExists(e.libelle)) {
      this.libelle = e.libelle;
    }
  }
  get contenuDecode() {
    return YC.base64decode(this.contenu);
  }
  addComment(e, n) {
    let s = Object.isExists(n) ? this.matieres.find(d => d.id === n.id && d.idCDT === n.idCDT) : this;
    if (typeof s !== "undefined") {
      s.commentaires.push(e);
    }
  }
  updateComment(e, n) {
    let s = Object.isExists(n) ? this.matieres.find(h => h.id === n.id && h.idCDT === n.idCDT) : this;
    if (typeof s === "undefined") {
      return;
    }
    let d = s.commentaires.findIndex(h => h.id === e.id);
    if (d > -1) {
      s.commentaires[d] = e;
    }
  }
  deleteComment(e, n, s = "", d) {
    let h = Object.isExists(d) ? this.matieres.find(z => z.id === d.id && z.idCDT === d.idCDT) : this;
    if (typeof h === "undefined" || !Object.isExists(qYR[n.typeCompte])) {
      return;
    }
    let P = h.commentaires.findIndex(z => z.id === e.id);
    if (n.typeCompte !== e.profilAuteur && n.id !== e.idAuteur) {
      let z = new j2C(e);
      z.message = YC.base64encode(`Message supprim\xe9 par ${s} <br /> (${qYR[n.typeCompte]})`);
      z.supprime = true;
      if (P > -1) {
        h.commentaires[P] = z;
      }
    } else {
      h.commentaires = h.commentaires.filter(z => z.id !== e.id);
    }
  }
  addFile(e, n) {
    let s = Object.isExists(n) ? this.matieres.find(d => d.id === n.id && d.idCDT === n.idCDT) : this;
    if (typeof s !== "undefined") {
      s.fichiers.push(e);
    }
  }
  deleteFile(e, n) {
    let s = Object.isExists(n) ? this.matieres.find(d => d.id === n.id && d.idCDT === n.idCDT) : this;
    if (typeof s !== "undefined") {
      s.fichiers = s.fichiers.filter(d => d.id !== e);
    }
  }
  setIdCT(e, n) {
    let s = Object.isExists(n) ? this.matieres.find(d => d.id === n.id && d.idCDT === n.idCDT) : this;
    if (typeof s !== "undefined") {
      s.idCDT = e;
    }
  }
}
class j1 {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new bIF(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export let ezZ = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateVieDeLaClasseStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      switch (d) {
        case "listeVieClasse":
          P[s] = new bIF(n);
          break;
        case "saveContenuClasse":
          P[s] = new bIF(n);
          P[s].setIdCT(h.idCDT, h.matiere);
          break;
        case "addComment":
          P[s] = new bIF(n);
          P[s].addComment(h.commentaire, h.matiere);
          break;
        case "updateComment":
          P[s] = new bIF(n);
          P[s].updateComment(h.commentaire, h.matiere);
          break;
        case "deleteComment":
          P[s] = new bIF(n);
          P[s].deleteComment(h.commentaire, h.userCurrent, h.auteurAction, h.matiere);
          break;
        case "addFile":
          P[s].addFile(h.file, h.matiere);
          break;
        case "deleteFile":
          P[s].deleteFile(h.idFile, h.matiere);
      }
      Object.setExpired(P[s], this.expireableTTL);
      this.store = P;
    }
    selectListVieDeClasse(n) {
      return this.select$(s => Object.getEntity(s, n));
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: j1,
    className: "VieDeLaClasseStore"
  })], R);
  return R;
})();
export let aw1 = (() => {
  class R extends Y5f {
    constructor(n, s, d, h, P) {
      super();
      this.http = n;
      this.authStore = s;
      this.vieDeLaClasseStore = d;
      this.commentairesService = h;
      this.cahierdetexteService = P;
      this._displayNomPipe = new $t3();
    }
    listeVieClasse(n, s, d, h, P = false) {
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [h, d]);
      const Ae = Object.getEntity(this.vieDeLaClasseStore.snapshot, z);
      let Ve = FSr.translateTypeUser(h);
      if (P || Object.isExpired(Ae)) {
        return this.http.post(`${Ve}/${d}/viedelaclasse`, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Tt => {
          if (Object.keys(Tt.data).length !== 0) {
            this.vieDeLaClasseStore.updateVieDeLaClasseStore(Tt.data, z, "listeVieClasse");
          }
        }), (0, W.K)(Tt => this.catchBadResponse(Tt)));
      } else {
        return E.E;
      }
    }
    save(n, s, d, h, P, z, Ae) {
      let Ve = "";
      let Tt = Object.isExists(Ae) ? Ae : new bIF(z);
      if (Tt instanceof bIF) {
        Ve = "CLASSE";
        delete Tt.matieres;
      } else {
        if (!(Tt instanceof f1)) {
          return (0, S.of)(false);
        }
        Ve = `${Tt.id}`;
      }
      if (Ve === "") {
        return (0, S.of)(false);
      }
      const Vt = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [d, h]);
      return this.http.post(`cahierdetexte/viedelaclasse/${P}/${Ve}`, Tt, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(Hn => Hn.code === GL1.OK ? (this.vieDeLaClasseStore.updateVieDeLaClasseStore(z, Vt, "saveContenuClasse", {
        idCDT: typeof Hn.data !== "undefined" ? Hn.data.idCDT : 0,
        matiere: Ae
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de l'enregistrement du contenu, merci de réessayer !"))), (0, W.K)(Hn => this.catchBadResponse(Hn)));
    }
    addComment(n, s, d, h, P, z, Ae) {
      const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [h, d]);
      let Tt = Object.isExists(Ae) ? Ae : new bIF(P);
      return this.commentairesService.addComment(n, s, Tt.idCDT, ce3.VIEDELACLASSE, z).pipe((0, F.w)(Vt => Object.isExists(Vt) ? (this.vieDeLaClasseStore.updateVieDeLaClasseStore(P, Ve, "addComment", {
        commentaire: Vt,
        matiere: Ae
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de l'ajout du commentaire, merci de réessayer !"))), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    updateComment(n, s, d, h, P, z, Ae) {
      const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [h, d]);
      let Tt = Object.isExists(Ae) ? Ae : new bIF(P);
      return this.commentairesService.updateComment(n, s, Tt.idCDT, ce3.VIEDELACLASSE, z).pipe((0, F.w)(Vt => Object.isExists(Vt) ? (this.vieDeLaClasseStore.updateVieDeLaClasseStore(P, Ve, "updateComment", {
        commentaire: Vt,
        matiere: Ae
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la modification du commentaire, merci de réessayer !"))), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    deleteComment(n, s, d, h, P, z, Ae) {
      const Ve = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, s, n, [h, d]);
      let Tt = Object.isExists(Ae) ? Ae : new bIF(P);
      return this.commentairesService.deleteComment(n, s, Tt.idCDT, ce3.VIEDELACLASSE, z).pipe((0, F.w)(Vt => Vt ? (this.vieDeLaClasseStore.updateVieDeLaClasseStore(P, Ve, "deleteComment", {
        commentaire: z,
        userCurrent: this.authStore.currentUser,
        auteurAction: this._displayNomPipe.transform(this.authStore.currentUser, true, true, true),
        matiere: Ae
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique s'est produit lors de la suppression du commentaire, merci de réessayer !"))), (0, W.K)(Vt => this.catchBadResponse(Vt)));
    }
    addFile(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [d, s]);
      this.vieDeLaClasseStore.updateVieDeLaClasseStore(h, z, "addFile", {
        file: n,
        matiere: P
      });
    }
    deleteFile(n, s, d, h, P) {
      const z = $ej.edDBUserSpecificKeyWithParams(this.authStore.variantForCurrentUser, [d, s]);
      return this.cahierdetexteService.deleteFile(n).pipe((0, Z.b)(Ae => {
        this.vieDeLaClasseStore.updateVieDeLaClasseStore(h, z, "deleteFile", {
          idFile: n.id,
          matiere: P
        });
      }), (0, W.K)(Ae => this.catchBadResponse(Ae)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(CnD), t.LFG(ezZ), t.LFG(Pv), t.LFG(mYE));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export class MBX {
  constructor(e = {
    id: 0,
    date: "",
    displayDate: "",
    justifie: false,
    justifieEd: false,
    libelle: "",
    motif: "",
    par: "",
    typeElement: "",
    typeJustification: "",
    commentaire: "",
    aFaire: ""
  }) {
    this.id = e.id;
    this.date = e.date;
    this.displayDate = e.displayDate;
    this.justifie = e.justifie;
    this.justifieEd = e.justifieEd;
    this.libelle = e.libelle;
    this.motif = e.motif;
    this.par = e.par;
    this.typeElement = e.typeElement;
    this.typeJustification = e.typeJustification;
    this.commentaire = e.commentaire;
    this.aFaire = Object.isExists(e.aFaire) ? e.aFaire : "";
    if (typeof e.dateDeroulement !== "undefined") {
      this.dateDeroulement = e.dateDeroulement;
    }
    if (typeof e.idEleve !== "undefined") {
      this.idEleve = e.idEleve;
    }
    if (typeof e.nomEleve !== "undefined") {
      this.nomEleve = e.nomEleve;
    }
  }
  getIcon(e = true) {
    let n = (e ? "fa-" : "") + "calendar";
    switch (this.typeElement) {
      case G7h.ABSENCE:
        n = (e ? "icon-ed_" : "") + "absence";
        break;
      case G7h.RETARD:
        n = (e ? "icon-ed_" : "") + "retard";
        break;
      case G7h.INTERNAT:
        n = e ? "fa-home" : "maison";
        break;
      case G7h.REPAS:
        n = e ? "fa-cutlery" : "restaurant";
        break;
      case G7h.ENCOURAGEMENT:
        n = (e ? "icon-ed_" : "") + "encouragement";
        break;
      case G7h.SANCTION:
        n = (e ? "icon-ed_" : "") + "sanction";
    }
    return n;
  }
  getLabel() {
    let e = "Divers";
    switch (this.typeElement) {
      case G7h.ABSENCE:
        e = "Absence";
        break;
      case G7h.RETARD:
        e = "Retard";
        break;
      case G7h.INTERNAT:
        e = "Absences internat";
        break;
      case G7h.REPAS:
        e = "Absences restauration scolaire";
        break;
      case G7h.ENCOURAGEMENT:
        e = "Encouragement";
        break;
      case G7h.SANCTION:
        e = "Sanction";
    }
    return e;
  }
}
export class GQQ {
  constructor(e = {
    absenceCommentaire: false,
    encouragementCommentaire: false,
    encouragementParQui: false,
    encouragementsVisible: false,
    justificationEnLigne: false,
    retardCommentaire: false,
    sanctionCommentaire: false,
    sanctionParQui: false,
    sanctionsVisible: false
  }) {
    this.absenceCommentaire = e.absenceCommentaire;
    this.encouragementCommentaire = e.encouragementCommentaire;
    this.encouragementParQui = e.encouragementParQui;
    this.encouragementsVisible = e.encouragementsVisible;
    this.justificationEnLigne = e.justificationEnLigne;
    this.retardCommentaire = e.retardCommentaire;
    this.sanctionCommentaire = e.sanctionCommentaire;
    this.sanctionParQui = e.sanctionParQui;
    this.sanctionsVisible = e.sanctionsVisible;
  }
}
class g1 {
  constructor(e = {}) {
    if (Array.isArray(e.evenements)) {
      this.absencesRetards = e.evenements.filter(n => n.typeElement === G7h.ABSENCE || n.typeElement === G7h.INTERNAT || n.typeElement === G7h.REPAS || n.typeElement === G7h.RETARD);
      this.sanctionsEncouragements = e.evenements.filter(n => n.typeElement === G7h.SANCTION || n.typeElement === G7h.ENCOURAGEMENT);
    } else {
      this.absencesRetards = Array.isArray(e.absencesRetards) ? e.absencesRetards.map(n => new MBX(n)) : [];
      this.sanctionsEncouragements = Array.isArray(e.sanctionsEncouragements) ? e.sanctionsEncouragements.map(n => new MBX(n)) : [];
    }
    this.parametrage = new GQQ(e.parametrage);
    if (typeof e.expired !== "undefined") {
      this.expired = e.expired;
    }
  }
}
export class FVy {
  constructor(e = {
    idAbsence: 0,
    typeAbsence: "",
    action: "",
    signature: {
      code: 0
    },
    message: "",
    libelleEnAttente: ""
  }) {
    this.idAbsence = e.idAbsence;
    this.typeAbsence = e.typeAbsence;
    this.action = e.action;
    this.signature = typeof e.signature !== "undefined" ? {
      ...e.signature
    } : {
      code: 0,
      signatureCanvas: ""
    };
    this.message = e.message;
    this.libelleEnAttente = e.libelleEnAttente;
    if (typeof e.fichier !== "undefined") {
      this.fichier = e.fichier;
    }
    if (typeof e.idEleve !== "undefined") {
      this.idEleve = e.idEleve;
    }
    if (typeof e.date !== "undefined") {
      this.date = e.date;
    }
  }
}
class m1 {
  constructor(e) {
    if (Object.isExists(e) && !Object.isEmpty(e)) {
      const n = Object.keys(e);
      for (let s of n) {
        this[s] = new g1(e[s]);
      }
    }
  }
  static initialState() {
    return {};
  }
}
export class aUA {
  static getVisibiliteParametrage(e) {
    let n = {
      absenceVisible: true,
      retardVisible: true,
      sanctionVisible: true,
      encouragementVisible: true
    };
    if (IDb.isPersonnel(e.typeCompte)) {
      if (Kg5.isModuleEnabled(e, qzA.CONSEIL_DE_CLASSE_NG)) {
        n.absenceVisible = true;
        n.retardVisible = true;
        n.sanctionVisible = true;
        n.encouragementVisible = true;
      } else {
        n.absenceVisible = Kg5.isModuleEnabled(e, qzA.ABSENCES);
        n.retardVisible = Kg5.isModuleEnabled(e, qzA.RETARDS);
        n.sanctionVisible = Kg5.isModuleEnabled(e, qzA.SANCTIONS);
        n.encouragementVisible = Kg5.isModuleEnabled(e, qzA.ENCOURAGEMENTS);
      }
    }
    if (IDb.isProfesseur(e.typeCompte)) {
      n.absenceVisible = true;
      n.retardVisible = true;
      n.sanctionVisible = true;
      n.encouragementVisible = true;
    }
    return n;
  }
}
export let _bT = (() => {
  let R = class extends yh4 {
    constructor(n) {
      super(n);
      this.devTool = n;
    }
    markStoreAsExpired() {
      let n = this.cloneDeep();
      let s = false;
      if (Object.isExists(n)) {
        const d = Object.keys(n);
        for (let h of d) {
          if (Object.isExists(n[h]) && !Object.isExpired(n[h])) {
            Object.setExpired(n[h], 0);
            s = true;
          }
        }
        if (s) {
          this.store = n;
        }
      }
      super.markStoreAsExpired();
    }
    updateVieScolaireStore(n, s, d, h = {}) {
      let P = this.cloneDeep();
      switch (d) {
        case "justifierAbsence":
          {
            const z = P[s].absencesRetards.findIndex(Ae => Ae.typeElement === h.typeElementVS && Ae.id === h.idElementVS);
            if (z > -1) {
              P[s].absencesRetards[z].justifie = true;
              P[s].absencesRetards[z].justifieEd = true;
              P[s].absencesRetards[z].typeJustification = h.libelleEnAttente;
            }
            break;
          }
        case "getVieScolaire":
          P[s] = new g1(n);
          Object.setExpired(P[s], this.expireableTTL);
      }
      this.store = P;
    }
    selectListeInfosVieScolaire(n) {
      return this.select$(s => Object.getEntity(s, n));
    }
  };
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(lbX));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  R = (0, le.gn)([pcA({
    classInstanceRef: m1,
    className: "VieScolaireStore"
  })], R);
  return R;
})();
export let UmA = (() => {
  class R extends Y5f {
    constructor(n, s, d) {
      super();
      this.http = n;
      this.authStore = s;
      this.vieScolaireStore = d;
    }
    getVieScolaire(n, s, d = 0, h = false) {
      let P = n === meW.ELEVE ? FSr.translateTypeUser(n, false) : n;
      const z = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, n, s);
      const Ae = Object.getEntity(this.vieScolaireStore.snapshot, z);
      let Ve = `${P}/${s}/viescolaire`;
      if (this.authStore.isEntreprise()) {
        Ve = `${P}/${s}/${d}/viescolairetuteur`;
      }
      if (h || Object.isExpired(Ae)) {
        return this.http.post(Ve, {}, {
          params: new Et().set("verbe", "get")
        }).pipe((0, j.U)(Tt => this.vieScolaireStore.updateVieScolaireStore(Tt.data, z, "getVieScolaire")), (0, W.K)(Tt => this.catchBadResponse(Tt)));
      } else {
        return E.E;
      }
    }
    justifierAbsence(n, s) {
      const d = $ej.edDBUserSpecificKey(this.authStore.currentUser.codeOgec, dcH.ELEVE, n);
      let h = new FVy(s);
      h.action = "justificationAbsence";
      if (h.fichier !== "") {
        h.fichier = YC.base64encode(h.fichier);
      }
      return this.http.post(`eleves/${n}/viescolaire`, h, {
        params: new Et().set("verbe", "post")
      }).pipe((0, F.w)(P => P.code === GL1.OK ? (this.vieScolaireStore.updateVieScolaireStore(P.data, d, "justifierAbsence", {
        idElementVS: h.idAbsence,
        typeElementVS: h.typeAbsence,
        libelleEnAttente: h.libelleEnAttente
      }), (0, S.of)(true)) : (0, I._)(() => new FwQ("Un problème technique est survenu lors de la justification, merci de réessayer !", P.code, DOJ.genericError))), (0, W.K)(P => this.catchBadResponse(P)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(CnD), t.LFG(_bT));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
export let bj2 = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.http = n;
      this.httpCacheService = s;
    }
    listAides(n, s = false) {
      const h = `aidesenligne/${pi[n] || n}`;
      let P = new Et().set("verbe", "get").set("cacheEnabled", "1").set("cacheKey", h).set("cacheTTL", `${X9o.uneJournee}`);
      if (s) {
        this.httpCacheService.delete(P.cacheKey);
      }
      return this.http.post(h, {}, {
        params: P
      }).pipe((0, j.U)(z => Array.isArray(z.data) ? z.data.map(Ae => new eD9({
        ...Ae,
        type: Vav.FICHIER_AIDES
      })) : []), (0, W.K)(z => this.catchBadResponse(z)));
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(pt), t.LFG(nl));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
class F_ {
  constructor(e = {
    codeMatiere: "",
    libelle: ""
  }) {
    this.codeMatiere = e.codeMatiere;
    this.libelle = e.libelle;
  }
}
class E1 {
  constructor(e = {}) {
    this.id = e.id;
    this.specialites = Array.isArray(e.specialites) ? [...e.specialites] : [];
  }
}
export class WBj {
  constructor(e = {
    id: 0,
    nbChoix: 1,
    libelle: "",
    detail: ""
  }) {
    this.id = e.id;
    this.nbChoix = e.nbChoix;
    this.libelle = e.libelle;
    this.detail = e.detail;
    this.dateCloture = e.dateCloture;
    this.specialites = Array.isArray(e.specialites) ? e.specialites.map(n => new F_(n)) : [];
    this.parcours = Array.isArray(e.parcours) ? e.parcours.map(n => n.map(s => new F_(s))) : [];
    this.eleves = Array.isArray(e.eleves) ? e.eleves.map(n => new E1(n)) : [];
  }
}
export let Bwr = (() => {
  class R extends Y5f {
    constructor(n, s) {
      super();
      this.httpCacheService = n;
      this.http = s;
    }
    getSondages(n = false) {
      if (n) {
        this.httpCacheService.delete(R.urlGet);
      }
      const s = Y5f.buildSimpleQueryString({
        cacheEnabled: 1,
        cacheKey: R.urlGet,
        cacheTTL: `${X9o.uneHeure}`,
        verbe: "get"
      });
      return this.http.post(R.urlGet, {}, {
        params: s
      }).pipe((0, j.U)(d => Array.isArray(d.data) ? d.data.map(h => new WBj(h)) : []), (0, W.K)(d => this.catchBadResponse(d)));
    }
    updateSondage(n, s) {
      return this.http.post(`rdt/sondages/${n}`, s, {
        params: new Et().set("verbe", "put")
      }).pipe((0, F.w)(h => h.code === GL1.OK ? (this.httpCacheService.delete(R.urlGet), (0, S.of)(true)) : (0, I._)(() => new FwQ("Une erreur est survenue lors de la sauvegarde de vos choix, merci de réessayer !", h.code, DOJ.genericError))), (0, W.K)(h => this.catchBadResponse(h)));
    }
  }
  R.urlGet = "rdt/sondages";
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(nl), t.LFG(pt));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac,
    providedIn: "root"
  });
  return R;
})();
let L_ = (() => {
  class R {
    constructor(n) {
      this.commonConfigService = n;
    }
    intercept(n, s) {
      const d = performance.now();
      return s.handle(n).pipe((0, G.x)(() => {
        if (this.commonConfigService.monitorHTTP === true) {
          this.logRequestTime(d, n);
        }
      }));
    }
    logRequestTime(n, s) {
      const d = "" + (performance.now() - n);
      console.log("HttpMonitorInterceptor.logRequestTime msg : ", `HTTP Monitor "${s.urlWithParams}" - ${d} ms.`);
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(vh));
  };
  R.ɵprov = t.Yz7({
    token: R,
    factory: R.ɵfac
  });
  return R;
})();
export let Awd = (() => {
  class R {
    constructor(n) {
      if (n) {
        throw new Error("EdCommonModule has already been loaded. Import it in the AppModule only.");
      }
    }
    static forRoot(n) {
      return {
        ngModule: R,
        providers: [{
          provide: uv,
          useValue: n
        }, {
          provide: Wt,
          useFactory: Qh,
          deps: [t.zs3, CnD, dSF, nl, nm, Lo, yg, vh, VLf],
          multi: true
        }, {
          provide: Wt,
          useClass: L_,
          multi: true
        }]
      };
    }
  }
  R.ɵfac = function (n) {
    return new (n || R)(t.LFG(R, 12));
  };
  R.ɵmod = t.oAB({
    type: R
  });
  R.ɵinj = t.cJS({
    imports: [b.ez, ns]
  });
  return R;
})();