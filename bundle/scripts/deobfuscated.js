(function () {
  function P(G) {
    if (G && G.__esModule) {
      return G.default;
    } else {
      return G;
    }
  }
  function X(G) {
    if (G === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return G;
  }
  function I(G, B) {
    if (!(G instanceof B)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function y(G, B) {
    for (var A = 0; A < B.length; A++) {
      var H = B[A];
      H.enumerable = H.enumerable || false;
      H.configurable = true;
      if ("value" in H) {
        H.writable = true;
      }
      Object.defineProperty(G, H.key, H);
    }
  }
  function w(G, B, A) {
    if (B) {
      y(G.prototype, B);
    }
    if (A) {
      y(G, A);
    }
    return G;
  }
  function E(G) {
    return (E = Object.setPrototypeOf ? Object.getPrototypeOf : function (B) {
      return B.__proto__ || Object.getPrototypeOf(B);
    })(G);
  }
  function R(G, B) {
    return (R = Object.setPrototypeOf || function (A, H) {
      A.__proto__ = H;
      return A;
    })(G, B);
  }
  function N(G, B) {
    if (!B || ((A = B) && A.constructor === Symbol ? "symbol" : typeof A) != "object" && typeof B != "function") {
      return X(G);
    } else {
      return B;
    }
    var A;
  }
  var x;
  function S(G) {
    return Array.isArray(G) || {}.toString.call(G) == "[object Object]";
  }
  function s(G) {
    return !G || typeof G != "object" && typeof G != "function";
  }
  x = function G() {
    var B = [].slice.call(arguments);
    var A = false;
    if (typeof B[0] == "boolean") {
      A = B.shift();
    }
    var H = B[0];
    if (s(H)) {
      throw new Error("extendee must be an object");
    }
    for (var $ = B.slice(1), J = $.length, Q = 0; Q < J; Q++) {
      var U = $[Q];
      for (var K in U) {
        if (Object.prototype.hasOwnProperty.call(U, K)) {
          var F = U[K];
          if (A && S(F)) {
            var L = Array.isArray(F) ? [] : {};
            H[K] = G(true, Object.prototype.hasOwnProperty.call(H, K) && !s(H[K]) ? H[K] : L, F);
          } else {
            H[K] = F;
          }
        }
      }
    }
    return H;
  };
  var u = function () {
    "use strict";

    function G() {
      I(this, G);
    }
    w(G, [{
      key: "on",
      value: function (B, A) {
        this._callbacks = this._callbacks || {};
        this._callbacks[B] ||= [];
        this._callbacks[B].push(A);
        return this;
      }
    }, {
      key: "emit",
      value: function (B) {
        for (var A = arguments.length, H = new Array(A > 1 ? A - 1 : 0), $ = 1; $ < A; $++) {
          H[$ - 1] = arguments[$];
        }
        this._callbacks = this._callbacks || {};
        var J = this._callbacks[B];
        var Q = true;
        var U = false;
        var K = undefined;
        if (J) {
          try {
            for (var F, L = J[Symbol.iterator](); !(Q = (F = L.next()).done); Q = true) {
              var ie = F.value;
              ie.apply(this, H);
            }
          } catch (Y) {
            U = true;
            K = Y;
          } finally {
            try {
              if (!Q && L.return != null) {
                L.return();
              }
            } finally {
              if (U) {
                throw K;
              }
            }
          }
        }
        if (this.element) {
          this.element.dispatchEvent(this.makeEvent("dropzone:" + B, {
            args: H
          }));
        }
        return this;
      }
    }, {
      key: "makeEvent",
      value: function (B, A) {
        var H = {
          bubbles: true,
          cancelable: true,
          detail: A
        };
        if (typeof window.CustomEvent == "function") {
          return new CustomEvent(B, H);
        }
        var $ = document.createEvent("CustomEvent");
        $.initCustomEvent(B, H.bubbles, H.cancelable, H.detail);
        return $;
      }
    }, {
      key: "off",
      value: function (B, A) {
        if (!this._callbacks || arguments.length === 0) {
          this._callbacks = {};
          return this;
        }
        var H = this._callbacks[B];
        if (!H) {
          return this;
        }
        if (arguments.length === 1) {
          delete this._callbacks[B];
          return this;
        }
        for (var $ = 0; $ < H.length; $++) {
          var J = H[$];
          if (J === A) {
            H.splice($, 1);
            break;
          }
        }
        return this;
      }
    }]);
    return G;
  }();
  var m = {
    url: null,
    method: "post",
    withCredentials: false,
    timeout: null,
    parallelUploads: 2,
    uploadMultiple: false,
    chunking: false,
    forceChunking: false,
    chunkSize: 2097152,
    parallelChunkUploads: false,
    retryChunks: false,
    retryChunksLimit: 3,
    maxFilesize: 256,
    paramName: "file",
    createImageThumbnails: true,
    maxThumbnailFilesize: 10,
    thumbnailWidth: 120,
    thumbnailHeight: 120,
    thumbnailMethod: "crop",
    resizeWidth: null,
    resizeHeight: null,
    resizeMimeType: null,
    resizeQuality: 0.8,
    resizeMethod: "contain",
    filesizeBase: 1000,
    maxFiles: null,
    headers: null,
    defaultHeaders: true,
    clickable: true,
    ignoreHiddenFiles: true,
    acceptedFiles: null,
    acceptedMimeTypes: null,
    autoProcessQueue: true,
    autoQueue: true,
    addRemoveLinks: false,
    previewsContainer: null,
    disablePreviews: false,
    hiddenInputContainer: "body",
    capture: null,
    renameFilename: null,
    renameFile: null,
    forceFallback: false,
    dictDefaultMessage: "Drop files here to upload",
    dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
    dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
    dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
    dictInvalidFileType: "You can't upload files of this type.",
    dictResponseError: "Server responded with {{statusCode}} code.",
    dictCancelUpload: "Cancel upload",
    dictUploadCanceled: "Upload canceled.",
    dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
    dictRemoveFile: "Remove file",
    dictRemoveFileConfirmation: null,
    dictMaxFilesExceeded: "You can not upload any more files.",
    dictFileSizeUnits: {
      tb: "TB",
      gb: "GB",
      mb: "MB",
      kb: "KB",
      b: "b"
    },
    init: function () {},
    params: function (G, B, A) {
      if (A) {
        return {
          dzuuid: A.file.upload.uuid,
          dzchunkindex: A.index,
          dztotalfilesize: A.file.size,
          dzchunksize: this.options.chunkSize,
          dztotalchunkcount: A.file.upload.totalChunkCount,
          dzchunkbyteoffset: A.index * this.options.chunkSize
        };
      }
    },
    accept: function (G, B) {
      return B();
    },
    chunksUploaded: function (G, B) {
      B();
    },
    binaryBody: false,
    fallback: function () {
      var G;
      this.element.className = `${this.element.className} dz-browser-not-supported`;
      var B = true;
      var A = false;
      var H = undefined;
      try {
        for (var $, J = this.element.getElementsByTagName("div")[Symbol.iterator](); !(B = ($ = J.next()).done); B = true) {
          var Q = $.value;
          if (/(^| )dz-message($| )/.test(Q.className)) {
            G = Q;
            Q.className = "dz-message";
            break;
          }
        }
      } catch (K) {
        A = true;
        H = K;
      } finally {
        try {
          if (!B && J.return != null) {
            J.return();
          }
        } finally {
          if (A) {
            throw H;
          }
        }
      }
      if (!G) {
        G = l.createElement("<div class=\"dz-message\"><span></span></div>");
        this.element.appendChild(G);
      }
      var U = G.getElementsByTagName("span")[0];
      if (U) {
        if (U.textContent != null) {
          U.textContent = this.options.dictFallbackMessage;
        } else if (U.innerText != null) {
          U.innerText = this.options.dictFallbackMessage;
        }
      }
      return this.element.appendChild(this.getFallbackForm());
    },
    resize: function (G, B, A, H) {
      var $ = {
        srcX: 0,
        srcY: 0,
        srcWidth: G.width,
        srcHeight: G.height
      };
      var J = G.width / G.height;
      if (B == null && A == null) {
        B = $.srcWidth;
        A = $.srcHeight;
      } else if (B == null) {
        B = A * J;
      } else if (A == null) {
        A = B / J;
      }
      var Q = (B = Math.min(B, $.srcWidth)) / (A = Math.min(A, $.srcHeight));
      if ($.srcWidth > B || $.srcHeight > A) {
        if (H === "crop") {
          if (J > Q) {
            $.srcHeight = G.height;
            $.srcWidth = $.srcHeight * Q;
          } else {
            $.srcWidth = G.width;
            $.srcHeight = $.srcWidth / Q;
          }
        } else {
          if (H !== "contain") {
            throw new Error(`Unknown resizeMethod '${H}'`);
          }
          if (J > Q) {
            A = B / J;
          } else {
            B = A * J;
          }
        }
      }
      $.srcX = (G.width - $.srcWidth) / 2;
      $.srcY = (G.height - $.srcHeight) / 2;
      $.trgWidth = B;
      $.trgHeight = A;
      return $;
    },
    transformFile: function (G, B) {
      if ((this.options.resizeWidth || this.options.resizeHeight) && G.type.match(/image.*/)) {
        return this.resizeImage(G, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, B);
      } else {
        return B(G);
      }
    },
    previewTemplate: P("<div class=\"dz-file-preview dz-preview\"> <div class=\"dz-image\"><img data-dz-thumbnail=\"\"></div> <div class=\"dz-details\"> <div class=\"dz-size\"><span data-dz-size=\"\"></span></div> <div class=\"dz-filename\"><span data-dz-name=\"\"></span></div> </div> <div class=\"dz-progress\"> <span class=\"dz-upload\" data-dz-uploadprogress=\"\"></span> </div> <div class=\"dz-error-message\"><span data-dz-errormessage=\"\"></span></div> <div class=\"dz-success-mark\"> <svg width=\"54\" height=\"54\" fill=\"#fff\"><path d=\"m10.207 29.793 4.086-4.086a1 1 0 0 1 1.414 0l5.586 5.586a1 1 0 0 0 1.414 0l15.586-15.586a1 1 0 0 1 1.414 0l4.086 4.086a1 1 0 0 1 0 1.414L22.707 42.293a1 1 0 0 1-1.414 0L10.207 31.207a1 1 0 0 1 0-1.414Z\"/></svg> </div> <div class=\"dz-error-mark\"> <svg width=\"54\" height=\"54\" fill=\"#fff\"><path d=\"m26.293 20.293-7.086-7.086a1 1 0 0 0-1.414 0l-4.586 4.586a1 1 0 0 0 0 1.414l7.086 7.086a1 1 0 0 1 0 1.414l-7.086 7.086a1 1 0 0 0 0 1.414l4.586 4.586a1 1 0 0 0 1.414 0l7.086-7.086a1 1 0 0 1 1.414 0l7.086 7.086a1 1 0 0 0 1.414 0l4.586-4.586a1 1 0 0 0 0-1.414l-7.086-7.086a1 1 0 0 1 0-1.414l7.086-7.086a1 1 0 0 0 0-1.414l-4.586-4.586a1 1 0 0 0-1.414 0l-7.086 7.086a1 1 0 0 1-1.414 0Z\"/></svg> </div> </div>"),
    drop: function (G) {
      return this.element.classList.remove("dz-drag-hover");
    },
    dragstart: function (G) {},
    dragend: function (G) {
      return this.element.classList.remove("dz-drag-hover");
    },
    dragenter: function (G) {
      return this.element.classList.add("dz-drag-hover");
    },
    dragover: function (G) {
      return this.element.classList.add("dz-drag-hover");
    },
    dragleave: function (G) {
      return this.element.classList.remove("dz-drag-hover");
    },
    paste: function (G) {},
    reset: function () {
      return this.element.classList.remove("dz-started");
    },
    addedfile: function (G) {
      if (this.element === this.previewsContainer) {
        this.element.classList.add("dz-started");
      }
      if (this.previewsContainer && !this.options.disablePreviews) {
        var B = this;
        G.previewElement = l.createElement(this.options.previewTemplate.trim());
        G.previewTemplate = G.previewElement;
        this.previewsContainer.appendChild(G.previewElement);
        var A = true;
        var H = false;
        var $ = undefined;
        try {
          for (var J, Q = G.previewElement.querySelectorAll("[data-dz-name]")[Symbol.iterator](); !(A = (J = Q.next()).done); A = true) {
            var U = J.value;
            U.textContent = G.name;
          }
        } catch (ae) {
          H = true;
          $ = ae;
        } finally {
          try {
            if (!A && Q.return != null) {
              Q.return();
            }
          } finally {
            if (H) {
              throw $;
            }
          }
        }
        var K = true;
        var F = false;
        var L = undefined;
        try {
          for (var ie, Y = G.previewElement.querySelectorAll("[data-dz-size]")[Symbol.iterator](); !(K = (ie = Y.next()).done); K = true) {
            (U = ie.value).innerHTML = this.filesize(G.size);
          }
        } catch (ae) {
          F = true;
          L = ae;
        } finally {
          try {
            if (!K && Y.return != null) {
              Y.return();
            }
          } finally {
            if (F) {
              throw L;
            }
          }
        }
        if (this.options.addRemoveLinks) {
          G._removeLink = l.createElement(`<a class="dz-remove" href="javascript:undefined;" data-dz-remove>${this.options.dictRemoveFile}</a>`);
          G.previewElement.appendChild(G._removeLink);
        }
        function ne(ae) {
          var fe = B;
          ae.preventDefault();
          ae.stopPropagation();
          if (G.status === l.UPLOADING) {
            return l.confirm(B.options.dictCancelUploadConfirmation, function () {
              return fe.removeFile(G);
            });
          }
          var Me = B;
          if (B.options.dictRemoveFileConfirmation) {
            return l.confirm(B.options.dictRemoveFileConfirmation, function () {
              return Me.removeFile(G);
            });
          } else {
            return B.removeFile(G);
          }
        }
        var le = true;
        var ge = false;
        var Ee = undefined;
        try {
          for (var Le, Qe = G.previewElement.querySelectorAll("[data-dz-remove]")[Symbol.iterator](); !(le = (Le = Qe.next()).done); le = true) {
            Le.value.addEventListener("click", ne);
          }
        } catch (ae) {
          ge = true;
          Ee = ae;
        } finally {
          try {
            if (!le && Qe.return != null) {
              Qe.return();
            }
          } finally {
            if (ge) {
              throw Ee;
            }
          }
        }
      }
    },
    removedfile: function (G) {
      if (G.previewElement != null && G.previewElement.parentNode != null) {
        G.previewElement.parentNode.removeChild(G.previewElement);
      }
      return this._updateMaxFilesReachedClass();
    },
    thumbnail: function (G, B) {
      if (G.previewElement) {
        G.previewElement.classList.remove("dz-file-preview");
        var A = true;
        var H = false;
        var $ = undefined;
        try {
          for (var J, Q = G.previewElement.querySelectorAll("[data-dz-thumbnail]")[Symbol.iterator](); !(A = (J = Q.next()).done); A = true) {
            var U = J.value;
            U.alt = G.name;
            U.src = B;
          }
        } catch (K) {
          H = true;
          $ = K;
        } finally {
          try {
            if (!A && Q.return != null) {
              Q.return();
            }
          } finally {
            if (H) {
              throw $;
            }
          }
        }
        return setTimeout(function () {
          return G.previewElement.classList.add("dz-image-preview");
        }, 1);
      }
    },
    error: function (G, B) {
      if (G.previewElement) {
        G.previewElement.classList.add("dz-error");
        if (typeof B != "string" && B.error) {
          B = B.error;
        }
        var A = true;
        var H = false;
        var $ = undefined;
        try {
          for (var J, Q = G.previewElement.querySelectorAll("[data-dz-errormessage]")[Symbol.iterator](); !(A = (J = Q.next()).done); A = true) {
            J.value.textContent = B;
          }
        } catch (U) {
          H = true;
          $ = U;
        } finally {
          try {
            if (!A && Q.return != null) {
              Q.return();
            }
          } finally {
            if (H) {
              throw $;
            }
          }
        }
      }
    },
    errormultiple: function () {},
    processing: function (G) {
      if (G.previewElement && (G.previewElement.classList.add("dz-processing"), G._removeLink)) {
        return G._removeLink.innerHTML = this.options.dictCancelUpload;
      }
    },
    processingmultiple: function () {},
    uploadprogress: function (G, B, A) {
      var H = true;
      var $ = false;
      var J = undefined;
      if (G.previewElement) {
        try {
          for (var Q, U = G.previewElement.querySelectorAll("[data-dz-uploadprogress]")[Symbol.iterator](); !(H = (Q = U.next()).done); H = true) {
            var K = Q.value;
            if (K.nodeName === "PROGRESS") {
              K.value = B;
            } else {
              K.style.width = `${B}%`;
            }
          }
        } catch (F) {
          $ = true;
          J = F;
        } finally {
          try {
            if (!H && U.return != null) {
              U.return();
            }
          } finally {
            if ($) {
              throw J;
            }
          }
        }
      }
    },
    totaluploadprogress: function () {},
    sending: function () {},
    sendingmultiple: function () {},
    success: function (G) {
      if (G.previewElement) {
        return G.previewElement.classList.add("dz-success");
      }
    },
    successmultiple: function () {},
    canceled: function (G) {
      return this.emit("error", G, this.options.dictUploadCanceled);
    },
    canceledmultiple: function () {},
    complete: function (G) {
      if (G._removeLink) {
        G._removeLink.innerHTML = this.options.dictRemoveFile;
      }
      if (G.previewElement) {
        return G.previewElement.classList.add("dz-complete");
      }
    },
    completemultiple: function () {},
    maxfilesexceeded: function () {},
    maxfilesreached: function () {},
    queuecomplete: function () {},
    addedfiles: function () {}
  };
  var l = function (G) {
    "use strict";

    function B(A, H) {
      var $;
      var J;
      var Q;
      I(this, B);
      ($ = N(this, (J = B, E(J)).call(this))).element = A;
      $.clickableElements = [];
      $.listeners = [];
      $.files = [];
      if (typeof $.element == "string") {
        $.element = document.querySelector($.element);
      }
      if (!$.element || $.element.nodeType == null) {
        throw new Error("Invalid dropzone element.");
      }
      if ($.element.dropzone) {
        throw new Error("Dropzone already attached.");
      }
      B.instances.push(X($));
      $.element.dropzone = X($);
      var K = B.optionsForElement($.element) ?? {};
      $.options = P(x)(true, {}, m, K, H ?? {});
      $.options.previewTemplate = $.options.previewTemplate.replace(/\n*/g, "");
      if ($.options.forceFallback || !B.isBrowserSupported()) {
        return N($, $.options.fallback.call(X($)));
      }
      if ($.options.url == null) {
        $.options.url = $.element.getAttribute("action");
      }
      if (!$.options.url) {
        throw new Error("No URL provided.");
      }
      if ($.options.acceptedFiles && $.options.acceptedMimeTypes) {
        throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
      }
      if ($.options.uploadMultiple && $.options.chunking) {
        throw new Error("You cannot set both: uploadMultiple and chunking.");
      }
      if ($.options.binaryBody && $.options.uploadMultiple) {
        throw new Error("You cannot set both: binaryBody and uploadMultiple.");
      }
      if ($.options.acceptedMimeTypes) {
        $.options.acceptedFiles = $.options.acceptedMimeTypes;
        delete $.options.acceptedMimeTypes;
      }
      if ($.options.renameFilename != null) {
        $.options.renameFile = function (F) {
          return $.options.renameFilename.call(X($), F.name, F);
        };
      }
      if (typeof $.options.method == "string") {
        $.options.method = $.options.method.toUpperCase();
      }
      if ((Q = $.getExistingFallback()) && Q.parentNode) {
        Q.parentNode.removeChild(Q);
      }
      if ($.options.previewsContainer !== false) {
        $.previewsContainer = $.options.previewsContainer ? B.getElement($.options.previewsContainer, "previewsContainer") : $.element;
      }
      if ($.options.clickable) {
        $.clickableElements = $.options.clickable === true ? [$.element] : B.getElements($.options.clickable, "clickable");
      }
      $.init();
      return $;
    }
    (function C(G, B) {
      if (typeof B != "function" && B !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      G.prototype = Object.create(B && B.prototype, {
        constructor: {
          value: G,
          writable: true,
          configurable: true
        }
      });
      if (B) {
        R(G, B);
      }
    })(B, G);
    w(B, [{
      key: "getAcceptedFiles",
      value: function () {
        return this.files.filter(function (A) {
          return A.accepted;
        }).map(function (A) {
          return A;
        });
      }
    }, {
      key: "getRejectedFiles",
      value: function () {
        return this.files.filter(function (A) {
          return !A.accepted;
        }).map(function (A) {
          return A;
        });
      }
    }, {
      key: "getFilesWithStatus",
      value: function (A) {
        return this.files.filter(function (H) {
          return H.status === A;
        }).map(function (H) {
          return H;
        });
      }
    }, {
      key: "getQueuedFiles",
      value: function () {
        return this.getFilesWithStatus(B.QUEUED);
      }
    }, {
      key: "getUploadingFiles",
      value: function () {
        return this.getFilesWithStatus(B.UPLOADING);
      }
    }, {
      key: "getAddedFiles",
      value: function () {
        return this.getFilesWithStatus(B.ADDED);
      }
    }, {
      key: "getActiveFiles",
      value: function () {
        return this.files.filter(function (A) {
          return A.status === B.UPLOADING || A.status === B.QUEUED;
        }).map(function (A) {
          return A;
        });
      }
    }, {
      key: "init",
      value: function () {
        var A = this;
        var H = this;
        var $ = this;
        var J = this;
        var Q = this;
        var U = this;
        var K = this;
        var F = this;
        var L = this;
        var ie = this;
        var Y = this;
        if (this.element.tagName === "form") {
          this.element.setAttribute("enctype", "multipart/form-data");
        }
        if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
          this.element.appendChild(B.createElement(`<div class="dz-default dz-message"><button class="dz-button" type="button">${this.options.dictDefaultMessage}</button></div>`));
        }
        if (this.clickableElements.length) {
          var ne = this;
          function le() {
            var je = ne;
            if (ne.hiddenFileInput) {
              ne.hiddenFileInput.parentNode.removeChild(ne.hiddenFileInput);
            }
            ne.hiddenFileInput = document.createElement("input");
            ne.hiddenFileInput.setAttribute("type", "file");
            if (ne.options.maxFiles === null || ne.options.maxFiles > 1) {
              ne.hiddenFileInput.setAttribute("multiple", "multiple");
            }
            ne.hiddenFileInput.className = "dz-hidden-input";
            if (ne.options.acceptedFiles !== null) {
              ne.hiddenFileInput.setAttribute("accept", ne.options.acceptedFiles);
            }
            if (ne.options.capture !== null) {
              ne.hiddenFileInput.setAttribute("capture", ne.options.capture);
            }
            ne.hiddenFileInput.setAttribute("tabindex", "-1");
            ne.hiddenFileInput.style.visibility = "hidden";
            ne.hiddenFileInput.style.position = "absolute";
            ne.hiddenFileInput.style.top = "0";
            ne.hiddenFileInput.style.left = "0";
            ne.hiddenFileInput.style.height = "0";
            ne.hiddenFileInput.style.width = "0";
            B.getElement(ne.options.hiddenInputContainer, "hiddenInputContainer").appendChild(ne.hiddenFileInput);
            ne.hiddenFileInput.addEventListener("change", function () {
              var ze = je.hiddenFileInput.files;
              var we = true;
              var Ce = false;
              var ye = undefined;
              if (ze.length) {
                try {
                  for (var $e, qe = ze[Symbol.iterator](); !(we = ($e = qe.next()).done); we = true) {
                    je.addFile($e.value);
                  }
                } catch (de) {
                  Ce = true;
                  ye = de;
                } finally {
                  try {
                    if (!we && qe.return != null) {
                      qe.return();
                    }
                  } finally {
                    if (Ce) {
                      throw ye;
                    }
                  }
                }
              }
              je.emit("addedfiles", ze);
              le();
            });
          }
          le();
        }
        this.URL = window.URL !== null ? window.URL : window.webkitURL;
        var ge = true;
        var Ee = false;
        var Le = undefined;
        try {
          for (var Qe, ae = this.events[Symbol.iterator](); !(ge = (Qe = ae.next()).done); ge = true) {
            var fe = Qe.value;
            this.on(fe, this.options[fe]);
          }
        } catch (je) {
          Ee = true;
          Le = je;
        } finally {
          try {
            if (!ge && ae.return != null) {
              ae.return();
            }
          } finally {
            if (Ee) {
              throw Le;
            }
          }
        }
        this.on("uploadprogress", function () {
          return A.updateTotalUploadProgress();
        });
        this.on("removedfile", function () {
          return H.updateTotalUploadProgress();
        });
        this.on("canceled", function (je) {
          return $.emit("complete", je);
        });
        this.on("complete", function (je) {
          var ze = J;
          if (J.getAddedFiles().length === 0 && J.getUploadingFiles().length === 0 && J.getQueuedFiles().length === 0) {
            return setTimeout(function () {
              return ze.emit("queuecomplete");
            }, 0);
          }
        });
        function Me(je) {
          if (function (ze) {
            if (ze.dataTransfer.types) {
              for (var we = 0; we < ze.dataTransfer.types.length; we++) {
                if (ze.dataTransfer.types[we] === "Files") {
                  return true;
                }
              }
            }
            return false;
          }(je)) {
            je.stopPropagation();
            if (je.preventDefault) {
              return je.preventDefault();
            } else {
              return je.returnValue = false;
            }
          }
        }
        this.listeners = [{
          element: this.element,
          events: {
            dragstart: function (je) {
              return Q.emit("dragstart", je);
            },
            dragenter: function (je) {
              Me(je);
              return U.emit("dragenter", je);
            },
            dragover: function (je) {
              var ze;
              try {
                ze = je.dataTransfer.effectAllowed;
              } catch {}
              je.dataTransfer.dropEffect = ze === "move" || ze === "linkMove" ? "move" : "copy";
              Me(je);
              return K.emit("dragover", je);
            },
            dragleave: function (je) {
              return F.emit("dragleave", je);
            },
            drop: function (je) {
              Me(je);
              return L.drop(je);
            },
            dragend: function (je) {
              return ie.emit("dragend", je);
            }
          }
        }];
        this.clickableElements.forEach(function (je) {
          var ze = Y;
          return Y.listeners.push({
            element: je,
            events: {
              click: function (we) {
                if (je !== ze.element || we.target === ze.element || B.elementInside(we.target, ze.element.querySelector(".dz-message"))) {
                  ze.hiddenFileInput.click();
                }
                return true;
              }
            }
          });
        });
        this.enable();
        return this.options.init.call(this);
      }
    }, {
      key: "destroy",
      value: function () {
        this.disable();
        this.removeAllFiles(true);
        if (this.hiddenFileInput != null && this.hiddenFileInput.parentNode) {
          this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
          this.hiddenFileInput = null;
        }
        delete this.element.dropzone;
        return B.instances.splice(B.instances.indexOf(this), 1);
      }
    }, {
      key: "updateTotalUploadProgress",
      value: function () {
        var A;
        var H = 0;
        var $ = 0;
        if (this.getActiveFiles().length) {
          var J = true;
          var Q = false;
          var U = undefined;
          try {
            for (var K, F = this.getActiveFiles()[Symbol.iterator](); !(J = (K = F.next()).done); J = true) {
              var L = K.value;
              H += L.upload.bytesSent;
              $ += L.upload.total;
            }
          } catch (ie) {
            Q = true;
            U = ie;
          } finally {
            try {
              if (!J && F.return != null) {
                F.return();
              }
            } finally {
              if (Q) {
                throw U;
              }
            }
          }
          A = H * 100 / $;
        } else {
          A = 100;
        }
        return this.emit("totaluploadprogress", A, $, H);
      }
    }, {
      key: "_getParamName",
      value: function (A) {
        if (typeof this.options.paramName == "function") {
          return this.options.paramName(A);
        } else {
          return `${this.options.paramName}${this.options.uploadMultiple ? `[${A}]` : ""}`;
        }
      }
    }, {
      key: "_renameFile",
      value: function (A) {
        if (typeof this.options.renameFile != "function") {
          return A.name;
        } else {
          return this.options.renameFile(A);
        }
      }
    }, {
      key: "getFallbackForm",
      value: function () {
        var A;
        var H;
        if (A = this.getExistingFallback()) {
          return A;
        }
        var $ = "<div class=\"dz-fallback\">";
        if (this.options.dictFallbackText) {
          $ += `<p>${this.options.dictFallbackText}</p>`;
        }
        $ += `<input type="file" name="${this._getParamName(0)}" ${this.options.uploadMultiple ? "multiple=\"multiple\"" : undefined} /><input type="submit" value="Upload!"></div>`;
        var J = B.createElement($);
        if (this.element.tagName !== "FORM") {
          (H = B.createElement(`<form action="${this.options.url}" enctype="multipart/form-data" method="${this.options.method}"></form>`)).appendChild(J);
        } else {
          this.element.setAttribute("enctype", "multipart/form-data");
          this.element.setAttribute("method", this.options.method);
        }
        return H ?? J;
      }
    }, {
      key: "getExistingFallback",
      value: function () {
        function A(L) {
          var ie = true;
          var Y = false;
          var ne = undefined;
          try {
            for (var le, ge = L[Symbol.iterator](); !(ie = (le = ge.next()).done); ie = true) {
              var Ee = le.value;
              if (/(^| )fallback($| )/.test(Ee.className)) {
                return Ee;
              }
            }
          } catch (Le) {
            Y = true;
            ne = Le;
          } finally {
            try {
              if (!ie && ge.return != null) {
                ge.return();
              }
            } finally {
              if (Y) {
                throw ne;
              }
            }
          }
        }
        var H = true;
        var $ = false;
        var J = undefined;
        try {
          for (var Q, U = ["div", "form"][Symbol.iterator](); !(H = (Q = U.next()).done); H = true) {
            var K;
            if (K = A(this.element.getElementsByTagName(Q.value))) {
              return K;
            }
          }
        } catch (L) {
          $ = true;
          J = L;
        } finally {
          try {
            if (!H && U.return != null) {
              U.return();
            }
          } finally {
            if ($) {
              throw J;
            }
          }
        }
      }
    }, {
      key: "setupEventListeners",
      value: function () {
        return this.listeners.map(function (A) {
          return function () {
            var H = [];
            for (var $ in A.events) {
              H.push(A.element.addEventListener($, A.events[$], false));
            }
            return H;
          }();
        });
      }
    }, {
      key: "removeEventListeners",
      value: function () {
        return this.listeners.map(function (A) {
          return function () {
            var H = [];
            for (var $ in A.events) {
              H.push(A.element.removeEventListener($, A.events[$], false));
            }
            return H;
          }();
        });
      }
    }, {
      key: "disable",
      value: function () {
        var A = this;
        this.clickableElements.forEach(function (H) {
          return H.classList.remove("dz-clickable");
        });
        this.removeEventListeners();
        this.disabled = true;
        return this.files.map(function (H) {
          return A.cancelUpload(H);
        });
      }
    }, {
      key: "enable",
      value: function () {
        delete this.disabled;
        this.clickableElements.forEach(function (A) {
          return A.classList.add("dz-clickable");
        });
        return this.setupEventListeners();
      }
    }, {
      key: "filesize",
      value: function (A) {
        var H = 0;
        var $ = "b";
        if (A > 0) {
          for (var J = ["tb", "gb", "mb", "kb", "b"], Q = 0; Q < J.length; Q++) {
            var U = J[Q];
            if (A >= Math.pow(this.options.filesizeBase, 4 - Q) / 10) {
              H = A / Math.pow(this.options.filesizeBase, 4 - Q);
              $ = U;
              break;
            }
          }
          H = Math.round(H * 10) / 10;
        }
        return `<strong>${H}</strong> ${this.options.dictFileSizeUnits[$]}`;
      }
    }, {
      key: "_updateMaxFilesReachedClass",
      value: function () {
        if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
          if (this.getAcceptedFiles().length === this.options.maxFiles) {
            this.emit("maxfilesreached", this.files);
          }
          return this.element.classList.add("dz-max-files-reached");
        } else {
          return this.element.classList.remove("dz-max-files-reached");
        }
      }
    }, {
      key: "drop",
      value: function (A) {
        if (A.dataTransfer) {
          this.emit("drop", A);
          for (var H = [], $ = 0; $ < A.dataTransfer.files.length; $++) {
            H[$] = A.dataTransfer.files[$];
          }
          if (H.length) {
            var J = A.dataTransfer.items;
            if (J && J.length && J[0].webkitGetAsEntry != null) {
              this._addFilesFromItems(J);
            } else {
              this.handleFiles(H);
            }
          }
          this.emit("addedfiles", H);
        }
      }
    }, {
      key: "paste",
      value: function (A) {
        H = A?.clipboardData;
        if ((H != null ? H.items : undefined) != null) {
          var H;
          this.emit("paste", A);
          var J = A.clipboardData.items;
          if (J.length) {
            return this._addFilesFromItems(J);
          } else {
            return undefined;
          }
        }
      }
    }, {
      key: "handleFiles",
      value: function (A) {
        var H = true;
        var $ = false;
        var J = undefined;
        try {
          for (var Q, U = A[Symbol.iterator](); !(H = (Q = U.next()).done); H = true) {
            this.addFile(Q.value);
          }
        } catch (F) {
          $ = true;
          J = F;
        } finally {
          try {
            if (!H && U.return != null) {
              U.return();
            }
          } finally {
            if ($) {
              throw J;
            }
          }
        }
      }
    }, {
      key: "_addFilesFromItems",
      value: function (A) {
        var H = this;
        return function () {
          var $ = [];
          var J = true;
          var Q = false;
          var U = undefined;
          try {
            for (var K, F = A[Symbol.iterator](); !(J = (K = F.next()).done); J = true) {
              var L;
              var ie = K.value;
              if (ie.webkitGetAsEntry != null && (L = ie.webkitGetAsEntry())) {
                $.push(L.isFile ? H.addFile(ie.getAsFile()) : L.isDirectory ? H._addFilesFromDirectory(L, L.name) : undefined);
              } else {
                $.push(ie.getAsFile == null || ie.kind != null && ie.kind !== "file" ? undefined : H.addFile(ie.getAsFile()));
              }
            }
          } catch (Y) {
            Q = true;
            U = Y;
          } finally {
            try {
              if (!J && F.return != null) {
                F.return();
              }
            } finally {
              if (Q) {
                throw U;
              }
            }
          }
          return $;
        }();
      }
    }, {
      key: "_addFilesFromDirectory",
      value: function (A, H) {
        var $ = this;
        var J = A.createReader();
        function Q(K) {
          if ((F = console) != null && typeof F.log == "function") {
            return F.log(K);
          } else {
            return undefined;
          }
          var F;
        }
        function U() {
          var K = $;
          return J.readEntries(function (F) {
            if (F.length > 0) {
              var L = true;
              var ie = false;
              var Y = undefined;
              try {
                for (var ne, le = F[Symbol.iterator](); !(L = (ne = le.next()).done); L = true) {
                  var ge = ne.value;
                  var Ee = K;
                  if (ge.isFile) {
                    ge.file(function (Le) {
                      if (!Ee.options.ignoreHiddenFiles || Le.name.substring(0, 1) !== ".") {
                        Le.fullPath = `${H}/${Le.name}`;
                        return Ee.addFile(Le);
                      }
                    });
                  } else if (ge.isDirectory) {
                    K._addFilesFromDirectory(ge, `${H}/${ge.name}`);
                  }
                }
              } catch (Le) {
                ie = true;
                Y = Le;
              } finally {
                try {
                  if (!L && le.return != null) {
                    le.return();
                  }
                } finally {
                  if (ie) {
                    throw Y;
                  }
                }
              }
              U();
            }
            return null;
          }, Q);
        }
        return U();
      }
    }, {
      key: "accept",
      value: function (A, H) {
        if (this.options.maxFilesize && A.size > this.options.maxFilesize * 1048576) {
          H(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(A.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
        } else if (B.isValidFile(A, this.options.acceptedFiles)) {
          if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
            H(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
            this.emit("maxfilesexceeded", A);
          } else {
            this.options.accept.call(this, A, H);
          }
        } else {
          H(this.options.dictInvalidFileType);
        }
      }
    }, {
      key: "addFile",
      value: function (A) {
        var H = this;
        A.upload = {
          uuid: B.uuidv4(),
          progress: 0,
          total: A.size,
          bytesSent: 0,
          filename: this._renameFile(A)
        };
        this.files.push(A);
        A.status = B.ADDED;
        this.emit("addedfile", A);
        this._enqueueThumbnail(A);
        this.accept(A, function ($) {
          if ($) {
            A.accepted = false;
            H._errorProcessing([A], $);
          } else {
            A.accepted = true;
            if (H.options.autoQueue) {
              H.enqueueFile(A);
            }
          }
          H._updateMaxFilesReachedClass();
        });
      }
    }, {
      key: "enqueueFiles",
      value: function (A) {
        var H = true;
        var $ = false;
        var J = undefined;
        try {
          for (var Q, U = A[Symbol.iterator](); !(H = (Q = U.next()).done); H = true) {
            this.enqueueFile(Q.value);
          }
        } catch (F) {
          $ = true;
          J = F;
        } finally {
          try {
            if (!H && U.return != null) {
              U.return();
            }
          } finally {
            if ($) {
              throw J;
            }
          }
        }
        return null;
      }
    }, {
      key: "enqueueFile",
      value: function (A) {
        if (A.status !== B.ADDED || A.accepted !== true) {
          throw new Error("This file can't be queued because it has already been processed or was rejected.");
        }
        var H = this;
        A.status = B.QUEUED;
        if (this.options.autoProcessQueue) {
          return setTimeout(function () {
            return H.processQueue();
          }, 0);
        }
      }
    }, {
      key: "_enqueueThumbnail",
      value: function (A) {
        if (this.options.createImageThumbnails && A.type.match(/image.*/) && A.size <= this.options.maxThumbnailFilesize * 1048576) {
          var H = this;
          this._thumbnailQueue.push(A);
          return setTimeout(function () {
            return H._processThumbnailQueue();
          }, 0);
        }
      }
    }, {
      key: "_processThumbnailQueue",
      value: function () {
        var A = this;
        if (!this._processingThumbnail && this._thumbnailQueue.length !== 0) {
          this._processingThumbnail = true;
          var H = this._thumbnailQueue.shift();
          return this.createThumbnail(H, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function ($) {
            A.emit("thumbnail", H, $);
            A._processingThumbnail = false;
            return A._processThumbnailQueue();
          });
        }
      }
    }, {
      key: "removeFile",
      value: function (A) {
        if (A.status === B.UPLOADING) {
          this.cancelUpload(A);
        }
        this.files = M(this.files, A);
        this.emit("removedfile", A);
        if (this.files.length === 0) {
          return this.emit("reset");
        }
      }
    }, {
      key: "removeAllFiles",
      value: function (A) {
        if (A == null) {
          A = false;
        }
        var H = true;
        var $ = false;
        var J = undefined;
        try {
          for (var Q, U = this.files.slice()[Symbol.iterator](); !(H = (Q = U.next()).done); H = true) {
            var K = Q.value;
            if (K.status !== B.UPLOADING || A) {
              this.removeFile(K);
            }
          }
        } catch (F) {
          $ = true;
          J = F;
        } finally {
          try {
            if (!H && U.return != null) {
              U.return();
            }
          } finally {
            if ($) {
              throw J;
            }
          }
        }
        return null;
      }
    }, {
      key: "resizeImage",
      value: function (A, H, $, J, Q) {
        var U = this;
        return this.createThumbnail(A, H, $, J, true, function (K, F) {
          if (F == null) {
            return Q(A);
          }
          var L = U.options.resizeMimeType;
          if (L == null) {
            L = A.type;
          }
          var ie = F.toDataURL(L, U.options.resizeQuality);
          if (L === "image/jpeg" || L === "image/jpg") {
            ie = ee.restore(A.dataURL, ie);
          }
          return Q(B.dataURItoBlob(ie));
        });
      }
    }, {
      key: "createThumbnail",
      value: function (A, H, $, J, Q, U) {
        var K = this;
        var F = new FileReader();
        F.onload = function () {
          A.dataURL = F.result;
          if (A.type !== "image/svg+xml") {
            K.createThumbnailFromUrl(A, H, $, J, Q, U);
          } else {
            U?.(F.result);
          }
        };
        F.readAsDataURL(A);
      }
    }, {
      key: "displayExistingFile",
      value: function (A, H, $, J, Q) {
        var U = Q === undefined || Q;
        this.emit("addedfile", A);
        this.emit("complete", A);
        if (U) {
          var K = this;
          A.dataURL = H;
          this.createThumbnailFromUrl(A, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, this.options.fixOrientation, function (F) {
            K.emit("thumbnail", A, F);
            if ($) {
              $();
            }
          }, J);
        } else {
          this.emit("thumbnail", A, H);
          if ($) {
            $();
          }
        }
      }
    }, {
      key: "createThumbnailFromUrl",
      value: function (A, H, $, J, Q, U, K) {
        var F = this;
        var L = document.createElement("img");
        if (K) {
          L.crossOrigin = K;
        }
        Q = getComputedStyle(document.body).imageOrientation != "from-image" && Q;
        L.onload = function () {
          var ie = F;
          function Y(ne) {
            return ne(1);
          }
          if (typeof EXIF !== "undefined" && EXIF !== null && Q) {
            Y = function (ne) {
              return EXIF.getData(L, function () {
                return ne(EXIF.getTag(this, "Orientation"));
              });
            };
          }
          return Y(function (ne) {
            A.width = L.width;
            A.height = L.height;
            var le = ie.options.resize.call(ie, A, H, $, J);
            var ge = document.createElement("canvas");
            var Ee = ge.getContext("2d");
            ge.width = le.trgWidth;
            ge.height = le.trgHeight;
            if (ne > 4) {
              ge.width = le.trgHeight;
              ge.height = le.trgWidth;
            }
            switch (ne) {
              case 2:
                Ee.translate(ge.width, 0);
                Ee.scale(-1, 1);
                break;
              case 3:
                Ee.translate(ge.width, ge.height);
                Ee.rotate(Math.PI);
                break;
              case 4:
                Ee.translate(0, ge.height);
                Ee.scale(1, -1);
                break;
              case 5:
                Ee.rotate(Math.PI * 0.5);
                Ee.scale(1, -1);
                break;
              case 6:
                Ee.rotate(Math.PI * 0.5);
                Ee.translate(0, -ge.width);
                break;
              case 7:
                Ee.rotate(Math.PI * 0.5);
                Ee.translate(ge.height, -ge.width);
                Ee.scale(-1, 1);
                break;
              case 8:
                Ee.rotate(Math.PI * -0.5);
                Ee.translate(-ge.height, 0);
            }
            q(Ee, L, le.srcX ?? 0, le.srcY ?? 0, le.srcWidth, le.srcHeight, le.trgX ?? 0, le.trgY ?? 0, le.trgWidth, le.trgHeight);
            var Le = ge.toDataURL("image/png");
            if (U != null) {
              return U(Le, ge);
            }
          });
        };
        if (U != null) {
          L.onerror = U;
        }
        return L.src = A.dataURL;
      }
    }, {
      key: "processQueue",
      value: function () {
        var A = this.options.parallelUploads;
        var H = this.getUploadingFiles().length;
        var $ = H;
        if (H < A) {
          var J = this.getQueuedFiles();
          if (J.length > 0) {
            if (this.options.uploadMultiple) {
              return this.processFiles(J.slice(0, A - H));
            }
            for (; $ < A;) {
              if (!J.length) {
                return;
              }
              this.processFile(J.shift());
              $++;
            }
          }
        }
      }
    }, {
      key: "processFile",
      value: function (A) {
        return this.processFiles([A]);
      }
    }, {
      key: "processFiles",
      value: function (A) {
        var H = true;
        var $ = false;
        var J = undefined;
        try {
          for (var Q, U = A[Symbol.iterator](); !(H = (Q = U.next()).done); H = true) {
            var K = Q.value;
            K.processing = true;
            K.status = B.UPLOADING;
            this.emit("processing", K);
          }
        } catch (F) {
          $ = true;
          J = F;
        } finally {
          try {
            if (!H && U.return != null) {
              U.return();
            }
          } finally {
            if ($) {
              throw J;
            }
          }
        }
        if (this.options.uploadMultiple) {
          this.emit("processingmultiple", A);
        }
        return this.uploadFiles(A);
      }
    }, {
      key: "_getFilesWithXhr",
      value: function (A) {
        return this.files.filter(function (H) {
          return H.xhr === A;
        }).map(function (H) {
          return H;
        });
      }
    }, {
      key: "cancelUpload",
      value: function (A) {
        if (A.status === B.UPLOADING) {
          var H = this._getFilesWithXhr(A.xhr);
          var $ = true;
          var J = false;
          var Q = undefined;
          try {
            for (var U, K = H[Symbol.iterator](); !($ = (U = K.next()).done); $ = true) {
              (le = U.value).status = B.CANCELED;
            }
          } catch (ge) {
            J = true;
            Q = ge;
          } finally {
            try {
              if (!$ && K.return != null) {
                K.return();
              }
            } finally {
              if (J) {
                throw Q;
              }
            }
          }
          if (A.xhr !== undefined) {
            A.xhr.abort();
          }
          var F = true;
          var L = false;
          var ie = undefined;
          try {
            for (var Y, ne = H[Symbol.iterator](); !(F = (Y = ne.next()).done); F = true) {
              var le = Y.value;
              this.emit("canceled", le);
            }
          } catch (ge) {
            L = true;
            ie = ge;
          } finally {
            try {
              if (!F && ne.return != null) {
                ne.return();
              }
            } finally {
              if (L) {
                throw ie;
              }
            }
          }
          if (this.options.uploadMultiple) {
            this.emit("canceledmultiple", H);
          }
        } else if (A.status === B.ADDED || A.status === B.QUEUED) {
          A.status = B.CANCELED;
          this.emit("canceled", A);
          if (this.options.uploadMultiple) {
            this.emit("canceledmultiple", [A]);
          }
        }
        if (this.options.autoProcessQueue) {
          return this.processQueue();
        }
      }
    }, {
      key: "resolveOption",
      value: function (A) {
        for (var H = arguments.length, $ = new Array(H > 1 ? H - 1 : 0), J = 1; J < H; J++) {
          $[J - 1] = arguments[J];
        }
        if (typeof A == "function") {
          return A.apply(this, $);
        } else {
          return A;
        }
      }
    }, {
      key: "uploadFile",
      value: function (A) {
        return this.uploadFiles([A]);
      }
    }, {
      key: "uploadFiles",
      value: function (A) {
        var H = this;
        this._transformFiles(A, function ($) {
          if (H.options.chunking) {
            var J = $[0];
            A[0].upload.chunked = H.options.chunking && (H.options.forceChunking || J.size > H.options.chunkSize);
            A[0].upload.totalChunkCount = Math.ceil(J.size / H.options.chunkSize);
          }
          if (A[0].upload.chunked) {
            var Q = H;
            var U = H;
            var K = A[0];
            J = $[0];
            K.upload.chunks = [];
            function F() {
              for (var Y = 0; K.upload.chunks[Y] !== undefined;) {
                Y++;
              }
              if (Y < K.upload.totalChunkCount) {
                var ne = Y * Q.options.chunkSize;
                var le = Math.min(ne + Q.options.chunkSize, J.size);
                var ge = {
                  name: Q._getParamName(0),
                  data: J.webkitSlice ? J.webkitSlice(ne, le) : J.slice(ne, le),
                  filename: K.upload.filename,
                  chunkIndex: Y
                };
                K.upload.chunks[Y] = {
                  file: K,
                  index: Y,
                  dataBlock: ge,
                  status: B.UPLOADING,
                  progress: 0,
                  retries: 0
                };
                Q._uploadData(A, [ge]);
              }
            }
            K.upload.finishedChunkUpload = function (Y, ne) {
              var le = U;
              var ge = true;
              Y.status = B.SUCCESS;
              Y.dataBlock = null;
              Y.response = Y.xhr.responseText;
              Y.responseHeaders = Y.xhr.getAllResponseHeaders();
              Y.xhr = null;
              for (var Ee = 0; Ee < K.upload.totalChunkCount; Ee++) {
                if (K.upload.chunks[Ee] === undefined) {
                  return F();
                }
                if (K.upload.chunks[Ee].status !== B.SUCCESS) {
                  ge = false;
                }
              }
              if (ge) {
                U.options.chunksUploaded(K, function () {
                  le._finished(A, ne, null);
                });
              }
            };
            if (H.options.parallelChunkUploads) {
              for (var L = 0; L < K.upload.totalChunkCount; L++) {
                F();
              }
            } else {
              F();
            }
          } else {
            var ie = [];
            for (L = 0; L < A.length; L++) {
              ie[L] = {
                name: H._getParamName(L),
                data: $[L],
                filename: A[L].upload.filename
              };
            }
            H._uploadData(A, ie);
          }
        });
      }
    }, {
      key: "_getChunk",
      value: function (A, H) {
        for (var $ = 0; $ < A.upload.totalChunkCount; $++) {
          if (A.upload.chunks[$] !== undefined && A.upload.chunks[$].xhr === H) {
            return A.upload.chunks[$];
          }
        }
      }
    }, {
      key: "_uploadData",
      value: function (A, H) {
        var $ = this;
        var J = this;
        var Q = this;
        var U = this;
        var K = new XMLHttpRequest();
        var F = true;
        var L = false;
        var ie = undefined;
        try {
          for (var Y = A[Symbol.iterator](); !(F = (we = Y.next()).done); F = true) {
            (Qe = we.value).xhr = K;
          }
        } catch (ye) {
          L = true;
          ie = ye;
        } finally {
          try {
            if (!F && Y.return != null) {
              Y.return();
            }
          } finally {
            if (L) {
              throw ie;
            }
          }
        }
        if (A[0].upload.chunked) {
          A[0].upload.chunks[H[0].chunkIndex].xhr = K;
        }
        var ne = this.resolveOption(this.options.method, A, H);
        var le = this.resolveOption(this.options.url, A, H);
        K.open(ne, le, true);
        if (this.resolveOption(this.options.timeout, A)) {
          K.timeout = this.resolveOption(this.options.timeout, A);
        }
        K.withCredentials = !!this.options.withCredentials;
        K.onload = function (ye) {
          $._finishedUploading(A, K, ye);
        };
        K.ontimeout = function () {
          J._handleUploadError(A, K, `Request timedout after ${J.options.timeout / 1000} seconds`);
        };
        K.onerror = function () {
          Q._handleUploadError(A, K);
        };
        (K.upload ?? K).onprogress = function (ye) {
          return U._updateFilesUploadProgress(A, K, ye);
        };
        var ge = this.options.defaultHeaders ? {
          Accept: "application/json",
          "Cache-Control": "no-cache",
          "X-Requested-With": "XMLHttpRequest"
        } : {};
        if (this.options.binaryBody) {
          ge["Content-Type"] = A[0].type;
        }
        if (this.options.headers) {
          P(x)(ge, this.options.headers);
        }
        for (var Ee in ge) {
          var Le = ge[Ee];
          if (Le) {
            K.setRequestHeader(Ee, Le);
          }
        }
        if (this.options.binaryBody) {
          F = true;
          L = false;
          ie = undefined;
          try {
            for (Y = A[Symbol.iterator](); !(F = (we = Y.next()).done); F = true) {
              var Qe = we.value;
              this.emit("sending", Qe, K);
            }
          } catch (ye) {
            L = true;
            ie = ye;
          } finally {
            try {
              if (!F && Y.return != null) {
                Y.return();
              }
            } finally {
              if (L) {
                throw ie;
              }
            }
          }
          if (this.options.uploadMultiple) {
            this.emit("sendingmultiple", A, K);
          }
          this.submitRequest(K, null, A);
        } else {
          var ae = new FormData();
          if (this.options.params) {
            var fe = this.options.params;
            if (typeof fe == "function") {
              fe = fe.call(this, A, K, A[0].upload.chunked ? this._getChunk(A[0], K) : null);
            }
            for (var Me in fe) {
              var je = fe[Me];
              if (Array.isArray(je)) {
                for (var ze = 0; ze < je.length; ze++) {
                  ae.append(Me, je[ze]);
                }
              } else {
                ae.append(Me, je);
              }
            }
          }
          F = true;
          L = false;
          ie = undefined;
          try {
            var we;
            for (Y = A[Symbol.iterator](); !(F = (we = Y.next()).done); F = true) {
              this.emit("sending", Qe = we.value, K, ae);
            }
          } catch (ye) {
            L = true;
            ie = ye;
          } finally {
            try {
              if (!F && Y.return != null) {
                Y.return();
              }
            } finally {
              if (L) {
                throw ie;
              }
            }
          }
          if (this.options.uploadMultiple) {
            this.emit("sendingmultiple", A, K, ae);
          }
          this._addFormElementData(ae);
          ze = 0;
          for (; ze < H.length; ze++) {
            var Ce = H[ze];
            ae.append(Ce.name, Ce.data, Ce.filename);
          }
          this.submitRequest(K, ae, A);
        }
      }
    }, {
      key: "_transformFiles",
      value: function (A, H) {
        for (var $ = this, J = function (F) {
            $.options.transformFile.call($, A[F], function (L) {
              Q[F] = L;
              if (++U === A.length) {
                H(Q);
              }
            });
          }, Q = [], U = 0, K = 0; K < A.length; K++) {
          J(K);
        }
      }
    }, {
      key: "_addFormElementData",
      value: function (A) {
        var H = true;
        var $ = false;
        var J = undefined;
        if (this.element.tagName === "FORM") {
          try {
            for (var Q = this.element.querySelectorAll("input, textarea, select, button")[Symbol.iterator](); !(H = (L = Q.next()).done); H = true) {
              var U = L.value;
              var K = U.getAttribute("name");
              var F = U.getAttribute("type");
              F &&= F.toLowerCase();
              if (K != null) {
                if (U.tagName === "SELECT" && U.hasAttribute("multiple")) {
                  H = true;
                  $ = false;
                  J = undefined;
                  try {
                    var L;
                    for (Q = U.options[Symbol.iterator](); !(H = (L = Q.next()).done); H = true) {
                      var ie = L.value;
                      if (ie.selected) {
                        A.append(K, ie.value);
                      }
                    }
                  } catch (Y) {
                    $ = true;
                    J = Y;
                  } finally {
                    try {
                      if (!H && Q.return != null) {
                        Q.return();
                      }
                    } finally {
                      if ($) {
                        throw J;
                      }
                    }
                  }
                } else if (!F || F !== "checkbox" && F !== "radio" || U.checked) {
                  A.append(K, U.value);
                }
              }
            }
          } catch (Y) {
            $ = true;
            J = Y;
          } finally {
            try {
              if (!H && Q.return != null) {
                Q.return();
              }
            } finally {
              if ($) {
                throw J;
              }
            }
          }
        }
      }
    }, {
      key: "_updateFilesUploadProgress",
      value: function (A, H, $) {
        var J = true;
        var Q = false;
        var U = undefined;
        if (A[0].upload.chunked) {
          var K = this._getChunk(Y = A[0], H);
          if ($) {
            K.progress = $.loaded * 100 / $.total;
            K.total = $.total;
            K.bytesSent = $.loaded;
          } else {
            K.progress = 100;
            K.bytesSent = K.total;
          }
          Y.upload.progress = 0;
          Y.upload.total = 0;
          Y.upload.bytesSent = 0;
          for (var F = 0; F < Y.upload.totalChunkCount; F++) {
            if (Y.upload.chunks[F] && Y.upload.chunks[F].progress !== undefined) {
              Y.upload.progress += Y.upload.chunks[F].progress;
              Y.upload.total += Y.upload.chunks[F].total;
              Y.upload.bytesSent += Y.upload.chunks[F].bytesSent;
            }
          }
          Y.upload.progress = Y.upload.progress / Y.upload.totalChunkCount;
          this.emit("uploadprogress", Y, Y.upload.progress, Y.upload.bytesSent);
        } else {
          try {
            for (var L, ie = A[Symbol.iterator](); !(J = (L = ie.next()).done); J = true) {
              var Y;
              if (!(Y = L.value).upload.total || !Y.upload.bytesSent || Y.upload.bytesSent != Y.upload.total) {
                if ($) {
                  Y.upload.progress = $.loaded * 100 / $.total;
                  Y.upload.total = $.total;
                  Y.upload.bytesSent = $.loaded;
                } else {
                  Y.upload.progress = 100;
                  Y.upload.bytesSent = Y.upload.total;
                }
                this.emit("uploadprogress", Y, Y.upload.progress, Y.upload.bytesSent);
              }
            }
          } catch (ne) {
            Q = true;
            U = ne;
          } finally {
            try {
              if (!J && ie.return != null) {
                ie.return();
              }
            } finally {
              if (Q) {
                throw U;
              }
            }
          }
        }
      }
    }, {
      key: "_finishedUploading",
      value: function (A, H, $) {
        var J;
        if (A[0].status !== B.CANCELED && H.readyState === 4) {
          if (H.responseType !== "arraybuffer" && H.responseType !== "blob" && (J = H.responseText, H.getResponseHeader("content-type") && ~H.getResponseHeader("content-type").indexOf("application/json"))) {
            try {
              J = JSON.parse(J);
            } catch (Q) {
              $ = Q;
              J = "Invalid JSON response from server.";
            }
          }
          this._updateFilesUploadProgress(A, H);
          if (H.status >= 200 && H.status < 300) {
            if (A[0].upload.chunked) {
              A[0].upload.finishedChunkUpload(this._getChunk(A[0], H), J);
            } else {
              this._finished(A, J, $);
            }
          } else {
            this._handleUploadError(A, H, J);
          }
        }
      }
    }, {
      key: "_handleUploadError",
      value: function (A, H, $) {
        if (A[0].status !== B.CANCELED) {
          if (A[0].upload.chunked && this.options.retryChunks) {
            var J = this._getChunk(A[0], H);
            if (J.retries++ < this.options.retryChunksLimit) {
              this._uploadData(A, [J.dataBlock]);
              return;
            }
            console.warn("Retried this chunk too often. Giving up.");
          }
          this._errorProcessing(A, $ || this.options.dictResponseError.replace("{{statusCode}}", H.status), H);
        }
      }
    }, {
      key: "submitRequest",
      value: function (A, H, $) {
        if (A.readyState == 1) {
          if (this.options.binaryBody) {
            if ($[0].upload.chunked) {
              var J = this._getChunk($[0], A);
              A.send(J.dataBlock.data);
            } else {
              A.send($[0]);
            }
          } else {
            A.send(H);
          }
        } else {
          console.warn("Cannot send this request because the XMLHttpRequest.readyState is not OPENED.");
        }
      }
    }, {
      key: "_finished",
      value: function (A, H, $) {
        var J = true;
        var Q = false;
        var U = undefined;
        try {
          for (var K, F = A[Symbol.iterator](); !(J = (K = F.next()).done); J = true) {
            var L = K.value;
            L.status = B.SUCCESS;
            this.emit("success", L, H, $);
            this.emit("complete", L);
          }
        } catch (ie) {
          Q = true;
          U = ie;
        } finally {
          try {
            if (!J && F.return != null) {
              F.return();
            }
          } finally {
            if (Q) {
              throw U;
            }
          }
        }
        if (this.options.uploadMultiple) {
          this.emit("successmultiple", A, H, $);
          this.emit("completemultiple", A);
        }
        if (this.options.autoProcessQueue) {
          return this.processQueue();
        }
      }
    }, {
      key: "_errorProcessing",
      value: function (A, H, $) {
        var J = true;
        var Q = false;
        var U = undefined;
        try {
          for (var K, F = A[Symbol.iterator](); !(J = (K = F.next()).done); J = true) {
            var L = K.value;
            L.status = B.ERROR;
            this.emit("error", L, H, $);
            this.emit("complete", L);
          }
        } catch (ie) {
          Q = true;
          U = ie;
        } finally {
          try {
            if (!J && F.return != null) {
              F.return();
            }
          } finally {
            if (Q) {
              throw U;
            }
          }
        }
        if (this.options.uploadMultiple) {
          this.emit("errormultiple", A, H, $);
          this.emit("completemultiple", A);
        }
        if (this.options.autoProcessQueue) {
          return this.processQueue();
        }
      }
    }], [{
      key: "initClass",
      value: function () {
        this.prototype.Emitter = u;
        this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];
        this.prototype._thumbnailQueue = [];
        this.prototype._processingThumbnail = false;
      }
    }, {
      key: "uuidv4",
      value: function () {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (A) {
          var H = Math.random() * 16 | 0;
          return (A === "x" ? H : H & 3 | 8).toString(16);
        });
      }
    }]);
    return B;
  }(u);
  l.initClass();
  l.options = {};
  l.optionsForElement = function (G) {
    if (G.getAttribute("id")) {
      return l.options[O(G.getAttribute("id"))];
    } else {
      return undefined;
    }
  };
  l.instances = [];
  l.forElement = function (G) {
    if (typeof G == "string") {
      G = document.querySelector(G);
    }
    if (G?.dropzone == null) {
      throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
    }
    return G.dropzone;
  };
  l.discover = function () {
    var G;
    if (document.querySelectorAll) {
      G = document.querySelectorAll(".dropzone");
    } else {
      G = [];
      function B(A) {
        return function () {
          var H = [];
          var $ = true;
          var J = false;
          var Q = undefined;
          try {
            for (var U, K = A[Symbol.iterator](); !($ = (U = K.next()).done); $ = true) {
              var F = U.value;
              if (/(^| )dropzone($| )/.test(F.className)) {
                H.push(G.push(F));
              } else {
                H.push(undefined);
              }
            }
          } catch (L) {
            J = true;
            Q = L;
          } finally {
            try {
              if (!$ && K.return != null) {
                K.return();
              }
            } finally {
              if (J) {
                throw Q;
              }
            }
          }
          return H;
        }();
      }
      B(document.getElementsByTagName("div"));
      B(document.getElementsByTagName("form"));
    }
    return function () {
      var A = [];
      var H = true;
      var $ = false;
      var J = undefined;
      try {
        for (var Q, U = G[Symbol.iterator](); !(H = (Q = U.next()).done); H = true) {
          var K = Q.value;
          if (l.optionsForElement(K) !== false) {
            A.push(new l(K));
          } else {
            A.push(undefined);
          }
        }
      } catch (F) {
        $ = true;
        J = F;
      } finally {
        try {
          if (!H && U.return != null) {
            U.return();
          }
        } finally {
          if ($) {
            throw J;
          }
        }
      }
      return A;
    }();
  };
  l.blockedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\/12/i];
  l.isBrowserSupported = function () {
    var G = true;
    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
      if ("classList" in document.createElement("a")) {
        if (l.blacklistedBrowsers !== undefined) {
          l.blockedBrowsers = l.blacklistedBrowsers;
        }
        var B = true;
        var A = false;
        var H = undefined;
        try {
          for (var $, J = l.blockedBrowsers[Symbol.iterator](); !(B = ($ = J.next()).done); B = true) {
            if ($.value.test(navigator.userAgent)) {
              G = false;
            }
          }
        } catch (Q) {
          A = true;
          H = Q;
        } finally {
          try {
            if (!B && J.return != null) {
              J.return();
            }
          } finally {
            if (A) {
              throw H;
            }
          }
        }
      } else {
        G = false;
      }
    } else {
      G = false;
    }
    return G;
  };
  l.dataURItoBlob = function (G) {
    for (var B = atob(G.split(",")[1]), A = G.split(",")[0].split(":")[1].split(";")[0], H = new ArrayBuffer(B.length), $ = new Uint8Array(H), J = 0, Q = B.length, U = Q >= 0; U ? J <= Q : J >= Q; U ? J++ : J--) {
      $[J] = B.charCodeAt(J);
    }
    return new Blob([H], {
      type: A
    });
  };
  function M(G, B) {
    return G.filter(function (A) {
      return A !== B;
    }).map(function (A) {
      return A;
    });
  }
  function O(G) {
    return G.replace(/[\-_](\w)/g, function (B) {
      return B.charAt(1).toUpperCase();
    });
  }
  l.createElement = function (G) {
    var B = document.createElement("div");
    B.innerHTML = G;
    return B.childNodes[0];
  };
  l.elementInside = function (G, B) {
    if (G === B) {
      return true;
    }
    for (; G = G.parentNode;) {
      if (G === B) {
        return true;
      }
    }
    return false;
  };
  l.getElement = function (G, B) {
    var A;
    if (typeof G == "string") {
      A = document.querySelector(G);
    } else if (G.nodeType != null) {
      A = G;
    }
    if (A == null) {
      throw new Error(`Invalid \`${B}\` option provided. Please provide a CSS selector or a plain HTML element.`);
    }
    return A;
  };
  l.getElements = function (G, B) {
    var H;
    if (G instanceof Array) {
      H = [];
      try {
        var $ = true;
        var J = false;
        var Q = undefined;
        try {
          for (var U = G[Symbol.iterator](); !($ = (K = U.next()).done); $ = true) {
            H.push(this.getElement(K.value, B));
          }
        } catch (F) {
          J = true;
          Q = F;
        } finally {
          try {
            if (!$ && U.return != null) {
              U.return();
            }
          } finally {
            if (J) {
              throw Q;
            }
          }
        }
      } catch {
        H = null;
      }
    } else if (typeof G == "string") {
      H = [];
      $ = true;
      J = false;
      Q = undefined;
      try {
        var K;
        for (U = document.querySelectorAll(G)[Symbol.iterator](); !($ = (K = U.next()).done); $ = true) {
          H.push(K.value);
        }
      } catch (F) {
        J = true;
        Q = F;
      } finally {
        try {
          if (!$ && U.return != null) {
            U.return();
          }
        } finally {
          if (J) {
            throw Q;
          }
        }
      }
    } else if (G.nodeType != null) {
      H = [G];
    }
    if (H == null || !H.length) {
      throw new Error(`Invalid \`${B}\` option provided. Please provide a CSS selector, a plain HTML element or a list of those.`);
    }
    return H;
  };
  l.confirm = function (G, B, A) {
    if (window.confirm(G)) {
      return B();
    } else {
      return A?.();
    }
  };
  l.isValidFile = function (G, B) {
    if (!B) {
      return true;
    }
    B = B.split(",");
    var A = G.type;
    var H = A.replace(/\/.*$/, "");
    var $ = true;
    var J = false;
    var Q = undefined;
    try {
      for (var U, K = B[Symbol.iterator](); !($ = (U = K.next()).done); $ = true) {
        var F = U.value;
        if ((F = F.trim()).charAt(0) === ".") {
          if (G.name.toLowerCase().indexOf(F.toLowerCase(), G.name.length - F.length) !== -1) {
            return true;
          }
        } else if (/\/\*$/.test(F)) {
          if (H === F.replace(/\/.*$/, "")) {
            return true;
          }
        } else if (A === F) {
          return true;
        }
      }
    } catch (L) {
      J = true;
      Q = L;
    } finally {
      try {
        if (!$ && K.return != null) {
          K.return();
        }
      } finally {
        if (J) {
          throw Q;
        }
      }
    }
    return false;
  };
  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jQuery.fn.dropzone = function (G) {
      return this.each(function () {
        return new l(this, G);
      });
    };
  }
  l.ADDED = "added";
  l.QUEUED = "queued";
  l.ACCEPTED = l.QUEUED;
  l.UPLOADING = "uploading";
  l.PROCESSING = l.UPLOADING;
  l.CANCELED = "canceled";
  l.ERROR = "error";
  l.SUCCESS = "success";
  function q(G, B, A, H, $, J, Q, U, K, F) {
    var L = function (ie) {
      var Y = ie.naturalHeight;
      var ne = document.createElement("canvas");
      ne.width = 1;
      ne.height = Y;
      var le = ne.getContext("2d");
      le.drawImage(ie, 0, 0);
      for (var ge = le.getImageData(1, 0, 1, Y).data, Ee = 0, Le = Y, Qe = Y; Qe > Ee;) {
        if (ge[(Qe - 1) * 4 + 3] === 0) {
          Le = Qe;
        } else {
          Ee = Qe;
        }
        Qe = Le + Ee >> 1;
      }
      var ae = Qe / Y;
      if (ae === 0) {
        return 1;
      } else {
        return ae;
      }
    }(B);
    return G.drawImage(B, A, H, $, J, Q, U, K, F / L);
  }
  var ee = function () {
    "use strict";

    function G() {
      I(this, G);
    }
    w(G, null, [{
      key: "initClass",
      value: function () {
        this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      }
    }, {
      key: "encode64",
      value: function (B) {
        for (var A = "", H = undefined, $ = undefined, J = "", Q = undefined, U = undefined, K = undefined, F = "", L = 0; Q = (H = B[L++]) >> 2, U = (H & 3) << 4 | ($ = B[L++]) >> 4, K = ($ & 15) << 2 | (J = B[L++]) >> 6, F = J & 63, isNaN($) ? K = F = 64 : isNaN(J) && (F = 64), A = A + this.KEY_STR.charAt(Q) + this.KEY_STR.charAt(U) + this.KEY_STR.charAt(K) + this.KEY_STR.charAt(F), H = $ = J = "", Q = U = K = F = "", L < B.length;);
        return A;
      }
    }, {
      key: "restore",
      value: function (B, A) {
        if (!B.match("data:image/jpeg;base64,")) {
          return A;
        }
        var H = this.decode64(B.replace("data:image/jpeg;base64,", ""));
        var $ = this.slice2Segments(H);
        var J = this.exifManipulation(A, $);
        return `data:image/jpeg;base64,${this.encode64(J)}`;
      }
    }, {
      key: "exifManipulation",
      value: function (B, A) {
        var H = this.getExifArray(A);
        var $ = this.insertExif(B, H);
        return new Uint8Array($);
      }
    }, {
      key: "getExifArray",
      value: function (B) {
        for (var A = undefined, H = 0; H < B.length;) {
          if ((A = B[H])[0] === 255 & A[1] === 225) {
            return A;
          }
          H++;
        }
        return [];
      }
    }, {
      key: "insertExif",
      value: function (B, A) {
        var H = B.replace("data:image/jpeg;base64,", "");
        var $ = this.decode64(H);
        var J = $.indexOf(255, 3);
        var Q = $.slice(0, J);
        var U = $.slice(J);
        return Q.concat(A).concat(U);
      }
    }, {
      key: "slice2Segments",
      value: function (B) {
        for (var A = 0, H = []; !(B[A] === 255 & B[A + 1] === 218);) {
          if (B[A] === 255 & B[A + 1] === 216) {
            A += 2;
          } else {
            var $ = A + (B[A + 2] * 256 + B[A + 3]) + 2;
            var J = B.slice(A, $);
            H.push(J);
            A = $;
          }
          if (A > B.length) {
            break;
          }
        }
        return H;
      }
    }, {
      key: "decode64",
      value: function (B) {
        var A = undefined;
        var H = undefined;
        var $ = "";
        var J = undefined;
        var Q = undefined;
        var U = "";
        var K = 0;
        var F = [];
        if (/[^A-Za-z0-9\+\/\=]/g.exec(B)) {
          console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding.");
        }
        B = B.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        for (; A = this.KEY_STR.indexOf(B.charAt(K++)) << 2 | (J = this.KEY_STR.indexOf(B.charAt(K++))) >> 4, H = (J & 15) << 4 | (Q = this.KEY_STR.indexOf(B.charAt(K++))) >> 2, $ = (Q & 3) << 6 | (U = this.KEY_STR.indexOf(B.charAt(K++))), F.push(A), Q !== 64 && F.push(H), U !== 64 && F.push($), A = H = $ = "", J = Q = U = "", K < B.length;);
        return F;
      }
    }]);
    return G;
  }();
  ee.initClass();
  window.Dropzone = l;
})();
var $bu_ = new function () {
  var P = this;
  this.version = "3.3.44npm";
  this.vsakt = {
    c: "106",
    f: "105",
    s: "15.6",
    e: "106",
    i: "12",
    ios: "15.6",
    samsung: "17.0.7",
    o: "89",
    e_a: "104",
    o_a: "70",
    y: "22.7.0",
    v: "5.4",
    uc: "13.4.0"
  };
  this.vsinsecure_below = {
    c: "100.0.5195.102",
    f: "100.3",
    s: "11.1.1",
    e: 16,
    i: 11,
    ios: "12.3",
    samsung: 12,
    o: 62,
    o_a: 52,
    y: "20",
    v: "2.7",
    uc: "13.1"
  };
  this.vsdefault = {
    c: -3,
    f: -3,
    s: -1,
    e: 17,
    i: 11,
    ios: 10,
    samsung: 9.9,
    o: -3,
    o_a: -3,
    y: 20.4,
    v: 2.6,
    uc: 13,
    a: 535
  };
  this.names = {
    c: "Chrome",
    f: "Firefox",
    s: "Safari",
    e: "Edge",
    i: "Internet Explorer",
    ios: "iOS",
    samsung: "Samsung Internet",
    o: "Opera",
    o_a: "Opera",
    e_a: "Edge",
    y: "Yandex Browser",
    v: "Vivaldi",
    uc: "UC Browser",
    a: "Android Browser",
    x: "Other",
    silk: "Silk"
  };
  this.get_browser = function (y) {
    y = (y || navigator.userAgent).replace("_", ".");
    var w = {
      n: "x",
      v: 0,
      t: "other browser",
      age_years: undefined,
      no_device_update: false,
      available: P.vsakt
    };
    function E(m, l) {
      return !!new RegExp(l, "i").test(y) && m;
    }
    w.other = E("bot", "Pagespeed|pingdom|Preview|ktxn|dynatrace|Ruxit|PhantomJS|Headless|Lighthouse|bot|spider|archiver|transcoder|crawl|checker|monitoring|prerender|screenshot|python-|php|uptime|validator|fetcher|facebook|slurp|google|yahoo|node|mail.ru|github|cloudflare|addthis|thumb|proxy|feed|fetch|favicon|link|http|scrape|seo|page|search console|AOLBuild|Teoma|Expeditor") || E("TV", "SMART-TV|SmartTV") || E("niche browser", "motorola edge|Comodo.Dragon|OculusBrowser|Falkon|Brave|Classic Browser|Dorado|LBBROWSER|Focus|waterfox|Firefox/56.2|Firefox/56.3|Whale|MIDP|k-meleon|sparrow|wii|Chromium|Puffin|Opera Mini|maxthon|maxton|dolfin|dolphin|seamonkey|opera mini|netfront|moblin|maemo|arora|kazehakase|epiphany|konqueror|rekonq|symbian|webos|PaleMoon|Basilisk|QupZilla|Otter|Midori|qutebrowser|slimjet") || E("mobile without upgrade path or landing page", "OPR/44.12.2246|cros|kindle|tizen|silk|blackberry|bb10|RIM|PlayBook|meego|nokia|ucweb|ZuneWP7|537.85.10");
    w.embedded = /"QtWebEngine|Teams|Electron/i.test(y);
    w.mobile = /iphone|ipod|ipad|android|mobile|phone|ios|iemobile/i.test(y);
    w.discontinued = /netscape|greenbrowser|camino|flot|fennec|galeon|coolnovo/i.test(y);
    for (var R = [["CriOS.VV", "c", "ios"], ["FxiOS.VV", "f", "ios"], ["Trident.*rv:VV", "i", "i"], ["Trident.VV", "i", "i"], ["UCBrowser.VV", "uc", "c"], ["MSIE.VV", "i", "i"], ["Edge.VV", "e", "e"], ["Edg.VV", "e", "c"], ["EdgA.VV", "e_a", "c"], ["Vivaldi.VV", "v", "c"], ["Android.*OPR.VV", "o_a", "c"], ["OPR.VV", "o", "c"], ["YaBrowser.VV", "y", "c"], ["SamsungBrowser.VV", "samsung", "c"], ["Silk.VV", "silk", "c"], ["Chrome.VV", "c", "c"], ["Firefox.VV", "f", "f"], [" OS.VV.*Safari", "ios", "ios"], ["Version.VV.*Safari", "s", "s"], ["Safari.VV", "s", "s"], ["Opera.*Version.VV", "o"], ["Opera.VV", "o"]], C = "(\\d+\\.?\\d+\\.?\\d*\\.?\\d*)", N = 0; N < R.length; N++) {
      if (y.match(new RegExp(R[N][0].replace("VV", C), "i"))) {
        w.n = R[N][1];
        w.engine = R[N][2];
        break;
      }
    }
    w.fullv = RegExp.$1;
    w.v = parseFloat(w.fullv);
    if (/windows.nt.5|windows.nt.4|windows.nt.6.0|windows.95|windows.98|os x 10.2|os x 10.3|os x 10.4|os x 10.5/i.test(y)) {
      w.no_device_update = true;
      w.available = {};
    }
    if (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) {
      w.n = "ios";
      w.engine = "ios";
      w.fullv = w.v = 13;
      w.no_device_update = true;
    }
    if (/iphone|ipod|ipad|ios/i.test(y)) {
      y.match(new RegExp("OS." + C, "i"));
      w.n = "ios";
      w.fullv = RegExp.$1;
      w.v = parseFloat(w.fullv);
      w.engine = "ios";
      var x = P.available_ios(y, w.v);
      if (x < 12 && Math.round(w.v) === 11) {
        x = 12;
      }
      w.available = {
        ios: x
      };
      if (parseFloat(w.available.ios) < 11) {
        w.no_device_update = true;
      }
    }
    if (/windows.nt.5.1|windows.nt.5.2|windows.nt.6.0/i.test(y)) {
      w.available = {
        c: 49.9,
        f: 52.9
      };
      w.no_device_update = true;
    }
    if (/os x 10.6/i.test(y)) {
      w.available = {
        s: "5.1.10",
        c: 49.9,
        f: 48
      };
      w.no_device_update = true;
    }
    if (/os x 10.7|os x 10.8/i.test(y)) {
      w.available = {
        s: "6.2.8",
        c: 49.9,
        f: 48
      };
      w.no_device_update = true;
    }
    if (/os x 10.9/i.test(y)) {
      w.available.s = "9.1.3";
    }
    if (/os x 10.10/i.test(y)) {
      w.available.s = "10.1.2";
    }
    if (y.indexOf("Android") > -1 && w.n === "s") {
      var S = parseInt((/WebKit\/([0-9]+)/i.exec(y) || 0)[1], 10) || 2000;
      if (S <= 534) {
        w.n = "a";
        w.fullv = w.v = S;
        w.is_insecure = true;
      }
    }
    w.t = P.names[w.n] + " " + w.v;
    w.is_supported = w.is_latest = P.vsakt[w.n] ? P.less(w.fullv, P.vsakt[w.n]) <= 0 : undefined;
    w.vmaj = Math.round(w.v);
    w.is_insecure = w.is_insecure || !P.vsinsecure_below[w.n] ? undefined : P.less(w.fullv, P.vsinsecure_below[w.n]) === 1;
    if (w.n === "f" && w.vmaj === 102 || w.n === "i" && w.vmaj === 11) {
      w.is_supported = true;
      w.is_insecure = false;
      if (w.n === "f") {
        w.esr = true;
      }
    }
    if (w.n === "ios" && w.v > 10.3) {
      w.is_supported = true;
    }
    if (w.n === "a" || w.n === "x") {
      w.t = P.names[w.n];
    }
    if (w.n === "e") {
      w.t = P.names[w.n] + " " + w.vmaj;
      w.is_supported = P.less(w.fullv, "18.15063") != 1;
    }
    if (w.n in ["c", "f", "o", "e"] && P.less(w.fullv, parseFloat(P.vsakt[w.n]) - 1) <= 0) {
      w.is_supported = true;
    }
    var s = {
      f: 7,
      c: 8,
      o: 8,
      i: 1,
      e: 1,
      s: 1
    };
    if (s[w.n]) {
      w.age_years = Math.round((P.vsakt[w.n] - w.v) / s[w.n] * 10) / 10 || 0;
    }
    if (w.engine) {
      y.match(new RegExp({
        e: "Edge.VV",
        c: "Chrome.VV",
        f: "Firefox.VV",
        s: "Version.VV",
        i: "MSIE.VV",
        ios: " OS.VV"
      }[w.engine].replace("VV", C), "i"));
      w.engine_version = parseFloat(RegExp.$1);
    }
    return w;
  };
  this.semver = function (X) {
    if (X instanceof Array) {
      return X;
    }
    var I = (X + ".0.0.0").split(".");
    return [parseInt(I[0]) || 0, parseInt(I[1]) || 0, parseInt(I[2]) || 0, parseInt(I[3]) || 0];
  };
  this.less = function (X, I) {
    X = P.semver(X);
    I = P.semver(I);
    for (var y = 0;; y++) {
      if (y >= X.length) {
        if (y >= I.length) {
          return 0;
        } else {
          return 1;
        }
      }
      if (y >= I.length) {
        return -1;
      }
      var w = I[y] - X[y];
      if (w) {
        if (w > 0) {
          return 1;
        } else {
          return -1;
        }
      }
    }
  };
  this.available_ios = function (X, I) {
    var y = Math.max(window.screen.height, window.screen.width);
    var w = window.devicePixelRatio;
    if (/ipad/i.test(X)) {
      if (y == 1024 && w == 2) {
        return 10;
      } else if (y == 1112 || y == 1366) {
        return 15;
      } else if (y == 1024 && I < 6) {
        return 5;
      } else {
        return 9;
      }
    } else if (w == 1) {
      return 6;
    } else if (w == 3 || y == 812 || y == 736 || y == 667) {
      return 15;
    } else if (y == 568) {
      return 10;
    } else if (y == 480) {
      return 7;
    } else {
      return 6;
    }
  };
}();
window.$bu_getBrowser = $bu_.get_browser;
function $buo(P, X) {
  var y;
  var I = window.navigator;
  var w = (P = window._buorgres = P || {}).l || (I.languages ? I.languages[0] : null) || I.language || I.browserLanguage || I.userLanguage || document.documentElement.getAttribute("lang") || "en";
  P.llfull = w.replace("_", "-").toLowerCase().substr(0, 5);
  P.ll = P.llfull.substr(0, 2);
  P.domain = P.domain !== undefined ? P.domain : (/file:/.test(location.href) ? "https:" : "") + "//browser-update.org";
  P.apiver = P.api || P.c || -1;
  P.jsv = $bu_.version;
  var E = P.apiver < 2018 && {
    i: 10,
    f: 11,
    o: 21,
    s: 8,
    c: 30
  } || {};
  var R = P.notify || P.vs || {};
  if (R.e !== 0) {
    R.e = R.e || R.i;
  }
  R.i = R.i || R.e;
  var C = P.required || {};
  if (C.e !== 0) {
    C.e = C.e || C.i;
  }
  if (!C.i) {
    C.i = C.e;
    $bu_.vsakt.i = $bu_.vsakt.e;
  }
  for (y in $bu_.vsdefault) {
    if (R[y]) {
      C[y] = $bu_.less(R[y], 0) >= 0 ? parseFloat($bu_.vsakt[y]) + parseFloat(R[y]) + 0.01 : parseFloat(R[y]) + 0.01;
    }
    if (!(y in C) || C[y] == null) {
      C[y] = $bu_.vsdefault[y];
    }
    if ($bu_.less(C[y], 0) >= 0) {
      C[y] = parseFloat($bu_.vsakt[y]) + parseFloat(C[y]);
    }
    if (E[y] && $bu_.less(C[y], E[y]) === 1) {
      C[y] = E[y];
    }
  }
  C.ios = C.ios || C.s;
  if (C.i < 79 && C.i > 65) {
    C.i = C.i - 60;
  }
  if (C.e < 79 && C.e > 65) {
    C.e = C.e - 60;
  }
  P.required = C;
  P.reminder = P.reminder < 0.1 ? 0 : P.reminder || 168;
  P.reminderClosed = P.reminderClosed < 1 ? 0 : P.reminderClosed || 168;
  P.onshow = P.onshow || function (x) {};
  P.onclick = P.onclick || function (x) {};
  P.onclose = P.onclose || function (x) {};
  P.pageurl = P.pageurl || location.hostname || "x";
  P.newwindow = P.newwindow !== false;
  P.test = X || P.test || location.hash === "#test-bu" || false;
  P.ignorecookie = P.ignorecookie || location.hash === "#ignorecookie-bu";
  P.reasons = [];
  P.hide_reasons = [];
  P.notified = function N(x) {
    var S = x.browser = $bu_.get_browser(x.override_ua);
    x.is_below_required = C[S.n] && $bu_.less(S.fullv, C[S.n]) === 1;
    if (S.other !== false) {
      x.hide_reasons.push("is other browser:" + S.other);
    }
    if (S.embedded !== false) {
      x.hide_reasons.push("is embedded browser:" + S.embedded);
    }
    if (S.esr && !x.notify_esr) {
      x.hide_reasons.push("Extended support (ESR)");
    }
    if (S.mobile && x.mobile === false) {
      x.hide_reasons.push("do not notify mobile");
    }
    if (S.is_latest) {
      x.hide_reasons.push("is latest version of the browser");
    }
    if (S.no_device_update) {
      x.hide_reasons.push("no device update");
    }
    if (x.is_below_required) {
      x.reasons.push("below required");
    }
    if ((x.insecure || x.unsecure) && S.is_insecure) {
      x.reasons.push("insecure");
    }
    if (x.unsupported && !S.is_supported) {
      x.reasons.push("no vendor support");
    }
    return x.hide_reasons.length <= 0 && x.reasons.length > 0;
  }(P);
  P.already_shown = document.cookie.indexOf("browserupdateorg=pause") > -1 && !P.ignorecookie;
  if (P.test || P.notified && !P.already_shown) {
    P.setCookie = function (x) {
      document.cookie = "browserupdateorg=pause; expires=" + new Date(new Date().getTime() + x * 3600000).toGMTString() + "; path=/; SameSite=Lax" + (/https:/.test(location.href) ? "; Secure" : "");
    };
    if (P.already_shown && (P.ignorecookie || P.test)) {
      P.setCookie(-10);
    }
    if (P.reminder > 0) {
      P.setCookie(P.reminder);
    }
    if (P.nomessage) {
      P.onshow(P);
      return;
    }
    $buo_show();
  }
}
if (typeof module !== "undefined") {
  module.exports = $buo;
}
function $buo_show() {
  var P = window._buorgres;
  var X = $bu_getBrowser();
  var I = P.burl || "http" + (/MSIE/i.test(navigator.userAgent) ? "" : "s") + "://browser-update.org/";
  P.url ||= I + (P.l && P.l + "/" || "") + "update-browser.html" + (P.test ? "?force_outdated=true" : "") + "#" + P.jsv + ":" + P.pageurl;
  P.url_permanent_hide = P.url_permanent_hide || I + "block-ignore-browser-update-warning.html";
  var E;
  var w = {
    en: {
      msg: "Your web browser ({brow_name}) is out of date.",
      msgmore: "Update your browser for more security, speed and the best experience on this site.",
      bupdate: "Update browser",
      bignore: "Ignore",
      remind: "You will be reminded in {days} days.",
      bnever: "Never show again"
    },
    ar: {
      msg: "متصفح الإنترنت الخاص بك ({brow_name}) غير مُحدّث.",
      msgmore: "قم بتحديث المتصفح الخاص بك لمزيد من الأمان والسرعة ولأفضل تجربة على هذا الموقع.",
      bupdate: "تحديث المتصفح",
      bignore: "تجاهل",
      remind: "سيتم تذكيرك في غضون {days} أيام.",
      bnever: "لا تظهر مرة أخرى"
    },
    bg: {
      msg: "Вашият уеб браузър ({brow_name}) е остарял.",
      msgmore: "Актуализирайте браузъра си за повече сигурност, бързина и най-доброто изживяване на този сайт.",
      bupdate: "Актуализиране на браузъра",
      bignore: "игнорирай",
      remind: "Ще ви бъде напомнено след {days} дни.",
      bnever: "Никога повече да не се показва"
    },
    ca: {
      msg: "El teu navegador ({brow_name}) està desactualitzat.",
      msgmore: "Actualitzeu el vostre navegador per obtenir més seguretat, velocitat i una millor experiència en aquest lloc.",
      bupdate: "Actualitza el navegador",
      bignore: "Ignorar",
      remind: "T'ho recordarem d'aquí a {days} dies.",
      bnever: "No ho tornis a mostrar"
    },
    cs: {
      msg: "Váš prohlížeč ({brow_name}) je zastaralý.",
      msgmore: "Aktualizujte prohlížeč pro lepší zabezpečení, rychlost a nejlepší zážitek z tohoto webu.",
      bupdate: "Aktualizovat prohlížeč",
      bignore: "Ignorovat",
      remind: "Znovu budete upozorněni za {days} dnů.",
      bnever: "Již nezobrazovat"
    },
    cy: {
      msg: "Mae eich porwr gwe ({brow_name}) angen ei ddiweddaru.",
      msgmore: "Diweddarwch eich porwr i gael mwy o ddiogelwch, cyflymder a'r profiad gorau ar y safle hwn.",
      bupdate: "Diweddaru porwr",
      bignore: "Anwybyddu",
      remind: "Byddwn yn eich atgoffa mewn {days} diwrnod.",
      bnever: "Peidiwch â dangos eto"
    },
    da: {
      msg: "Din web browser ({brow_name}) er forældet",
      msgmore: "Opdater din browser for mere sikkerhed, hastighed og den bedste oplevelse på denne side.",
      bupdate: "Opdater browser",
      bignore: "Ignorer",
      remind: "Du vil blive påmindet om {days} dage.",
      bnever: "Vis aldrig igen"
    },
    de: {
      msg: "Ihr Webbrowser ({brow_name}) ist veraltet.",
      msgmore: "Aktualisieren Sie Ihren Browser für mehr Sicherheit, Geschwindigkeit und den besten Komfort auf dieser Seite.",
      bupdate: "Browser aktualisieren",
      bignore: "Ignorieren",
      remind: "Sie werden in {days} Tagen wieder erinnert.",
      bnever: "Nie wieder anzeigen"
    },
    el: {
      msg: "Το πρόγραμμα περιήγησής σας ({brow_name}) είναι απαρχαιωμένο.",
      msgmore: "Ενημερώστε το πρόγραμμα περιήγησής σας για περισσότερη ασφάλεια, ταχύτητα και την καλύτερη εμπειρία σ' αυτόν τον ιστότοπο.",
      bupdate: "Ενημερώστε το πρόγραμμα περιήγησης",
      bignore: "Αγνοήστε",
      remind: "Θα σας το υπενθυμίσουμε σε {days} ημέρες.",
      bnever: "Να μην εμφανιστεί ξανά"
    },
    es: {
      msg: "Su navegador web ({brow_name}) está desactualizado.",
      msgmore: "Actualice su navegador para obtener más seguridad, velocidad y para disfrutar de la mejor experiencia en este sitio.",
      bupdate: "Actualizar navegador",
      bignore: "Ignorar",
      remind: "Se le recordará en {days} días.",
      bnever: "No mostrar de nuevo"
    },
    et: {
      msg: "Teie veebilehitseja ({brow_name}) on vananenud.",
      msgmore: "Veebilehitseja uuendamisega kaasneb nii parem turvalisus, kiirus kui ka kasutusmugavus.",
      bupdate: "Uuenda veebilehitsejat",
      bignore: "Eira",
      remind: "Uus meeldetuletus {days} päeva pärast.",
      bnever: "Ära kunagi enam näita"
    },
    fa: {
      msg: "مرورگر شما ({brow_name}) قدیمی است.",
      msgmore: "برای ایمنی، سرعت و تجربه بهتر مرورگر خود را به‌روز کنید.",
      bupdate: "به‌روزرسانی مرورگر",
      bignore: "نادیده گرفتن",
      remind: "به شما تا {days} روز دیگر دوباره یاد‌آوری خواهد شد.",
      bnever: "هرگز نمایش نده"
    },
    fi: {
      msg: "Selaimesi ({brow_name}) on vanhentunut.",
      msgmore: "Päivitä selaimesi saadaksesi tietoturvapäivityksiä, nopeutta sekä parhaan käyttökokemuksen sivustolla.",
      bupdate: "Päivitä selain",
      bignore: "Ohita",
      remind: "Saat uuden muistutuksen {days} päivän päästä.",
      bnever: "Älä näytä uudestaan"
    },
    fr: {
      msg: "Votre navigateur Web ({brow_name}) n'est pas à jour.",
      msgmore: "Mettez à jour votre navigateur pour plus de sécurité et de rapidité et une meilleure expérience sur ce site.",
      bupdate: "Mettre à jour le navigateur",
      bignore: "Ignorer",
      remind: "Vous serez rappelé dans {days} jours.",
      bnever: "Ne plus afficher"
    },
    gl: {
      msg: "Tá an líonléitheoir agat ({brow_name}) as dáta.",
      msgmore: "Actualiza o teu navegador para obter máis seguridade, rapidez e mellor experiencia neste sitio.",
      bupdate: "Actualizar navegador web",
      bignore: "Ignorar",
      remind: "Lembraralle en {days} días.",
      bnever: "Non volver mostrar máis"
    },
    he: {
      msg: "דפדפן ({brow_name}) שלך אינו מעודכן.",
      msgmore: "עדכן/י את הדפדפן שלך לשיפור האבטחה והמהירות וכדי ליהנות מהחוויה הטובה ביותר באתר זה.",
      bupdate: "עדכן דפדפן",
      bignore: "התעלם",
      remind: "תקבל/י תזכורת בעוד  {days} ימים.",
      bnever: "אל תציג שוב"
    },
    hi: {
      msg: "आपका वेब ब्राउज़र ({brow_name}) पुराना है।",
      msgmore: "इस साइट पर अधिक सुरक्षा, गति और सर्वोत्तम अनुभव करने के लिए अपने ब्राउज़र को अपडेट करें ।",
      bupdate: "ब्राउज़र अपडेट करें",
      bignore: "नजरअंदाज करें",
      remind: "आपको {days} दिनों में याद दिलाया जाएगा।",
      bnever: "फिर कभी मत दिखाना"
    },
    hu: {
      msg: "Az Ön webböngészője ({brow_name}) elavult.",
      msgmore: "Frissítse böngészőjét a nagyobb biztonság, sebesség és élmény érdekében!",
      bupdate: "Böngésző frissítése",
      bignore: "Mellőzés",
      remind: "Újra emlékeztetünk {days} napon belül.",
      bnever: "Ne mutassa többet"
    },
    id: {
      msg: "Peramban web ({brow_name}) Anda sudah usang.",
      msgmore: "Perbarui peramban Anda untuk pengalaman terbaik, lebih aman, dan cepat di situs ini.",
      bupdate: "Perbarui peramban",
      bignore: "Abaikan",
      remind: "Anda akan diingatkan kembali dalam {days} hari.",
      bnever: "Jangan pernah tampilkan lagi"
    },
    it: {
      msg: "Il tuo browser ({brow_name}) non è aggiornato.",
      msgmore: "Aggiorna il browser per una maggiore sicurezza, velocità e la migliore esperienza su questo sito.",
      bupdate: "Aggiorna browser",
      bignore: "Ignora",
      remind: "Riceverai un promemoria tra {days} giorni.",
      bnever: "Non mostrare di nuovo"
    },
    ja: {
      msg: "お使いのブラウザ（{brow_name}）は最新版ではありません。",
      msgmore: "セキュリティ、スピード、そしてこのサイトでの最良の体験のためにお使いのブラウザを更新してください。",
      bupdate: "ブラウザを更新する",
      bignore: "無視する",
      remind: "{days} 日後にもう一度お知らせします。",
      bnever: "次回から表示しない"
    },
    ko: {
      msg: "귀하의 웹 브라우저({brow_name})는 오래되었습니다.",
      msgmore: "이 사이트에서 보안, 속도와 최상의 경험을 얻으려면 브라우저를 업데이트하십시오.",
      bupdate: "브라우저 업데이트하기",
      bignore: "무시하기",
      remind: "{days}일 후에 알려 드립니다.",
      bnever: "다시 표시하지 않기"
    },
    lt: {
      msg: "Jūsų naršyklė ({brow_name}) yra pasenusi.",
      msgmore: "Atsinaujinkite savo naršyklę norėdami gauti daugiau saugumo, greičio ir pačių geriausių patirčių šioje svetainėje.",
      bupdate: "Atnaujinti naršyklę",
      bignore: "Nepaisyti",
      remind: "Jums bus priminta po {days} dienų.",
      bnever: "Daugiau niekada nerodyti"
    },
    lv: {
      msg: "Jūsu pārlūkprogramma ({brow_name}) ir novecojusi.",
      msgmore: "Atjaunojiet savu pārlūkprogrammu lielākai drošībai, ātrumam un labākai pieredzei ar šo vietni.",
      bupdate: "Atjaunināt pārlūkprogrammu",
      bignore: "Ignorēt",
      remind: "Jums tiks parādīts atgādinājums pēc {days} dienām.",
      bnever: "Vairs nerādīt"
    },
    ms: {
      msg: "Pelayar web anda ({brow_name}) sudah lapuk.",
      msgmore: "Kemas kini pelayar anda untuk lebih keselamatan, kelajuan dan pengalaman terbaik di laman web ini.",
      bupdate: "Kemas kini pelayar",
      bignore: "Abaikan",
      remind: "Anda akan diingatkan dalam {days} hari.",
      bnever: "Jangan tunjukkan lagi"
    },
    nl: {
      msg: "Uw webbrowser ({brow_name}) is verouderd.",
      msgmore: "Update uw browser voor meer veiligheid, snelheid en om deze site optimaal te kunnen gebruiken.",
      bupdate: "Browser updaten",
      bignore: "Negeren",
      remind: "We zullen u er in {days} dagen aan herinneren.",
      bnever: "Nooit meer tonen"
    }
  };
  w.no = w.nn = w.nb = {
    msg: "Nettleseren din ({brow_name}) er utdatert.",
    msgmore: "Oppdater nettleseren din for økt sikkerhet, hastighet og den beste opplevelsen på dette nettstedet.",
    bupdate: "Oppdater nettleser",
    bignore: "Ignorer",
    remind: "Du vil få en påminnelse om {days} dager.",
    bnever: "Aldri vis igjen"
  };
  w.pl = {
    msg: "Twoja przeglądarka ({brow_name}) jest nieaktualna.",
    msgmore: "Zaktualizuj przeglądarkę, by korzystać z tej strony bezpieczniej, szybciej i po prostu sprawniej.",
    bupdate: "Aktualizuj przeglądarkę",
    bignore: "Ignoruj",
    remind: "Przypomnimy o tym za {days} dni.",
    bnever: "Nie pokazuj więcej"
  };
  w.pt = {
    msg: "Seu navegador da web ({brow_name}) está desatualizado.",
    msgmore: "Atualize seu navegador para ter mais segurança e velocidade, além da melhor experiência neste site.",
    bupdate: "Atualizar navegador",
    bignore: "Ignorar",
    remind: "Você será relembrado em {days} dias.",
    bnever: "Não mostrar novamente"
  };
  w.ro = {
    msg: "Browserul tău ({brow_name}) nu este actualizat.",
    msgmore: "Actualizează browserul pentru o mai mare siguranță, viteză și cea mai bună experiență pe acest site.",
    bupdate: "Actualizează browser",
    bignore: "Ignoră",
    remind: "Ți se va reaminti peste {days} zile.",
    bnever: "Nu mai arăta"
  };
  w.ru = {
    msg: "Ваш браузер ({brow_name}) устарел.",
    msgmore: "Обновите ваш браузер для повышения уровня безопасности, скорости и комфорта использования этого сайта.",
    bupdate: "Обновить браузер",
    bignore: "Игнорировать",
    remind: "Вы получите напоминание через {days} дней.",
    bnever: "Больше не показывать "
  };
  w.sk = {
    msg: "Váš internetový prehliadač ({brow_name}) je zastaraný.",
    msgmore: "Pre väčšiu bezpečnosť, rýchlosť a lepšiu skúsenosť s touto stránkou si aktualizujte svoj prehliadač.",
    bupdate: "Aktualizovať prehliadač",
    bignore: "Ignorovať",
    remind: "Bude vám to pripomenuté o {days} dní.",
    bnever: "Už nikdy viac neukazovať"
  };
  w.sl = {
    msg: "Vaš spletni brskalnik ({brow_name}) je zastarel.",
    msgmore: "Posodobite svoj brskalnik za dodatno varnost, hitrost in najboljšo izkušnjo na tem spletnem mestu.",
    bupdate: "Posodobi brskalnik",
    bignore: "Prezri",
    remind: "Opomnik boste prejeli čez toliko dni: {days}.",
    bnever: "Ne prikaži več"
  };
  w.sq = {
    msg: "Shfletuesi juaj ({brow_name}) është i vjetruar.",
    msgmore: "Përditësoni shfletuesin tuaj për më tepër siguri, shpejtësi dhe për më të mirin e funksionimeve në këtë sajt.",
    bupdate: "Përditëso shfletuesin",
    bignore: "Shpërfille",
    remind: "Do t’ju rikujtohet pas {days} ditësh.",
    bnever: "Mos e shfaq kurrë më"
  };
  w.sr = {
    msg: "Vaš pretraživač ({brow_name}) je zastareo.",
    msgmore: "Ima poznate sigurnosne probleme i najverovatnije neće prikazati sve funkcionalnisti ovog i drugih sajtova.",
    bupdate: "Nadogradi pretraživač",
    bignore: "Ignorisi",
    remind: "Zaboravićete za {days} dana.",
    bnever: "Ne prikazuj opet"
  };
  w.sv = {
    msg: "Din webbläsare ({brow_name}) är föråldrad. ",
    msgmore: "Uppdatera din webbläsare för mer säkerhet, hastighet och den bästa upplevelsen på den här sajten. ",
    bupdate: "Uppdatera webbläsaren",
    bignore: "Ignorera",
    remind: "Du får en påminnelse om {days} dagar.",
    bnever: "Visa aldrig igen"
  };
  w.th = {
    msg: "เว็บเบราว์เซอร์ของคุณ ({brow_name}) ล้าสมัยแล้ว",
    msgmore: "อัปเดทเบราว์เซอร์เพื่อเพิ่มความปลอดภัย, ความเร็ว และประสบการณ์ที่ดีที่สุดบนเว็บไซต์นี้",
    bupdate: "อัปเดทเบราว์เซอร์",
    bignore: "ข้าม",
    remind: "คุณจะได้รับการแจ้งเตือนใน {days} วัน",
    bnever: "ไม่ต้องแสดงอีก"
  };
  w.tr = {
    msg: "Web tarayıcınız ({brow_name}) güncel değil.",
    msgmore: "Daha fazla güvenlik ve hız ile bu sitede en iyi deneyim için tarayıcınızı güncelleyin.",
    bupdate: "Tarayıcıyı güncelle",
    bignore: "Yok say",
    remind: "{days} gün sonra bir hatırlatma alacaksınız.",
    bnever: "Bir daha gösterme"
  };
  w.uk = {
    msg: "Ваш браузер ({brow_name}) застарілий.",
    msgmore: "Оновіть свій браузер для більшої безпеки, швидкості та повноцінної роботи цього сайту.",
    bupdate: "Оновити браузер",
    bignore: "Пропустити",
    remind: "Ви отримаєте нагадування через {days} днів.",
    bnever: "Більше не показувати"
  };
  w.uz = {
    msg: "Sizning ({brow_name}) veb-brauzeringiz eskirgan",
    msgmore: "Xavfsizlik, tezkorlik va ushbu sayt imkoniyatlaridan to`liq foydalanish uchun brauzeringizni yangilang.",
    bupdate: "Brauzeringizni yangilang",
    bignore: "E’tibor bermaslik",
    remind: "Sizga {days} kundan so`ng eslatammiz.",
    bnever: "Hech qachon qayta ko'rsatmang"
  };
  w.vi = {
    msg: "Trình duyệt web của bạn ({brow_name}) đã lỗi thời.",
    msgmore: "Cập nhật trình duyệt của bạn để có thêm bảo mật, tốc độ và trải nghiệm tốt nhất trên trang web này.",
    bupdate: "Cập nhật trình duyệt",
    bignore: "Bỏ qua",
    remind: "Bạn sẽ được nhắc nhở sau {days} ngày.",
    bnever: "Không bao giờ hiển thị lại"
  };
  w.zh = {
    msg: "您的网页浏览器（{brow_name}）已过期。",
    msgmore: "更新您的浏览器，以便在该网站上获得更安全、更快速和最好的体验。",
    bupdate: "更新浏览器",
    bignore: "忽略",
    remind: "会在{days}天后提醒您。",
    bnever: "不再显示"
  };
  w["zh-tw"] = w["zh-hans-cn"] = {
    msg: "您的網路瀏覽器（{brow_name}）已過舊。",
    msgmore: "更新您的瀏覽器以獲得更佳的安全性、速度以及在此網站的最佳體驗。",
    bupdate: "更新瀏覽器",
    bignore: "忽略",
    remind: "您將在 {days} 天後收到提醒。",
    bnever: "不要再顯示"
  };
  var R = P["text_for_" + X.n + "_in_" + P.ll] || P["text_for_" + X.n] || P["text_" + P.llfull] || P["text_in_" + P.ll] || P["text_" + P.ll] || P.text;
  w = E = w[P.llfull] || w[P.ll] || w.en;
  if (R) {
    if (typeof R == "string") {
      w = E = R;
    } else {
      for (var C in R) {
        E[C] = R[C];
      }
    }
  }
  if (E.msg) {
    w = "<b class=\"buorg-mainmsg\">" + w.msg + "</b> <span class=\"buorg-moremsg\">" + w.msgmore + "</span> <span class=\"buorg-buttons\"><a{up_but}>" + w.bupdate + "</a> <a{ignore_but}>" + w.bignore + "</a></span>";
  }
  var N = "";
  if (P.newwindow) {
    N = " target=\"_blank\" rel=\"noopener\"";
  }
  var x = P.div = document.createElement("div");
  x.id = x.className = "buorg";
  var S = "<style>.buorg-icon {width: 22px; height: 16px; vertical-align: middle; position: relative; top: -0.05em; display: inline-block; background: no-repeat 0px center url(https://browser-update.org/static/img/small/" + X.n + ".png);}</style>";
  var s = "<style>.buorg {position:absolute;position:fixed;z-index:111111; width:100%; top:0px; left:0px; border-bottom:1px solid #A29330; text-align:center;  color:#000; background-color: #fff8ea; font: 18px Calibri,Helvetica,sans-serif; box-shadow: 0 0 5px rgba(0,0,0,0.2);animation: buorgfly 1s ease-out 0s;}.buorg-pad { padding: 9px;  line-height: 1.7em; }.buorg-buttons { display: block; text-align: center; }#buorgig,#buorgul,#buorgpermanent { color: #fff; text-decoration: none; cursor:pointer; box-shadow: 0 0 2px rgba(0,0,0,0.4); padding: 1px 10px; border-radius: 4px; font-weight: normal; background: #5ab400;    white-space: nowrap;    margin: 0 2px; display: inline-block;}#buorgig { background-color: #edbc68;}@media only screen and (max-width: 700px){.buorg div { padding:5px 12px 5px 9px; line-height: 1.3em;}}@keyframes buorgfly {from {opacity:0;transform:translateY(-50px)} to {opacity:1;transform:translateY(0px)}}.buorg-fadeout {transition: visibility 0s 8.5s, opacity 8s ease-out .5s;}</style>";
  if (E.msg && (P.ll == "ar" || P.ll == "he" || P.ll == "fa")) {
    s += "<style>.buorg {direction:RTL; unicode-bidi:embed;}</style>";
  }
  if (!E.msg && w.indexOf && w.indexOf("%s") !== -1) {
    w = function y() {
      for (var O = arguments, q = O[0], ee = 1; ee < O.length; ++ee) {
        q = q.replace(/%s/, O[ee]);
      }
      return q;
    }(w, X.t, " id=\"buorgul\" href=\"" + P.url + "\"" + N);
    x.innerHTML = "<div>" + w + "<div id=\"buorgclose\"><a id=\"buorga\">&times;</a></div></div>" + (S += "<style>.buorg {position:absolute;position:fixed;z-index:111111; width:100%; top:0px; left:0px; border-bottom:1px solid #A29330; text-align:left; cursor:pointer; color:#000; font: 13px Arial,sans-serif;color:#000;}.buorg div { padding:5px 36px 5px 40px; }.buorg>div>a,.buorg>div>a:visited{color:#E25600; text-decoration: underline;}#buorgclose{position:absolute;right:6px;top:0px;height:20px;width:12px;font:18px bold;padding:0;}#buorga{display:block;}@media only screen and (max-width: 700px){.buorg div { padding:5px 15px 5px 9px; }}</style>");
    P.addmargin = true;
  } else {
    if (P.style === "bottom") {
      s += "<style>.buorg {bottom:0; top:auto; border-top:1px solid #A29330; } @keyframes buorgfly {from {opacity:0;transform:translateY(50px)} to {opacity:1;transform:translateY(0px)}}</style>";
    } else if (P.style === "corner") {
      s += "<style> .buorg { text-align: left; width:300px; top:50px; right:50px; left:auto; border:1px solid #A29330; } .buorg-buttons, .buorg-mainmsg, .buorg-moremsg { display: block; } .buorg-buttons a {margin: 4px 2px;} .buorg-icon {display: none;}</style>";
    } else {
      P.addmargin = true;
    }
    w = w.replace("{brow_name}", X.t).replace("{up_but}", " id=\"buorgul\" href=\"" + P.url + "\"" + N).replace("{ignore_but}", " id=\"buorgig\" role=\"button\" tabindex=\"0\"");
    x.innerHTML = "<div class=\"buorg-pad\" role=\"status\" aria-live=\"polite\"><span class=\"buorg-icon\"> </span>" + w + "</div>" + S + s;
  }
  P.text = w;
  if (P.container) {
    P.container.appendChild(x);
    P.addmargin = false;
  } else {
    document.body.insertBefore(x, document.body.firstChild);
  }
  var u = document.getElementById("buorgul");
  if (u) {
    u.onclick = function (O) {
      x.onclick = null;
      P.onclick(P);
      if (!P.noclose) {
        P.setCookie(P.reminderClosed);
        if (!P.noclose) {
          x.style.display = "none";
          if (P.addmargin && P.shift_page_down !== false) {
            m.style.marginTop = P.bodymt;
          }
        }
      }
    };
  }
  if (!R) {
    x.style.cursor = "pointer";
    x.onclick = function () {
      if (P.newwindow) {
        window.open(P.url, "_blank");
      } else {
        window.location.href = P.url;
      }
      P.setCookie(P.reminderClosed);
      P.onclick(P);
    };
  }
  if (P.addmargin && P.shift_page_down !== false) {
    var m = document.getElementsByTagName("html")[0] || document.body;
    P.bodymt = m.style.marginTop;
    m.style.marginTop = x.clientHeight + "px";
  }
  var l = document.getElementById("buorga") || document.getElementById("buorgig");
  if (l) {
    l.onclick = function (O) {
      x.onclick = null;
      P.onclose(P);
      if (P.addmargin && P.shift_page_down !== false) {
        m.style.marginTop = P.bodymt;
      }
      P.setCookie(P.reminderClosed);
      if (!P.no_permanent_hide && E.bnever && E.remind) {
        P.div.innerHTML = "<div class=\"buorg-pad\"><span class=\"buorg-moremsg\">" + (P.reminderClosed > 24 ? E.remind.replace("{days}", Math.round(P.reminderClosed / 24)) : "") + "</span> <span class=\"buorg-buttons\"><a id=\"buorgpermanent\" role=\"button\" tabindex=\"0\" href=\"" + P.url_permanent_hide + "\"" + N + ">" + E.bnever + "</a></span></div>" + S + s;
        x.className = "buorg buorg-fadeout";
        document.getElementById("buorgpermanent").onclick = function (q) {
          P.setCookie(8760);
          P.div.style.display = "none";
        };
        P.div.style.opacity = 0;
        P.div.style.visibility = "hidden";
        return false;
      } else {
        P.div.style.display = "none";
        return false;
      }
    };
    if (P.noclose || P.reminderClosed == 0) {
      l.parentNode.removeChild(l);
    }
  }
  P.onshow(P);
  if (P.test && !P.dont_show_debuginfo) {
    var M = document.createElement("script");
    M.src = P.domain + "/update.test.js";
    document.body.appendChild(M);
  }
}
/*!
* @license
* 
* dhtmlxScheduler v.6.0.3 Standard
* 
* To use dhtmlxScheduler in non-GPL projects (and get Pro version of the product), please obtain Commercial/Enterprise or Ultimate license on our site https://dhtmlx.com/docs/products/dhtmlxScheduler/#licensing or contact us at sales@dhtmlx.com
* 
* (c) XB Software Ltd.
* 
*/
(function (P, X) {
  if (typeof exports == "object" && typeof module == "object") {
    module.exports = X();
  } else if (typeof define == "function" && define.amd) {
    define("dhtmlxscheduler", [], X);
  } else if (typeof exports == "object") {
    exports.dhtmlxscheduler = X();
  } else {
    P.dhtmlxscheduler = X();
  }
})(window, function () {
  return function (P) {
    var X = {};
    function I(y) {
      if (X[y]) {
        return X[y].exports;
      }
      var w = X[y] = {
        i: y,
        l: false,
        exports: {}
      };
      P[y].call(w.exports, w, w.exports, I);
      w.l = true;
      return w.exports;
    }
    I.m = P;
    I.c = X;
    I.d = function (y, w, E) {
      if (!I.o(y, w)) {
        Object.defineProperty(y, w, {
          enumerable: true,
          get: E
        });
      }
    };
    I.r = function (y) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(y, Symbol.toStringTag, {
          value: "Module"
        });
      }
      Object.defineProperty(y, "__esModule", {
        value: true
      });
    };
    I.t = function (y, w) {
      if (w & 1) {
        y = I(y);
      }
      if (w & 8 || w & 4 && typeof y == "object" && y && y.__esModule) {
        return y;
      }
      var E = Object.create(null);
      I.r(E);
      Object.defineProperty(E, "default", {
        enumerable: true,
        value: y
      });
      if (w & 2 && typeof y != "string") {
        for (var R in y) {
          I.d(E, R, function (C) {
            return y[C];
          }.bind(null, R));
        }
      }
      return E;
    };
    I.n = function (y) {
      var w = y && y.__esModule ? function () {
        return y.default;
      } : function () {
        return y;
      };
      I.d(w, "a", w);
      return w;
    };
    I.o = function (y, w) {
      return Object.prototype.hasOwnProperty.call(y, w);
    };
    I.p = "/codebase/";
    return I(I.s = 9);
  }([function (P, X, I) {
    "use strict";

    (function (y) {
      var w;
      w = typeof window !== "undefined" ? window : y;
      X.a = w;
    }).call(this, I(1));
  }, function (P, X) {
    function I(w) {
      return (I = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (E) {
        return typeof E;
      } : function (E) {
        if (E && typeof Symbol == "function" && E.constructor === Symbol && E !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof E;
        }
      })(w);
    }
    var y;
    y = function () {
      return this;
    }();
    try {
      y = y || new Function("return this")();
    } catch {
      if ((typeof window === "undefined" ? "undefined" : I(window)) === "object") {
        y = window;
      }
    }
    P.exports = y;
  }, function (P, X) {
    P.exports = function (I) {
      return function () {
        var y = {};
        for (var w in this._events) {
          var E = this._events[w];
          if (E.id.toString().indexOf("#") == -1) {
            y[E.id] = E;
          }
        }
        return y;
      }.bind(I);
    };
  }, function (P, X) {
    P.exports = function (I) {
      if (typeof I == "string" || typeof I == "number") {
        return I;
      }
      var y = "";
      for (var w in I) {
        var E = "";
        if (I.hasOwnProperty(w)) {
          E = w + "=" + (E = typeof I[w] == "string" ? encodeURIComponent(I[w]) : typeof I[w] == "number" ? I[w] : encodeURIComponent(JSON.stringify(I[w])));
          if (y.length) {
            E = "&" + E;
          }
          y += E;
        }
      }
      return y;
    };
  }, function (P, X, I) {
    "use strict";

    I.r(X);
  }, function (P, X) {
    var I;
    var y;
    var w = P.exports = {};
    function E() {
      throw new Error("setTimeout has not been defined");
    }
    function R() {
      throw new Error("clearTimeout has not been defined");
    }
    function C(O) {
      if (I === setTimeout) {
        return setTimeout(O, 0);
      }
      if ((I === E || !I) && setTimeout) {
        I = setTimeout;
        return setTimeout(O, 0);
      }
      try {
        return I(O, 0);
      } catch {
        try {
          return I.call(null, O, 0);
        } catch {
          return I.call(this, O, 0);
        }
      }
    }
    (function () {
      try {
        I = typeof setTimeout == "function" ? setTimeout : E;
      } catch {
        I = E;
      }
      try {
        y = typeof clearTimeout == "function" ? clearTimeout : R;
      } catch {
        y = R;
      }
    })();
    var N;
    var x = [];
    var S = false;
    var s = -1;
    function u() {
      if (S && N) {
        S = false;
        if (N.length) {
          x = N.concat(x);
        } else {
          s = -1;
        }
        if (x.length) {
          m();
        }
      }
    }
    function m() {
      if (!S) {
        var O = C(u);
        S = true;
        for (var q = x.length; q;) {
          N = x;
          x = [];
          for (; ++s < q;) {
            if (N) {
              N[s].run();
            }
          }
          s = -1;
          q = x.length;
        }
        N = null;
        S = false;
        (function (ee) {
          if (y === clearTimeout) {
            return clearTimeout(ee);
          }
          if ((y === R || !y) && clearTimeout) {
            y = clearTimeout;
            return clearTimeout(ee);
          }
          try {
            y(ee);
          } catch {
            try {
              return y.call(null, ee);
            } catch {
              return y.call(this, ee);
            }
          }
        })(O);
      }
    }
    function l(O, q) {
      this.fun = O;
      this.array = q;
    }
    function M() {}
    w.nextTick = function (O) {
      var q = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var ee = 1; ee < arguments.length; ee++) {
          q[ee - 1] = arguments[ee];
        }
      }
      x.push(new l(O, q));
      if (x.length === 1 && !S) {
        C(m);
      }
    };
    l.prototype.run = function () {
      this.fun.apply(null, this.array);
    };
    w.title = "browser";
    w.browser = true;
    w.env = {};
    w.argv = [];
    w.version = "";
    w.versions = {};
    w.on = M;
    w.addListener = M;
    w.once = M;
    w.off = M;
    w.removeListener = M;
    w.removeAllListeners = M;
    w.emit = M;
    w.prependListener = M;
    w.prependOnceListener = M;
    w.listeners = function (O) {
      return [];
    };
    w.binding = function (O) {
      throw new Error("process.binding is not supported");
    };
    w.cwd = function () {
      return "/";
    };
    w.chdir = function (O) {
      throw new Error("process.chdir is not supported");
    };
    w.umask = function () {
      return 0;
    };
  }, function (P, X, I) {
    (function (y, w, E) {
      var R;
      var N;
      var S;
      function x(S) {
        return (x = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (s) {
          return typeof s;
        } : function (s) {
          if (s && typeof Symbol == "function" && s.constructor === Symbol && s !== Symbol.prototype) {
            return "symbol";
          } else {
            return typeof s;
          }
        })(S);
      }
      /* @preserve
             * The MIT License (MIT)
             * 
             * Copyright (c) 2013-2018 Petka Antonov
             * 
             * Permission is hereby granted, free of charge, to any person obtaining a copy
             * of this software and associated documentation files (the "Software"), to deal
             * in the Software without restriction, including without limitation the rights
             * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             * copies of the Software, and to permit persons to whom the Software is
             * furnished to do so, subject to the following conditions:
             * 
             * The above copyright notice and this permission notice shall be included in
             * all copies or substantial portions of the Software.
             * 
             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             * THE SOFTWARE.
             * 
             */
      S = function () {
        return function m(l, M, O) {
          function q(B, A) {
            if (!M[B]) {
              if (!l[B]) {
                var H = typeof _dereq_ == "function" && _dereq_;
                if (!A && H) {
                  return H(B, true);
                }
                if (ee) {
                  return ee(B, true);
                }
                var $ = new Error("Cannot find module '" + B + "'");
                $.code = "MODULE_NOT_FOUND";
                throw $;
              }
              var J = M[B] = {
                exports: {}
              };
              l[B][0].call(J.exports, function (Q) {
                return q(l[B][1][Q] || Q);
              }, J, J.exports, m, l, M, O);
            }
            return M[B].exports;
          }
          for (var ee = typeof _dereq_ == "function" && _dereq_, G = 0; G < O.length; G++) {
            q(O[G]);
          }
          return q;
        }({
          1: [function (m, l, M) {
            "use strict";

            var O;
            try {
              throw new Error();
            } catch (H) {
              O = H;
            }
            var q = m("./schedule");
            var ee = m("./queue");
            function G() {
              this._customScheduler = false;
              this._isTickUsed = false;
              this._lateQueue = new ee(16);
              this._normalQueue = new ee(16);
              this._haveDrainedQueues = false;
              var H = this;
              this.drainQueues = function () {
                H._drainQueues();
              };
              this._schedule = q;
            }
            function B(H) {
              for (; H.length() > 0;) {
                A(H);
              }
            }
            function A(H) {
              var $ = H.shift();
              if (typeof $ != "function") {
                $._settlePromises();
              } else {
                var J = H.shift();
                var Q = H.shift();
                $.call(J, Q);
              }
            }
            G.prototype.setScheduler = function (H) {
              var $ = this._schedule;
              this._schedule = H;
              this._customScheduler = true;
              return $;
            };
            G.prototype.hasCustomScheduler = function () {
              return this._customScheduler;
            };
            G.prototype.haveItemsQueued = function () {
              return this._isTickUsed || this._haveDrainedQueues;
            };
            G.prototype.fatalError = function (H, $) {
              if ($) {
                y.stderr.write("Fatal " + (H instanceof Error ? H.stack : H) + "\n");
                y.exit(2);
              } else {
                this.throwLater(H);
              }
            };
            G.prototype.throwLater = function (H, $) {
              if (arguments.length === 1) {
                $ = H;
                H = function () {
                  throw $;
                };
              }
              if (typeof setTimeout !== "undefined") {
                setTimeout(function () {
                  H($);
                }, 0);
              } else {
                try {
                  this._schedule(function () {
                    H($);
                  });
                } catch {
                  throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
                }
              }
            };
            G.prototype.invokeLater = function (H, $, J) {
              this._lateQueue.push(H, $, J);
              this._queueTick();
            };
            G.prototype.invoke = function (H, $, J) {
              this._normalQueue.push(H, $, J);
              this._queueTick();
            };
            G.prototype.settlePromises = function (H) {
              this._normalQueue._pushOne(H);
              this._queueTick();
            };
            G.prototype._drainQueues = function () {
              B(this._normalQueue);
              this._reset();
              this._haveDrainedQueues = true;
              B(this._lateQueue);
            };
            G.prototype._queueTick = function () {
              if (!this._isTickUsed) {
                this._isTickUsed = true;
                this._schedule(this.drainQueues);
              }
            };
            G.prototype._reset = function () {
              this._isTickUsed = false;
            };
            l.exports = G;
            l.exports.firstLineError = O;
          }, {
            "./queue": 17,
            "./schedule": 18
          }],
          2: [function (m, l, M) {
            "use strict";

            l.exports = function (O, q, ee, G) {
              var B = false;
              function A(Q, U) {
                this._reject(U);
              }
              function H(Q, U) {
                U.promiseRejectionQueued = true;
                U.bindingPromise._then(A, A, null, this, Q);
              }
              function $(Q, U) {
                if ((this._bitField & 50397184) == 0) {
                  this._resolveCallback(U.target);
                }
              }
              function J(Q, U) {
                if (!U.promiseRejectionQueued) {
                  this._reject(Q);
                }
              }
              O.prototype.bind = function (Q) {
                if (!B) {
                  B = true;
                  O.prototype._propagateFrom = G.propagateFromFunction();
                  O.prototype._boundValue = G.boundValueFunction();
                }
                var U = ee(Q);
                var K = new O(q);
                K._propagateFrom(this, 1);
                var F = this._target();
                K._setBoundTo(U);
                if (U instanceof O) {
                  var L = {
                    promiseRejectionQueued: false,
                    promise: K,
                    target: F,
                    bindingPromise: U
                  };
                  F._then(q, H, undefined, K, L);
                  U._then($, J, undefined, K, L);
                  K._setOnCancel(U);
                } else {
                  K._resolveCallback(F);
                }
                return K;
              };
              O.prototype._setBoundTo = function (Q) {
                if (Q !== undefined) {
                  this._bitField = this._bitField | 2097152;
                  this._boundTo = Q;
                } else {
                  this._bitField = this._bitField & -2097153;
                }
              };
              O.prototype._isBound = function () {
                return (this._bitField & 2097152) == 2097152;
              };
              O.bind = function (Q, U) {
                return O.resolve(U).bind(Q);
              };
            };
          }, {}],
          3: [function (m, l, M) {
            "use strict";

            var O;
            if (typeof Promise !== "undefined") {
              O = Promise;
            }
            var q = m("./promise")();
            q.noConflict = function () {
              try {
                if (Promise === q) {
                  Promise = O;
                }
              } catch {}
              return q;
            };
            l.exports = q;
          }, {
            "./promise": 15
          }],
          4: [function (m, l, M) {
            "use strict";

            l.exports = function (O, q, ee, G) {
              var B = m("./util");
              var A = B.tryCatch;
              var H = B.errorObj;
              var $ = O._async;
              O.prototype.break = O.prototype.cancel = function () {
                if (!G.cancellation()) {
                  return this._warn("cancellation is disabled");
                }
                for (var J = this, Q = J; J._isCancellable();) {
                  if (!J._cancelBy(Q)) {
                    if (Q._isFollowing()) {
                      Q._followee().cancel();
                    } else {
                      Q._cancelBranched();
                    }
                    break;
                  }
                  var U = J._cancellationParent;
                  if (U == null || !U._isCancellable()) {
                    if (J._isFollowing()) {
                      J._followee().cancel();
                    } else {
                      J._cancelBranched();
                    }
                    break;
                  }
                  if (J._isFollowing()) {
                    J._followee().cancel();
                  }
                  J._setWillBeCancelled();
                  Q = J;
                  J = U;
                }
              };
              O.prototype._branchHasCancelled = function () {
                this._branchesRemainingToCancel--;
              };
              O.prototype._enoughBranchesHaveCancelled = function () {
                return this._branchesRemainingToCancel === undefined || this._branchesRemainingToCancel <= 0;
              };
              O.prototype._cancelBy = function (J) {
                if (J === this) {
                  this._branchesRemainingToCancel = 0;
                  this._invokeOnCancel();
                  return true;
                } else {
                  this._branchHasCancelled();
                  return !!this._enoughBranchesHaveCancelled() && (this._invokeOnCancel(), true);
                }
              };
              O.prototype._cancelBranched = function () {
                if (this._enoughBranchesHaveCancelled()) {
                  this._cancel();
                }
              };
              O.prototype._cancel = function () {
                if (this._isCancellable()) {
                  this._setCancelled();
                  $.invoke(this._cancelPromises, this, undefined);
                }
              };
              O.prototype._cancelPromises = function () {
                if (this._length() > 0) {
                  this._settlePromises();
                }
              };
              O.prototype._unsetOnCancel = function () {
                this._onCancelField = undefined;
              };
              O.prototype._isCancellable = function () {
                return this.isPending() && !this._isCancelled();
              };
              O.prototype.isCancellable = function () {
                return this.isPending() && !this.isCancelled();
              };
              O.prototype._doInvokeOnCancel = function (J, Q) {
                if (B.isArray(J)) {
                  for (var U = 0; U < J.length; ++U) {
                    this._doInvokeOnCancel(J[U], Q);
                  }
                } else if (J !== undefined) {
                  if (typeof J == "function") {
                    if (!Q) {
                      var K = A(J).call(this._boundValue());
                      if (K === H) {
                        this._attachExtraTrace(K.e);
                        $.throwLater(K.e);
                      }
                    }
                  } else {
                    J._resultCancelled(this);
                  }
                }
              };
              O.prototype._invokeOnCancel = function () {
                var J = this._onCancel();
                this._unsetOnCancel();
                $.invoke(this._doInvokeOnCancel, this, J);
              };
              O.prototype._invokeInternalOnCancel = function () {
                if (this._isCancellable()) {
                  this._doInvokeOnCancel(this._onCancel(), true);
                  this._unsetOnCancel();
                }
              };
              O.prototype._resultCancelled = function () {
                this.cancel();
              };
            };
          }, {
            "./util": 21
          }],
          5: [function (m, l, M) {
            "use strict";

            l.exports = function (O) {
              var q = m("./util");
              var ee = m("./es5").keys;
              var G = q.tryCatch;
              var B = q.errorObj;
              return function (A, H, $) {
                return function (J) {
                  var Q = $._boundValue();
                  e: for (var U = 0; U < A.length; ++U) {
                    var K = A[U];
                    if (K === Error || K != null && K.prototype instanceof Error) {
                      if (J instanceof K) {
                        return G(H).call(Q, J);
                      }
                    } else if (typeof K == "function") {
                      var F = G(K).call(Q, J);
                      if (F === B) {
                        return F;
                      }
                      if (F) {
                        return G(H).call(Q, J);
                      }
                    } else if (q.isObject(J)) {
                      for (var L = ee(K), ie = 0; ie < L.length; ++ie) {
                        var Y = L[ie];
                        if (K[Y] != J[Y]) {
                          continue e;
                        }
                      }
                      return G(H).call(Q, J);
                    }
                  }
                  return O;
                };
              };
            };
          }, {
            "./es5": 10,
            "./util": 21
          }],
          6: [function (m, l, M) {
            "use strict";

            l.exports = function (O) {
              var q = false;
              var ee = [];
              function G() {
                this._trace = new G.CapturedTrace(B());
              }
              function B() {
                var A = ee.length - 1;
                if (A >= 0) {
                  return ee[A];
                }
              }
              O.prototype._promiseCreated = function () {};
              O.prototype._pushContext = function () {};
              O.prototype._popContext = function () {
                return null;
              };
              O._peekContext = O.prototype._peekContext = function () {};
              G.prototype._pushContext = function () {
                if (this._trace !== undefined) {
                  this._trace._promiseCreated = null;
                  ee.push(this._trace);
                }
              };
              G.prototype._popContext = function () {
                if (this._trace !== undefined) {
                  var A = ee.pop();
                  var H = A._promiseCreated;
                  A._promiseCreated = null;
                  return H;
                }
                return null;
              };
              G.CapturedTrace = null;
              G.create = function () {
                if (q) {
                  return new G();
                }
              };
              G.deactivateLongStackTraces = function () {};
              G.activateLongStackTraces = function () {
                var A = O.prototype._pushContext;
                var H = O.prototype._popContext;
                var $ = O._peekContext;
                var J = O.prototype._peekContext;
                var Q = O.prototype._promiseCreated;
                G.deactivateLongStackTraces = function () {
                  O.prototype._pushContext = A;
                  O.prototype._popContext = H;
                  O._peekContext = $;
                  O.prototype._peekContext = J;
                  O.prototype._promiseCreated = Q;
                  q = false;
                };
                q = true;
                O.prototype._pushContext = G.prototype._pushContext;
                O.prototype._popContext = G.prototype._popContext;
                O._peekContext = O.prototype._peekContext = B;
                O.prototype._promiseCreated = function () {
                  var U = this._peekContext();
                  if (U && U._promiseCreated == null) {
                    U._promiseCreated = this;
                  }
                };
              };
              return G;
            };
          }, {}],
          7: [function (m, l, M) {
            "use strict";

            l.exports = function (O, q, ee, G) {
              var B;
              var A;
              var H;
              var $;
              var J = O._async;
              var Q = m("./errors").Warning;
              var U = m("./util");
              var K = m("./es5");
              var F = U.canAttachTrace;
              var L = /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
              var ie = /\((?:timers\.js):\d+:\d+\)/;
              var Y = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
              var ne = null;
              var le = null;
              var ge = false;
              var Ee = U.env("BLUEBIRD_DEBUG") != 0;
              var Le = U.env("BLUEBIRD_WARNINGS") != 0 && (!!Ee || !!U.env("BLUEBIRD_WARNINGS"));
              var Qe = U.env("BLUEBIRD_LONG_STACK_TRACES") != 0 && (!!Ee || !!U.env("BLUEBIRD_LONG_STACK_TRACES"));
              var ae = U.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 && (Le || !!U.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
              (function () {
                var me = [];
                function Be() {
                  for (var De = 0; De < me.length; ++De) {
                    me[De]._notifyUnhandledRejection();
                  }
                  se();
                }
                function se() {
                  me.length = 0;
                }
                $ = function (De) {
                  me.push(De);
                  setTimeout(Be, 1);
                };
                K.defineProperty(O, "_unhandledRejectionCheck", {
                  value: Be
                });
                K.defineProperty(O, "_unhandledRejectionClear", {
                  value: se
                });
              })();
              O.prototype.suppressUnhandledRejections = function () {
                var me = this._target();
                me._bitField = me._bitField & -1048577 | 524288;
              };
              O.prototype._ensurePossibleRejectionHandled = function () {
                if ((this._bitField & 524288) == 0) {
                  this._setRejectionIsUnhandled();
                  $(this);
                }
              };
              O.prototype._notifyUnhandledRejectionIsHandled = function () {
                vt("rejectionHandled", B, undefined, this);
              };
              O.prototype._setReturnedNonUndefined = function () {
                this._bitField = this._bitField | 268435456;
              };
              O.prototype._returnedNonUndefined = function () {
                return (this._bitField & 268435456) != 0;
              };
              O.prototype._notifyUnhandledRejection = function () {
                if (this._isRejectionUnhandled()) {
                  var me = this._settledValue();
                  this._setUnhandledRejectionIsNotified();
                  vt("unhandledRejection", A, me, this);
                }
              };
              O.prototype._setUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField | 262144;
              };
              O.prototype._unsetUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField & -262145;
              };
              O.prototype._isUnhandledRejectionNotified = function () {
                return (this._bitField & 262144) > 0;
              };
              O.prototype._setRejectionIsUnhandled = function () {
                this._bitField = this._bitField | 1048576;
              };
              O.prototype._unsetRejectionIsUnhandled = function () {
                this._bitField = this._bitField & -1048577;
                if (this._isUnhandledRejectionNotified()) {
                  this._unsetUnhandledRejectionIsNotified();
                  this._notifyUnhandledRejectionIsHandled();
                }
              };
              O.prototype._isRejectionUnhandled = function () {
                return (this._bitField & 1048576) > 0;
              };
              O.prototype._warn = function (me, Be, se) {
                return ct(me, Be, se || this);
              };
              O.onPossiblyUnhandledRejection = function (me) {
                var Be = O._getContext();
                A = U.contextBind(Be, me);
              };
              O.onUnhandledRejectionHandled = function (me) {
                var Be = O._getContext();
                B = U.contextBind(Be, me);
              };
              function fe() {}
              O.longStackTraces = function () {
                if (J.haveItemsQueued() && !Ie.longStackTraces) {
                  throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
                }
                if (!Ie.longStackTraces && gt()) {
                  var me = O.prototype._captureStackTrace;
                  var Be = O.prototype._attachExtraTrace;
                  var se = O.prototype._dereferenceTrace;
                  Ie.longStackTraces = true;
                  fe = function () {
                    if (J.haveItemsQueued() && !Ie.longStackTraces) {
                      throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
                    }
                    O.prototype._captureStackTrace = me;
                    O.prototype._attachExtraTrace = Be;
                    O.prototype._dereferenceTrace = se;
                    q.deactivateLongStackTraces();
                    Ie.longStackTraces = false;
                  };
                  O.prototype._captureStackTrace = Re;
                  O.prototype._attachExtraTrace = ot;
                  O.prototype._dereferenceTrace = pt;
                  q.activateLongStackTraces();
                }
              };
              O.hasLongStackTraces = function () {
                return Ie.longStackTraces && gt();
              };
              var Me = {
                unhandledrejection: {
                  before: function () {
                    var me = U.global.onunhandledrejection;
                    U.global.onunhandledrejection = null;
                    return me;
                  },
                  after: function (me) {
                    U.global.onunhandledrejection = me;
                  }
                },
                rejectionhandled: {
                  before: function () {
                    var me = U.global.onrejectionhandled;
                    U.global.onrejectionhandled = null;
                    return me;
                  },
                  after: function (me) {
                    U.global.onrejectionhandled = me;
                  }
                }
              };
              var je = function () {
                function me(se, De) {
                  if (!se) {
                    return !U.global.dispatchEvent(De);
                  }
                  var We;
                  try {
                    We = se.before();
                    return !U.global.dispatchEvent(De);
                  } finally {
                    se.after(We);
                  }
                }
                try {
                  if (typeof CustomEvent == "function") {
                    var Be = new CustomEvent("CustomEvent");
                    U.global.dispatchEvent(Be);
                    return function (se, De) {
                      se = se.toLowerCase();
                      var We = new CustomEvent(se, {
                        detail: De,
                        cancelable: true
                      });
                      K.defineProperty(We, "promise", {
                        value: De.promise
                      });
                      K.defineProperty(We, "reason", {
                        value: De.reason
                      });
                      return me(Me[se], We);
                    };
                  }
                  if (typeof Event == "function") {
                    Be = new Event("CustomEvent");
                    U.global.dispatchEvent(Be);
                    return function (se, De) {
                      se = se.toLowerCase();
                      var We = new Event(se, {
                        cancelable: true
                      });
                      We.detail = De;
                      K.defineProperty(We, "promise", {
                        value: De.promise
                      });
                      K.defineProperty(We, "reason", {
                        value: De.reason
                      });
                      return me(Me[se], We);
                    };
                  } else {
                    (Be = document.createEvent("CustomEvent")).initCustomEvent("testingtheevent", false, true, {});
                    U.global.dispatchEvent(Be);
                    return function (se, De) {
                      se = se.toLowerCase();
                      var We = document.createEvent("CustomEvent");
                      We.initCustomEvent(se, false, true, De);
                      return me(Me[se], We);
                    };
                  }
                } catch {}
                return function () {
                  return false;
                };
              }();
              var ze = U.isNode ? function () {
                return y.emit.apply(y, arguments);
              } : U.global ? function (me) {
                var Be = "on" + me.toLowerCase();
                var se = U.global[Be];
                return !!se && (se.apply(U.global, [].slice.call(arguments, 1)), true);
              } : function () {
                return false;
              };
              function we(me, Be) {
                return {
                  promise: Be
                };
              }
              var Ce = {
                promiseCreated: we,
                promiseFulfilled: we,
                promiseRejected: we,
                promiseResolved: we,
                promiseCancelled: we,
                promiseChained: function (me, Be, se) {
                  return {
                    promise: Be,
                    child: se
                  };
                },
                warning: function (me, Be) {
                  return {
                    warning: Be
                  };
                },
                unhandledRejection: function (me, Be, se) {
                  return {
                    reason: Be,
                    promise: se
                  };
                },
                rejectionHandled: we
              };
              function ye(me) {
                var Be = false;
                try {
                  Be = ze.apply(null, arguments);
                } catch (De) {
                  J.throwLater(De);
                  Be = true;
                }
                var se = false;
                try {
                  se = je(me, Ce[me].apply(null, arguments));
                } catch (De) {
                  J.throwLater(De);
                  se = true;
                }
                return se || Be;
              }
              function $e() {
                return false;
              }
              function qe(me, Be, se) {
                var De = this;
                try {
                  me(Be, se, function (We) {
                    if (typeof We != "function") {
                      throw new TypeError("onCancel must be a function, got: " + U.toString(We));
                    }
                    De._attachCancellationCallback(We);
                  });
                } catch (We) {
                  return We;
                }
              }
              function ue(me) {
                if (!this._isCancellable()) {
                  return this;
                }
                var Be = this._onCancel();
                if (Be !== undefined) {
                  if (U.isArray(Be)) {
                    Be.push(me);
                  } else {
                    this._setOnCancel([Be, me]);
                  }
                } else {
                  this._setOnCancel(me);
                }
              }
              function de() {
                return this._onCancelField;
              }
              function pe(me) {
                this._onCancelField = me;
              }
              function xe() {
                this._cancellationParent = undefined;
                this._onCancelField = undefined;
              }
              function Xe(me, Be) {
                if ((Be & 1) != 0) {
                  this._cancellationParent = me;
                  var se = me._branchesRemainingToCancel;
                  if (se === undefined) {
                    se = 0;
                  }
                  me._branchesRemainingToCancel = se + 1;
                }
                if ((Be & 2) != 0 && me._isBound()) {
                  this._setBoundTo(me._boundTo);
                }
              }
              O.config = function (me) {
                if ("longStackTraces" in (me = Object(me))) {
                  if (me.longStackTraces) {
                    O.longStackTraces();
                  } else if (!me.longStackTraces && O.hasLongStackTraces()) {
                    fe();
                  }
                }
                if ("warnings" in me) {
                  var Be = me.warnings;
                  Ie.warnings = !!Be;
                  ae = Ie.warnings;
                  if (U.isObject(Be) && "wForgottenReturn" in Be) {
                    ae = !!Be.wForgottenReturn;
                  }
                }
                if ("cancellation" in me && me.cancellation && !Ie.cancellation) {
                  if (J.haveItemsQueued()) {
                    throw new Error("cannot enable cancellation after promises are in use");
                  }
                  O.prototype._clearCancellationData = xe;
                  O.prototype._propagateFrom = Xe;
                  O.prototype._onCancel = de;
                  O.prototype._setOnCancel = pe;
                  O.prototype._attachCancellationCallback = ue;
                  O.prototype._execute = qe;
                  rt = Xe;
                  Ie.cancellation = true;
                }
                if ("monitoring" in me) {
                  if (me.monitoring && !Ie.monitoring) {
                    Ie.monitoring = true;
                    O.prototype._fireEvent = ye;
                  } else if (!me.monitoring && Ie.monitoring) {
                    Ie.monitoring = false;
                    O.prototype._fireEvent = $e;
                  }
                }
                if ("asyncHooks" in me && U.nodeSupportsAsyncResource) {
                  var De = !!me.asyncHooks;
                  if (Ie.asyncHooks !== De) {
                    Ie.asyncHooks = De;
                    if (De) {
                      ee();
                    } else {
                      G();
                    }
                  }
                }
                return O;
              };
              O.prototype._fireEvent = $e;
              O.prototype._execute = function (me, Be, se) {
                try {
                  me(Be, se);
                } catch (De) {
                  return De;
                }
              };
              O.prototype._onCancel = function () {};
              O.prototype._setOnCancel = function (me) {};
              O.prototype._attachCancellationCallback = function (me) {};
              O.prototype._captureStackTrace = function () {};
              O.prototype._attachExtraTrace = function () {};
              O.prototype._dereferenceTrace = function () {};
              O.prototype._clearCancellationData = function () {};
              O.prototype._propagateFrom = function (me, Be) {};
              function rt(me, Be) {
                if ((Be & 2) != 0 && me._isBound()) {
                  this._setBoundTo(me._boundTo);
                }
              }
              function tt() {
                var me = this._boundTo;
                if (me !== undefined && me instanceof O) {
                  if (me.isFulfilled()) {
                    return me.value();
                  } else {
                    return undefined;
                  }
                } else {
                  return me;
                }
              }
              function Re() {
                this._trace = new Ct(this._peekContext());
              }
              function ot(me, Be) {
                if (F(me)) {
                  var se = this._trace;
                  if (se !== undefined && Be) {
                    se = se._parent;
                  }
                  if (se !== undefined) {
                    se.attachExtraTrace(me);
                  } else if (!me.__stackCleaned__) {
                    var De = Ze(me);
                    U.notEnumerableProp(me, "stack", De.message + "\n" + De.stack.join("\n"));
                    U.notEnumerableProp(me, "__stackCleaned__", true);
                  }
                }
              }
              function pt() {
                this._trace = undefined;
              }
              function ct(me, Be, se) {
                if (Ie.warnings) {
                  var De;
                  var We = new Q(me);
                  if (Be) {
                    se._attachExtraTrace(We);
                  } else if (Ie.longStackTraces && (De = O._peekContext())) {
                    De.attachExtraTrace(We);
                  } else {
                    var ke = Ze(We);
                    We.stack = ke.message + "\n" + ke.stack.join("\n");
                  }
                  if (!ye("warning", We)) {
                    it(We, "", true);
                  }
                }
              }
              function st(me) {
                for (var Be = [], se = 0; se < me.length; ++se) {
                  var De = me[se];
                  var We = De === "    (No stack trace)" || ne.test(De);
                  var ke = We && Ye(De);
                  if (We && !ke) {
                    if (ge && De.charAt(0) !== " ") {
                      De = "    " + De;
                    }
                    Be.push(De);
                  }
                }
                return Be;
              }
              function Ze(me) {
                var Be = me.stack;
                var se = me.toString();
                Be = typeof Be == "string" && Be.length > 0 ? function (De) {
                  for (var We = De.stack.replace(/\s+$/g, "").split("\n"), ke = 0; ke < We.length; ++ke) {
                    var Pe = We[ke];
                    if (Pe === "    (No stack trace)" || ne.test(Pe)) {
                      break;
                    }
                  }
                  if (ke > 0 && De.name != "SyntaxError") {
                    We = We.slice(ke);
                  }
                  return We;
                }(me) : ["    (No stack trace)"];
                return {
                  message: se,
                  stack: me.name == "SyntaxError" ? Be : st(Be)
                };
              }
              function it(me, Be, se) {
                var De;
                if (typeof console !== "undefined") {
                  De = U.isObject(me) ? Be + le(me.stack, me) : Be + String(me);
                  if (typeof H == "function") {
                    H(De, se);
                  } else if (typeof console.log == "function" || x(console.log) === "object") {
                    console.log(De);
                  }
                }
              }
              function vt(me, Be, se, De) {
                var We = false;
                try {
                  if (typeof Be == "function") {
                    We = true;
                    if (me === "rejectionHandled") {
                      Be(De);
                    } else {
                      Be(se, De);
                    }
                  }
                } catch (ke) {
                  J.throwLater(ke);
                }
                if (me === "unhandledRejection") {
                  if (!ye(me, se, De) && !We) {
                    it(se, "Unhandled rejection ");
                  }
                } else {
                  ye(me, De);
                }
              }
              function nt(me) {
                var Be;
                var se;
                if (typeof me == "function") {
                  Be = "[function " + (me.name || "anonymous") + "]";
                } else {
                  Be = me && typeof me.toString == "function" ? me.toString() : U.toString(me);
                  if (/\[object [a-zA-Z0-9$_]+\]/.test(Be)) {
                    try {
                      Be = JSON.stringify(me);
                    } catch {}
                  }
                  if (Be.length === 0) {
                    Be = "(empty array)";
                  }
                }
                return "(<" + ((se = Be).length < 41 ? se : se.substr(0, 38) + "...") + ">, no stack trace)";
              }
              function gt() {
                return typeof Nt == "function";
              }
              function Ye() {
                return false;
              }
              var et = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
              function Et(me) {
                var Be = me.match(et);
                if (Be) {
                  return {
                    fileName: Be[1],
                    line: parseInt(Be[2], 10)
                  };
                }
              }
              function Ct(me) {
                this._parent = me;
                this._promisesCreated = 0;
                var Be = this._length = 1 + (me === undefined ? 0 : me._length);
                Nt(this, Ct);
                if (Be > 32) {
                  this.uncycle();
                }
              }
              U.inherits(Ct, Error);
              q.CapturedTrace = Ct;
              Ct.prototype.uncycle = function () {
                var me = this._length;
                if (me >= 2) {
                  for (var Be = [], se = {}, De = 0, We = this; We !== undefined; ++De) {
                    Be.push(We);
                    We = We._parent;
                  }
                  for (De = (me = this._length = De) - 1; De >= 0; --De) {
                    var ke = Be[De].stack;
                    if (se[ke] === undefined) {
                      se[ke] = De;
                    }
                  }
                  for (De = 0; De < me; ++De) {
                    var Pe = se[Be[De].stack];
                    if (Pe !== undefined && Pe !== De) {
                      if (Pe > 0) {
                        Be[Pe - 1]._parent = undefined;
                        Be[Pe - 1]._length = 1;
                      }
                      Be[De]._parent = undefined;
                      Be[De]._length = 1;
                      var ce = De > 0 ? Be[De - 1] : this;
                      if (Pe < me - 1) {
                        ce._parent = Be[Pe + 1];
                        ce._parent.uncycle();
                        ce._length = ce._parent._length + 1;
                      } else {
                        ce._parent = undefined;
                        ce._length = 1;
                      }
                      for (var Ge = ce._length + 1, dt = De - 2; dt >= 0; --dt) {
                        Be[dt]._length = Ge;
                        Ge++;
                      }
                      return;
                    }
                  }
                }
              };
              Ct.prototype.attachExtraTrace = function (me) {
                if (!me.__stackCleaned__) {
                  this.uncycle();
                  for (var Be = Ze(me), se = Be.message, De = [Be.stack], We = this; We !== undefined;) {
                    De.push(st(We.stack.split("\n")));
                    We = We._parent;
                  }
                  (function (ke) {
                    for (var Pe = ke[0], ce = 1; ce < ke.length; ++ce) {
                      for (var Ge = ke[ce], dt = Pe.length - 1, te = Pe[dt], Ue = -1, Ke = Ge.length - 1; Ke >= 0; --Ke) {
                        if (Ge[Ke] === te) {
                          Ue = Ke;
                          break;
                        }
                      }
                      for (Ke = Ue; Ke >= 0 && Pe[dt] === Ge[Ke]; --Ke) {
                        Pe.pop();
                        dt--;
                      }
                      Pe = Ge;
                    }
                  })(De);
                  (function (ke) {
                    for (var Pe = 0; Pe < ke.length; ++Pe) {
                      if (ke[Pe].length === 0 || Pe + 1 < ke.length && ke[Pe][0] === ke[Pe + 1][0]) {
                        ke.splice(Pe, 1);
                        Pe--;
                      }
                    }
                  })(De);
                  U.notEnumerableProp(me, "stack", function (ke, Pe) {
                    for (var ce = 0; ce < Pe.length - 1; ++ce) {
                      Pe[ce].push("From previous event:");
                      Pe[ce] = Pe[ce].join("\n");
                    }
                    if (ce < Pe.length) {
                      Pe[ce] = Pe[ce].join("\n");
                    }
                    return ke + "\n" + Pe.join("\n");
                  }(se, De));
                  U.notEnumerableProp(me, "__stackCleaned__", true);
                }
              };
              var Nt = function () {
                var me = /^\s*at\s*/;
                function Be(ke, Pe) {
                  if (typeof ke == "string") {
                    return ke;
                  } else if (Pe.name !== undefined && Pe.message !== undefined) {
                    return Pe.toString();
                  } else {
                    return nt(Pe);
                  }
                }
                if (typeof Error.stackTraceLimit == "number" && typeof Error.captureStackTrace == "function") {
                  Error.stackTraceLimit += 6;
                  ne = me;
                  le = Be;
                  var se = Error.captureStackTrace;
                  Ye = function (ke) {
                    return L.test(ke);
                  };
                  return function (ke, Pe) {
                    Error.stackTraceLimit += 6;
                    se(ke, Pe);
                    Error.stackTraceLimit -= 6;
                  };
                }
                var De;
                var We = new Error();
                if (typeof We.stack == "string" && We.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
                  ne = /@/;
                  le = Be;
                  ge = true;
                  return function (ke) {
                    ke.stack = new Error().stack;
                  };
                }
                try {
                  throw new Error();
                } catch (ke) {
                  De = "stack" in ke;
                }
                if ("stack" in We || !De || typeof Error.stackTraceLimit != "number") {
                  le = function (ke, Pe) {
                    if (typeof ke == "string") {
                      return ke;
                    } else if (x(Pe) !== "object" && typeof Pe != "function" || Pe.name === undefined || Pe.message === undefined) {
                      return nt(Pe);
                    } else {
                      return Pe.toString();
                    }
                  };
                  return null;
                } else {
                  ne = me;
                  le = Be;
                  return function (ke) {
                    Error.stackTraceLimit += 6;
                    try {
                      throw new Error();
                    } catch (Pe) {
                      ke.stack = Pe.stack;
                    }
                    Error.stackTraceLimit -= 6;
                  };
                }
              }();
              if (typeof console !== "undefined" && console.warn !== undefined) {
                H = function (me) {
                  console.warn(me);
                };
                if (U.isNode && y.stderr.isTTY) {
                  H = function (me, Be) {
                    console.warn((Be ? "[33m" : "[31m") + me + "[0m\n");
                  };
                } else if (!U.isNode && typeof new Error().stack == "string") {
                  H = function (me, Be) {
                    console.warn("%c" + me, Be ? "color: darkorange" : "color: red");
                  };
                }
              }
              var Ie = {
                warnings: Le,
                longStackTraces: false,
                cancellation: false,
                monitoring: false,
                asyncHooks: false
              };
              if (Qe) {
                O.longStackTraces();
              }
              return {
                asyncHooks: function () {
                  return Ie.asyncHooks;
                },
                longStackTraces: function () {
                  return Ie.longStackTraces;
                },
                warnings: function () {
                  return Ie.warnings;
                },
                cancellation: function () {
                  return Ie.cancellation;
                },
                monitoring: function () {
                  return Ie.monitoring;
                },
                propagateFromFunction: function () {
                  return rt;
                },
                boundValueFunction: function () {
                  return tt;
                },
                checkForgottenReturns: function (me, Be, se, De, We) {
                  if (me === undefined && Be !== null && ae) {
                    if (We !== undefined && We._returnedNonUndefined() || (De._bitField & 65535) == 0) {
                      return;
                    }
                    if (se) {
                      se += " ";
                    }
                    var ke = "";
                    var Pe = "";
                    if (Be._trace) {
                      for (var ce = Be._trace.stack.split("\n"), Ge = st(ce), dt = Ge.length - 1; dt >= 0; --dt) {
                        var te = Ge[dt];
                        if (!ie.test(te)) {
                          var Ue = te.match(Y);
                          if (Ue) {
                            ke = "at " + Ue[1] + ":" + Ue[2] + ":" + Ue[3] + " ";
                          }
                          break;
                        }
                      }
                      if (Ge.length > 0) {
                        var Ke = Ge[0];
                        for (dt = 0; dt < ce.length; ++dt) {
                          if (ce[dt] === Ke) {
                            if (dt > 0) {
                              Pe = "\n" + ce[dt - 1];
                            }
                            break;
                          }
                        }
                      }
                    }
                    De._warn("a promise was created in a " + se + "handler " + ke + "but was not returned from it, see http://goo.gl/rRqMUw" + Pe, true, Be);
                  }
                },
                setBounds: function (me, Be) {
                  if (gt()) {
                    for (var se, De, We = (me.stack || "").split("\n"), ke = (Be.stack || "").split("\n"), Pe = -1, ce = -1, Ge = 0; Ge < We.length; ++Ge) {
                      if (dt = Et(We[Ge])) {
                        se = dt.fileName;
                        Pe = dt.line;
                        break;
                      }
                    }
                    for (Ge = 0; Ge < ke.length; ++Ge) {
                      var dt;
                      if (dt = Et(ke[Ge])) {
                        De = dt.fileName;
                        ce = dt.line;
                        break;
                      }
                    }
                    if (Pe >= 0 && ce >= 0 && !!se && !!De && se === De && Pe < ce) {
                      Ye = function (te) {
                        if (L.test(te)) {
                          return true;
                        }
                        var Ue = Et(te);
                        return !!Ue && Ue.fileName === se && Pe <= Ue.line && Ue.line <= ce;
                      };
                    }
                  }
                },
                warn: ct,
                deprecated: function (me, Be) {
                  var se = me + " is deprecated and will be removed in a future version.";
                  if (Be) {
                    se += " Use " + Be + " instead.";
                  }
                  return ct(se);
                },
                CapturedTrace: Ct,
                fireDomEvent: je,
                fireGlobalEvent: ze
              };
            };
          }, {
            "./errors": 9,
            "./es5": 10,
            "./util": 21
          }],
          8: [function (m, l, M) {
            "use strict";

            l.exports = function (O) {
              function q() {
                return this.value;
              }
              function ee() {
                throw this.reason;
              }
              O.prototype.return = O.prototype.thenReturn = function (G) {
                if (G instanceof O) {
                  G.suppressUnhandledRejections();
                }
                return this._then(q, undefined, undefined, {
                  value: G
                }, undefined);
              };
              O.prototype.throw = O.prototype.thenThrow = function (G) {
                return this._then(ee, undefined, undefined, {
                  reason: G
                }, undefined);
              };
              O.prototype.catchThrow = function (G) {
                if (arguments.length <= 1) {
                  return this._then(undefined, ee, undefined, {
                    reason: G
                  }, undefined);
                }
                var B = arguments[1];
                return this.caught(G, function () {
                  throw B;
                });
              };
              O.prototype.catchReturn = function (G) {
                if (arguments.length <= 1) {
                  if (G instanceof O) {
                    G.suppressUnhandledRejections();
                  }
                  return this._then(undefined, q, undefined, {
                    value: G
                  }, undefined);
                }
                var B = arguments[1];
                if (B instanceof O) {
                  B.suppressUnhandledRejections();
                }
                return this.caught(G, function () {
                  return B;
                });
              };
            };
          }, {}],
          9: [function (m, l, M) {
            "use strict";

            var O;
            var q;
            var ee = m("./es5");
            var G = ee.freeze;
            var B = m("./util");
            var A = B.inherits;
            var H = B.notEnumerableProp;
            function $(le, ge) {
              function Ee(Le) {
                if (!(this instanceof Ee)) {
                  return new Ee(Le);
                }
                H(this, "message", typeof Le == "string" ? Le : ge);
                H(this, "name", le);
                if (Error.captureStackTrace) {
                  Error.captureStackTrace(this, this.constructor);
                } else {
                  Error.call(this);
                }
              }
              A(Ee, Error);
              return Ee;
            }
            var J = $("Warning", "warning");
            var Q = $("CancellationError", "cancellation error");
            var U = $("TimeoutError", "timeout error");
            var K = $("AggregateError", "aggregate error");
            try {
              O = TypeError;
              q = RangeError;
            } catch {
              O = $("TypeError", "type error");
              q = $("RangeError", "range error");
            }
            for (var F = "join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "), L = 0; L < F.length; ++L) {
              if (typeof Array.prototype[F[L]] == "function") {
                K.prototype[F[L]] = Array.prototype[F[L]];
              }
            }
            ee.defineProperty(K.prototype, "length", {
              value: 0,
              configurable: false,
              writable: true,
              enumerable: true
            });
            K.prototype.isOperational = true;
            var ie = 0;
            function Y(le) {
              if (!(this instanceof Y)) {
                return new Y(le);
              }
              H(this, "name", "OperationalError");
              H(this, "message", le);
              this.cause = le;
              this.isOperational = true;
              if (le instanceof Error) {
                H(this, "message", le.message);
                H(this, "stack", le.stack);
              } else if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor);
              }
            }
            K.prototype.toString = function () {
              var le = Array(ie * 4 + 1).join(" ");
              var ge = "\n" + le + "AggregateError of:\n";
              ie++;
              le = Array(ie * 4 + 1).join(" ");
              for (var Ee = 0; Ee < this.length; ++Ee) {
                for (var Le = this[Ee] === this ? "[Circular AggregateError]" : this[Ee] + "", Qe = Le.split("\n"), ae = 0; ae < Qe.length; ++ae) {
                  Qe[ae] = le + Qe[ae];
                }
                ge += (Le = Qe.join("\n")) + "\n";
              }
              ie--;
              return ge;
            };
            A(Y, Error);
            var ne = Error.__BluebirdErrorTypes__;
            if (!ne) {
              ne = G({
                CancellationError: Q,
                TimeoutError: U,
                OperationalError: Y,
                RejectionError: Y,
                AggregateError: K
              });
              ee.defineProperty(Error, "__BluebirdErrorTypes__", {
                value: ne,
                writable: false,
                enumerable: false,
                configurable: false
              });
            }
            l.exports = {
              Error,
              TypeError: O,
              RangeError: q,
              CancellationError: ne.CancellationError,
              OperationalError: ne.OperationalError,
              TimeoutError: ne.TimeoutError,
              AggregateError: ne.AggregateError,
              Warning: J
            };
          }, {
            "./es5": 10,
            "./util": 21
          }],
          10: [function (m, l, M) {
            var O = function () {
              "use strict";

              return this === undefined;
            }();
            if (O) {
              l.exports = {
                freeze: Object.freeze,
                defineProperty: Object.defineProperty,
                getDescriptor: Object.getOwnPropertyDescriptor,
                keys: Object.keys,
                names: Object.getOwnPropertyNames,
                getPrototypeOf: Object.getPrototypeOf,
                isArray: Array.isArray,
                isES5: O,
                propertyIsWritable: function (A, H) {
                  var $ = Object.getOwnPropertyDescriptor(A, H);
                  return !$ || !!$.writable || !!$.set;
                }
              };
            } else {
              var q = {}.hasOwnProperty;
              var ee = {}.toString;
              var G = {}.constructor.prototype;
              function B(A) {
                var H = [];
                for (var $ in A) {
                  if (q.call(A, $)) {
                    H.push($);
                  }
                }
                return H;
              }
              l.exports = {
                isArray: function (A) {
                  try {
                    return ee.call(A) === "[object Array]";
                  } catch {
                    return false;
                  }
                },
                keys: B,
                names: B,
                defineProperty: function (A, H, $) {
                  A[H] = $.value;
                  return A;
                },
                getDescriptor: function (A, H) {
                  return {
                    value: A[H]
                  };
                },
                freeze: function (A) {
                  return A;
                },
                getPrototypeOf: function (A) {
                  try {
                    return Object(A).constructor.prototype;
                  } catch {
                    return G;
                  }
                },
                isES5: O,
                propertyIsWritable: function () {
                  return true;
                }
              };
            }
          }, {}],
          11: [function (m, l, M) {
            "use strict";

            l.exports = function (O, q, ee) {
              var G = m("./util");
              var B = O.CancellationError;
              var A = G.errorObj;
              var H = m("./catch_filter")(ee);
              function $(L, ie, Y) {
                this.promise = L;
                this.type = ie;
                this.handler = Y;
                this.called = false;
                this.cancelPromise = null;
              }
              function J(L) {
                this.finallyHandler = L;
              }
              function Q(L, ie) {
                return L.cancelPromise != null && (arguments.length > 1 ? L.cancelPromise._reject(ie) : L.cancelPromise._cancel(), L.cancelPromise = null, true);
              }
              function U() {
                return F.call(this, this.promise._target()._settledValue());
              }
              function K(L) {
                if (!Q(this, L)) {
                  A.e = L;
                  return A;
                }
              }
              function F(L) {
                var ie = this.promise;
                var Y = this.handler;
                if (!this.called) {
                  this.called = true;
                  var ne = this.isFinallyHandler() ? Y.call(ie._boundValue()) : Y.call(ie._boundValue(), L);
                  if (ne === ee) {
                    return ne;
                  }
                  if (ne !== undefined) {
                    ie._setReturnedNonUndefined();
                    var le = q(ne, ie);
                    if (le instanceof O) {
                      if (this.cancelPromise != null) {
                        if (le._isCancelled()) {
                          var ge = new B("late cancellation observer");
                          ie._attachExtraTrace(ge);
                          A.e = ge;
                          return A;
                        }
                        if (le.isPending()) {
                          le._attachCancellationCallback(new J(this));
                        }
                      }
                      return le._then(U, K, undefined, this, undefined);
                    }
                  }
                }
                if (ie.isRejected()) {
                  Q(this);
                  A.e = L;
                  return A;
                } else {
                  Q(this);
                  return L;
                }
              }
              $.prototype.isFinallyHandler = function () {
                return this.type === 0;
              };
              J.prototype._resultCancelled = function () {
                Q(this.finallyHandler);
              };
              O.prototype._passThrough = function (L, ie, Y, ne) {
                if (typeof L != "function") {
                  return this.then();
                } else {
                  return this._then(Y, ne, undefined, new $(this, ie, L), undefined);
                }
              };
              O.prototype.lastly = O.prototype.finally = function (L) {
                return this._passThrough(L, 0, F, F);
              };
              O.prototype.tap = function (L) {
                return this._passThrough(L, 1, F);
              };
              O.prototype.tapCatch = function (L) {
                var ie = arguments.length;
                if (ie === 1) {
                  return this._passThrough(L, 1, undefined, F);
                }
                var Y;
                var ne = new Array(ie - 1);
                var le = 0;
                for (Y = 0; Y < ie - 1; ++Y) {
                  var ge = arguments[Y];
                  if (!G.isObject(ge)) {
                    return O.reject(new TypeError("tapCatch statement predicate: expecting an object but got " + G.classString(ge)));
                  }
                  ne[le++] = ge;
                }
                ne.length = le;
                var Ee = arguments[Y];
                return this._passThrough(H(ne, Ee, this), 1, undefined, F);
              };
              return $;
            };
          }, {
            "./catch_filter": 5,
            "./util": 21
          }],
          12: [function (m, l, M) {
            "use strict";

            l.exports = function (O, q, ee, G, B) {
              m("./util");
              O.join = function () {
                var H;
                var $ = arguments.length - 1;
                if ($ > 0 && typeof arguments[$] == "function") {
                  H = arguments[$];
                }
                var J = [].slice.call(arguments);
                if (H) {
                  J.pop();
                }
                var Q = new q(J).promise();
                if (H !== undefined) {
                  return Q.spread(H);
                } else {
                  return Q;
                }
              };
            };
          }, {
            "./util": 21
          }],
          13: [function (m, l, M) {
            "use strict";

            l.exports = function (O, q, ee, G, B) {
              var A = m("./util");
              var H = A.tryCatch;
              O.method = function ($) {
                if (typeof $ != "function") {
                  throw new O.TypeError("expecting a function but got " + A.classString($));
                }
                return function () {
                  var J = new O(q);
                  J._captureStackTrace();
                  J._pushContext();
                  var Q = H($).apply(this, arguments);
                  var U = J._popContext();
                  B.checkForgottenReturns(Q, U, "Promise.method", J);
                  J._resolveFromSyncValue(Q);
                  return J;
                };
              };
              O.attempt = O.try = function ($) {
                if (typeof $ != "function") {
                  return G("expecting a function but got " + A.classString($));
                }
                var J;
                var Q = new O(q);
                Q._captureStackTrace();
                Q._pushContext();
                if (arguments.length > 1) {
                  B.deprecated("calling Promise.try with more than 1 argument");
                  var U = arguments[1];
                  var K = arguments[2];
                  J = A.isArray(U) ? H($).apply(K, U) : H($).call(K, U);
                } else {
                  J = H($)();
                }
                var F = Q._popContext();
                B.checkForgottenReturns(J, F, "Promise.try", Q);
                Q._resolveFromSyncValue(J);
                return Q;
              };
              O.prototype._resolveFromSyncValue = function ($) {
                if ($ === A.errorObj) {
                  this._rejectCallback($.e, false);
                } else {
                  this._resolveCallback($, true);
                }
              };
            };
          }, {
            "./util": 21
          }],
          14: [function (m, l, M) {
            "use strict";

            var O = m("./util");
            var q = O.maybeWrapAsError;
            var ee = m("./errors").OperationalError;
            var G = m("./es5");
            var B = /^(?:name|message|stack|cause)$/;
            function A(H) {
              var $;
              var K;
              if ((K = H) instanceof Error && G.getPrototypeOf(K) === Error.prototype) {
                ($ = new ee(H)).name = H.name;
                $.message = H.message;
                $.stack = H.stack;
                for (var J = G.keys(H), Q = 0; Q < J.length; ++Q) {
                  var U = J[Q];
                  if (!B.test(U)) {
                    $[U] = H[U];
                  }
                }
                return $;
              }
              O.markAsOriginatingFromRejection(H);
              return H;
            }
            l.exports = function (H, $) {
              return function (J, Q) {
                if (H !== null) {
                  if (J) {
                    var U = A(q(J));
                    H._attachExtraTrace(U);
                    H._reject(U);
                  } else if ($) {
                    var K = [].slice.call(arguments, 1);
                    H._fulfill(K);
                  } else {
                    H._fulfill(Q);
                  }
                  H = null;
                }
              };
            };
          }, {
            "./errors": 9,
            "./es5": 10,
            "./util": 21
          }],
          15: [function (m, l, M) {
            "use strict";

            l.exports = function () {
              function O() {
                return new Y("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n");
              }
              function q() {
                return new ye.PromiseInspection(this._target());
              }
              function ee(de) {
                return ye.reject(new Y(de));
              }
              function G() {}
              var B = {};
              var A = m("./util");
              A.setReflectHandler(q);
              function H() {
                var de = y.domain;
                if (de === undefined) {
                  return null;
                } else {
                  return de;
                }
              }
              function $() {
                return {
                  domain: H(),
                  async: null
                };
              }
              var J = A.isNode && A.nodeSupportsAsyncResource ? m("async_hooks").AsyncResource : null;
              function Q() {
                return {
                  domain: H(),
                  async: new J("Bluebird::Promise")
                };
              }
              var U = A.isNode ? $ : function () {
                return null;
              };
              A.notEnumerableProp(ye, "_getContext", U);
              var K = m("./es5");
              var F = m("./async");
              var L = new F();
              K.defineProperty(ye, "_async", {
                value: L
              });
              var ie = m("./errors");
              var Y = ye.TypeError = ie.TypeError;
              ye.RangeError = ie.RangeError;
              var ne = ye.CancellationError = ie.CancellationError;
              ye.TimeoutError = ie.TimeoutError;
              ye.OperationalError = ie.OperationalError;
              ye.RejectionError = ie.OperationalError;
              ye.AggregateError = ie.AggregateError;
              function le() {}
              var ge = {};
              var Ee = {};
              var Le = m("./thenables")(ye, le);
              var Qe = m("./promise_array")(ye, le, Le, ee, G);
              var ae = m("./context")(ye);
              var fe = m("./debuggability")(ye, ae, function () {
                U = Q;
                A.notEnumerableProp(ye, "_getContext", Q);
              }, function () {
                U = $;
                A.notEnumerableProp(ye, "_getContext", $);
              });
              var Me = m("./finally")(ye, Le, Ee);
              var je = m("./catch_filter")(Ee);
              var ze = m("./nodeback");
              var we = A.errorObj;
              var Ce = A.tryCatch;
              function ye(de) {
                if (de !== le) {
                  (function (pe, xe) {
                    if (pe == null || pe.constructor !== ye) {
                      throw new Y("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");
                    }
                    if (typeof xe != "function") {
                      throw new Y("expecting a function but got " + A.classString(xe));
                    }
                  })(this, de);
                }
                this._bitField = 0;
                this._fulfillmentHandler0 = undefined;
                this._rejectionHandler0 = undefined;
                this._promise0 = undefined;
                this._receiver0 = undefined;
                this._resolveFromExecutor(de);
                this._promiseCreated();
                this._fireEvent("promiseCreated", this);
              }
              function $e(de) {
                this.promise._resolveCallback(de);
              }
              function qe(de) {
                this.promise._rejectCallback(de, false);
              }
              function ue(de) {
                var pe = new ye(le);
                pe._fulfillmentHandler0 = de;
                pe._rejectionHandler0 = de;
                pe._promise0 = de;
                pe._receiver0 = de;
              }
              ye.prototype.toString = function () {
                return "[object Promise]";
              };
              ye.prototype.caught = ye.prototype.catch = function (de) {
                var pe = arguments.length;
                if (pe > 1) {
                  var xe;
                  var Xe = new Array(pe - 1);
                  var rt = 0;
                  for (xe = 0; xe < pe - 1; ++xe) {
                    var tt = arguments[xe];
                    if (!A.isObject(tt)) {
                      return ee("Catch statement predicate: expecting an object but got " + A.classString(tt));
                    }
                    Xe[rt++] = tt;
                  }
                  Xe.length = rt;
                  if (typeof (de = arguments[xe]) != "function") {
                    throw new Y("The last argument to .catch() must be a function, got " + A.toString(de));
                  }
                  return this.then(undefined, je(Xe, de, this));
                }
                return this.then(undefined, de);
              };
              ye.prototype.reflect = function () {
                return this._then(q, q, undefined, this, undefined);
              };
              ye.prototype.then = function (de, pe) {
                if (fe.warnings() && arguments.length > 0 && typeof de != "function" && typeof pe != "function") {
                  var xe = ".then() only accepts functions but was passed: " + A.classString(de);
                  if (arguments.length > 1) {
                    xe += ", " + A.classString(pe);
                  }
                  this._warn(xe);
                }
                return this._then(de, pe, undefined, undefined, undefined);
              };
              ye.prototype.done = function (de, pe) {
                this._then(de, pe, undefined, undefined, undefined)._setIsFinal();
              };
              ye.prototype.spread = function (de) {
                if (typeof de != "function") {
                  return ee("expecting a function but got " + A.classString(de));
                } else {
                  return this.all()._then(de, undefined, undefined, ge, undefined);
                }
              };
              ye.prototype.toJSON = function () {
                var de = {
                  isFulfilled: false,
                  isRejected: false,
                  fulfillmentValue: undefined,
                  rejectionReason: undefined
                };
                if (this.isFulfilled()) {
                  de.fulfillmentValue = this.value();
                  de.isFulfilled = true;
                } else if (this.isRejected()) {
                  de.rejectionReason = this.reason();
                  de.isRejected = true;
                }
                return de;
              };
              ye.prototype.all = function () {
                if (arguments.length > 0) {
                  this._warn(".all() was passed arguments but it does not take any");
                }
                return new Qe(this).promise();
              };
              ye.prototype.error = function (de) {
                return this.caught(A.originatesFromRejection, de);
              };
              ye.getNewLibraryCopy = l.exports;
              ye.is = function (de) {
                return de instanceof ye;
              };
              ye.fromNode = ye.fromCallback = function (de) {
                var pe = new ye(le);
                pe._captureStackTrace();
                var xe = arguments.length > 1 && !!Object(arguments[1]).multiArgs;
                var Xe = Ce(de)(ze(pe, xe));
                if (Xe === we) {
                  pe._rejectCallback(Xe.e, true);
                }
                if (!pe._isFateSealed()) {
                  pe._setAsyncGuaranteed();
                }
                return pe;
              };
              ye.all = function (de) {
                return new Qe(de).promise();
              };
              ye.cast = function (de) {
                var pe = Le(de);
                if (!(pe instanceof ye)) {
                  (pe = new ye(le))._captureStackTrace();
                  pe._setFulfilled();
                  pe._rejectionHandler0 = de;
                }
                return pe;
              };
              ye.resolve = ye.fulfilled = ye.cast;
              ye.reject = ye.rejected = function (de) {
                var pe = new ye(le);
                pe._captureStackTrace();
                pe._rejectCallback(de, true);
                return pe;
              };
              ye.setScheduler = function (de) {
                if (typeof de != "function") {
                  throw new Y("expecting a function but got " + A.classString(de));
                }
                return L.setScheduler(de);
              };
              ye.prototype._then = function (de, pe, xe, Xe, rt) {
                var tt = rt !== undefined;
                var Re = tt ? rt : new ye(le);
                var ot = this._target();
                var pt = ot._bitField;
                if (!tt) {
                  Re._propagateFrom(this, 3);
                  Re._captureStackTrace();
                  if (Xe === undefined && (this._bitField & 2097152) != 0) {
                    Xe = (pt & 50397184) != 0 ? this._boundValue() : ot === this ? undefined : this._boundTo;
                  }
                  this._fireEvent("promiseChained", this, Re);
                }
                var ct = U();
                if ((pt & 50397184) != 0) {
                  var st;
                  var Ze;
                  var it = ot._settlePromiseCtx;
                  if ((pt & 33554432) != 0) {
                    Ze = ot._rejectionHandler0;
                    st = de;
                  } else if ((pt & 16777216) != 0) {
                    Ze = ot._fulfillmentHandler0;
                    st = pe;
                    ot._unsetRejectionIsUnhandled();
                  } else {
                    it = ot._settlePromiseLateCancellationObserver;
                    Ze = new ne("late cancellation observer");
                    ot._attachExtraTrace(Ze);
                    st = pe;
                  }
                  L.invoke(it, ot, {
                    handler: A.contextBind(ct, st),
                    promise: Re,
                    receiver: Xe,
                    value: Ze
                  });
                } else {
                  ot._addCallbacks(de, pe, Re, Xe, ct);
                }
                return Re;
              };
              ye.prototype._length = function () {
                return this._bitField & 65535;
              };
              ye.prototype._isFateSealed = function () {
                return (this._bitField & 117506048) != 0;
              };
              ye.prototype._isFollowing = function () {
                return (this._bitField & 67108864) == 67108864;
              };
              ye.prototype._setLength = function (de) {
                this._bitField = this._bitField & -65536 | de & 65535;
              };
              ye.prototype._setFulfilled = function () {
                this._bitField = this._bitField | 33554432;
                this._fireEvent("promiseFulfilled", this);
              };
              ye.prototype._setRejected = function () {
                this._bitField = this._bitField | 16777216;
                this._fireEvent("promiseRejected", this);
              };
              ye.prototype._setFollowing = function () {
                this._bitField = this._bitField | 67108864;
                this._fireEvent("promiseResolved", this);
              };
              ye.prototype._setIsFinal = function () {
                this._bitField = this._bitField | 4194304;
              };
              ye.prototype._isFinal = function () {
                return (this._bitField & 4194304) > 0;
              };
              ye.prototype._unsetCancelled = function () {
                this._bitField = this._bitField & -65537;
              };
              ye.prototype._setCancelled = function () {
                this._bitField = this._bitField | 65536;
                this._fireEvent("promiseCancelled", this);
              };
              ye.prototype._setWillBeCancelled = function () {
                this._bitField = this._bitField | 8388608;
              };
              ye.prototype._setAsyncGuaranteed = function () {
                if (!L.hasCustomScheduler()) {
                  var de = this._bitField;
                  this._bitField = de | (de & 536870912) >> 2 ^ 134217728;
                }
              };
              ye.prototype._setNoAsyncGuarantee = function () {
                this._bitField = (this._bitField | 536870912) & -134217729;
              };
              ye.prototype._receiverAt = function (de) {
                var pe = de === 0 ? this._receiver0 : this[de * 4 - 4 + 3];
                if (pe !== B) {
                  if (pe === undefined && this._isBound()) {
                    return this._boundValue();
                  } else {
                    return pe;
                  }
                }
              };
              ye.prototype._promiseAt = function (de) {
                return this[de * 4 - 4 + 2];
              };
              ye.prototype._fulfillmentHandlerAt = function (de) {
                return this[de * 4 - 4 + 0];
              };
              ye.prototype._rejectionHandlerAt = function (de) {
                return this[de * 4 - 4 + 1];
              };
              ye.prototype._boundValue = function () {};
              ye.prototype._migrateCallback0 = function (de) {
                var pe = de._fulfillmentHandler0;
                var xe = de._rejectionHandler0;
                var Xe = de._promise0;
                var rt = de._receiverAt(0);
                if (rt === undefined) {
                  rt = B;
                }
                this._addCallbacks(pe, xe, Xe, rt, null);
              };
              ye.prototype._migrateCallbackAt = function (de, pe) {
                var xe = de._fulfillmentHandlerAt(pe);
                var Xe = de._rejectionHandlerAt(pe);
                var rt = de._promiseAt(pe);
                var tt = de._receiverAt(pe);
                if (tt === undefined) {
                  tt = B;
                }
                this._addCallbacks(xe, Xe, rt, tt, null);
              };
              ye.prototype._addCallbacks = function (de, pe, xe, Xe, rt) {
                var tt = this._length();
                if (tt >= 65531) {
                  tt = 0;
                  this._setLength(0);
                }
                if (tt === 0) {
                  this._promise0 = xe;
                  this._receiver0 = Xe;
                  if (typeof de == "function") {
                    this._fulfillmentHandler0 = A.contextBind(rt, de);
                  }
                  if (typeof pe == "function") {
                    this._rejectionHandler0 = A.contextBind(rt, pe);
                  }
                } else {
                  var Re = tt * 4 - 4;
                  this[Re + 2] = xe;
                  this[Re + 3] = Xe;
                  if (typeof de == "function") {
                    this[Re + 0] = A.contextBind(rt, de);
                  }
                  if (typeof pe == "function") {
                    this[Re + 1] = A.contextBind(rt, pe);
                  }
                }
                this._setLength(tt + 1);
                return tt;
              };
              ye.prototype._proxy = function (de, pe) {
                this._addCallbacks(undefined, undefined, pe, de, null);
              };
              ye.prototype._resolveCallback = function (de, pe) {
                if ((this._bitField & 117506048) == 0) {
                  if (de === this) {
                    return this._rejectCallback(O(), false);
                  }
                  var xe = Le(de, this);
                  if (!(xe instanceof ye)) {
                    return this._fulfill(de);
                  }
                  if (pe) {
                    this._propagateFrom(xe, 2);
                  }
                  var Xe = xe._target();
                  if (Xe !== this) {
                    var rt = Xe._bitField;
                    if ((rt & 50397184) == 0) {
                      var tt = this._length();
                      if (tt > 0) {
                        Xe._migrateCallback0(this);
                      }
                      for (var Re = 1; Re < tt; ++Re) {
                        Xe._migrateCallbackAt(this, Re);
                      }
                      this._setFollowing();
                      this._setLength(0);
                      this._setFollowee(xe);
                    } else if ((rt & 33554432) != 0) {
                      this._fulfill(Xe._value());
                    } else if ((rt & 16777216) != 0) {
                      this._reject(Xe._reason());
                    } else {
                      var ot = new ne("late cancellation observer");
                      Xe._attachExtraTrace(ot);
                      this._reject(ot);
                    }
                  } else {
                    this._reject(O());
                  }
                }
              };
              ye.prototype._rejectCallback = function (de, pe, xe) {
                var Xe = A.ensureErrorObject(de);
                var rt = Xe === de;
                if (!rt && !xe && fe.warnings()) {
                  var tt = "a promise was rejected with a non-error: " + A.classString(de);
                  this._warn(tt, true);
                }
                this._attachExtraTrace(Xe, !!pe && rt);
                this._reject(de);
              };
              ye.prototype._resolveFromExecutor = function (de) {
                if (de !== le) {
                  var pe = this;
                  this._captureStackTrace();
                  this._pushContext();
                  var xe = true;
                  var Xe = this._execute(de, function (rt) {
                    pe._resolveCallback(rt);
                  }, function (rt) {
                    pe._rejectCallback(rt, xe);
                  });
                  xe = false;
                  this._popContext();
                  if (Xe !== undefined) {
                    pe._rejectCallback(Xe, true);
                  }
                }
              };
              ye.prototype._settlePromiseFromHandler = function (de, pe, xe, Xe) {
                var rt = Xe._bitField;
                if ((rt & 65536) == 0) {
                  var tt;
                  Xe._pushContext();
                  if (pe === ge) {
                    if (xe && typeof xe.length == "number") {
                      tt = Ce(de).apply(this._boundValue(), xe);
                    } else {
                      (tt = we).e = new Y("cannot .spread() a non-array: " + A.classString(xe));
                    }
                  } else {
                    tt = Ce(de).call(pe, xe);
                  }
                  var Re = Xe._popContext();
                  if (((rt = Xe._bitField) & 65536) == 0) {
                    if (tt === Ee) {
                      Xe._reject(xe);
                    } else if (tt === we) {
                      Xe._rejectCallback(tt.e, false);
                    } else {
                      fe.checkForgottenReturns(tt, Re, "", Xe, this);
                      Xe._resolveCallback(tt);
                    }
                  }
                }
              };
              ye.prototype._target = function () {
                for (var de = this; de._isFollowing();) {
                  de = de._followee();
                }
                return de;
              };
              ye.prototype._followee = function () {
                return this._rejectionHandler0;
              };
              ye.prototype._setFollowee = function (de) {
                this._rejectionHandler0 = de;
              };
              ye.prototype._settlePromise = function (de, pe, xe, Xe) {
                var rt = de instanceof ye;
                var tt = this._bitField;
                var Re = (tt & 134217728) != 0;
                if ((tt & 65536) != 0) {
                  if (rt) {
                    de._invokeInternalOnCancel();
                  }
                  if (xe instanceof Me && xe.isFinallyHandler()) {
                    xe.cancelPromise = de;
                    if (Ce(pe).call(xe, Xe) === we) {
                      de._reject(we.e);
                    }
                  } else if (pe === q) {
                    de._fulfill(q.call(xe));
                  } else if (xe instanceof G) {
                    xe._promiseCancelled(de);
                  } else if (rt || de instanceof Qe) {
                    de._cancel();
                  } else {
                    xe.cancel();
                  }
                } else if (typeof pe == "function") {
                  if (rt) {
                    if (Re) {
                      de._setAsyncGuaranteed();
                    }
                    this._settlePromiseFromHandler(pe, xe, Xe, de);
                  } else {
                    pe.call(xe, Xe, de);
                  }
                } else if (xe instanceof G) {
                  if (!xe._isResolved()) {
                    if ((tt & 33554432) != 0) {
                      xe._promiseFulfilled(Xe, de);
                    } else {
                      xe._promiseRejected(Xe, de);
                    }
                  }
                } else if (rt) {
                  if (Re) {
                    de._setAsyncGuaranteed();
                  }
                  if ((tt & 33554432) != 0) {
                    de._fulfill(Xe);
                  } else {
                    de._reject(Xe);
                  }
                }
              };
              ye.prototype._settlePromiseLateCancellationObserver = function (de) {
                var pe = de.handler;
                var xe = de.promise;
                var Xe = de.receiver;
                var rt = de.value;
                if (typeof pe == "function") {
                  if (xe instanceof ye) {
                    this._settlePromiseFromHandler(pe, Xe, rt, xe);
                  } else {
                    pe.call(Xe, rt, xe);
                  }
                } else if (xe instanceof ye) {
                  xe._reject(rt);
                }
              };
              ye.prototype._settlePromiseCtx = function (de) {
                this._settlePromise(de.promise, de.handler, de.receiver, de.value);
              };
              ye.prototype._settlePromise0 = function (de, pe, xe) {
                var Xe = this._promise0;
                var rt = this._receiverAt(0);
                this._promise0 = undefined;
                this._receiver0 = undefined;
                this._settlePromise(Xe, de, rt, pe);
              };
              ye.prototype._clearCallbackDataAtIndex = function (de) {
                var pe = de * 4 - 4;
                this[pe + 2] = this[pe + 3] = this[pe + 0] = this[pe + 1] = undefined;
              };
              ye.prototype._fulfill = function (de) {
                var pe = this._bitField;
                if (!((pe & 117506048) >>> 16)) {
                  if (de === this) {
                    var xe = O();
                    this._attachExtraTrace(xe);
                    return this._reject(xe);
                  }
                  this._setFulfilled();
                  this._rejectionHandler0 = de;
                  if ((pe & 65535) > 0) {
                    if ((pe & 134217728) != 0) {
                      this._settlePromises();
                    } else {
                      L.settlePromises(this);
                    }
                    this._dereferenceTrace();
                  }
                }
              };
              ye.prototype._reject = function (de) {
                var pe = this._bitField;
                if (!((pe & 117506048) >>> 16)) {
                  this._setRejected();
                  this._fulfillmentHandler0 = de;
                  if (this._isFinal()) {
                    return L.fatalError(de, A.isNode);
                  }
                  if ((pe & 65535) > 0) {
                    L.settlePromises(this);
                  } else {
                    this._ensurePossibleRejectionHandled();
                  }
                }
              };
              ye.prototype._fulfillPromises = function (de, pe) {
                for (var xe = 1; xe < de; xe++) {
                  var Xe = this._fulfillmentHandlerAt(xe);
                  var rt = this._promiseAt(xe);
                  var tt = this._receiverAt(xe);
                  this._clearCallbackDataAtIndex(xe);
                  this._settlePromise(rt, Xe, tt, pe);
                }
              };
              ye.prototype._rejectPromises = function (de, pe) {
                for (var xe = 1; xe < de; xe++) {
                  var Xe = this._rejectionHandlerAt(xe);
                  var rt = this._promiseAt(xe);
                  var tt = this._receiverAt(xe);
                  this._clearCallbackDataAtIndex(xe);
                  this._settlePromise(rt, Xe, tt, pe);
                }
              };
              ye.prototype._settlePromises = function () {
                var de = this._bitField;
                var pe = de & 65535;
                if (pe > 0) {
                  if ((de & 16842752) != 0) {
                    var xe = this._fulfillmentHandler0;
                    this._settlePromise0(this._rejectionHandler0, xe, de);
                    this._rejectPromises(pe, xe);
                  } else {
                    var Xe = this._rejectionHandler0;
                    this._settlePromise0(this._fulfillmentHandler0, Xe, de);
                    this._fulfillPromises(pe, Xe);
                  }
                  this._setLength(0);
                }
                this._clearCancellationData();
              };
              ye.prototype._settledValue = function () {
                var de = this._bitField;
                if ((de & 33554432) != 0) {
                  return this._rejectionHandler0;
                } else if ((de & 16777216) != 0) {
                  return this._fulfillmentHandler0;
                } else {
                  return undefined;
                }
              };
              if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                K.defineProperty(ye.prototype, Symbol.toStringTag, {
                  get: function () {
                    return "Object";
                  }
                });
              }
              ye.defer = ye.pending = function () {
                fe.deprecated("Promise.defer", "new Promise");
                return {
                  promise: new ye(le),
                  resolve: $e,
                  reject: qe
                };
              };
              A.notEnumerableProp(ye, "_makeSelfResolutionError", O);
              m("./method")(ye, le, Le, ee, fe);
              m("./bind")(ye, le, Le, fe);
              m("./cancel")(ye, Qe, ee, fe);
              m("./direct_resolve")(ye);
              m("./synchronous_inspection")(ye);
              m("./join")(ye, Qe, Le, le, L);
              ye.Promise = ye;
              ye.version = "3.7.2";
              A.toFastProperties(ye);
              A.toFastProperties(ye.prototype);
              ue({
                a: 1
              });
              ue({
                b: 2
              });
              ue({
                c: 3
              });
              ue(1);
              ue(function () {});
              ue(undefined);
              ue(false);
              ue(new ye(le));
              fe.setBounds(F.firstLineError, A.lastLineError);
              return ye;
            };
          }, {
            "./async": 1,
            "./bind": 2,
            "./cancel": 4,
            "./catch_filter": 5,
            "./context": 6,
            "./debuggability": 7,
            "./direct_resolve": 8,
            "./errors": 9,
            "./es5": 10,
            "./finally": 11,
            "./join": 12,
            "./method": 13,
            "./nodeback": 14,
            "./promise_array": 16,
            "./synchronous_inspection": 19,
            "./thenables": 20,
            "./util": 21,
            async_hooks: undefined
          }],
          16: [function (m, l, M) {
            "use strict";

            l.exports = function (O, q, ee, G, B) {
              var A = m("./util");
              function H($) {
                var J = this._promise = new O(q);
                if ($ instanceof O) {
                  J._propagateFrom($, 3);
                  $.suppressUnhandledRejections();
                }
                J._setOnCancel(this);
                this._values = $;
                this._length = 0;
                this._totalResolved = 0;
                this._init(undefined, -2);
              }
              A.inherits(H, B);
              H.prototype.length = function () {
                return this._length;
              };
              H.prototype.promise = function () {
                return this._promise;
              };
              H.prototype._init = function $(J, Q) {
                var U = ee(this._values, this._promise);
                if (U instanceof O) {
                  var K = (U = U._target())._bitField;
                  this._values = U;
                  if ((K & 50397184) == 0) {
                    this._promise._setAsyncGuaranteed();
                    return U._then($, this._reject, undefined, this, Q);
                  }
                  if ((K & 33554432) == 0) {
                    if ((K & 16777216) != 0) {
                      return this._reject(U._reason());
                    } else {
                      return this._cancel();
                    }
                  }
                  U = U._value();
                }
                if ((U = A.asArray(U)) !== null) {
                  if (U.length !== 0) {
                    this._iterate(U);
                  } else if (Q === -5) {
                    this._resolveEmptyArray();
                  } else {
                    this._resolve(function (L) {
                      switch (L) {
                        case -2:
                          return [];
                        case -3:
                          return {};
                        case -6:
                          return new Map();
                      }
                    }(Q));
                  }
                } else {
                  var F = G("expecting an array or an iterable object but got " + A.classString(U)).reason();
                  this._promise._rejectCallback(F, false);
                }
              };
              H.prototype._iterate = function ($) {
                var J = this.getActualLength($.length);
                this._length = J;
                this._values = this.shouldCopyValues() ? new Array(J) : this._values;
                for (var Q = this._promise, U = false, K = null, F = 0; F < J; ++F) {
                  var L = ee($[F], Q);
                  K = L instanceof O ? (L = L._target())._bitField : null;
                  if (U) {
                    if (K !== null) {
                      L.suppressUnhandledRejections();
                    }
                  } else if (K !== null) {
                    if ((K & 50397184) == 0) {
                      L._proxy(this, F);
                      this._values[F] = L;
                    } else {
                      U = (K & 33554432) != 0 ? this._promiseFulfilled(L._value(), F) : (K & 16777216) != 0 ? this._promiseRejected(L._reason(), F) : this._promiseCancelled(F);
                    }
                  } else {
                    U = this._promiseFulfilled(L, F);
                  }
                }
                if (!U) {
                  Q._setAsyncGuaranteed();
                }
              };
              H.prototype._isResolved = function () {
                return this._values === null;
              };
              H.prototype._resolve = function ($) {
                this._values = null;
                this._promise._fulfill($);
              };
              H.prototype._cancel = function () {
                if (!this._isResolved() && this._promise._isCancellable()) {
                  this._values = null;
                  this._promise._cancel();
                }
              };
              H.prototype._reject = function ($) {
                this._values = null;
                this._promise._rejectCallback($, false);
              };
              H.prototype._promiseFulfilled = function ($, J) {
                this._values[J] = $;
                return ++this._totalResolved >= this._length && (this._resolve(this._values), true);
              };
              H.prototype._promiseCancelled = function () {
                this._cancel();
                return true;
              };
              H.prototype._promiseRejected = function ($) {
                this._totalResolved++;
                this._reject($);
                return true;
              };
              H.prototype._resultCancelled = function () {
                if (!this._isResolved()) {
                  var $ = this._values;
                  this._cancel();
                  if ($ instanceof O) {
                    $.cancel();
                  } else {
                    for (var J = 0; J < $.length; ++J) {
                      if ($[J] instanceof O) {
                        $[J].cancel();
                      }
                    }
                  }
                }
              };
              H.prototype.shouldCopyValues = function () {
                return true;
              };
              H.prototype.getActualLength = function ($) {
                return $;
              };
              return H;
            };
          }, {
            "./util": 21
          }],
          17: [function (m, l, M) {
            "use strict";

            function O(q) {
              this._capacity = q;
              this._length = 0;
              this._front = 0;
            }
            O.prototype._willBeOverCapacity = function (q) {
              return this._capacity < q;
            };
            O.prototype._pushOne = function (q) {
              var ee = this.length();
              this._checkCapacity(ee + 1);
              this[this._front + ee & this._capacity - 1] = q;
              this._length = ee + 1;
            };
            O.prototype.push = function (q, ee, G) {
              var B = this.length() + 3;
              if (this._willBeOverCapacity(B)) {
                this._pushOne(q);
                this._pushOne(ee);
                this._pushOne(G);
                return;
              }
              var A = this._front + B - 3;
              this._checkCapacity(B);
              var H = this._capacity - 1;
              this[A + 0 & H] = q;
              this[A + 1 & H] = ee;
              this[A + 2 & H] = G;
              this._length = B;
            };
            O.prototype.shift = function () {
              var q = this._front;
              var ee = this[q];
              this[q] = undefined;
              this._front = q + 1 & this._capacity - 1;
              this._length--;
              return ee;
            };
            O.prototype.length = function () {
              return this._length;
            };
            O.prototype._checkCapacity = function (q) {
              if (this._capacity < q) {
                this._resizeTo(this._capacity << 1);
              }
            };
            O.prototype._resizeTo = function (q) {
              var ee = this._capacity;
              this._capacity = q;
              (function (G, B, A, H, $) {
                for (var J = 0; J < $; ++J) {
                  A[J + H] = G[J + 0];
                  G[J + 0] = undefined;
                }
              })(this, 0, this, ee, this._front + this._length & ee - 1);
            };
            l.exports = O;
          }, {}],
          18: [function (m, l, M) {
            "use strict";

            var O;
            var H;
            var $;
            var J;
            var Q;
            var q = m("./util");
            var ee = q.getNativePromise();
            if (q.isNode && typeof MutationObserver === "undefined") {
              var G = w.setImmediate;
              var B = y.nextTick;
              O = q.isRecentNode ? function (H) {
                G.call(w, H);
              } : function (H) {
                B.call(y, H);
              };
            } else if (typeof ee == "function" && typeof ee.resolve == "function") {
              var A = ee.resolve();
              O = function (H) {
                A.then(H);
              };
            } else {
              O = typeof MutationObserver !== "undefined" && (typeof window === "undefined" || !window.navigator || !window.navigator.standalone && !window.cordova) && "classList" in document.documentElement ? (H = document.createElement("div"), $ = {
                attributes: true
              }, J = false, Q = document.createElement("div"), new MutationObserver(function () {
                H.classList.toggle("foo");
                J = false;
              }).observe(Q, $), function (U) {
                var K = new MutationObserver(function () {
                  K.disconnect();
                  U();
                });
                K.observe(H, $);
                if (!J) {
                  J = true;
                  Q.classList.toggle("foo");
                }
              }) : E !== undefined ? function (H) {
                E(H);
              } : typeof setTimeout !== "undefined" ? function (H) {
                setTimeout(H, 0);
              } : function () {
                throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
              };
            }
            l.exports = O;
          }, {
            "./util": 21
          }],
          19: [function (m, l, M) {
            "use strict";

            l.exports = function (O) {
              function q(J) {
                if (J !== undefined) {
                  J = J._target();
                  this._bitField = J._bitField;
                  this._settledValueField = J._isFateSealed() ? J._settledValue() : undefined;
                } else {
                  this._bitField = 0;
                  this._settledValueField = undefined;
                }
              }
              q.prototype._settledValue = function () {
                return this._settledValueField;
              };
              var ee = q.prototype.value = function () {
                if (!this.isFulfilled()) {
                  throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");
                }
                return this._settledValue();
              };
              var G = q.prototype.error = q.prototype.reason = function () {
                if (!this.isRejected()) {
                  throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");
                }
                return this._settledValue();
              };
              var B = q.prototype.isFulfilled = function () {
                return (this._bitField & 33554432) != 0;
              };
              var A = q.prototype.isRejected = function () {
                return (this._bitField & 16777216) != 0;
              };
              var H = q.prototype.isPending = function () {
                return (this._bitField & 50397184) == 0;
              };
              var $ = q.prototype.isResolved = function () {
                return (this._bitField & 50331648) != 0;
              };
              q.prototype.isCancelled = function () {
                return (this._bitField & 8454144) != 0;
              };
              O.prototype.__isCancelled = function () {
                return (this._bitField & 65536) == 65536;
              };
              O.prototype._isCancelled = function () {
                return this._target().__isCancelled();
              };
              O.prototype.isCancelled = function () {
                return (this._target()._bitField & 8454144) != 0;
              };
              O.prototype.isPending = function () {
                return H.call(this._target());
              };
              O.prototype.isRejected = function () {
                return A.call(this._target());
              };
              O.prototype.isFulfilled = function () {
                return B.call(this._target());
              };
              O.prototype.isResolved = function () {
                return $.call(this._target());
              };
              O.prototype.value = function () {
                return ee.call(this._target());
              };
              O.prototype.reason = function () {
                var J = this._target();
                J._unsetRejectionIsUnhandled();
                return G.call(J);
              };
              O.prototype._value = function () {
                return this._settledValue();
              };
              O.prototype._reason = function () {
                this._unsetRejectionIsUnhandled();
                return this._settledValue();
              };
              O.PromiseInspection = q;
            };
          }, {}],
          20: [function (m, l, M) {
            "use strict";

            l.exports = function (O, q) {
              var ee = m("./util");
              var G = ee.errorObj;
              var B = ee.isObject;
              var A = {}.hasOwnProperty;
              return function (H, $) {
                if (B(H)) {
                  if (H instanceof O) {
                    return H;
                  }
                  var J = function (U) {
                    try {
                      return (K = U).then;
                    } catch (K) {
                      G.e = K;
                      return G;
                    }
                    var K;
                  }(H);
                  if (J === G) {
                    if ($) {
                      $._pushContext();
                    }
                    var Q = O.reject(J.e);
                    if ($) {
                      $._popContext();
                    }
                    return Q;
                  }
                  if (typeof J == "function") {
                    if (function (U) {
                      try {
                        return A.call(U, "_promise0");
                      } catch {
                        return false;
                      }
                    }(H)) {
                      Q = new O(q);
                      H._then(Q._fulfill, Q._reject, undefined, Q, null);
                      return Q;
                    } else {
                      return function (U, K, F) {
                        var L = new O(q);
                        var ie = L;
                        if (F) {
                          F._pushContext();
                        }
                        L._captureStackTrace();
                        if (F) {
                          F._popContext();
                        }
                        var Y = true;
                        var ne = ee.tryCatch(K).call(U, function (le) {
                          if (L) {
                            L._resolveCallback(le);
                            L = null;
                          }
                        }, function (le) {
                          if (L) {
                            L._rejectCallback(le, Y, true);
                            L = null;
                          }
                        });
                        Y = false;
                        if (L && ne === G) {
                          L._rejectCallback(ne.e, true, true);
                          L = null;
                        }
                        return ie;
                      }(H, J, $);
                    }
                  }
                }
                return H;
              };
            };
          }, {
            "./util": 21
          }],
          21: [function (m, l, M) {
            "use strict";

            var G;
            var O = m("./es5");
            var q = typeof navigator === "undefined";
            var ee = {
              e: {}
            };
            var B = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : w !== undefined ? w : this !== undefined ? this : null;
            function A() {
              try {
                var Re = G;
                G = null;
                return Re.apply(this, arguments);
              } catch (ot) {
                ee.e = ot;
                return ee;
              }
            }
            function J(Re) {
              return Re == null || Re === true || Re === false || typeof Re == "string" || typeof Re == "number";
            }
            function L(Re, ot, pt) {
              if (!J(Re)) {
                O.defineProperty(Re, ot, {
                  value: pt,
                  configurable: true,
                  enumerable: false,
                  writable: true
                });
              }
              return Re;
            }
            var Y = function () {
              var Re = [Array.prototype, Object.prototype, Function.prototype];
              function ot(st) {
                for (var Ze = 0; Ze < Re.length; ++Ze) {
                  if (Re[Ze] === st) {
                    return true;
                  }
                }
                return false;
              }
              if (O.isES5) {
                var pt = Object.getOwnPropertyNames;
                return function (st) {
                  for (var Ze = [], it = Object.create(null); st != null && !ot(st);) {
                    var vt;
                    try {
                      vt = pt(st);
                    } catch {
                      return Ze;
                    }
                    for (var nt = 0; nt < vt.length; ++nt) {
                      var gt = vt[nt];
                      if (!it[gt]) {
                        it[gt] = true;
                        var Ye = Object.getOwnPropertyDescriptor(st, gt);
                        if (Ye != null && Ye.get == null && Ye.set == null) {
                          Ze.push(gt);
                        }
                      }
                    }
                    st = O.getPrototypeOf(st);
                  }
                  return Ze;
                };
              }
              var ct = {}.hasOwnProperty;
              return function (st) {
                if (ot(st)) {
                  return [];
                }
                var Ze = [];
                e: for (var it in st) {
                  if (ct.call(st, it)) {
                    Ze.push(it);
                  } else {
                    for (var vt = 0; vt < Re.length; ++vt) {
                      if (ct.call(Re[vt], it)) {
                        continue e;
                      }
                    }
                    Ze.push(it);
                  }
                }
                return Ze;
              };
            }();
            var ne = /this\s*\.\s*\S+\s*=/;
            var Ee = /^[a-z$_][a-z$_0-9]*$/i;
            function ae(Re) {
              try {
                return Re + "";
              } catch {
                return "[no string representation]";
              }
            }
            function fe(Re) {
              return Re instanceof Error || Re !== null && x(Re) === "object" && typeof Re.message == "string" && typeof Re.name == "string";
            }
            function ze(Re) {
              return fe(Re) && O.propertyIsWritable(Re, "stack");
            }
            var we = "stack" in new Error() ? function (Re) {
              if (ze(Re)) {
                return Re;
              } else {
                return new Error(ae(Re));
              }
            } : function (Re) {
              if (ze(Re)) {
                return Re;
              }
              try {
                throw new Error(ae(Re));
              } catch (ot) {
                return ot;
              }
            };
            function Ce(Re) {
              return {}.toString.call(Re);
            }
            function $e(Re) {
              if (O.isArray(Re)) {
                return Re;
              } else {
                return null;
              }
            }
            if (typeof Symbol !== "undefined" && Symbol.iterator) {
              var qe = typeof Array.from == "function" ? function (Re) {
                return Array.from(Re);
              } : function (Re) {
                for (var ot, pt = [], ct = Re[Symbol.iterator](); !(ot = ct.next()).done;) {
                  pt.push(ot.value);
                }
                return pt;
              };
              $e = function (Re) {
                if (O.isArray(Re)) {
                  return Re;
                } else if (Re != null && typeof Re[Symbol.iterator] == "function") {
                  return qe(Re);
                } else {
                  return null;
                }
              };
            }
            var pe;
            var Re;
            var ue = y !== undefined && Ce(y).toLowerCase() === "[object process]";
            var de = y !== undefined && y.env !== undefined;
            var tt = {
              setReflectHandler: function (Re) {
                pe = Re;
              },
              isClass: function le(Re) {
                try {
                  if (typeof Re == "function") {
                    var ot = O.names(Re.prototype);
                    var pt = O.isES5 && ot.length > 1;
                    var ct = ot.length > 0 && (ot.length !== 1 || ot[0] !== "constructor");
                    var st = ne.test(Re + "") && O.names(Re).length > 0;
                    if (pt || ct || st) {
                      return true;
                    }
                  }
                  return false;
                } catch {
                  return false;
                }
              },
              isIdentifier: function Le(Re) {
                return Ee.test(Re);
              },
              inheritedDataKeys: Y,
              getDataPropertyOrDefault: function F(Re, ot, pt) {
                if (!O.isES5) {
                  if ({}.hasOwnProperty.call(Re, ot)) {
                    return Re[ot];
                  } else {
                    return undefined;
                  }
                }
                var ct = Object.getOwnPropertyDescriptor(Re, ot);
                if (ct != null) {
                  if (ct.get == null && ct.set == null) {
                    return ct.value;
                  } else {
                    return pt;
                  }
                } else {
                  return undefined;
                }
              },
              thrower: function ie(Re) {
                throw Re;
              },
              isArray: O.isArray,
              asArray: $e,
              notEnumerableProp: L,
              isPrimitive: J,
              isObject: function Q(Re) {
                return typeof Re == "function" || x(Re) === "object" && Re !== null;
              },
              isError: fe,
              canEvaluate: q,
              errorObj: ee,
              tryCatch: function H(Re) {
                G = Re;
                return A;
              },
              inherits: function (Re, ot) {
                var pt = {}.hasOwnProperty;
                function ct() {
                  this.constructor = Re;
                  this.constructor$ = ot;
                  for (var st in ot.prototype) {
                    if (pt.call(ot.prototype, st) && st.charAt(st.length - 1) !== "$") {
                      this[st + "$"] = ot.prototype[st];
                    }
                  }
                }
                ct.prototype = ot.prototype;
                Re.prototype = new ct();
                return Re.prototype;
              },
              withAppended: function K(Re, ot) {
                var pt;
                var ct = Re.length;
                var st = new Array(ct + 1);
                for (pt = 0; pt < ct; ++pt) {
                  st[pt] = Re[pt];
                }
                st[pt] = ot;
                return st;
              },
              maybeWrapAsError: function U(Re) {
                if (J(Re)) {
                  return new Error(ae(Re));
                } else {
                  return Re;
                }
              },
              toFastProperties: function ge(Re) {
                function ot() {}
                ot.prototype = Re;
                var pt = new ot();
                function ct() {
                  return x(pt.foo);
                }
                ct();
                ct();
                return Re;
              },
              filledRange: function Qe(Re, ot, pt) {
                for (var ct = new Array(Re), st = 0; st < Re; ++st) {
                  ct[st] = ot + st + pt;
                }
                return ct;
              },
              toString: ae,
              canAttachTrace: ze,
              ensureErrorObject: we,
              originatesFromRejection: function je(Re) {
                return Re != null && (Re instanceof Error.__BluebirdErrorTypes__.OperationalError || Re.isOperational === true);
              },
              markAsOriginatingFromRejection: function Me(Re) {
                try {
                  L(Re, "isOperational", true);
                } catch {}
              },
              classString: Ce,
              copyDescriptors: function ye(Re, ot, pt) {
                for (var ct = O.names(Re), st = 0; st < ct.length; ++st) {
                  var Ze = ct[st];
                  if (pt(Ze)) {
                    try {
                      O.defineProperty(ot, Ze, O.getDescriptor(Re, Ze));
                    } catch {}
                  }
                }
              },
              isNode: ue,
              hasEnvVariables: de,
              env: function xe(Re) {
                if (de) {
                  return y.env[Re];
                } else {
                  return undefined;
                }
              },
              global: B,
              getNativePromise: function Xe() {
                if (typeof Promise == "function") {
                  try {
                    if (Ce(new Promise(function () {})) === "[object Promise]") {
                      return Promise;
                    }
                  } catch {}
                }
              },
              contextBind: function rt(Re, ot) {
                if (Re === null || typeof ot != "function" || ot === pe) {
                  return ot;
                }
                if (Re.domain !== null) {
                  ot = Re.domain.bind(ot);
                }
                var pt = Re.async;
                if (pt !== null) {
                  var ct = ot;
                  ot = function () {
                    var st = new Array(2).concat([].slice.call(arguments));
                    st[0] = ct;
                    st[1] = this;
                    return pt.runInAsyncScope.apply(pt, st);
                  };
                }
                return ot;
              }
            };
            tt.isRecentNode = tt.isNode && (y.versions && y.versions.node ? Re = y.versions.node.split(".").map(Number) : y.version && (Re = y.version.split(".").map(Number)), Re[0] === 0 && Re[1] > 10 || Re[0] > 0);
            tt.nodeSupportsAsyncResource = tt.isNode && function () {
              var Re = false;
              try {
                Re = typeof m("async_hooks").AsyncResource.prototype.runInAsyncScope == "function";
              } catch {
                Re = false;
              }
              return Re;
            }();
            if (tt.isNode) {
              tt.toFastProperties(y);
            }
            try {
              throw new Error();
            } catch (Re) {
              tt.lastLineError = Re;
            }
            l.exports = tt;
          }, {
            "./es5": 10,
            async_hooks: undefined
          }]
        }, {}, [3])(3);
      };
      if (x(X) == "object" && P !== undefined) {
        P.exports = S();
      } else if ((N = typeof (R = S) == "function" ? R.apply(X, []) : R) !== undefined) {
        P.exports = N;
      }
      if (typeof window !== "undefined" && window !== null) {
        window.P = window.Promise;
      } else if (typeof self !== "undefined" && self !== null) {
        self.P = self.Promise;
      }
    }).call(this, I(5), I(1), I(7).setImmediate);
  }, function (P, X, I) {
    (function (y) {
      var w = y !== undefined && y || typeof self !== "undefined" && self || window;
      var E = Function.prototype.apply;
      function R(C, N) {
        this._id = C;
        this._clearFn = N;
      }
      X.setTimeout = function () {
        return new R(E.call(setTimeout, w, arguments), clearTimeout);
      };
      X.setInterval = function () {
        return new R(E.call(setInterval, w, arguments), clearInterval);
      };
      X.clearTimeout = X.clearInterval = function (C) {
        if (C) {
          C.close();
        }
      };
      R.prototype.unref = R.prototype.ref = function () {};
      R.prototype.close = function () {
        this._clearFn.call(w, this._id);
      };
      X.enroll = function (C, N) {
        clearTimeout(C._idleTimeoutId);
        C._idleTimeout = N;
      };
      X.unenroll = function (C) {
        clearTimeout(C._idleTimeoutId);
        C._idleTimeout = -1;
      };
      X._unrefActive = X.active = function (C) {
        clearTimeout(C._idleTimeoutId);
        var N = C._idleTimeout;
        if (N >= 0) {
          C._idleTimeoutId = setTimeout(function () {
            if (C._onTimeout) {
              C._onTimeout();
            }
          }, N);
        }
      };
      I(8);
      X.setImmediate = typeof self !== "undefined" && self.setImmediate || y !== undefined && y.setImmediate || this && this.setImmediate;
      X.clearImmediate = typeof self !== "undefined" && self.clearImmediate || y !== undefined && y.clearImmediate || this && this.clearImmediate;
    }).call(this, I(1));
  }, function (P, X, I) {
    (function (y, w) {
      (function (E, R) {
        "use strict";

        if (!E.setImmediate) {
          var C;
          var N = 1;
          var x = {};
          var S = false;
          var s = E.document;
          var u = Object.getPrototypeOf && Object.getPrototypeOf(E);
          u = u && u.setTimeout ? u : E;
          if ({}.toString.call(E.process) === "[object process]") {
            C = function (M) {
              w.nextTick(function () {
                l(M);
              });
            };
          } else if (function () {
            if (E.postMessage && !E.importScripts) {
              var M = true;
              var O = E.onmessage;
              E.onmessage = function () {
                M = false;
              };
              E.postMessage("", "*");
              E.onmessage = O;
              return M;
            }
          }()) {
            M = "setImmediate$" + Math.random() + "$";
            O = function (q) {
              if (q.source === E && typeof q.data == "string" && q.data.indexOf(M) === 0) {
                l(+q.data.slice(M.length));
              }
            };
            if (E.addEventListener) {
              E.addEventListener("message", O, false);
            } else {
              E.attachEvent("onmessage", O);
            }
            C = function (q) {
              E.postMessage(M + q, "*");
            };
          } else if (E.MessageChannel) {
            (function () {
              var M = new MessageChannel();
              M.port1.onmessage = function (O) {
                l(O.data);
              };
              C = function (O) {
                M.port2.postMessage(O);
              };
            })();
          } else if (s && "onreadystatechange" in s.createElement("script")) {
            (function () {
              var M = s.documentElement;
              C = function (O) {
                var q = s.createElement("script");
                q.onreadystatechange = function () {
                  l(O);
                  q.onreadystatechange = null;
                  M.removeChild(q);
                  q = null;
                };
                M.appendChild(q);
              };
            })();
          } else {
            C = function (M) {
              setTimeout(l, 0, M);
            };
          }
          u.setImmediate = function (M) {
            if (typeof M != "function") {
              M = new Function("" + M);
            }
            for (var O = new Array(arguments.length - 1), q = 0; q < O.length; q++) {
              O[q] = arguments[q + 1];
            }
            var ee = {
              callback: M,
              args: O
            };
            x[N] = ee;
            C(N);
            return N++;
          };
          u.clearImmediate = m;
        }
        var M;
        var O;
        function m(M) {
          delete x[M];
        }
        function l(M) {
          if (S) {
            setTimeout(l, 0, M);
          } else {
            var O = x[M];
            if (O) {
              S = true;
              try {
                (function (q) {
                  var ee = q.callback;
                  var G = q.args;
                  switch (G.length) {
                    case 0:
                      ee();
                      break;
                    case 1:
                      ee(G[0]);
                      break;
                    case 2:
                      ee(G[0], G[1]);
                      break;
                    case 3:
                      ee(G[0], G[1], G[2]);
                      break;
                    default:
                      ee.apply(undefined, G);
                  }
                })(O);
              } finally {
                m(M);
                S = false;
              }
            }
          }
        }
      })(typeof self === "undefined" ? y === undefined ? this : y : self);
    }).call(this, I(1), I(5));
  }, function (P, X, I) {
    "use strict";

    I.r(X);
    I.d(X, "scheduler", function () {
      return Ot;
    });
    I.d(X, "Scheduler", function () {
      return Mt;
    });
    var y = I(0);
    I(4);
    var C = function () {
      function t() {
        (function (j, a) {
          if (!(j instanceof a)) {
            throw new TypeError("Cannot call a class as a function");
          }
        })(this, t);
        this._silent_mode = false;
        this.listeners = {};
      }
      if (a = [{
        key: "_silentStart",
        value: function () {
          this._silent_mode = true;
        }
      }, {
        key: "_silentEnd",
        value: function () {
          this._silent_mode = false;
        }
      }]) {
        (function R(t, j) {
          for (var a = 0; a < j.length; a++) {
            var v = j[a];
            v.enumerable = v.enumerable || false;
            v.configurable = true;
            if ("value" in v) {
              v.writable = true;
            }
            Object.defineProperty(t, v.key, v);
          }
        })(t.prototype, a);
      }
      return t;
      var a;
    }();
    function x(t) {
      var j = new C();
      t.attachEvent = function (a, v, _) {
        a = "ev_" + a.toLowerCase();
        j.listeners[a] ||= function (t) {
          var j = {};
          var a = 0;
          function v() {
            var _ = true;
            for (var i in j) {
              var o = j[i].apply(t, arguments);
              _ = _ && o;
            }
            return _;
          }
          v.addEvent = function (_, i) {
            if (typeof _ == "function") {
              var o;
              if (i && i.id) {
                o = i.id;
              } else {
                o = a;
                a++;
              }
              if (i && i.once) {
                var c = _;
                _ = function () {
                  c();
                  v.removeEvent(o);
                };
              }
              j[o] = _;
              return o;
            }
            return false;
          };
          v.removeEvent = function (_) {
            delete j[_];
          };
          v.clear = function () {
            j = {};
          };
          return v;
        }(this);
        if (_ && _.thisObject) {
          v = v.bind(_.thisObject);
        }
        var i = a + ":" + j.listeners[a].addEvent(v, _);
        if (_ && _.id) {
          i = _.id;
        }
        return i;
      };
      t.attachAll = function (a) {
        this.attachEvent("listen_all", a);
      };
      t.callEvent = function (a, v) {
        if (j._silent_mode) {
          return true;
        }
        var _ = "ev_" + a.toLowerCase();
        var i = j.listeners;
        if (i.ev_listen_all) {
          i.ev_listen_all.apply(this, [a].concat(v));
        }
        return !i[_] || i[_].apply(this, v);
      };
      t.checkEvent = function (a) {
        return !!j.listeners["ev_" + a.toLowerCase()];
      };
      t.detachEvent = function (a) {
        if (a) {
          var v = j.listeners;
          for (var _ in v) {
            v[_].removeEvent(a);
          }
          var i = a.split(":");
          v = j.listeners;
          if (i.length === 2) {
            var o = i[0];
            if (v[o]) {
              v[o].removeEvent(i[1]);
            }
          }
        }
      };
      t.detachAllEvents = function () {
        for (var a in j.listeners) {
          j.listeners[a].clear();
        }
      };
    }
    function S(t) {
      return (S = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    var s = {
      event: function (t, j, a) {
        if (t.addEventListener) {
          t.addEventListener(j, a, false);
        } else if (t.attachEvent) {
          t.attachEvent("on" + j, a);
        }
      },
      eventRemove: function (t, j, a) {
        if (t.removeEventListener) {
          t.removeEventListener(j, a, false);
        } else if (t.detachEvent) {
          t.detachEvent("on" + j, a);
        }
      }
    };
    function m(t) {
      return (m = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function l(t) {
      return (l = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function M(t) {
      return (M = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    var O = Date.now();
    function q(t) {
      return !!t && M(t) === "object" && !!t.getFullYear && !!t.getMonth && !!t.getDate;
    }
    var ee = {
      uid: function () {
        return O++;
      },
      mixin: function (t, j, a) {
        for (var v in j) {
          if (t[v] === undefined || a) {
            t[v] = j[v];
          }
        }
        return t;
      },
      copy: function t(j) {
        var a;
        var v;
        var _;
        if (j && M(j) == "object") {
          switch (true) {
            case q(j):
              v = new Date(j);
              break;
            case (_ = j, Array.isArray ? Array.isArray(_) : _ && _.length !== undefined && _.pop && _.push):
              v = new Array(j.length);
              a = 0;
              for (; a < j.length; a++) {
                v[a] = t(j[a]);
              }
              break;
            case function (_) {
              return _ && M(_) === "object" && Function.prototype.toString.call(_.constructor) === "function String() { [native code] }";
            }(j):
              v = new String(j);
              break;
            case function (_) {
              return _ && M(_) === "object" && Function.prototype.toString.call(_.constructor) === "function Number() { [native code] }";
            }(j):
              v = new Number(j);
              break;
            case function (_) {
              return _ && M(_) === "object" && Function.prototype.toString.call(_.constructor) === "function Boolean() { [native code] }";
            }(j):
              v = new Boolean(j);
              break;
            default:
              v = {};
              for (a in j) {
                if (Object.prototype.hasOwnProperty.apply(j, [a])) {
                  v[a] = t(j[a]);
                }
              }
          }
        }
        return v || j;
      },
      defined: function (t) {
        return t !== undefined;
      },
      isDate: q
    };
    function G(t) {
      if (!t) {
        return "";
      }
      var j = t.className || "";
      if (j.baseVal) {
        j = j.baseVal;
      }
      if (!j.indexOf) {
        j = "";
      }
      return j || "";
    }
    function B(t, j, a) {
      if (a === undefined) {
        a = true;
      }
      for (var v = t.target || t.srcElement, _ = ""; v;) {
        if (_ = G(v)) {
          var i = _.indexOf(j);
          if (i >= 0) {
            if (!a) {
              return v;
            }
            var o = i === 0 || !(_.charAt(i - 1) || "").trim();
            var c = i + j.length >= _.length || !_.charAt(i + j.length).trim();
            if (o && c) {
              return v;
            }
          }
        }
        v = v.parentNode;
      }
      return null;
    }
    function A(t) {
      var j = false;
      var a = false;
      if (window.getComputedStyle) {
        var v = window.getComputedStyle(t, null);
        j = v.display;
        a = v.visibility;
      } else if (t.currentStyle) {
        j = t.currentStyle.display;
        a = t.currentStyle.visibility;
      }
      var _ = false;
      var i = B({
        target: t
      }, "dhx_form_repeat", false);
      if (i) {
        _ = i.style.height == "0px";
      }
      _ = _ || !t.offsetHeight;
      return j != "none" && a != "hidden" && !_;
    }
    function H(t) {
      return !isNaN(t.getAttribute("tabindex")) && t.getAttribute("tabindex") * 1 >= 0;
    }
    function $(t) {
      return !{
        a: true,
        area: true
      }[t.nodeName.loLowerCase()] || !!t.getAttribute("href");
    }
    function J(t) {
      return !{
        input: true,
        select: true,
        textarea: true,
        button: true,
        object: true
      }[t.nodeName.toLowerCase()] || !t.hasAttribute("disabled");
    }
    function Q() {
      return document.head.createShadowRoot || document.head.attachShadow;
    }
    function U(t) {
      if (!t || !Q()) {
        return document.body;
      }
      for (; t.parentNode && (t = t.parentNode);) {
        if (t instanceof ShadowRoot) {
          return t.host;
        }
      }
      return document.body;
    }
    var K;
    var F = {
      getAbsoluteLeft: function (t) {
        return this.getOffset(t).left;
      },
      getAbsoluteTop: function (t) {
        return this.getOffset(t).top;
      },
      getOffsetSum: function (t) {
        for (var j = 0, a = 0; t;) {
          j += parseInt(t.offsetTop);
          a += parseInt(t.offsetLeft);
          t = t.offsetParent;
        }
        return {
          top: j,
          left: a
        };
      },
      getOffsetRect: function (t) {
        var j = t.getBoundingClientRect();
        var a = 0;
        var v = 0;
        if (/Mobi/.test(navigator.userAgent)) {
          var _ = document.createElement("div");
          _.style.position = "absolute";
          _.style.left = "0px";
          _.style.top = "0px";
          _.style.width = "1px";
          _.style.height = "1px";
          document.body.appendChild(_);
          var i = _.getBoundingClientRect();
          a = j.top - i.top;
          v = j.left - i.left;
          _.parentNode.removeChild(_);
        } else {
          var o = document.body;
          var c = document.documentElement;
          var h = window.pageYOffset || c.scrollTop || o.scrollTop;
          var D = window.pageXOffset || c.scrollLeft || o.scrollLeft;
          a = j.top + h - (c.clientTop || o.clientTop || 0);
          v = j.left + D - (c.clientLeft || o.clientLeft || 0);
        }
        return {
          top: Math.round(a),
          left: Math.round(v)
        };
      },
      getOffset: function (t) {
        if (t.getBoundingClientRect) {
          return this.getOffsetRect(t);
        } else {
          return this.getOffsetSum(t);
        }
      },
      closest: function (t, j) {
        if (t && j) {
          return K(t, j);
        } else {
          return null;
        }
      },
      insertAfter: function (t, j) {
        if (j.nextSibling) {
          j.parentNode.insertBefore(t, j.nextSibling);
        } else {
          j.parentNode.appendChild(t);
        }
      },
      remove: function (t) {
        if (t && t.parentNode) {
          t.parentNode.removeChild(t);
        }
      },
      getFocusableNodes: function (t) {
        for (var j = t.querySelectorAll(["a[href]", "area[href]", "input", "select", "textarea", "button", "iframe", "object", "embed", "[tabindex]", "[contenteditable]"].join(", ")), a = Array.prototype.slice.call(j, 0), v = 0; v < a.length; v++) {
          a[v].$position = v;
        }
        a.sort(function (i, o) {
          if (i.tabIndex === 0 && o.tabIndex !== 0) {
            return 1;
          } else if (i.tabIndex !== 0 && o.tabIndex === 0) {
            return -1;
          } else if (i.tabIndex === o.tabIndex) {
            return i.$position - o.$position;
          } else if (i.tabIndex < o.tabIndex) {
            return -1;
          } else {
            return 1;
          }
        });
        v = 0;
        for (; v < a.length; v++) {
          var _ = a[v];
          if (!H(_) && !J(_) && !$(_) || !A(_)) {
            a.splice(v, 1);
            v--;
          }
        }
        return a;
      },
      getClassName: G,
      locateCss: B,
      getRootNode: U,
      hasShadowParent: function (t) {
        return !!U(t);
      },
      isShadowDomSupported: Q,
      getActiveElement: function () {
        var t = document.activeElement;
        if (t.shadowRoot) {
          t = t.shadowRoot.activeElement;
        }
        if (t === document.body && document.getSelection) {
          t = document.getSelection().focusNode || document.body;
        }
        return t;
      },
      getRelativeEventPosition: function (t, j) {
        var a = document.documentElement;
        var v = function (_) {
          var i = 0;
          var o = 0;
          var c = 0;
          var h = 0;
          if (_.getBoundingClientRect) {
            var D = _.getBoundingClientRect();
            var V = document.body;
            var T = document.documentElement || document.body.parentNode || document.body;
            var W = window.pageYOffset || T.scrollTop || V.scrollTop;
            var z = window.pageXOffset || T.scrollLeft || V.scrollLeft;
            i = D.top + W - (T.clientTop || V.clientTop || 0);
            o = D.left + z - (T.clientLeft || V.clientLeft || 0);
            c = document.body.offsetWidth - D.right;
            h = document.body.offsetHeight - D.bottom;
          } else {
            for (; _;) {
              i += parseInt(_.offsetTop, 10);
              o += parseInt(_.offsetLeft, 10);
              _ = _.offsetParent;
            }
            c = document.body.offsetWidth - _.offsetWidth - o;
            h = document.body.offsetHeight - _.offsetHeight - i;
          }
          return {
            y: Math.round(i),
            x: Math.round(o),
            width: _.offsetWidth,
            height: _.offsetHeight,
            right: Math.round(c),
            bottom: Math.round(h)
          };
        }(j);
        return {
          x: t.clientX + a.scrollLeft - a.clientLeft - v.x + j.scrollLeft,
          y: t.clientY + a.scrollTop - a.clientTop - v.y + j.scrollTop
        };
      }
    };
    if (Element.prototype.closest) {
      K = function (t, j) {
        return t.closest(j);
      };
    } else {
      var L = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
      K = function (t, j) {
        var a = t;
        do {
          if (L.call(a, j)) {
            return a;
          }
          a = a.parentElement || a.parentNode;
        } while (a !== null && a.nodeType === 1);
        return null;
      };
    }
    var ie = typeof window !== "undefined";
    var Y = {
      isIE: ie && (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0),
      isIE6: ie && !XMLHttpRequest && navigator.userAgent.indexOf("MSIE") >= 0,
      isIE7: ie && navigator.userAgent.indexOf("MSIE 7.0") >= 0 && navigator.userAgent.indexOf("Trident") < 0,
      isIE8: ie && navigator.userAgent.indexOf("MSIE 8.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0,
      isOpera: ie && navigator.userAgent.indexOf("Opera") >= 0,
      isChrome: ie && navigator.userAgent.indexOf("Chrome") >= 0,
      isKHTML: ie && (navigator.userAgent.indexOf("Safari") >= 0 || navigator.userAgent.indexOf("Konqueror") >= 0),
      isFF: ie && navigator.userAgent.indexOf("Firefox") >= 0,
      isIPad: ie && navigator.userAgent.search(/iPad/gi) >= 0,
      isEdge: ie && navigator.userAgent.indexOf("Edge") != -1,
      isNode: !ie || typeof navigator === "undefined"
    };
    var ne = I(6).Promise;
    var le = I(3);
    var ge = I.n(le);
    function Ee(t) {
      return (Ee = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function Qe(t) {
      return (Qe = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function ae(t) {
      return (ae = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    var fe = I(2);
    var Me = I.n(fe);
    function je(t) {
      return (je = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function ye(t) {
      return (ye = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function $e(t) {
      this.serverProcessor = t;
      this.action_param = "!nativeeditor_status";
      this.object = null;
      this.updatedRows = [];
      this.autoUpdate = true;
      this.updateMode = "cell";
      this._tMode = "GET";
      this._headers = null;
      this._payload = null;
      this.post_delim = "_";
      this._waitMode = 0;
      this._in_progress = {};
      this._invalid = {};
      this.messages = [];
      this.styles = {
        updated: "font-weight:bold;",
        inserted: "font-weight:bold;",
        deleted: "text-decoration : line-through;",
        invalid: "background-color:FFE0E0;",
        invalid_cell: "border-bottom:2px solid red;",
        error: "color:red;",
        clear: "font-weight:normal;text-decoration:none;"
      };
      this.enableUTFencoding(true);
      x(this);
      return this;
    }
    function qe(t) {
      return (qe = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    $e.prototype = {
      setTransactionMode: function (t, j) {
        if (ye(t) == "object") {
          this._tMode = t.mode || this._tMode;
          if (t.headers !== undefined) {
            this._headers = t.headers;
          }
          if (t.payload !== undefined) {
            this._payload = t.payload;
          }
          this._tSend = !!j;
        } else {
          this._tMode = t;
          this._tSend = j;
        }
        if (this._tMode == "REST") {
          this._tSend = false;
          this._endnm = true;
        }
        if (this._tMode === "JSON" || this._tMode === "REST-JSON") {
          this._tSend = false;
          this._endnm = true;
          this._serializeAsJson = true;
          this._headers = this._headers || {};
          this._headers["Content-Type"] = "application/json";
        } else if (this._headers && !this._headers["Content-Type"]) {
          this._headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        if (this._tMode === "CUSTOM") {
          this._tSend = false;
          this._endnm = true;
          this._router = t.router;
        }
      },
      escape: function (t) {
        function j(a) {
          return t.apply(this, arguments);
        }
        j.toString = function () {
          return t.toString();
        };
        return j;
      }(function (t) {
        if (this._utf) {
          return encodeURIComponent(t);
        } else {
          return escape(t);
        }
      }),
      enableUTFencoding: function (t) {
        this._utf = !!t;
      },
      setDataColumns: function (t) {
        this._columns = typeof t == "string" ? t.split(",") : t;
      },
      getSyncState: function () {
        return !this.updatedRows.length;
      },
      enableDataNames: function (t) {
        this._endnm = !!t;
      },
      enablePartialDataSend: function (t) {
        this._changed = !!t;
      },
      setUpdateMode: function (t, j) {
        this.autoUpdate = t == "cell";
        this.updateMode = t;
        this.dnd = j;
      },
      ignore: function (t, j) {
        this._silent_mode = true;
        t.call(j || window);
        this._silent_mode = false;
      },
      setUpdated: function (t, j, a) {
        if (!this._silent_mode) {
          var v = this.findRow(t);
          a = a || "updated";
          var _ = this.$scheduler.getUserData(t, this.action_param);
          if (_ && a == "updated") {
            a = _;
          }
          if (j) {
            this.set_invalid(t, false);
            this.updatedRows[v] = t;
            this.$scheduler.setUserData(t, this.action_param, a);
            this._in_progress[t] &&= "wait";
          } else if (!this.is_invalid(t)) {
            this.updatedRows.splice(v, 1);
            this.$scheduler.setUserData(t, this.action_param, "");
          }
          this.markRow(t, j, a);
          if (j && this.autoUpdate) {
            this.sendData(t);
          }
        }
      },
      markRow: function (t, j, a) {
        var v = "";
        var _ = this.is_invalid(t);
        if (_) {
          v = this.styles[_];
          j = true;
        }
        if (this.callEvent("onRowMark", [t, j, a, _]) && (this.$scheduler[this._methods[0]](t, v = this.styles[j ? a : "clear"] + v), _ && _.details)) {
          v += this.styles[_ + "_cell"];
          for (var i = 0; i < _.details.length; i++) {
            if (_.details[i]) {
              this.$scheduler[this._methods[1]](t, i, v);
            }
          }
        }
      },
      getActionByState: function (t) {
        if (t === "inserted") {
          return "create";
        } else if (t === "updated") {
          return "update";
        } else if (t === "deleted") {
          return "delete";
        } else {
          return "update";
        }
      },
      getState: function (t) {
        return this.$scheduler.getUserData(t, this.action_param);
      },
      is_invalid: function (t) {
        return this._invalid[t];
      },
      set_invalid: function (t, j, a) {
        if (a) {
          j = {
            value: j,
            details: a,
            toString: function () {
              return this.value.toString();
            }
          };
        }
        this._invalid[t] = j;
      },
      checkBeforeUpdate: function (t) {
        return true;
      },
      sendData: function (t) {
        if (this.$scheduler.editStop) {
          this.$scheduler.editStop();
        }
        if (t === undefined || this._tSend) {
          return this.sendAllData();
        } else {
          return !this._in_progress[t] && (this.messages = [], (!!this.checkBeforeUpdate(t) || !this.callEvent("onValidationError", [t, this.messages])) && void this._beforeSendData(this._getRowData(t), t));
        }
      },
      _beforeSendData: function (t, j) {
        if (!this.callEvent("onBeforeUpdate", [j, this.getState(j), t])) {
          return false;
        }
        this._sendData(t, j);
      },
      serialize: function (t, j) {
        if (this._serializeAsJson) {
          return this._serializeAsJSON(t);
        }
        if (typeof t == "string") {
          return t;
        }
        if (j !== undefined) {
          return this.serialize_one(t, "");
        }
        var a = [];
        var v = [];
        for (var _ in t) {
          if (t.hasOwnProperty(_)) {
            a.push(this.serialize_one(t[_], _ + this.post_delim));
            v.push(_);
          }
        }
        a.push("ids=" + this.escape(v.join(",")));
        if (this.$scheduler.security_key) {
          a.push("dhx_security=" + this.$scheduler.security_key);
        }
        return a.join("&");
      },
      serialize_one: function (t, j) {
        if (typeof t == "string") {
          return t;
        }
        var a = [];
        var v = "";
        for (var _ in t) {
          if (t.hasOwnProperty(_)) {
            if ((_ == "id" || _ == this.action_param) && this._tMode == "REST") {
              continue;
            }
            v = typeof t[_] == "string" || typeof t[_] == "number" ? t[_] : JSON.stringify(t[_]);
            a.push(this.escape((j || "") + _) + "=" + this.escape(v));
          }
        }
        return a.join("&");
      },
      _applyPayload: function (t) {
        var j = this.$scheduler.ajax;
        if (this._payload) {
          for (var a in this._payload) {
            t = t + j.urlSeparator(t) + this.escape(a) + "=" + this.escape(this._payload[a]);
          }
        }
        return t;
      },
      _sendData: function (t, j) {
        if (t) {
          if (!this.callEvent("onBeforeDataSending", j ? [j, this.getState(j), t] : [null, null, t])) {
            return false;
          }
          if (j) {
            this._in_progress[j] = new Date().valueOf();
          }
          var a = this;
          var v = this.$scheduler.ajax;
          if (this._tMode !== "CUSTOM") {
            var _;
            var i = {
              callback: function (Z) {
                var re = [];
                if (j) {
                  re.push(j);
                } else if (t) {
                  for (var oe in t) {
                    re.push(oe);
                  }
                }
                return a.afterUpdate(a, Z, re);
              },
              headers: a._headers
            };
            var o = this.serverProcessor + (this._user ? v.urlSeparator(this.serverProcessor) + ["dhx_user=" + this._user, "dhx_version=" + this.$scheduler.getUserData(0, "version")].join("&") : "");
            var c = this._applyPayload(o);
            switch (this._tMode) {
              case "GET":
                _ = this._cleanupArgumentsBeforeSend(t);
                i.url = c + v.urlSeparator(c) + this.serialize(_, j);
                i.method = "GET";
                break;
              case "POST":
                _ = this._cleanupArgumentsBeforeSend(t);
                i.url = c;
                i.method = "POST";
                i.data = this.serialize(_, j);
                break;
              case "JSON":
                _ = {};
                var h = this._cleanupItemBeforeSend(t);
                for (var D in h) {
                  if (D !== this.action_param && D !== "id" && D !== "gr_id") {
                    _[D] = h[D];
                  }
                }
                i.url = c;
                i.method = "POST";
                i.data = JSON.stringify({
                  id: j,
                  action: t[this.action_param],
                  data: _
                });
                break;
              case "REST":
              case "REST-JSON":
                c = o.replace(/(&|\?)editing=true/, "");
                _ = "";
                switch (this.getState(j)) {
                  case "inserted":
                    i.method = "POST";
                    i.data = this.serialize(t, j);
                    break;
                  case "deleted":
                    i.method = "DELETE";
                    c = c + (c.slice(-1) === "/" ? "" : "/") + j;
                    break;
                  default:
                    i.method = "PUT";
                    i.data = this.serialize(t, j);
                    c = c + (c.slice(-1) === "/" ? "" : "/") + j;
                }
                i.url = this._applyPayload(c);
            }
            this._waitMode++;
            return v.query(i);
          }
          var V;
          var T = this.getState(j);
          var W = this.getActionByState(T);
          function z(Z) {
            var re = T;
            if (Z && Z.responseText && Z.setRequestHeader) {
              if (Z.status !== 200) {
                re = "error";
              }
              try {
                Z = JSON.parse(Z.responseText);
              } catch {}
            }
            re = re || "updated";
            var oe = j;
            var _e = j;
            if (Z) {
              re = Z.action || re;
              oe = Z.sid || oe;
              _e = Z.id || Z.tid || _e;
            }
            a.afterUpdateCallback(oe, _e, re, Z);
          }
          if (this._router instanceof Function) {
            V = this._router("event", W, t, j);
          } else {
            switch (T) {
              case "inserted":
                V = this._router.event.create(t);
                break;
              case "deleted":
                V = this._router.event.delete(j);
                break;
              default:
                V = this._router.event.update(t, j);
            }
          }
          if (V) {
            if (!V.then && V.id === undefined && V.tid === undefined && V.action === undefined) {
              throw new Error("Incorrect router return value. A Promise or a response object is expected");
            }
            if (V.then) {
              V.then(z).catch(function (Z) {
                z(Z && Z.action ? Z : {
                  action: "error",
                  value: Z
                });
              });
            } else {
              z(V);
            }
          } else {
            z(null);
          }
        }
      },
      sendAllData: function () {
        if (this.updatedRows.length && this.updateMode !== "off") {
          this.messages = [];
          var t = true;
          this._forEachUpdatedRow(function (j) {
            t = t && this.checkBeforeUpdate(j);
          });
          if (!t && !this.callEvent("onValidationError", ["", this.messages])) {
            return false;
          }
          if (this._tSend) {
            this._sendData(this._getAllData());
          } else {
            this._forEachUpdatedRow(function (j) {
              if (!this._in_progress[j]) {
                if (this.is_invalid(j)) {
                  return;
                }
                this._beforeSendData(this._getRowData(j), j);
              }
            });
          }
        }
      },
      _getAllData: function (t) {
        var j = {};
        var a = false;
        this._forEachUpdatedRow(function (v) {
          if (!this._in_progress[v] && !this.is_invalid(v)) {
            var _ = this._getRowData(v);
            if (this.callEvent("onBeforeUpdate", [v, this.getState(v), _])) {
              j[v] = _;
              a = true;
              this._in_progress[v] = new Date().valueOf();
            }
          }
        });
        if (a) {
          return j;
        } else {
          return null;
        }
      },
      findRow: function (t) {
        var j = 0;
        for (j = 0; j < this.updatedRows.length && t != this.updatedRows[j]; j++);
        return j;
      },
      defineAction: function (t, j) {
        this._uActions ||= {};
        this._uActions[t] = j;
      },
      afterUpdateCallback: function (t, j, a, v) {
        if (this.$scheduler) {
          var _ = t;
          var i = a !== "error" && a !== "invalid";
          if (!i) {
            this.set_invalid(t, a);
          }
          if (this._uActions && this._uActions[a] && !this._uActions[a](v)) {
            return delete this._in_progress[_];
          }
          if (this._in_progress[_] !== "wait") {
            this.setUpdated(t, false);
          }
          var o = t;
          switch (a) {
            case "inserted":
            case "insert":
              if (j != t) {
                this.setUpdated(t, false);
                this.$scheduler[this._methods[2]](t, j);
                t = j;
              }
              break;
            case "delete":
            case "deleted":
              this.$scheduler.setUserData(t, this.action_param, "true_deleted");
              this.$scheduler[this._methods[3]](t, j);
              delete this._in_progress[_];
              return this.callEvent("onAfterUpdate", [t, a, j, v]);
          }
          if (this._in_progress[_] !== "wait") {
            if (i) {
              this.$scheduler.setUserData(t, this.action_param, "");
            }
            delete this._in_progress[_];
          } else {
            delete this._in_progress[_];
            this.setUpdated(j, true, this.$scheduler.getUserData(t, this.action_param));
          }
          this.callEvent("onAfterUpdate", [o, a, j, v]);
        }
      },
      _errorResponse: function (t, j) {
        if (this.$scheduler && this.$scheduler.callEvent) {
          this.$scheduler.callEvent("onSaveError", [j, t.xmlDoc]);
        }
        return this.cleanUpdate(j);
      },
      _setDefaultTransactionMode: function () {
        if (this.serverProcessor) {
          this.setTransactionMode("POST", true);
          this.serverProcessor += (this.serverProcessor.indexOf("?") !== -1 ? "&" : "?") + "editing=true";
          this._serverProcessor = this.serverProcessor;
        }
      },
      afterUpdate: function (t, j, a) {
        var v = this.$scheduler.ajax;
        if (j.xmlDoc.status === 200) {
          var _;
          try {
            _ = JSON.parse(j.xmlDoc.responseText);
          } catch {
            if (!j.xmlDoc.responseText.length) {
              _ = {};
            }
          }
          if (_) {
            var i = _.action || this.getState(a) || "updated";
            var o = _.sid || a[0];
            var c = _.tid || a[0];
            t.afterUpdateCallback(o, c, i, _);
            t.finalizeUpdate();
            return;
          }
          var h = v.xmltop("data", j.xmlDoc);
          if (!h) {
            return this._errorResponse(j, a);
          }
          var D = v.xpath("//data/action", h);
          if (!D.length) {
            return this._errorResponse(j, a);
          }
          for (var V = 0; V < D.length; V++) {
            var T = D[V];
            i = T.getAttribute("type");
            o = T.getAttribute("sid");
            c = T.getAttribute("tid");
            t.afterUpdateCallback(o, c, i, T);
          }
          t.finalizeUpdate();
        } else {
          this._errorResponse(j, a);
        }
      },
      cleanUpdate: function (t) {
        if (t) {
          for (var j = 0; j < t.length; j++) {
            delete this._in_progress[t[j]];
          }
        }
      },
      finalizeUpdate: function () {
        if (this._waitMode) {
          this._waitMode--;
        }
        this.callEvent("onAfterUpdateFinish", []);
        if (!this.updatedRows.length) {
          this.callEvent("onFullSync", []);
        }
      },
      init: function (t) {
        if (!this._initialized) {
          this.$scheduler = t;
          if (this.$scheduler._dp_init) {
            this.$scheduler._dp_init(this);
          }
          this._setDefaultTransactionMode();
          this._methods = this._methods || ["_set_event_text_style", "", "_dp_change_event_id", "_dp_hook_delete"];
          v = this;
          (a = this.$scheduler)._validId = function (_) {
            return true;
          };
          a.setUserData = function (_, i, o) {
            if (_) {
              var c = this.getEvent(_);
              if (c) {
                c[i] = o;
              }
            } else {
              this._userdata[i] = o;
            }
          };
          a.getUserData = function (_, i) {
            if (_) {
              var o = this.getEvent(_);
              if (o) {
                return o[i];
              } else {
                return null;
              }
            }
            return this._userdata[i];
          };
          a._set_event_text_style = function (_, i) {
            if (a.getEvent(_)) {
              this.for_rendered(_, function (c) {
                c.style.cssText += ";" + i;
              });
              var o = this.getEvent(_);
              o._text_style = i;
              this.event_updated(o);
            }
          };
          a._update_callback = function (_, i) {
            var o = a._xmlNodeToJSON(_.firstChild);
            if (o.rec_type == "none") {
              o.rec_pattern = "none";
            }
            o.text = o.text || o._tagvalue;
            o.start_date = a._helpers.parseDate(o.start_date);
            o.end_date = a._helpers.parseDate(o.end_date);
            a.addEvent(o);
            if (a._add_rec_marker) {
              a.setCurrentView();
            }
          };
          a._dp_change_event_id = function (_, i) {
            if (a.getEvent(_)) {
              a.changeEventId(_, i);
            }
          };
          a._dp_hook_delete = function (_, i) {
            if (a.getEvent(_)) {
              if (i && _ != i) {
                if (this.getUserData(_, v.action_param) == "true_deleted") {
                  this.setUserData(_, v.action_param, "updated");
                }
                this.changeEventId(_, i);
              }
              return this.deleteEvent(i, true);
            }
          };
          a.setDp = function () {
            this._dp = v;
          };
          a.setDp();
          var j = new function (a, v) {
            this.$scheduler = a;
            this.$dp = v;
            this._dataProcessorHandlers = [];
            this.attach = function () {
              var _ = this.$dp;
              var i = this.$scheduler;
              this._dataProcessorHandlers.push(i.attachEvent("onEventAdded", function (o) {
                if (!this._loading && this._validId(o)) {
                  _.setUpdated(o, true, "inserted");
                }
              }));
              this._dataProcessorHandlers.push(i.attachEvent("onConfirmedBeforeEventDelete", function (o) {
                if (this._validId(o)) {
                  var c = _.getState(o);
                  if (c == "inserted" || this._new_event) {
                    _.setUpdated(o, false);
                    return true;
                  } else {
                    return c != "deleted" && (c == "true_deleted" || (_.setUpdated(o, true, "deleted"), false));
                  }
                }
              }));
              this._dataProcessorHandlers.push(i.attachEvent("onEventChanged", function (o) {
                if (!this._loading && this._validId(o)) {
                  _.setUpdated(o, true, "updated");
                }
              }));
              this._dataProcessorHandlers.push(i.attachEvent("onClearAll", function () {
                _._in_progress = {};
                _._invalid = {};
                _.updatedRows = [];
                _._waitMode = 0;
              }));
              _.attachEvent("insertCallback", i._update_callback);
              _.attachEvent("updateCallback", i._update_callback);
              _.attachEvent("deleteCallback", function (o, c) {
                if (i.getEvent(c)) {
                  i.setUserData(c, this.action_param, "true_deleted");
                  i.deleteEvent(c);
                } else if (i._add_rec_marker) {
                  i._update_callback(o, c);
                }
              });
            };
            this.detach = function () {
              for (var _ in this._dataProcessorHandlers) {
                this.$scheduler.detachEvent(this._dataProcessorHandlers[_]);
              }
              this._dataProcessorHandlers = [];
            };
          }(this.$scheduler, this);
          j.attach();
          this.attachEvent("onDestroy", function () {
            delete this._getRowData;
            delete this.$scheduler._dp;
            delete this.$scheduler._dataprocessor;
            delete this.$scheduler._set_event_text_style;
            delete this.$scheduler._dp_change_event_id;
            delete this.$scheduler._dp_hook_delete;
            delete this.$scheduler;
            j.detach();
          });
          this.$scheduler.callEvent("onDataProcessorReady", [this]);
          this._initialized = true;
          t._dataprocessor = this;
        }
        var a;
        var v;
      },
      setOnAfterUpdate: function (t) {
        this.attachEvent("onAfterUpdate", t);
      },
      setOnBeforeUpdateHandler: function (t) {
        this.attachEvent("onBeforeDataSending", t);
      },
      setAutoUpdate: function (t, j) {
        t = t || 2000;
        this._user = j || new Date().valueOf();
        this._need_update = false;
        this._update_busy = false;
        this.attachEvent("onAfterUpdate", function (v, _, i, o) {
          this.afterAutoUpdate(v, _, i, o);
        });
        this.attachEvent("onFullSync", function () {
          this.fullSync();
        });
        var a = this;
        y.a.setInterval(function () {
          a.loadUpdate();
        }, t);
      },
      afterAutoUpdate: function (t, j, a, v) {
        return j != "collision" || (this._need_update = true, false);
      },
      fullSync: function () {
        if (this._need_update) {
          this._need_update = false;
          this.loadUpdate();
        }
        return true;
      },
      getUpdates: function (t, j) {
        var a = this.$scheduler.ajax;
        if (this._update_busy) {
          return false;
        }
        this._update_busy = true;
        a.get(t, j);
      },
      _getXmlNodeValue: function (t) {
        if (t.firstChild) {
          return t.firstChild.nodeValue;
        } else {
          return "";
        }
      },
      loadUpdate: function () {
        var t = this;
        var j = this.$scheduler.ajax;
        var a = this.$scheduler.getUserData(0, "version");
        var v = this.serverProcessor + j.urlSeparator(this.serverProcessor) + ["dhx_user=" + this._user, "dhx_version=" + a].join("&");
        v = v.replace("editing=true&", "");
        this.getUpdates(v, function (_) {
          var i = j.xpath("//userdata", _);
          t.$scheduler.setUserData(0, "version", t._getXmlNodeValue(i[0]));
          var o = j.xpath("//update", _);
          if (o.length) {
            t._silent_mode = true;
            for (var c = 0; c < o.length; c++) {
              var h = o[c].getAttribute("status");
              var D = o[c].getAttribute("id");
              var V = o[c].getAttribute("parent");
              switch (h) {
                case "inserted":
                  this.callEvent("insertCallback", [o[c], D, V]);
                  break;
                case "updated":
                  this.callEvent("updateCallback", [o[c], D, V]);
                  break;
                case "deleted":
                  this.callEvent("deleteCallback", [o[c], D, V]);
              }
            }
            t._silent_mode = false;
          }
          t._update_busy = false;
          t = null;
        });
      },
      destructor: function () {
        this.callEvent("onDestroy", []);
        this.detachAllEvents();
        this.updatedRows = [];
        this._in_progress = {};
        this._invalid = {};
        this._headers = null;
        this._payload = null;
        delete this._initialized;
      },
      url: function (t) {
        this.serverProcessor = this._serverProcessor = t;
      },
      _serializeAsJSON: function (t) {
        if (typeof t == "string") {
          return t;
        }
        var j = this.$scheduler.utils.copy(t);
        if (this._tMode === "REST-JSON") {
          delete j.id;
          delete j[this.action_param];
        }
        return JSON.stringify(j);
      },
      _cleanupArgumentsBeforeSend: function (t) {
        var j;
        if (t[this.action_param] === undefined) {
          j = {};
          for (var a in t) {
            j[a] = this._cleanupArgumentsBeforeSend(t[a]);
          }
        } else {
          j = this._cleanupItemBeforeSend(t);
        }
        return j;
      },
      _cleanupItemBeforeSend: function (t) {
        var j = null;
        if (t) {
          if (t[this.action_param] === "deleted") {
            (j = {}).id = t.id;
            j[this.action_param] = t[this.action_param];
          } else {
            j = t;
          }
        }
        return j;
      },
      _forEachUpdatedRow: function (t) {
        for (var j = this.updatedRows.slice(), a = 0; a < j.length; a++) {
          var v = j[a];
          if (this.$scheduler.getUserData(v, this.action_param)) {
            t.call(this, v);
          }
        }
      },
      _prepareDataItem: function (t) {
        var j = {};
        var a = this.$scheduler;
        var v = a.utils.copy(t);
        for (var _ in v) {
          if (_.indexOf("_") !== 0 && v[_]) {
            j[_] = v[_].getUTCFullYear ? a._helpers.formatDate(v[_]) : ye(v[_]) == "object" ? this._prepareDataItem(v[_]) : v[_] === null ? "" : v[_];
          }
        }
        j[this.action_param] = a.getUserData(t.id, this.action_param);
        return j;
      },
      _getRowData: function (t) {
        var j = this.$scheduler.getEvent(t);
        j ||= {
          id: t
        };
        return this._prepareDataItem(j);
      }
    };
    var de = {
      date: {
        month_full: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول"],
        month_short: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"],
        day_full: ["الأحد", "الأثنين", "ألثلاثاء", "الأربعاء", "ألحميس", "ألجمعة", "السبت"],
        day_short: ["احد", "اثنين", "ثلاثاء", "اربعاء", "خميس", "جمعة", "سبت"]
      },
      labels: {
        dhx_cal_today_button: "اليوم",
        day_tab: "يوم",
        week_tab: "أسبوع",
        month_tab: "شهر",
        new_event: "حدث جديد",
        icon_save: "اخزن",
        icon_cancel: "الغاء",
        icon_details: "تفاصيل",
        icon_edit: "تحرير",
        icon_delete: "حذف",
        confirm_closing: "التغييرات سوف تضيع, هل انت متأكد؟",
        confirm_deleting: "الحدث سيتم حذفها نهائيا ، هل أنت متأكد؟",
        section_description: "الوصف",
        section_time: "الفترة الزمنية",
        full_day: "طوال اليوم",
        confirm_recurring: "هل تريد تحرير مجموعة كاملة من الأحداث المتكررة؟",
        section_recurring: "تكرار الحدث",
        button_recurring: "تعطيل",
        button_recurring_open: "تمكين",
        button_edit_series: "تحرير سلسلة",
        button_edit_occurrence: "تعديل نسخة",
        grid_tab: "جدول",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute"
      }
    };
    var pe = {
      date: {
        month_full: ["Студзень", "Люты", "Сакавік", "Красавік", "Maй", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Снежань"],
        month_short: ["Студз", "Лют", "Сак", "Крас", "Maй", "Чэр", "Ліп", "Жнів", "Вер", "Каст", "Ліст", "Снеж"],
        day_full: ["Нядзеля", "Панядзелак", "Аўторак", "Серада", "Чацвер", "Пятніца", "Субота"],
        day_short: ["Нд", "Пн", "Аўт", "Ср", "Чцв", "Пт", "Сб"]
      },
      labels: {
        dhx_cal_today_button: "Сёння",
        day_tab: "Дзень",
        week_tab: "Тыдзень",
        month_tab: "Месяц",
        new_event: "Новая падзея",
        icon_save: "Захаваць",
        icon_cancel: "Адмяніць",
        icon_details: "Дэталі",
        icon_edit: "Змяніць",
        icon_delete: "Выдаліць",
        confirm_closing: "",
        confirm_deleting: "Падзея будзе выдалена незваротна, працягнуць?",
        section_description: "Апісанне",
        section_time: "Перыяд часу",
        full_day: "Увесь дзень",
        confirm_recurring: "Вы хочаце змяніць усю серыю паўтаральных падзей?",
        section_recurring: "Паўтарэнне",
        button_recurring: "Адключана",
        button_recurring_open: "Уключана",
        button_edit_series: "Рэдагаваць серыю",
        button_edit_occurrence: "Рэдагаваць асобнік",
        agenda_tab: "Спіс",
        date: "Дата",
        description: "Апісанне",
        year_tab: "Год",
        week_agenda_tab: "Спіс",
        grid_tab: "Спic",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Дзень",
        repeat_radio_week: "Тыдзень",
        repeat_radio_month: "Месяц",
        repeat_radio_year: "Год",
        repeat_radio_day_type: "Кожны",
        repeat_text_day_count: "дзень",
        repeat_radio_day_type2: "Кожны працоўны дзень",
        repeat_week: " Паўтараць кожны",
        repeat_text_week_count: "тыдзень",
        repeat_radio_month_type: "Паўтараць",
        repeat_radio_month_start: "",
        repeat_text_month_day: " чысла кожнага",
        repeat_text_month_count: "месяцу",
        repeat_text_month_count2_before: "кожны ",
        repeat_text_month_count2_after: "месяц",
        repeat_year_label: "",
        select_year_day2: "",
        repeat_text_year_day: "день",
        select_year_month: "",
        repeat_radio_end: "Без даты заканчэння",
        repeat_text_occurences_count: "паўтораў",
        repeat_radio_end2: "",
        repeat_radio_end3: "Да ",
        month_for_recurring: ["Студзеня", "Лютага", "Сакавіка", "Красавіка", "Мая", "Чэрвеня", "Ліпeня", "Жніўня", "Верасня", "Кастрычніка", "Лістапада", "Снежня"],
        day_for_recurring: ["Нядзелю", "Панядзелак", "Аўторак", "Сераду", "Чацвер", "Пятніцу", "Суботу"]
      }
    };
    var xe = {
      date: {
        month_full: ["Gener", "Febrer", "Març", "Abril", "Maig", "Juny", "Juliol", "Agost", "Setembre", "Octubre", "Novembre", "Desembre"],
        month_short: ["Gen", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Des"],
        day_full: ["Diumenge", "Dilluns", "Dimarts", "Dimecres", "Dijous", "Divendres", "Dissabte"],
        day_short: ["Dg", "Dl", "Dm", "Dc", "Dj", "Dv", "Ds"]
      },
      labels: {
        dhx_cal_today_button: "Hui",
        day_tab: "Dia",
        week_tab: "Setmana",
        month_tab: "Mes",
        new_event: "Nou esdeveniment",
        icon_save: "Guardar",
        icon_cancel: "Cancel·lar",
        icon_details: "Detalls",
        icon_edit: "Editar",
        icon_delete: "Esborrar",
        confirm_closing: "",
        confirm_deleting: "L'esdeveniment s'esborrarà definitivament, continuar ?",
        section_description: "Descripció",
        section_time: "Periode de temps",
        full_day: "Tot el dia",
        confirm_recurring: "¿Desitja modificar el conjunt d'esdeveniments repetits?",
        section_recurring: "Repeteixca l'esdeveniment",
        button_recurring: "Impedit",
        button_recurring_open: "Permés",
        button_edit_series: "Edit sèrie",
        button_edit_occurrence: "Edita Instància",
        agenda_tab: "Agenda",
        date: "Data",
        description: "Descripció",
        year_tab: "Any",
        week_agenda_tab: "Agenda",
        grid_tab: "Taula",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute"
      }
    };
    var Xe = {
      date: {
        month_full: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
        month_short: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        day_full: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
        day_short: ["日", "一", "二", "三", "四", "五", "六"]
      },
      labels: {
        dhx_cal_today_button: "今天",
        day_tab: "日",
        week_tab: "周",
        month_tab: "月",
        new_event: "新建日程",
        icon_save: "保存",
        icon_cancel: "关闭",
        icon_details: "详细",
        icon_edit: "编辑",
        icon_delete: "删除",
        confirm_closing: "请确认是否撤销修改!",
        confirm_deleting: "是否删除日程?",
        section_description: "描述",
        section_time: "时间范围",
        full_day: "整天",
        confirm_recurring: "请确认是否将日程设为重复模式?",
        section_recurring: "重复周期",
        button_recurring: "禁用",
        button_recurring_open: "启用",
        button_edit_series: "编辑系列",
        button_edit_occurrence: "编辑实例",
        agenda_tab: "议程",
        date: "日期",
        description: "说明",
        year_tab: "今年",
        week_agenda_tab: "议程",
        grid_tab: "电网",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "按天",
        repeat_radio_week: "按周",
        repeat_radio_month: "按月",
        repeat_radio_year: "按年",
        repeat_radio_day_type: "每",
        repeat_text_day_count: "天",
        repeat_radio_day_type2: "每个工作日",
        repeat_week: " 重复 每",
        repeat_text_week_count: "星期的:",
        repeat_radio_month_type: "重复",
        repeat_radio_month_start: "在",
        repeat_text_month_day: "日 每",
        repeat_text_month_count: "月",
        repeat_text_month_count2_before: "每",
        repeat_text_month_count2_after: "月",
        repeat_year_label: "在",
        select_year_day2: "的",
        repeat_text_year_day: "日",
        select_year_month: "月",
        repeat_radio_end: "无结束日期",
        repeat_text_occurences_count: "次结束",
        repeat_radio_end2: "重复",
        repeat_radio_end3: "结束于",
        month_for_recurring: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
        day_for_recurring: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
      }
    };
    var rt = {
      date: {
        month_full: ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
        month_short: ["Led", "Ún", "Bře", "Dub", "Kvě", "Čer", "Čec", "Srp", "Září", "Říj", "List", "Pro"],
        day_full: ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"],
        day_short: ["Ne", "Po", "Út", "St", "Čt", "Pá", "So"]
      },
      labels: {
        dhx_cal_today_button: "Dnes",
        day_tab: "Den",
        week_tab: "Týden",
        month_tab: "Měsíc",
        new_event: "Nová událost",
        icon_save: "Uložit",
        icon_cancel: "Zpět",
        icon_details: "Detail",
        icon_edit: "Edituj",
        icon_delete: "Smazat",
        confirm_closing: "",
        confirm_deleting: "Událost bude trvale smazána, opravdu?",
        section_description: "Poznámky",
        section_time: "Doba platnosti",
        confirm_recurring: "Přejete si upravit celou řadu opakovaných událostí?",
        section_recurring: "Opakování události",
        button_recurring: "Vypnuto",
        button_recurring_open: "Zapnuto",
        button_edit_series: "Edit series",
        button_edit_occurrence: "Upravit instance",
        agenda_tab: "Program",
        date: "Datum",
        description: "Poznámka",
        year_tab: "Rok",
        full_day: "Full day",
        week_agenda_tab: "Program",
        grid_tab: "Mřížka",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Denně",
        repeat_radio_week: "Týdně",
        repeat_radio_month: "Měsíčně",
        repeat_radio_year: "Ročně",
        repeat_radio_day_type: "každý",
        repeat_text_day_count: "Den",
        repeat_radio_day_type2: "pracovní dny",
        repeat_week: "Opakuje každých",
        repeat_text_week_count: "Týdnů na:",
        repeat_radio_month_type: "u každého",
        repeat_radio_month_start: "na",
        repeat_text_month_day: "Den každého",
        repeat_text_month_count: "Měsíc",
        repeat_text_month_count2_before: "každý",
        repeat_text_month_count2_after: "Měsíc",
        repeat_year_label: "na",
        select_year_day2: "v",
        repeat_text_year_day: "Den v",
        select_year_month: "",
        repeat_radio_end: "bez data ukončení",
        repeat_text_occurences_count: "Události",
        repeat_radio_end2: "po",
        repeat_radio_end3: "Konec",
        month_for_recurring: ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
        day_for_recurring: ["Neděle ", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"]
      }
    };
    var tt = {
      date: {
        month_full: ["Januar", "Februar", "Marts", "April", "Maj", "Juni", "Juli", "August", "September", "Oktober", "November", "December"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        day_full: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"],
        day_short: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"]
      },
      labels: {
        dhx_cal_today_button: "Idag",
        day_tab: "Dag",
        week_tab: "Uge",
        month_tab: "Måned",
        new_event: "Ny begivenhed",
        icon_save: "Gem",
        icon_cancel: "Fortryd",
        icon_details: "Detaljer",
        icon_edit: "Tilret",
        icon_delete: "Slet",
        confirm_closing: "Dine rettelser vil gå tabt.. Er dy sikker?",
        confirm_deleting: "Bigivenheden vil blive slettet permanent. Er du sikker?",
        section_description: "Beskrivelse",
        section_time: "Tidsperiode",
        confirm_recurring: "Vil du tilrette hele serien af gentagne begivenheder?",
        section_recurring: "Gentag begivenhed",
        button_recurring: "Frakoblet",
        button_recurring_open: "Tilkoblet",
        button_edit_series: "Rediger serien",
        button_edit_occurrence: "Rediger en kopi",
        agenda_tab: "Dagsorden",
        date: "Dato",
        description: "Beskrivelse",
        year_tab: "År",
        week_agenda_tab: "Dagsorden",
        grid_tab: "Grid",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Daglig",
        repeat_radio_week: "Ugenlig",
        repeat_radio_month: "Månedlig",
        repeat_radio_year: "Årlig",
        repeat_radio_day_type: "Hver",
        repeat_text_day_count: "dag",
        repeat_radio_day_type2: "På hver arbejdsdag",
        repeat_week: " Gentager sig hver",
        repeat_text_week_count: "uge på følgende dage:",
        repeat_radio_month_type: "Hver den",
        repeat_radio_month_start: "Den",
        repeat_text_month_day: " i hver",
        repeat_text_month_count: "måned",
        repeat_text_month_count2_before: "hver",
        repeat_text_month_count2_after: "måned",
        repeat_year_label: "Den",
        select_year_day2: "i",
        repeat_text_year_day: "dag i",
        select_year_month: "",
        repeat_radio_end: "Ingen slutdato",
        repeat_text_occurences_count: "gentagelse",
        repeat_radio_end2: "Efter",
        repeat_radio_end3: "Slut",
        month_for_recurring: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        day_for_recurring: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"]
      }
    };
    var Re = {
      date: {
        month_full: [" Januar", " Februar", " März ", " April", " Mai", " Juni", " Juli", " August", " September ", " Oktober", " November ", " Dezember"],
        month_short: ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
        day_full: ["Sonntag", "Montag", "Dienstag", " Mittwoch", " Donnerstag", "Freitag", "Samstag"],
        day_short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
      },
      labels: {
        dhx_cal_today_button: "Heute",
        day_tab: "Tag",
        week_tab: "Woche",
        month_tab: "Monat",
        new_event: "neuer Eintrag",
        icon_save: "Speichern",
        icon_cancel: "Abbrechen",
        icon_details: "Details",
        icon_edit: "Ändern",
        icon_delete: "Löschen",
        confirm_closing: "",
        confirm_deleting: "Der Eintrag wird gelöscht",
        section_description: "Beschreibung",
        section_time: "Zeitspanne",
        full_day: "Ganzer Tag",
        confirm_recurring: "Wollen Sie alle Einträge bearbeiten oder nur diesen einzelnen Eintrag?",
        section_recurring: "Wiederholung",
        button_recurring: "Aus",
        button_recurring_open: "An",
        button_edit_series: "Bearbeiten Sie die Serie",
        button_edit_occurrence: "Bearbeiten Sie eine Kopie",
        agenda_tab: "Agenda",
        date: "Datum",
        description: "Beschreibung",
        year_tab: "Jahre",
        week_agenda_tab: "Agenda",
        grid_tab: "Grid",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Täglich",
        repeat_radio_week: "Wöchentlich",
        repeat_radio_month: "Monatlich",
        repeat_radio_year: "Jährlich",
        repeat_radio_day_type: "jeden",
        repeat_text_day_count: "Tag",
        repeat_radio_day_type2: "an jedem Arbeitstag",
        repeat_week: " Wiederholt sich jede",
        repeat_text_week_count: "Woche am:",
        repeat_radio_month_type: "an jedem",
        repeat_radio_month_start: "am",
        repeat_text_month_day: "Tag eines jeden",
        repeat_text_month_count: "Monats",
        repeat_text_month_count2_before: "jeden",
        repeat_text_month_count2_after: "Monats",
        repeat_year_label: "am",
        select_year_day2: "im",
        repeat_text_year_day: "Tag im",
        select_year_month: "",
        repeat_radio_end: "kein Enddatum",
        repeat_text_occurences_count: "Ereignissen",
        repeat_radio_end3: "Schluß",
        repeat_radio_end2: "nach",
        month_for_recurring: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        day_for_recurring: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"]
      }
    };
    var ot = {
      date: {
        month_full: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάϊος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"],
        month_short: ["ΙΑΝ", "ΦΕΒ", "ΜΑΡ", "ΑΠΡ", "ΜΑΙ", "ΙΟΥΝ", "ΙΟΥΛ", "ΑΥΓ", "ΣΕΠ", "ΟΚΤ", "ΝΟΕ", "ΔΕΚ"],
        day_full: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Κυριακή"],
        day_short: ["ΚΥ", "ΔΕ", "ΤΡ", "ΤΕ", "ΠΕ", "ΠΑ", "ΣΑ"]
      },
      labels: {
        dhx_cal_today_button: "Σήμερα",
        day_tab: "Ημέρα",
        week_tab: "Εβδομάδα",
        month_tab: "Μήνας",
        new_event: "Νέο έργο",
        icon_save: "Αποθήκευση",
        icon_cancel: "Άκυρο",
        icon_details: "Λεπτομέρειες",
        icon_edit: "Επεξεργασία",
        icon_delete: "Διαγραφή",
        confirm_closing: "",
        confirm_deleting: "Το έργο θα διαγραφεί οριστικά. Θέλετε να συνεχίσετε;",
        section_description: "Περιγραφή",
        section_time: "Χρονική περίοδος",
        full_day: "Πλήρης Ημέρα",
        confirm_recurring: "Θέλετε να επεξεργασθείτε ολόκληρη την ομάδα των επαναλαμβανόμενων έργων;",
        section_recurring: "Επαναλαμβανόμενο έργο",
        button_recurring: "Ανενεργό",
        button_recurring_open: "Ενεργό",
        button_edit_series: "Επεξεργαστείτε τη σειρά",
        button_edit_occurrence: "Επεξεργασία ένα αντίγραφο",
        agenda_tab: "Ημερήσια Διάταξη",
        date: "Ημερομηνία",
        description: "Περιγραφή",
        year_tab: "Έτος",
        week_agenda_tab: "Ημερήσια Διάταξη",
        grid_tab: "Πλέγμα",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Ημερησίως",
        repeat_radio_week: "Εβδομαδιαίως",
        repeat_radio_month: "Μηνιαίως",
        repeat_radio_year: "Ετησίως",
        repeat_radio_day_type: "Κάθε",
        repeat_text_day_count: "ημέρα",
        repeat_radio_day_type2: "Κάθε εργάσιμη",
        repeat_week: " Επανάληψη κάθε",
        repeat_text_week_count: "εβδομάδα τις επόμενες ημέρες:",
        repeat_radio_month_type: "Επανάληψη",
        repeat_radio_month_start: "Την",
        repeat_text_month_day: "ημέρα κάθε",
        repeat_text_month_count: "μήνα",
        repeat_text_month_count2_before: "κάθε",
        repeat_text_month_count2_after: "μήνα",
        repeat_year_label: "Την",
        select_year_day2: "του",
        repeat_text_year_day: "ημέρα",
        select_year_month: "μήνα",
        repeat_radio_end: "Χωρίς ημερομηνία λήξεως",
        repeat_text_occurences_count: "επαναλήψεις",
        repeat_radio_end3: "Λήγει την",
        repeat_radio_end2: "Μετά από",
        month_for_recurring: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάϊος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"],
        day_for_recurring: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"]
      }
    };
    var pt = {
      date: {
        month_full: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_full: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        day_short: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
      },
      labels: {
        dhx_cal_today_button: "Today",
        day_tab: "Day",
        week_tab: "Week",
        month_tab: "Month",
        new_event: "New event",
        icon_save: "Save",
        icon_cancel: "Cancel",
        icon_details: "Details",
        icon_edit: "Edit",
        icon_delete: "Delete",
        confirm_closing: "",
        confirm_deleting: "Event will be deleted permanently, are you sure?",
        section_description: "Description",
        section_time: "Time period",
        full_day: "Full day",
        confirm_recurring: "Do you want to edit the whole set of repeated events?",
        section_recurring: "Repeat event",
        button_recurring: "Disabled",
        button_recurring_open: "Enabled",
        button_edit_series: "Edit series",
        button_edit_occurrence: "Edit occurrence",
        agenda_tab: "Agenda",
        date: "Date",
        description: "Description",
        year_tab: "Year",
        week_agenda_tab: "Agenda",
        grid_tab: "Grid",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Daily",
        repeat_radio_week: "Weekly",
        repeat_radio_month: "Monthly",
        repeat_radio_year: "Yearly",
        repeat_radio_day_type: "Every",
        repeat_text_day_count: "day",
        repeat_radio_day_type2: "Every workday",
        repeat_week: " Repeat every",
        repeat_text_week_count: "week next days:",
        repeat_radio_month_type: "Repeat",
        repeat_radio_month_start: "On",
        repeat_text_month_day: "day every",
        repeat_text_month_count: "month",
        repeat_text_month_count2_before: "every",
        repeat_text_month_count2_after: "month",
        repeat_year_label: "On",
        select_year_day2: "of",
        repeat_text_year_day: "day",
        select_year_month: "month",
        repeat_radio_end: "No end date",
        repeat_text_occurences_count: "occurrences",
        repeat_radio_end2: "After",
        repeat_radio_end3: "End by",
        month_for_recurring: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        day_for_recurring: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
      }
    };
    var ct = {
      date: {
        month_full: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
        month_short: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
        day_full: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
        day_short: ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"]
      },
      labels: {
        dhx_cal_today_button: "Hoy",
        day_tab: "Día",
        week_tab: "Semana",
        month_tab: "Mes",
        new_event: "Nuevo evento",
        icon_save: "Guardar",
        icon_cancel: "Cancelar",
        icon_details: "Detalles",
        icon_edit: "Editar",
        icon_delete: "Eliminar",
        confirm_closing: "",
        confirm_deleting: "El evento se borrará definitivamente, ¿continuar?",
        section_description: "Descripción",
        section_time: "Período",
        full_day: "Todo el día",
        confirm_recurring: "¿Desea modificar el conjunto de eventos repetidos?",
        section_recurring: "Repita el evento",
        button_recurring: "Impedido",
        button_recurring_open: "Permitido",
        button_edit_series: "Editar la serie",
        button_edit_occurrence: "Editar este evento",
        agenda_tab: "Día",
        date: "Fecha",
        description: "Descripción",
        year_tab: "Año",
        week_agenda_tab: "Día",
        grid_tab: "Reja",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Diariamente",
        repeat_radio_week: "Semanalmente",
        repeat_radio_month: "Mensualmente",
        repeat_radio_year: "Anualmente",
        repeat_radio_day_type: "Cada",
        repeat_text_day_count: "dia",
        repeat_radio_day_type2: "Cada jornada de trabajo",
        repeat_week: " Repetir cada",
        repeat_text_week_count: "semana:",
        repeat_radio_month_type: "Repita",
        repeat_radio_month_start: "El",
        repeat_text_month_day: "dia cada ",
        repeat_text_month_count: "mes",
        repeat_text_month_count2_before: "cada",
        repeat_text_month_count2_after: "mes",
        repeat_year_label: "El",
        select_year_day2: "del",
        repeat_text_year_day: "dia",
        select_year_month: "mes",
        repeat_radio_end: "Sin fecha de finalización",
        repeat_text_occurences_count: "ocurrencias",
        repeat_radio_end3: "Fin",
        repeat_radio_end2: "Después de",
        month_for_recurring: ["Enero", "Febrero", "Маrzo", "Аbril", "Mayo", "Junio", "Julio", "Аgosto", "Setiembre", "Octubre", "Noviembre", "Diciembre"],
        day_for_recurring: ["Domingo", "Lunes", "Martes", "Miércoles", "Jeuves", "Viernes", "Sabado"]
      }
    };
    var st = {
      date: {
        month_full: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kes&auml;kuu", "Hein&auml;kuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"],
        month_short: ["Tam", "Hel", "Maa", "Huh", "Tou", "Kes", "Hei", "Elo", "Syy", "Lok", "Mar", "Jou"],
        day_full: ["Sunnuntai", "Maanantai", "Tiistai", "Keskiviikko", "Torstai", "Perjantai", "Lauantai"],
        day_short: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"]
      },
      labels: {
        dhx_cal_today_button: "Tänään",
        day_tab: "Päivä",
        week_tab: "Viikko",
        month_tab: "Kuukausi",
        new_event: "Uusi tapahtuma",
        icon_save: "Tallenna",
        icon_cancel: "Peru",
        icon_details: "Tiedot",
        icon_edit: "Muokkaa",
        icon_delete: "Poista",
        confirm_closing: "",
        confirm_deleting: "Haluatko varmasti poistaa tapahtuman?",
        section_description: "Kuvaus",
        section_time: "Aikajakso",
        full_day: "Koko päivä",
        confirm_recurring: "Haluatko varmasti muokata toistuvan tapahtuman kaikkia jaksoja?",
        section_recurring: "Toista tapahtuma",
        button_recurring: "Ei k&auml;yt&ouml;ss&auml;",
        button_recurring_open: "K&auml;yt&ouml;ss&auml;",
        button_edit_series: "Muokkaa sarja",
        button_edit_occurrence: "Muokkaa kopio",
        agenda_tab: "Esityslista",
        date: "Päivämäärä",
        description: "Kuvaus",
        year_tab: "Vuoden",
        week_agenda_tab: "Esityslista",
        grid_tab: "Ritilä",
        drag_to_create: "Luo uusi vetämällä",
        drag_to_move: "Siirrä vetämällä",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "P&auml;ivitt&auml;in",
        repeat_radio_week: "Viikoittain",
        repeat_radio_month: "Kuukausittain",
        repeat_radio_year: "Vuosittain",
        repeat_radio_day_type: "Joka",
        repeat_text_day_count: "p&auml;iv&auml;",
        repeat_radio_day_type2: "Joka arkip&auml;iv&auml;",
        repeat_week: "Toista joka",
        repeat_text_week_count: "viikko n&auml;in&auml; p&auml;ivin&auml;:",
        repeat_radio_month_type: "Toista",
        repeat_radio_month_start: "",
        repeat_text_month_day: "p&auml;iv&auml;n&auml; joka",
        repeat_text_month_count: "kuukausi",
        repeat_text_month_count2_before: "joka",
        repeat_text_month_count2_after: "kuukausi",
        repeat_year_label: "",
        select_year_day2: "",
        repeat_text_year_day: "p&auml;iv&auml;",
        select_year_month: "kuukausi",
        repeat_radio_end: "Ei loppumisaikaa",
        repeat_text_occurences_count: "Toiston j&auml;lkeen",
        repeat_radio_end3: "Loppuu",
        repeat_radio_end2: "",
        month_for_recurring: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kes&auml;kuu", "Hein&auml;kuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"],
        day_for_recurring: ["Sunnuntai", "Maanantai", "Tiistai", "Keskiviikko", "Torstai", "Perjantai", "Lauantai"]
      }
    };
    var Ze = {
      date: {
        month_full: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
        month_short: ["Jan", "Fév", "Mar", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
        day_full: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"],
        day_short: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"]
      },
      labels: {
        dhx_cal_today_button: "Aujourd'hui",
        day_tab: "Jour",
        week_tab: "Semaine",
        month_tab: "Mois",
        new_event: "Nouvel événement",
        icon_save: "Enregistrer",
        icon_cancel: "Annuler",
        icon_details: "Détails",
        icon_edit: "Modifier",
        icon_delete: "Effacer",
        confirm_closing: "",
        confirm_deleting: "L'événement sera effacé sans appel, êtes-vous sûr ?",
        section_description: "Description",
        section_time: "Période",
        full_day: "Journée complète",
        confirm_recurring: "Voulez-vous éditer toute une série d'évènements répétés?",
        section_recurring: "Périodicité",
        button_recurring: "Désactivé",
        button_recurring_open: "Activé",
        button_edit_series: "Modifier la série",
        button_edit_occurrence: "Modifier une copie",
        agenda_tab: "Jour",
        date: "Date",
        description: "Description",
        year_tab: "Année",
        week_agenda_tab: "Jour",
        grid_tab: "Grille",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Quotidienne",
        repeat_radio_week: "Hebdomadaire",
        repeat_radio_month: "Mensuelle",
        repeat_radio_year: "Annuelle",
        repeat_radio_day_type: "Chaque",
        repeat_text_day_count: "jour",
        repeat_radio_day_type2: "Chaque journée de travail",
        repeat_week: " Répéter toutes les",
        repeat_text_week_count: "semaine:",
        repeat_radio_month_type: "Répéter",
        repeat_radio_month_start: "Le",
        repeat_text_month_day: "jour chaque",
        repeat_text_month_count: "mois",
        repeat_text_month_count2_before: "chaque",
        repeat_text_month_count2_after: "mois",
        repeat_year_label: "Le",
        select_year_day2: "du",
        repeat_text_year_day: "jour",
        select_year_month: "mois",
        repeat_radio_end: "Pas de date d&quot;achèvement",
        repeat_text_occurences_count: "occurrences",
        repeat_radio_end3: "Fin",
        repeat_radio_end2: "Après",
        month_for_recurring: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
        day_for_recurring: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"]
      }
    };
    var it = {
      date: {
        month_full: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"],
        month_short: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יונ", "יול", "אוג", "ספט", "אוק", "נוב", "דצמ"],
        day_full: ["ראשון", "שני", "שלישי", "רביעי", "חמישי", "שישי", "שבת"],
        day_short: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
      },
      labels: {
        dhx_cal_today_button: "היום",
        day_tab: "יום",
        week_tab: "שבוע",
        month_tab: "חודש",
        new_event: "ארוע חדש",
        icon_save: "שמור",
        icon_cancel: "בטל",
        icon_details: "פרטים",
        icon_edit: "ערוך",
        icon_delete: "מחק",
        confirm_closing: "",
        confirm_deleting: "ארוע ימחק סופית.להמשיך?",
        section_description: "תיאור",
        section_time: "תקופה",
        confirm_recurring: "האם ברצונך לשנות כל סדרת ארועים מתמשכים?",
        section_recurring: "להעתיק ארוע",
        button_recurring: "לא פעיל",
        button_recurring_open: "פעיל",
        full_day: "יום שלם",
        button_edit_series: "ערוך את הסדרה",
        button_edit_occurrence: "עריכת עותק",
        agenda_tab: "סדר יום",
        date: "תאריך",
        description: "תיאור",
        year_tab: "לשנה",
        week_agenda_tab: "סדר יום",
        grid_tab: "סורג",
        drag_to_create: "Drag to create",
        drag_to_move: "גרור כדי להזיז",
        message_ok: "OK",
        message_cancel: "בטל",
        next: "הבא",
        prev: "הקודם",
        year: "שנה",
        month: "חודש",
        day: "יום",
        hour: "שעה",
        minute: "דקה",
        repeat_radio_day: "יומי",
        repeat_radio_week: "שבועי",
        repeat_radio_month: "חודשי",
        repeat_radio_year: "שנתי",
        repeat_radio_day_type: "חזור כל",
        repeat_text_day_count: "ימים",
        repeat_radio_day_type2: "חזור כל יום עבודה",
        repeat_week: " חזור כל",
        repeat_text_week_count: "שבוע לפי ימים:",
        repeat_radio_month_type: "חזור כל",
        repeat_radio_month_start: "כל",
        repeat_text_month_day: "ימים כל",
        repeat_text_month_count: "חודשים",
        repeat_text_month_count2_before: "חזור כל",
        repeat_text_month_count2_after: "חודש",
        repeat_year_label: "כל",
        select_year_day2: "בחודש",
        repeat_text_year_day: "ימים",
        select_year_month: "חודש",
        repeat_radio_end: "לעולם לא מסתיים",
        repeat_text_occurences_count: "אירועים",
        repeat_radio_end3: "מסתיים ב",
        repeat_radio_end2: "אחרי",
        month_for_recurring: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"],
        day_for_recurring: ["ראשון", "שני", "שלישי", "רביעי", "חמישי", "שישי", "שבת"]
      }
    };
    var vt = {
      date: {
        month_full: ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
        month_short: ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Sep", "Okt", "Nov", "Dec"],
        day_full: ["Vasárnap", "Hétfõ", "Kedd", "Szerda", "Csütörtök", "Péntek", "szombat"],
        day_short: ["Va", "Hé", "Ke", "Sze", "Csü", "Pé", "Szo"]
      },
      labels: {
        dhx_cal_today_button: "Ma",
        day_tab: "Nap",
        week_tab: "Hét",
        month_tab: "Hónap",
        new_event: "Új esemény",
        icon_save: "Mentés",
        icon_cancel: "Mégse",
        icon_details: "Részletek",
        icon_edit: "Szerkesztés",
        icon_delete: "Törlés",
        confirm_closing: "",
        confirm_deleting: "Az esemény törölve lesz, biztosan folytatja?",
        section_description: "Leírás",
        section_time: "Idõszak",
        full_day: "Egesz napos",
        confirm_recurring: "Biztosan szerkeszteni akarod az összes ismétlõdõ esemény beállítását?",
        section_recurring: "Esemény ismétlése",
        button_recurring: "Tiltás",
        button_recurring_open: "Engedélyezés",
        button_edit_series: "Edit series",
        button_edit_occurrence: "Szerkesztés bíróság",
        agenda_tab: "Napirend",
        date: "Dátum",
        description: "Leírás",
        year_tab: "Év",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute"
      }
    };
    var nt = {
      date: {
        month_full: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ags", "Sep", "Okt", "Nov", "Des"],
        day_full: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
        day_short: ["Ming", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"]
      },
      labels: {
        dhx_cal_today_button: "Hari Ini",
        day_tab: "Hari",
        week_tab: "Minggu",
        month_tab: "Bulan",
        new_event: "Acara Baru",
        icon_save: "Simpan",
        icon_cancel: "Batal",
        icon_details: "Detail",
        icon_edit: "Edit",
        icon_delete: "Hapus",
        confirm_closing: "",
        confirm_deleting: "Acara akan dihapus",
        section_description: "Keterangan",
        section_time: "Periode",
        full_day: "Hari penuh",
        confirm_recurring: "Apakah acara ini akan berulang?",
        section_recurring: "Acara Rutin",
        button_recurring: "Tidak Difungsikan",
        button_recurring_open: "Difungsikan",
        button_edit_series: "Mengedit seri",
        button_edit_occurrence: "Mengedit salinan",
        agenda_tab: "Agenda",
        date: "Tanggal",
        description: "Keterangan",
        year_tab: "Tahun",
        week_agenda_tab: "Agenda",
        grid_tab: "Tabel",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute"
      }
    };
    var gt = {
      date: {
        month_full: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
        month_short: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
        day_full: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"],
        day_short: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"]
      },
      labels: {
        dhx_cal_today_button: "Oggi",
        day_tab: "Giorno",
        week_tab: "Settimana",
        month_tab: "Mese",
        new_event: "Nuovo evento",
        icon_save: "Salva",
        icon_cancel: "Chiudi",
        icon_details: "Dettagli",
        icon_edit: "Modifica",
        icon_delete: "Elimina",
        confirm_closing: "",
        confirm_deleting: "L'evento sarà eliminato, siete sicuri?",
        section_description: "Descrizione",
        section_time: "Periodo di tempo",
        full_day: "Intera giornata",
        confirm_recurring: "Vuoi modificare l'intera serie di eventi?",
        section_recurring: "Ripetere l'evento",
        button_recurring: "Disattivato",
        button_recurring_open: "Attivato",
        button_edit_series: "Modificare la serie",
        button_edit_occurrence: "Modificare una copia",
        agenda_tab: "Agenda",
        date: "Data",
        description: "Descrizione",
        year_tab: "Anno",
        week_agenda_tab: "Agenda",
        grid_tab: "Griglia",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Quotidiano",
        repeat_radio_week: "Settimanale",
        repeat_radio_month: "Mensile",
        repeat_radio_year: "Annuale",
        repeat_radio_day_type: "Ogni",
        repeat_text_day_count: "giorno",
        repeat_radio_day_type2: "Ogni giornata lavorativa",
        repeat_week: " Ripetere ogni",
        repeat_text_week_count: "settimana:",
        repeat_radio_month_type: "Ripetere",
        repeat_radio_month_start: "Il",
        repeat_text_month_day: "giorno ogni",
        repeat_text_month_count: "mese",
        repeat_text_month_count2_before: "ogni",
        repeat_text_month_count2_after: "mese",
        repeat_year_label: "Il",
        select_year_day2: "del",
        repeat_text_year_day: "giorno",
        select_year_month: "mese",
        repeat_radio_end: "Senza data finale",
        repeat_text_occurences_count: "occorenze",
        repeat_radio_end3: "Fine",
        repeat_radio_end2: "Dopo",
        month_for_recurring: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Jiugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
        day_for_recurring: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Jovedì", "Venerdì", "Sabato"]
      }
    };
    var Ye = {
      date: {
        month_full: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        month_short: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        day_full: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
        day_short: ["日", "月", "火", "水", "木", "金", "土"]
      },
      labels: {
        dhx_cal_today_button: "今日",
        day_tab: "日",
        week_tab: "週",
        month_tab: "月",
        new_event: "新イベント",
        icon_save: "保存",
        icon_cancel: "キャンセル",
        icon_details: "詳細",
        icon_edit: "編集",
        icon_delete: "削除",
        confirm_closing: "",
        confirm_deleting: "イベント完全に削除されます、宜しいですか？",
        section_description: "デスクリプション",
        section_time: "期間",
        confirm_recurring: "繰り返されているイベントを全て編集しますか？",
        section_recurring: "イベントを繰り返す",
        button_recurring: "無効",
        button_recurring_open: "有効",
        full_day: "終日",
        button_edit_series: "シリーズを編集します",
        button_edit_occurrence: "コピーを編集",
        agenda_tab: "議題は",
        date: "日付",
        description: "説明",
        year_tab: "今年",
        week_agenda_tab: "議題は",
        grid_tab: "グリッド",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute"
      }
    };
    var Et = function () {
      function t(j) {
        (function (v, _) {
          if (!(v instanceof _)) {
            throw new TypeError("Cannot call a class as a function");
          }
        })(this, t);
        this._locales = {};
        for (var a in j) {
          this._locales[a] = j[a];
        }
      }
      a = [{
        key: "addLocale",
        value: function (j, a) {
          this._locales[j] = a;
        }
      }, {
        key: "getLocale",
        value: function (j) {
          return this._locales[j];
        }
      }];
      if (a) {
        (function et(t, j) {
          for (var a = 0; a < j.length; a++) {
            var v = j[a];
            v.enumerable = v.enumerable || false;
            v.configurable = true;
            if ("value" in v) {
              v.writable = true;
            }
            Object.defineProperty(t, v.key, v);
          }
        })(t.prototype, a);
      }
      return t;
      var a;
    }();
    var Ct = {
      date: {
        month_full: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"],
        day_full: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"],
        day_short: ["Søn", "Mon", "Tir", "Ons", "Tor", "Fre", "Lør"]
      },
      labels: {
        dhx_cal_today_button: "I dag",
        day_tab: "Dag",
        week_tab: "Uke",
        month_tab: "Måned",
        new_event: "Ny hendelse",
        icon_save: "Lagre",
        icon_cancel: "Avbryt",
        icon_details: "Detaljer",
        icon_edit: "Rediger",
        icon_delete: "Slett",
        confirm_closing: "",
        confirm_deleting: "Hendelsen vil bli slettet permanent. Er du sikker?",
        section_description: "Beskrivelse",
        section_time: "Tidsperiode",
        confirm_recurring: "Vil du forandre hele dette settet av repeterende hendelser?",
        section_recurring: "Repeter hendelsen",
        button_recurring: "Av",
        button_recurring_open: "På",
        button_edit_series: "Rediger serien",
        button_edit_occurrence: "Redigere en kopi",
        agenda_tab: "Agenda",
        date: "Dato",
        description: "Beskrivelse",
        year_tab: "År",
        week_agenda_tab: "Agenda",
        grid_tab: "Grid",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Daglig",
        repeat_radio_week: "Ukentlig",
        repeat_radio_month: "Månedlig",
        repeat_radio_year: "Årlig",
        repeat_radio_day_type: "Hver",
        repeat_text_day_count: "dag",
        repeat_radio_day_type2: "Alle hverdager",
        repeat_week: " Gjentas hver",
        repeat_text_week_count: "uke på:",
        repeat_radio_month_type: "På hver",
        repeat_radio_month_start: "På",
        repeat_text_month_day: "dag hver",
        repeat_text_month_count: "måned",
        repeat_text_month_count2_before: "hver",
        repeat_text_month_count2_after: "måned",
        repeat_year_label: "på",
        select_year_day2: "i",
        repeat_text_year_day: "dag i",
        select_year_month: "",
        repeat_radio_end: "Ingen sluttdato",
        repeat_text_occurences_count: "forekomst",
        repeat_radio_end3: "Stop den",
        repeat_radio_end2: "Etter",
        month_for_recurring: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"],
        day_for_recurring: ["Sondag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"]
      }
    };
    var Nt = {
      date: {
        month_full: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
        month_short: ["Jan", "Feb", "mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        day_full: ["Zondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag"],
        day_short: ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"]
      },
      labels: {
        dhx_cal_today_button: "Vandaag",
        day_tab: "Dag",
        week_tab: "Week",
        month_tab: "Maand",
        new_event: "Nieuw item",
        icon_save: "Opslaan",
        icon_cancel: "Annuleren",
        icon_details: "Details",
        icon_edit: "Bewerken",
        icon_delete: "Verwijderen",
        confirm_closing: "",
        confirm_deleting: "Item zal permanent worden verwijderd, doorgaan?",
        section_description: "Beschrijving",
        section_time: "Tijd periode",
        full_day: "Hele dag",
        confirm_recurring: "Wilt u alle terugkerende items bijwerken?",
        section_recurring: "Item herhalen",
        button_recurring: "Uit",
        button_recurring_open: "Aan",
        button_edit_series: "Bewerk de serie",
        button_edit_occurrence: "Bewerk een kopie",
        agenda_tab: "Agenda",
        date: "Datum",
        description: "Omschrijving",
        year_tab: "Jaar",
        week_agenda_tab: "Agenda",
        grid_tab: "Tabel",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Dagelijks",
        repeat_radio_week: "Wekelijks",
        repeat_radio_month: "Maandelijks",
        repeat_radio_year: "Jaarlijks",
        repeat_radio_day_type: "Elke",
        repeat_text_day_count: "dag(en)",
        repeat_radio_day_type2: "Elke werkdag",
        repeat_week: " Herhaal elke",
        repeat_text_week_count: "week op de volgende dagen:",
        repeat_radio_month_type: "Herhaal",
        repeat_radio_month_start: "Op",
        repeat_text_month_day: "dag iedere",
        repeat_text_month_count: "maanden",
        repeat_text_month_count2_before: "iedere",
        repeat_text_month_count2_after: "maanden",
        repeat_year_label: "Op",
        select_year_day2: "van",
        repeat_text_year_day: "dag",
        select_year_month: "maand",
        repeat_radio_end: "Geen eind datum",
        repeat_text_occurences_count: "keren",
        repeat_radio_end3: "Eindigd per",
        repeat_radio_end2: "Na",
        month_for_recurring: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
        day_for_recurring: ["Zondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag"]
      }
    };
    var Ie = {
      date: {
        month_full: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"],
        day_full: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"],
        day_short: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"]
      },
      labels: {
        dhx_cal_today_button: "Idag",
        day_tab: "Dag",
        week_tab: "Uke",
        month_tab: "Måned",
        new_event: "Ny",
        icon_save: "Lagre",
        icon_cancel: "Avbryt",
        icon_details: "Detaljer",
        icon_edit: "Endre",
        icon_delete: "Slett",
        confirm_closing: "Endringer blir ikke lagret, er du sikker?",
        confirm_deleting: "Oppføringen vil bli slettet, er du sikker?",
        section_description: "Beskrivelse",
        section_time: "Tidsperiode",
        full_day: "Full dag",
        confirm_recurring: "Vil du endre hele settet med repeterende oppføringer?",
        section_recurring: "Repeterende oppføring",
        button_recurring: "Ikke aktiv",
        button_recurring_open: "Aktiv",
        button_edit_series: "Rediger serien",
        button_edit_occurrence: "Redigere en kopi",
        agenda_tab: "Agenda",
        date: "Dato",
        description: "Beskrivelse",
        year_tab: "År",
        week_agenda_tab: "Agenda",
        grid_tab: "Grid",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute"
      }
    };
    var me = {
      date: {
        month_full: ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
        month_short: ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
        day_full: ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
        day_short: ["Nie", "Pon", "Wto", "Śro", "Czw", "Pią", "Sob"]
      },
      labels: {
        dhx_cal_today_button: "Dziś",
        day_tab: "Dzień",
        week_tab: "Tydzień",
        month_tab: "Miesiąc",
        new_event: "Nowe zdarzenie",
        icon_save: "Zapisz",
        icon_cancel: "Anuluj",
        icon_details: "Szczegóły",
        icon_edit: "Edytuj",
        icon_delete: "Usuń",
        confirm_closing: "",
        confirm_deleting: "Zdarzenie zostanie usunięte na zawsze, kontynuować?",
        section_description: "Opis",
        section_time: "Okres czasu",
        full_day: "Cały dzień",
        confirm_recurring: "Czy chcesz edytować cały zbiór powtarzających się zdarzeń?",
        section_recurring: "Powtórz zdarzenie",
        button_recurring: "Nieaktywne",
        button_recurring_open: "Aktywne",
        button_edit_series: "Edytuj serię",
        button_edit_occurrence: "Edytuj kopię",
        agenda_tab: "Agenda",
        date: "Data",
        description: "Opis",
        year_tab: "Rok",
        week_agenda_tab: "Agenda",
        grid_tab: "Tabela",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Codziennie",
        repeat_radio_week: "Co tydzie",
        repeat_radio_month: "Co miesic",
        repeat_radio_year: "Co rok",
        repeat_radio_day_type: "Kadego",
        repeat_text_day_count: "dnia",
        repeat_radio_day_type2: "Kadego dnia roboczego",
        repeat_week: " Powtarzaj kadego",
        repeat_text_week_count: "tygodnia w dni:",
        repeat_radio_month_type: "Powtrz",
        repeat_radio_month_start: "W",
        repeat_text_month_day: "dnia kadego",
        repeat_text_month_count: "miesica",
        repeat_text_month_count2_before: "kadego",
        repeat_text_month_count2_after: "miesica",
        repeat_year_label: "W",
        select_year_day2: "miesica",
        repeat_text_year_day: "dnia miesica",
        select_year_month: "",
        repeat_radio_end: "Bez daty kocowej",
        repeat_text_occurences_count: "wystpieniu/ach",
        repeat_radio_end3: "Zakocz w",
        repeat_radio_end2: "Po",
        month_for_recurring: ["Stycznia", "Lutego", "Marca", "Kwietnia", "Maja", "Czerwca", "Lipca", "Sierpnia", "Wrzenia", "Padziernka", "Listopada", "Grudnia"],
        day_for_recurring: ["Niedziela", "Poniedziaek", "Wtorek", "roda", "Czwartek", "Pitek", "Sobota"]
      }
    };
    var Be = {
      date: {
        month_full: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        month_short: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
        day_full: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"],
        day_short: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"]
      },
      labels: {
        dhx_cal_today_button: "Hoje",
        day_tab: "Dia",
        week_tab: "Semana",
        month_tab: "Mês",
        new_event: "Novo evento",
        icon_save: "Salvar",
        icon_cancel: "Cancelar",
        icon_details: "Detalhes",
        icon_edit: "Editar",
        icon_delete: "Deletar",
        confirm_closing: "",
        confirm_deleting: "Tem certeza que deseja excluir?",
        section_description: "Descrição",
        section_time: "Período de tempo",
        full_day: "Dia inteiro",
        confirm_recurring: "Deseja editar todos esses eventos repetidos?",
        section_recurring: "Repetir evento",
        button_recurring: "Desabilitar",
        button_recurring_open: "Habilitar",
        button_edit_series: "Editar a série",
        button_edit_occurrence: "Editar uma cópia",
        agenda_tab: "Dia",
        date: "Data",
        description: "Descrição",
        year_tab: "Ano",
        week_agenda_tab: "Dia",
        grid_tab: "Grade",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Diário",
        repeat_radio_week: "Semanal",
        repeat_radio_month: "Mensal",
        repeat_radio_year: "Anual",
        repeat_radio_day_type: "Cada",
        repeat_text_day_count: "dia(s)",
        repeat_radio_day_type2: "Cada trabalho diário",
        repeat_week: " Repita cada",
        repeat_text_week_count: "semana:",
        repeat_radio_month_type: "Repetir",
        repeat_radio_month_start: "Em",
        repeat_text_month_day: "todo dia",
        repeat_text_month_count: "mês",
        repeat_text_month_count2_before: "todo",
        repeat_text_month_count2_after: "mês",
        repeat_year_label: "Em",
        select_year_day2: "of",
        repeat_text_year_day: "dia",
        select_year_month: "mês",
        repeat_radio_end: "Sem data final",
        repeat_text_occurences_count: "ocorrências",
        repeat_radio_end3: "Fim",
        repeat_radio_end2: "Depois",
        month_for_recurring: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        day_for_recurring: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"]
      }
    };
    var se = {
      date: {
        month_full: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "November", "December"],
        month_short: ["Ian", "Feb", "Mar", "Apr", "Mai", "Iun", "Iul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_full: ["Duminica", "Luni", "Marti", "Miercuri", "Joi", "Vineri", "Sambata"],
        day_short: ["Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sa"]
      },
      labels: {
        dhx_cal_today_button: "Astazi",
        day_tab: "Zi",
        week_tab: "Saptamana",
        month_tab: "Luna",
        new_event: "Eveniment nou",
        icon_save: "Salveaza",
        icon_cancel: "Anuleaza",
        icon_details: "Detalii",
        icon_edit: "Editeaza",
        icon_delete: "Sterge",
        confirm_closing: "Schimbarile nu vor fi salvate, esti sigur?",
        confirm_deleting: "Evenimentul va fi sters permanent, esti sigur?",
        section_description: "Descriere",
        section_time: "Interval",
        full_day: "Toata ziua",
        confirm_recurring: "Vrei sa editezi toata seria de evenimente repetate?",
        section_recurring: "Repetare",
        button_recurring: "Dezactivata",
        button_recurring_open: "Activata",
        button_edit_series: "Editeaza serie",
        button_edit_occurrence: "Editeaza doar intrare",
        agenda_tab: "Agenda",
        date: "Data",
        description: "Descriere",
        year_tab: "An",
        week_agenda_tab: "Agenda",
        grid_tab: "Lista",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Zilnic",
        repeat_radio_week: "Saptamanal",
        repeat_radio_month: "Lunar",
        repeat_radio_year: "Anual",
        repeat_radio_day_type: "La fiecare",
        repeat_text_day_count: "zi(le)",
        repeat_radio_day_type2: "Fiecare zi lucratoare",
        repeat_week: " Repeta la fiecare",
        repeat_text_week_count: "saptamana in urmatoarele zile:",
        repeat_radio_month_type: "Repeta in",
        repeat_radio_month_start: "In a",
        repeat_text_month_day: "zi la fiecare",
        repeat_text_month_count: "luni",
        repeat_text_month_count2_before: "la fiecare",
        repeat_text_month_count2_after: "luni",
        repeat_year_label: "In",
        select_year_day2: "a lunii",
        repeat_text_year_day: "zi a lunii",
        select_year_month: "",
        repeat_radio_end: "Fara data de sfarsit",
        repeat_text_occurences_count: "evenimente",
        repeat_radio_end3: "La data",
        repeat_radio_end2: "Dupa",
        month_for_recurring: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"],
        day_for_recurring: ["Duminica", "Luni", "Marti", "Miercuri", "Joi", "Vineri", "Sambata"]
      }
    };
    var De = {
      date: {
        month_full: ["Январь", "Февраль", "Март", "Апрель", "Maй", "Июнь", "Июль", "Август", "Сентябрь", "Oктябрь", "Ноябрь", "Декабрь"],
        month_short: ["Янв", "Фев", "Maр", "Aпр", "Maй", "Июн", "Июл", "Aвг", "Сен", "Окт", "Ноя", "Дек"],
        day_full: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
        day_short: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
      },
      labels: {
        dhx_cal_today_button: "Сегодня",
        day_tab: "День",
        week_tab: "Неделя",
        month_tab: "Месяц",
        new_event: "Новое событие",
        icon_save: "Сохранить",
        icon_cancel: "Отменить",
        icon_details: "Детали",
        icon_edit: "Изменить",
        icon_delete: "Удалить",
        confirm_closing: "",
        confirm_deleting: "Событие будет удалено безвозвратно, продолжить?",
        section_description: "Описание",
        section_time: "Период времени",
        full_day: "Весь день",
        confirm_recurring: "Вы хотите изменить всю серию повторяющихся событий?",
        section_recurring: "Повторение",
        button_recurring: "Отключено",
        button_recurring_open: "Включено",
        button_edit_series: "Редактировать серию",
        button_edit_occurrence: "Редактировать экземпляр",
        agenda_tab: "Список",
        date: "Дата",
        description: "Описание",
        year_tab: "Год",
        week_agenda_tab: "Список",
        grid_tab: "Таблица",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "День",
        repeat_radio_week: "Неделя",
        repeat_radio_month: "Месяц",
        repeat_radio_year: "Год",
        repeat_radio_day_type: "Каждый",
        repeat_text_day_count: "день",
        repeat_radio_day_type2: "Каждый рабочий день",
        repeat_week: " Повторять каждую",
        repeat_text_week_count: "неделю , в:",
        repeat_radio_month_type: "Повторять",
        repeat_radio_month_start: "",
        repeat_text_month_day: " числа каждый ",
        repeat_text_month_count: "месяц",
        repeat_text_month_count2_before: "каждый ",
        repeat_text_month_count2_after: "месяц",
        repeat_year_label: "",
        select_year_day2: "",
        repeat_text_year_day: "день",
        select_year_month: "",
        repeat_radio_end: "Без даты окончания",
        repeat_text_occurences_count: "повторений",
        repeat_radio_end3: "До ",
        repeat_radio_end2: "",
        month_for_recurring: ["Января", "Февраля", "Марта", "Апреля", "Мая", "Июня", "Июля", "Августа", "Сентября", "Октября", "Ноября", "Декабря"],
        day_for_recurring: ["Воскресенье", "Понедельник", "Вторник", "Среду", "Четверг", "Пятницу", "Субботу"]
      }
    };
    var We = {
      date: {
        month_full: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        day_full: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "Četrtek", "Petek", "Sobota"],
        day_short: ["Ned", "Pon", "Tor", "Sre", "Čet", "Pet", "Sob"]
      },
      labels: {
        dhx_cal_today_button: "Danes",
        day_tab: "Dan",
        week_tab: "Teden",
        month_tab: "Mesec",
        new_event: "Nov dogodek",
        icon_save: "Shrani",
        icon_cancel: "Prekliči",
        icon_details: "Podrobnosti",
        icon_edit: "Uredi",
        icon_delete: "Izbriši",
        confirm_closing: "",
        confirm_deleting: "Dogodek bo izbrisan. Želite nadaljevati?",
        section_description: "Opis",
        section_time: "Časovni okvir",
        full_day: "Ves dan",
        confirm_recurring: "Želite urediti celoten set ponavljajočih dogodkov?",
        section_recurring: "Ponovi dogodek",
        button_recurring: "Onemogočeno",
        button_recurring_open: "Omogočeno",
        button_edit_series: "Edit series",
        button_edit_occurrence: "Edit occurrence",
        agenda_tab: "Zadeva",
        date: "Datum",
        description: "Opis",
        year_tab: "Leto",
        week_agenda_tab: "Zadeva",
        grid_tab: "Miza",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute"
      }
    };
    var ke = {
      date: {
        month_full: ["Január", "Február", "Marec", "Apríl", "Máj", "Jún", "Júl", "August", "September", "Október", "November", "December"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "Máj", "Jún", "Júl", "Aug", "Sept", "Okt", "Nov", "Dec"],
        day_full: ["Nedeľa", "Pondelok", "Utorok", "Streda", "Štvrtok", "Piatok", "Sobota"],
        day_short: ["Ne", "Po", "Ut", "St", "Št", "Pi", "So"]
      },
      labels: {
        dhx_cal_today_button: "Dnes",
        day_tab: "Deň",
        week_tab: "Týždeň",
        month_tab: "Mesiac",
        new_event: "Nová udalosť",
        icon_save: "Uložiť",
        icon_cancel: "Späť",
        icon_details: "Detail",
        icon_edit: "Edituj",
        icon_delete: "Zmazať",
        confirm_closing: "Vaše zmeny nebudú uložené. Skutočne?",
        confirm_deleting: "Udalosť bude natrvalo vymazaná. Skutočne?",
        section_description: "Poznámky",
        section_time: "Doba platnosti",
        confirm_recurring: "Prajete si upraviť celú radu opakovaných udalostí?",
        section_recurring: "Opakovanie udalosti",
        button_recurring: "Vypnuté",
        button_recurring_open: "Zapnuté",
        button_edit_series: "Upraviť opakovania",
        button_edit_occurrence: "Upraviť inštancie",
        agenda_tab: "Program",
        date: "Dátum",
        description: "Poznámka",
        year_tab: "Rok",
        full_day: "Celý deň",
        week_agenda_tab: "Program",
        grid_tab: "Mriežka",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Denne",
        repeat_radio_week: "Týždenne",
        repeat_radio_month: "Mesaène",
        repeat_radio_year: "Roène",
        repeat_radio_day_type: "Každý",
        repeat_text_day_count: "deò",
        repeat_radio_day_type2: "Každý prac. deò",
        repeat_week: "Opakova každý",
        repeat_text_week_count: "týždeò v dòoch:",
        repeat_radio_month_type: "Opakova",
        repeat_radio_month_start: "On",
        repeat_text_month_day: "deò každý",
        repeat_text_month_count: "mesiac",
        repeat_text_month_count2_before: "každý",
        repeat_text_month_count2_after: "mesiac",
        repeat_year_label: "On",
        select_year_day2: "poèas",
        repeat_text_year_day: "deò",
        select_year_month: "mesiac",
        repeat_radio_end: "Bez dátumu ukonèenia",
        repeat_text_occurences_count: "udalostiach",
        repeat_radio_end3: "Ukonèi",
        repeat_radio_end2: "Po",
        month_for_recurring: ["Január", "Február", "Marec", "Apríl", "Máj", "Jún", "Júl", "August", "September", "Október", "November", "December"],
        day_for_recurring: ["Nede¾a", "Pondelok", "Utorok", "Streda", "Štvrtok", "Piatok", "Sobota"]
      }
    };
    var Pe = {
      date: {
        month_full: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        day_full: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"],
        day_short: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"]
      },
      labels: {
        dhx_cal_today_button: "Idag",
        day_tab: "Dag",
        week_tab: "Vecka",
        month_tab: "Månad",
        new_event: "Ny händelse",
        icon_save: "Spara",
        icon_cancel: "Ångra",
        icon_details: "Detaljer",
        icon_edit: "Ändra",
        icon_delete: "Ta bort",
        confirm_closing: "",
        confirm_deleting: "Är du säker på att du vill ta bort händelsen permanent?",
        section_description: "Beskrivning",
        section_time: "Tid",
        full_day: "Hela dagen",
        confirm_recurring: "Vill du redigera hela serien med repeterande händelser?",
        section_recurring: "Upprepa händelse",
        button_recurring: "Inaktiverat",
        button_recurring_open: "Aktiverat",
        button_edit_series: "Redigera serien",
        button_edit_occurrence: "Redigera en kopia",
        agenda_tab: "Dagordning",
        date: "Datum",
        description: "Beskrivning",
        year_tab: "År",
        week_agenda_tab: "Dagordning",
        grid_tab: "Galler",
        drag_to_create: "Dra för att skapa ny",
        drag_to_move: "Dra för att flytta",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "Dagligen",
        repeat_radio_week: "Veckovis",
        repeat_radio_month: "Månadsvis",
        repeat_radio_year: "Årligen",
        repeat_radio_day_type: "Var",
        repeat_text_day_count: "dag",
        repeat_radio_day_type2: "Varje arbetsdag",
        repeat_week: " Upprepa var",
        repeat_text_week_count: "vecka dessa dagar:",
        repeat_radio_month_type: "Upprepa",
        repeat_radio_month_start: "Den",
        repeat_text_month_day: "dagen var",
        repeat_text_month_count: "månad",
        repeat_text_month_count2_before: "var",
        repeat_text_month_count2_after: "månad",
        repeat_year_label: "Den",
        select_year_day2: "i",
        repeat_text_year_day: "dag i",
        select_year_month: "månad",
        repeat_radio_end: "Inget slutdatum",
        repeat_text_occurences_count: "upprepningar",
        repeat_radio_end3: "Sluta efter",
        repeat_radio_end2: "Efter",
        month_for_recurring: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
        day_for_recurring: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"]
      }
    };
    var ce = {
      date: {
        month_full: ["Ocak", "Þubat", "Mart", "Nisan", "Mayýs", "Haziran", "Temmuz", "Aðustos", "Eylül", "Ekim", "Kasým", "Aralýk"],
        month_short: ["Oca", "Þub", "Mar", "Nis", "May", "Haz", "Tem", "Aðu", "Eyl", "Eki", "Kas", "Ara"],
        day_full: ["Pazar", "Pazartes,", "Salý", "Çarþamba", "Perþembe", "Cuma", "Cumartesi"],
        day_short: ["Paz", "Pts", "Sal", "Çar", "Per", "Cum", "Cts"]
      },
      labels: {
        dhx_cal_today_button: "Bugün",
        day_tab: "Gün",
        week_tab: "Hafta",
        month_tab: "Ay",
        new_event: "Uygun",
        icon_save: "Kaydet",
        icon_cancel: "Ýptal",
        icon_details: "Detaylar",
        icon_edit: "Düzenle",
        icon_delete: "Sil",
        confirm_closing: "",
        confirm_deleting: "Etkinlik silinecek, devam?",
        section_description: "Açýklama",
        section_time: "Zaman aralýðý",
        full_day: "Tam gün",
        confirm_recurring: "Tüm tekrar eden etkinlikler silinecek, devam?",
        section_recurring: "Etkinliði tekrarla",
        button_recurring: "Pasif",
        button_recurring_open: "Aktif",
        button_edit_series: "Dizi düzenleme",
        button_edit_occurrence: "Bir kopyasını düzenleyin",
        agenda_tab: "Ajanda",
        date: "Tarih",
        description: "Açýklama",
        year_tab: "Yýl",
        week_agenda_tab: "Ajanda",
        grid_tab: "Izgara",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute"
      }
    };
    var Ge = {
      date: {
        month_full: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
        month_short: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
        day_full: ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П'ятниця", "Субота"],
        day_short: ["Нед", "Пон", "Вів", "Сер", "Чет", "Птн", "Суб"]
      },
      labels: {
        dhx_cal_today_button: "Сьогодні",
        day_tab: "День",
        week_tab: "Тиждень",
        month_tab: "Місяць",
        new_event: "Нова подія",
        icon_save: "Зберегти",
        icon_cancel: "Відміна",
        icon_details: "Деталі",
        icon_edit: "Редагувати",
        icon_delete: "Вилучити",
        confirm_closing: "",
        confirm_deleting: "Подія вилучиться назавжди. Ви впевнені?",
        section_description: "Опис",
        section_time: "Часовий проміжок",
        full_day: "Весь день",
        confirm_recurring: "Хочете редагувати весь перелік повторюваних подій?",
        section_recurring: "Повторювана подія",
        button_recurring: "Відключено",
        button_recurring_open: "Включено",
        button_edit_series: "Редагувати серію",
        button_edit_occurrence: "Редагувати примірник",
        agenda_tab: "Перелік",
        date: "Дата",
        description: "Опис",
        year_tab: "Рік",
        week_agenda_tab: "Перелік",
        grid_tab: "Таблиця",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move",
        message_ok: "OK",
        message_cancel: "Cancel",
        next: "Next",
        prev: "Previous",
        year: "Year",
        month: "Month",
        day: "Day",
        hour: "Hour",
        minute: "Minute",
        repeat_radio_day: "День",
        repeat_radio_week: "Тиждень",
        repeat_radio_month: "Місяць",
        repeat_radio_year: "Рік",
        repeat_radio_day_type: "Кожний",
        repeat_text_day_count: "день",
        repeat_radio_day_type2: "Кожний робочий день",
        repeat_week: " Повторювати кожен",
        repeat_text_week_count: "тиждень , по:",
        repeat_radio_month_type: "Повторювати",
        repeat_radio_month_start: "",
        repeat_text_month_day: " числа кожний ",
        repeat_text_month_count: "місяць",
        repeat_text_month_count2_before: "кожен ",
        repeat_text_month_count2_after: "місяць",
        repeat_year_label: "",
        select_year_day2: "",
        repeat_text_year_day: "день",
        select_year_month: "",
        repeat_radio_end: "Без дати закінчення",
        repeat_text_occurences_count: "повторень",
        repeat_radio_end3: "До ",
        repeat_radio_end2: "",
        month_for_recurring: ["січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня"],
        day_for_recurring: ["Неділям", "Понеділкам", "Вівторкам", "Середам", "Четвергам", "П'ятницям", "Суботам"]
      }
    };
    function dt(t) {
      return (dt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function te(t) {
      var i;
      var o;
      var c;
      var j = {
        version: "6.0.3"
      };
      o = {
        agenda: "https://docs.dhtmlx.com/scheduler/agenda_view.html",
        grid: "https://docs.dhtmlx.com/scheduler/grid_view.html",
        map: "https://docs.dhtmlx.com/scheduler/map_view.html",
        unit: "https://docs.dhtmlx.com/scheduler/units_view.html",
        timeline: "https://docs.dhtmlx.com/scheduler/timeline_view.html",
        week_agenda: "https://docs.dhtmlx.com/scheduler/weekagenda_view.html",
        year: "https://docs.dhtmlx.com/scheduler/year_view.html",
        anythingElse: "https://docs.dhtmlx.com/scheduler/views.html"
      };
      c = {
        agenda: "ext/dhtmlxscheduler_agenda_view.js",
        grid: "ext/dhtmlxscheduler_grid_view.js",
        map: "ext/dhtmlxscheduler_map_view.js",
        unit: "ext/dhtmlxscheduler_units.js",
        timeline: "ext/dhtmlxscheduler_timeline.js, ext/dhtmlxscheduler_treetimeline.js, ext/dhtmlxscheduler_daytimeline.js",
        week_agenda: "ext/dhtmlxscheduler_week_agenda.js",
        year: "ext/dhtmlxscheduler_year_view.js",
        limit: "ext/dhtmlxscheduler_limit.js"
      };
      (i = j)._commonErrorMessages = {
        unknownView: function (h) {
          var D = c[h] ? "You're probably missing " + c[h] + "." : "";
          return "`" + h + "` view is not defined. \nPlease check parameters you pass to `scheduler.init` or `scheduler.setCurrentView` in your code and ensure you've imported appropriate extensions. \nRelated docs: " + (o[h] || o.anythingElse) + "\n" + (D ? D + "\n" : "");
        },
        collapsedContainer: function (h) {
          return "Scheduler container height is set to *100%* but the rendered height is zero and the scheduler is not visible. \nMake sure that the container has some initial height or use different units. For example:\n<div id='scheduler_here' class='dhx_cal_container' style='width:100%; height:600px;'> \n";
        }
      };
      i.createTimelineView = function () {
        throw new Error("scheduler.createTimelineView is not implemented. Be sure to add the required extension: " + c.timeline + "\nRelated docs: " + o.timeline);
      };
      i.createUnitsView = function () {
        throw new Error("scheduler.createUnitsView is not implemented. Be sure to add the required extension: " + c.unit + "\nRelated docs: " + o.unit);
      };
      i.createGridView = function () {
        throw new Error("scheduler.createGridView is not implemented. Be sure to add the required extension: " + c.grid + "\nRelated docs: " + o.grid);
      };
      i.addMarkedTimespan = function () {
        throw new Error("scheduler.addMarkedTimespan is not implemented. Be sure to add the required extension: ext/dhtmlxscheduler_limit.js\nRelated docs: https://docs.dhtmlx.com/scheduler/limits.html");
      };
      i.renderCalendar = function () {
        throw new Error("scheduler.renderCalendar is not implemented. Be sure to add the required extension: ext/dhtmlxscheduler_minical.js\nhttps://docs.dhtmlx.com/scheduler/minicalendar.html");
      };
      i.exportToPNG = function () {
        throw new Error(["scheduler.exportToPNG is not implemented.", "This feature requires an additional module, be sure to check the related doc here https://docs.dhtmlx.com/scheduler/png.html", "Licensing info: https://dhtmlx.com/docs/products/dhtmlxScheduler/export.shtml"].join("\n"));
      };
      i.exportToPDF = function () {
        throw new Error(["scheduler.exportToPDF is not implemented.", "This feature requires an additional module, be sure to check the related doc here https://docs.dhtmlx.com/scheduler/pdf.html", "Licensing info: https://dhtmlx.com/docs/products/dhtmlxScheduler/export.shtml"].join("\n"));
      };
      (function (i) {
        var o = function t(j, a) {
          j = j || s.event;
          a = a || s.eventRemove;
          var v = [];
          var _ = {
            attach: function (i, o, c, h) {
              v.push({
                element: i,
                event: o,
                callback: c,
                capture: h
              });
              j(i, o, c, h);
            },
            detach: function (i, o, c, h) {
              a(i, o, c, h);
              for (var D = 0; D < v.length; D++) {
                var V = v[D];
                if (V.element === i && V.event === o && V.callback === c && V.capture === h) {
                  v.splice(D, 1);
                  D--;
                }
              }
            },
            detachAll: function () {
              for (var i = v.slice(), o = 0; o < i.length; o++) {
                var c = i[o];
                _.detach(c.element, c.event, c.callback, c.capture);
                _.detach(c.element, c.event, c.callback, undefined);
                _.detach(c.element, c.event, c.callback, false);
                _.detach(c.element, c.event, c.callback, true);
              }
              v.splice(0, v.length);
            },
            extend: function () {
              return t(this.event, this.eventRemove);
            }
          };
          return _;
        }();
        i.event = o.attach;
        i.eventRemove = o.detach;
        i._eventRemoveAll = o.detachAll;
        i._createDomEventScope = o.extend;
        i._trim = function (c) {
          return (String.prototype.trim || function () {
            return this.replace(/^\s+|\s+$/g, "");
          }).apply(c);
        };
        i._isDate = function (c) {
          return !!c && m(c) == "object" && !!c.getFullYear && !!c.getMonth && !!c.getDate;
        };
        i._isObject = function (c) {
          return c && m(c) == "object";
        };
      })(j);
      (function (i) {
        x(i);
        (function w(t) {
          function j(o) {
            var c = document.createElement("div");
            (o || "").split(" ").forEach(function (h) {
              c.classList.add(h);
            });
            return c;
          }
          function a_rows_container() {
            return j("dhx_cal_navbar_rows_container");
          }
          function a_row() {
            return j("dhx_cal_navbar_row");
          }
          function a_view(o) {
            var c = j("dhx_cal_tab");
            c.setAttribute("name", o.view + "_tab");
            c.setAttribute("data-tab", o.view);
            if (t.config.fix_tab_position) {
              if (o.$firstTab) {
                c.classList.add("dhx_cal_tab_first");
              } else if (o.$lastTab) {
                c.classList.add("dhx_cal_tab_last");
              } else if (o.view !== "week") {
                c.classList.add("dhx_cal_tab_standalone");
              }
            }
            return c;
          }
          function a_date() {
            return j("dhx_cal_date");
          }
          function a_button(o) {
            return j("dhx_cal_nav_button dhx_cal_nav_button_custom dhx_cal_tab");
          }
          function a_builtInButton(o) {
            return j("dhx_cal_" + o.view + "_button dhx_cal_nav_button");
          }
          function a_spacer() {
            return j("dhx_cal_line_spacer");
          }
          function a_minicalendarButton(o) {
            var c = j("dhx_minical_icon");
            if (!o.click && !c.$_eventAttached) {
              t.event(c, "click", function () {
                if (t.isCalendarVisible()) {
                  t.destroyCalendar();
                } else {
                  t.renderCalendar({
                    position: this,
                    date: t.getState().date,
                    navigation: true,
                    handler: function (h, D) {
                      t.setCurrentView(h);
                      t.destroyCalendar();
                    }
                  });
                }
              });
            }
            return c;
          }
          function v(o) {
            var c = function (V) {
              var T;
              if (V.view) {
                switch (V.view) {
                  case "today":
                  case "next":
                  case "prev":
                    T = a_builtInButton;
                    break;
                  case "date":
                    T = a_date;
                    break;
                  case "spacer":
                    T = a_spacer;
                    break;
                  case "button":
                    T = a_button;
                    break;
                  case "minicalendar":
                    T = a_minicalendarButton;
                    break;
                  default:
                    T = a_view;
                }
              } else if (V.rows) {
                T = a_rows_container;
              } else if (V.cols) {
                T = a_row;
              }
              return T;
            }(o);
            if (c) {
              var h = c(o);
              if (o.css) {
                h.classList.add(o.css);
              }
              if (o.width) {
                if ((D = o.width) === D * 1) {
                  D += "px";
                }
                h.style.width = D;
              }
              if (o.height) {
                if ((D = o.height) === D * 1) {
                  D += "px";
                }
                h.style.height = D;
              }
              if (o.click) {
                h.addEventListener("click", o.click);
              }
              if (o.html) {
                h.innerHTML = o.html;
              }
              if (o.align) {
                var D = "";
                if (o.align == "right") {
                  D = "flex-end";
                } else if (o.align == "left") {
                  D = "flex-start";
                }
                h.style.justifyContent = D;
              }
              return h;
            }
          }
          function _(o) {
            if (typeof o == "string") {
              o = {
                view: o
              };
            }
            if (!o.view && !o.rows && !o.cols) {
              o.view = "button";
            }
            return o;
          }
          t._init_nav_bar = function (o) {
            var c = this.$container.querySelector(".dhx_cal_navline");
            return c || ((c = document.createElement("div")).className = "dhx_cal_navline dhx_cal_navline_flex", t._update_nav_bar(o, c), c);
          };
          var i = null;
          t._update_nav_bar = function (o, c) {
            if (o) {
              var h = false;
              var V = o.height || t.xy.nav_height;
              if (i === null || i !== V) {
                h = true;
              }
              if (h) {
                t.xy.nav_height = V;
              }
              c.innerHTML = "";
              c.appendChild(function T(W) {
                var z;
                var Z = document.createDocumentFragment();
                z = Array.isArray(W) ? W : [W];
                for (var re = 0; re < z.length; re++) {
                  var oe;
                  var _e = _(z[re]);
                  if (_e.view === "day" && z[re + 1]) {
                    if ((oe = _(z[re + 1])).view === "week" || oe.view === "month") {
                      _e.$firstTab = true;
                    }
                  }
                  if (_e.view === "month" && z[re - 1]) {
                    if ((oe = _(z[re - 1])).view === "week" || oe.view === "day") {
                      _e.$lastTab = true;
                    }
                  }
                  var he = v(_e);
                  Z.appendChild(he);
                  if (_e.cols || _e.rows) {
                    he.appendChild(T(_e.cols || _e.rows));
                  }
                }
                return Z;
              }(o));
              t.unset_actions();
              t._els = [];
              t.get_elements();
              t.set_actions();
              c.style.display = V === 0 ? "none" : "";
              i = V;
            }
          };
        })(i);
        i._detachDomEvent = function (T, W, z) {
          if (T.removeEventListener) {
            T.removeEventListener(W, z, false);
          } else if (T.detachEvent) {
            T.detachEvent("on" + W, z);
          }
        };
        i._init_once = function () {
          (function E(t) {
            function j(i) {
              for (var o = document.body; i && i != o;) {
                i = i.parentNode;
              }
              return o == i;
            }
            function a(i) {
              return {
                w: i.innerWidth || document.documentElement.clientWidth,
                h: i.innerHeight || document.documentElement.clientHeight
              };
            }
            function v(i, o) {
              var c;
              var h = a(o);
              i.event(o, "resize", function () {
                clearTimeout(c);
                c = setTimeout(function () {
                  if (j(i.$container)) {
                    var D = a(o);
                    if ((V = h).w != (T = D).w || V.h != T.h) {
                      h = D;
                      _(i);
                    }
                  }
                  var V;
                  var T;
                }, 150);
              });
            }
            function _(i) {
              if (!i.$destroyed && i.$root && j(i.$root) && i.callEvent("onSchedulerResize", [])) {
                i.updateView();
                i.callEvent("onAfterSchedulerResize", []);
              }
            }
            (function (i) {
              var o = i.$container;
              if (window.getComputedStyle(o).getPropertyValue("position") == "static") {
                o.style.position = "relative";
              }
              var h;
              var D;
              var V;
              var c = document.createElement("iframe");
              c.className = "scheduler_container_resize_watcher";
              c.tabIndex = -1;
              if (i.config.wai_aria_attributes) {
                c.setAttribute("role", "none");
                c.setAttribute("aria-hidden", true);
              }
              if (window.Sfdc || window.$A || window.Aura) {
                D = (h = i).$root.offsetHeight;
                V = h.$root.offsetWidth;
                (function T() {
                  if (!h.$destroyed) {
                    if (h.$root) {
                      if (h.$root.offsetHeight != D || h.$root.offsetWidth != V) {
                        _(h);
                      }
                      D = h.$root.offsetHeight;
                      V = h.$root.offsetWidth;
                    }
                    setTimeout(T, 200);
                  }
                })();
              } else {
                o.appendChild(c);
                if (c.contentWindow) {
                  v(i, c.contentWindow);
                } else {
                  o.removeChild(c);
                  v(i, window);
                }
              }
            })(t);
          })(i);
          i._init_once = function () {};
        };
        function D(T) {
          return !!T.querySelector(".dhx_cal_header") && !!T.querySelector(".dhx_cal_data") && !!T.querySelector(".dhx_cal_navline");
        }
        i.init = function (T, W, z) {
          if (!this.$destroyed) {
            W = W || i._currentDate();
            z = z || "week";
            if (this._obj) {
              this.unset_actions();
            }
            this._obj = typeof T == "string" ? document.getElementById(T) : T;
            this.$container = this._obj;
            this.$root = this._obj;
            if (!this.$container.offsetHeight && this.$container.offsetWidth && this.$container.style.height === "100%") {
              window.console.error(i._commonErrorMessages.collapsedContainer(), this.$container);
            }
            if (this.config.wai_aria_attributes && this.config.wai_aria_application_role) {
              this.$container.setAttribute("role", "application");
            }
            if (!this.config.header && !D(this.$container)) {
              this.config.header = function (Z) {
                var re = ["day", "week", "month"];
                if (Z.matrix) {
                  for (var oe in Z.matrix) {
                    re.push(oe);
                  }
                }
                if (Z._props) {
                  for (var oe in Z._props) {
                    re.push(oe);
                  }
                }
                if (Z._grid && Z._grid.names) {
                  for (var oe in Z._grid.names) {
                    re.push(oe);
                  }
                }
                ["map", "agenda", "week_agenda", "year"].forEach(function (_e) {
                  if (Z[_e + "_view"]) {
                    re.push(_e);
                  }
                });
                return re.concat(["date"]).concat(["prev", "today", "next"]);
              }(this);
              window.console.log(["Required DOM elements are missing from the scheduler container and **scheduler.config.header** is not specified.", "Using a default header configuration: ", "scheduler.config.header = " + JSON.stringify(this.config.header, null, 2), "Check this article for the details: https://docs.dhtmlx.com/scheduler/initialization.html"].join("\n"));
            }
            if (this.config.header) {
              this.$container.innerHTML = "";
              this.$container.classList.add("dhx_cal_container");
              if (this.config.header.height) {
                this.xy.nav_height = this.config.header.height;
              }
              this.$container.appendChild(function (T) {
                return i._init_nav_bar(T);
              }(this.config.header));
              this.$container.appendChild(function (T) {
                var W = document.createElement("div");
                W.className = "dhx_cal_header";
                return W;
              }());
              this.$container.appendChild(function (T) {
                var W = document.createElement("div");
                W.className = "dhx_cal_data";
                return W;
              }());
            } else if (!D(this.$container)) {
              throw new Error(["Required DOM elements are missing from the scheduler container.", "Be sure to either specify them manually in the markup: https://docs.dhtmlx.com/scheduler/initialization.html#initializingschedulerviamarkup", "Or to use **scheduler.config.header** setting so they could be created automatically: https://docs.dhtmlx.com/scheduler/initialization.html#initializingschedulerviaheaderconfig"].join("\n"));
            }
            if (this.config.rtl) {
              this.$container.className += " dhx_cal_container_rtl";
            }
            if (this._skin_init) {
              i._skin_init();
            }
            i.date.init();
            this._scroll = true;
            this._quirks = this.$env.isIE && document.compatMode == "BackCompat";
            this._quirks7 = this.$env.isIE && navigator.appVersion.indexOf("MSIE 8") == -1;
            this._els = [];
            this.get_elements();
            this.init_templates();
            this.set_actions();
            this._init_once();
            this._init_touch_events();
            this.set_sizes();
            i.callEvent("onSchedulerReady", []);
            this.setCurrentView(W, z);
          }
        };
        i.xy = {
          min_event_height: 40,
          scale_width: 50,
          scroll_width: 18,
          scale_height: 20,
          month_scale_height: 20,
          menu_width: 25,
          margin_top: 0,
          margin_left: 0,
          editor_width: 140,
          month_head_height: 22,
          event_header_height: 14
        };
        i.keys = {
          edit_save: 13,
          edit_cancel: 27
        };
        i.bind = function (T, W) {
          if (T.bind) {
            return T.bind(W);
          } else {
            return function () {
              return T.apply(W, arguments);
            };
          }
        };
        i.set_sizes = function () {
          var T = this._x = this._obj.clientWidth - this.xy.margin_left;
          var W = this._y = this._obj.clientHeight - this.xy.margin_top;
          var z = this._table_view ? 0 : this.xy.scale_width + this.xy.scroll_width;
          var Z = this._table_view ? -1 : this.xy.scale_width;
          var re = this.$container.querySelector(".dhx_cal_scale_placeholder");
          if (i._is_material_skin()) {
            if (!re) {
              (re = document.createElement("div")).className = "dhx_cal_scale_placeholder";
              this.$container.insertBefore(re, this._els.dhx_cal_header[0]);
            }
            re.style.display = "block";
            this.set_xy(re, T, this.xy.scale_height + 1, 0, this.xy.nav_height + (this._quirks ? -1 : 1));
          } else if (re) {
            re.parentNode.removeChild(re);
          }
          if (this._lightbox) {
            if (i.$container.offsetWidth >= 1200) {
              this._setLbPosition(document.querySelector(".dhx_cal_light"));
            }
          }
          this.set_xy(this._els.dhx_cal_navline[0], T, this.xy.nav_height, 0, 0);
          this.set_xy(this._els.dhx_cal_header[0], T - z, this.xy.scale_height, Z, this.xy.nav_height + (this._quirks ? -1 : 1));
          var oe = this._els.dhx_cal_navline[0].offsetHeight;
          if (oe > 0) {
            this.xy.nav_height = oe;
          }
          var _e = this.xy.scale_height + this.xy.nav_height + (this._quirks ? -2 : 0);
          this.set_xy(this._els.dhx_cal_data[0], T, W - (_e + 2), 0, _e + 2);
        };
        i.set_xy = function (T, W, z, Z, re) {
          var oe = "left";
          T.style.width = Math.max(0, W) + "px";
          T.style.height = Math.max(0, z) + "px";
          if (arguments.length > 3) {
            if (this.config.rtl) {
              oe = "right";
            }
            T.style[oe] = Z + "px";
            T.style.top = re + "px";
          }
        };
        i.get_elements = function () {
          for (var T = this._obj.getElementsByTagName("DIV"), W = 0; W < T.length; W++) {
            var z = i._getClassName(T[W]);
            var Z = T[W].getAttribute("data-tab") || T[W].getAttribute("name") || "";
            z &&= z.split(" ")[0];
            this._els[z] ||= [];
            this._els[z].push(T[W]);
            var re = i.locale.labels[Z + "_tab"] || i.locale.labels[Z || z];
            if (typeof re != "string" && Z && !T[W].innerHTML) {
              re = Z.split("_")[0];
            }
            if (re) {
              this._waiAria.labelAttr(T[W], re);
              T[W].innerHTML = re;
            }
          }
        };
        var V = i._createDomEventScope();
        i.unset_actions = function () {
          V.detachAll();
        };
        i.set_actions = function () {
          for (var T in this._els) {
            if (this._click[T]) {
              for (var W = 0; W < this._els[T].length; W++) {
                var z = this._els[T][W];
                var Z = this._click[T].bind(z);
                V.attach(z, "click", Z);
              }
            }
          }
          V.attach(this._obj, "selectstart", function (re) {
            re.preventDefault();
            return false;
          });
          V.attach(this._obj, "mousemove", function (re) {
            if (!i._temp_touch_block) {
              i._on_mouse_move(re);
            }
          });
          V.attach(this._obj, "mousedown", function (re) {
            if (!i._ignore_next_click) {
              i._on_mouse_down(re);
            }
          });
          V.attach(this._obj, "mouseup", function (re) {
            if (!i._ignore_next_click) {
              i._on_mouse_up(re);
            }
          });
          V.attach(this._obj, "dblclick", function (re) {
            i._on_dbl_click(re);
          });
          V.attach(this._obj, "contextmenu", function (re) {
            var oe = re;
            return i.callEvent("onContextMenu", [i._locate_event(oe.target || oe.srcElement), oe]);
          });
        };
        i.select = function (T) {
          if (this._select_id != T) {
            i._close_not_saved();
            this.editStop(false);
            if (this._select_id) {
              this.unselect();
            }
            this._select_id = T;
            this.updateEvent(T);
            this.callEvent("onEventSelected", [T]);
          }
        };
        i.unselect = function (T) {
          if (!T || T == this._select_id) {
            var W = this._select_id;
            this._select_id = null;
            if (W && this.getEvent(W)) {
              this.updateEvent(W);
            }
            this.callEvent("onEventUnselected", [W]);
          }
        };
        i.getState = function () {
          return {
            mode: this._mode,
            date: new Date(this._date),
            min_date: new Date(this._min_date),
            max_date: new Date(this._max_date),
            editor_id: this._edit_id,
            lightbox_id: this._lightbox_id,
            new_event: this._new_event,
            select_id: this._select_id,
            expanded: this.expanded,
            drag_id: this._drag_id,
            drag_mode: this._drag_mode
          };
        };
        i._click = {
          dhx_cal_data: function (T) {
            if (i._ignore_next_click) {
              if (T.preventDefault) {
                T.preventDefault();
              }
              T.cancelBubble = true;
              i._ignore_next_click = false;
              return false;
            }
            var W = T.target;
            var z = i._locate_event(W);
            if (z) {
              if (!i.callEvent("onClick", [z, T]) || i.config.readonly) {
                return;
              }
            } else {
              i.callEvent("onEmptyClick", [i.getActionData(T).date, T]);
            }
            if (z && i.config.select) {
              i.select(z);
              var Z = i._getClassName(W);
              if (Z.indexOf("_icon") != -1) {
                i._click.buttons[Z.split(" ")[1].replace("icon_", "")](z);
              }
            } else {
              i._close_not_saved();
              if (i.getState().select_id && new Date().valueOf() - (i._new_event || 0) > 500) {
                i.unselect();
              }
            }
          },
          dhx_cal_prev_button: function () {
            i._click.dhx_cal_next_button(0, -1);
          },
          dhx_cal_next_button: function (T, W) {
            var z = 1;
            if (i.config.rtl) {
              W = -W;
              z = -z;
            }
            i.setCurrentView(i.date.add(i.date[i._mode + "_start"](new Date(i._date)), W || z, i._mode));
          },
          dhx_cal_today_button: function () {
            if (i.callEvent("onBeforeTodayDisplayed", [])) {
              i.setCurrentView(i._currentDate());
            }
          },
          dhx_cal_tab: function () {
            var T = this.getAttribute("data-tab");
            var W = this.getAttribute("name");
            var z = T || W.substring(0, W.search("_tab"));
            i.setCurrentView(i._date, z);
          },
          buttons: {
            delete: function (T) {
              i._dhtmlx_confirm(i.locale.labels.confirm_deleting, i.locale.labels.title_confirm_deleting, function () {
                i.deleteEvent(T);
              });
            },
            edit: function (T) {
              i.edit(T);
            },
            save: function (T) {
              i.editStop(true);
            },
            details: function (T) {
              i.showLightbox(T);
            },
            cancel: function (T) {
              i.editStop(false);
            }
          }
        };
        i._dhtmlx_confirm = function (T, W, z) {
          if (!T) {
            return z();
          }
          var Z = {
            text: T
          };
          if (W) {
            Z.title = W;
          }
          if (z) {
            Z.callback = function (re) {
              if (re) {
                z();
              }
            };
          }
          i.confirm(Z);
        };
        i.addEventNow = function (T, W, z) {
          var Z = {};
          if (i._isObject(T) && !i._isDate(T)) {
            Z = T;
            T = null;
          }
          var re = (this.config.event_duration || this.config.time_step) * 60000;
          T ||= Z.start_date || Math.round(i._currentDate().valueOf() / re) * re;
          var oe = new Date(T);
          if (!W) {
            var _e = this.config.first_hour;
            if (_e > oe.getHours()) {
              oe.setHours(_e);
              T = oe.valueOf();
            }
            W = T.valueOf() + re;
          }
          var he = new Date(W);
          if (oe.valueOf() == he.valueOf()) {
            he.setTime(he.valueOf() + re);
          }
          Z.start_date = Z.start_date || oe;
          Z.end_date = Z.end_date || he;
          Z.text = Z.text || this.locale.labels.new_event;
          Z.id = this._drag_id = Z.id || this.uid();
          this._drag_mode = "new-size";
          this._loading = true;
          var be = this.addEvent(Z);
          this.callEvent("onEventCreated", [this._drag_id, z]);
          this._loading = false;
          this._drag_event = {};
          this._on_mouse_up(z);
          return be;
        };
        i._on_dbl_click = function (T, W) {
          W = W || T.target || T.srcElement;
          if (!this.config.readonly) {
            var z = i._getClassName(W).split(" ")[0];
            switch (z) {
              case "dhx_scale_holder":
              case "dhx_scale_holder_now":
              case "dhx_month_body":
              case "dhx_wa_day_data":
                if (!i.config.dblclick_create) {
                  break;
                }
                this.addEventNow(this.getActionData(T).date, null, T);
                break;
              case "dhx_cal_event":
              case "dhx_wa_ev_body":
              case "dhx_agenda_line":
              case "dhx_grid_event":
              case "dhx_cal_event_line":
              case "dhx_cal_event_clear":
                var Z = this._locate_event(W);
                if (!this.callEvent("onDblClick", [Z, T])) {
                  return;
                }
                if (this.config.details_on_dblclick || this._table_view || !this.getEvent(Z)._timed || !this.config.select) {
                  this.showLightbox(Z);
                } else {
                  this.edit(Z);
                }
                break;
              case "dhx_time_block":
              case "dhx_cal_container":
                return;
              default:
                var re = this["dblclick_" + z];
                if (re) {
                  re.call(this, T);
                } else if (W.parentNode && W != this) {
                  return i._on_dbl_click(T, W.parentNode);
                }
            }
          }
        };
        i._get_column_index = function (T) {
          var W = 0;
          if (this._cols) {
            for (var z = 0, Z = 0; z + this._cols[Z] < T && Z < this._cols.length;) {
              z += this._cols[Z];
              Z++;
            }
            W = Z + (this._cols[Z] ? (T - z) / this._cols[Z] : 0);
            if (this._ignores && W >= this._cols.length) {
              for (; W >= 1 && this._ignores[Math.floor(W)];) {
                W--;
              }
            }
          }
          return W;
        };
        i._week_indexes_from_pos = function (T) {
          if (this._cols) {
            var W = this._get_column_index(T.x);
            T.x = Math.min(this._cols.length - 1, Math.max(0, Math.ceil(W) - 1));
            T.y = Math.max(0, Math.ceil(T.y * 60 / (this.config.time_step * this.config.hour_size_px)) - 1) + this.config.first_hour * (60 / this.config.time_step);
            return T;
          }
          return T;
        };
        i._mouse_coords = function (T) {
          var W;
          var z = document.body;
          var Z = document.documentElement;
          W = this.$env.isIE || !T.pageX && !T.pageY ? {
            x: T.clientX + (z.scrollLeft || Z.scrollLeft || 0) - z.clientLeft,
            y: T.clientY + (z.scrollTop || Z.scrollTop || 0) - z.clientTop
          } : {
            x: T.pageX,
            y: T.pageY
          };
          if (this.config.rtl && this._colsS) {
            W.x = this.$container.querySelector(".dhx_cal_data").offsetWidth - W.x;
            if (this._mode !== "month") {
              W.x -= this.xy.scale_width;
            }
          } else {
            W.x -= this.$domHelpers.getAbsoluteLeft(this._obj) + (this._table_view ? 0 : this.xy.scale_width);
          }
          var re = this.$container.querySelector(".dhx_cal_data");
          W.y -= this.$domHelpers.getAbsoluteTop(re) - this._els.dhx_cal_data[0].scrollTop;
          W.ev = T;
          var oe = this["mouse_" + this._mode];
          if (oe) {
            W = oe.call(this, W);
          } else if (this._table_view) {
            var _e = this._get_column_index(W.x);
            if (!this._cols || !this._colsS) {
              return W;
            }
            var he = 0;
            for (he = 1; he < this._colsS.heights.length && this._colsS.heights[he] <= W.y; he++);
            W.y = Math.ceil((Math.max(0, _e) + Math.max(0, he - 1) * 7) * 24 * 60 / this.config.time_step);
            if (i._drag_mode || this._mode == "month") {
              W.y = (Math.max(0, Math.ceil(_e) - 1) + Math.max(0, he - 1) * 7) * 24 * 60 / this.config.time_step;
            }
            if (this._drag_mode == "move" && i._ignores_detected && i.config.preserve_length) {
              W._ignores = true;
              this._drag_event._event_length ||= this._get_real_event_length(this._drag_event.start_date, this._drag_event.end_date, {
                x_step: 1,
                x_unit: "day"
              });
            }
            W.x = 0;
          } else {
            W = this._week_indexes_from_pos(W);
          }
          W.timestamp = +new Date();
          return W;
        };
        i._close_not_saved = function () {
          if (new Date().valueOf() - (i._new_event || 0) > 500 && i._edit_id) {
            var T = i.locale.labels.confirm_closing;
            i._dhtmlx_confirm(T, i.locale.labels.title_confirm_closing, function () {
              i.editStop(i.config.positive_closing);
            });
            if (T) {
              this._drag_id = this._drag_pos = this._drag_mode = null;
            }
          }
        };
        i._correct_shift = function (T, W) {
          return T - (new Date(i._min_date).getTimezoneOffset() - new Date(T).getTimezoneOffset()) * 60000 * (W ? -1 : 1);
        };
        i._is_pos_changed = function (T, W) {
          function z(Z, re, oe) {
            return Math.abs(Z - re) > oe;
          }
          return !T || !this._drag_pos || !!this._drag_pos.has_moved || !!!this._drag_pos.timestamp || W.timestamp - this._drag_pos.timestamp > 100 || !!z(T.ev.clientX, W.ev.clientX, 5) || !!z(T.ev.clientY, W.ev.clientY, 5);
        };
        i._correct_drag_start_date = function (T) {
          var W;
          if (i.matrix) {
            W = i.matrix[i._mode];
          }
          W = W || {
            x_step: 1,
            x_unit: "day"
          };
          T = new Date(T);
          var z = 1;
          if (W._start_correction || W._end_correction) {
            z = (W.last_hour || 0) * 60 - (T.getHours() * 60 + T.getMinutes()) || 1;
          }
          return T * 1 + (i._get_fictional_event_length(T, z, W) - z);
        };
        i._correct_drag_end_date = function (T, W) {
          var z;
          if (i.matrix) {
            z = i.matrix[i._mode];
          }
          var Z = T * 1 + i._get_fictional_event_length(T, W, z = z || {
            x_step: 1,
            x_unit: "day"
          });
          return new Date(Z * 1 - (i._get_fictional_event_length(Z, -1, z, -1) + 1));
        };
        i._on_mouse_move = function (T) {
          if (this._drag_mode) {
            var W = this._mouse_coords(T);
            if (this._is_pos_changed(this._drag_pos, W)) {
              var z;
              var Z;
              if (this._edit_id != this._drag_id) {
                this._close_not_saved();
              }
              if (!this._drag_mode) {
                return;
              }
              var re = null;
              if (this._drag_pos && !this._drag_pos.has_moved) {
                (re = this._drag_pos).has_moved = true;
              }
              this._drag_pos = W;
              this._drag_pos.has_moved = true;
              if (this._drag_mode == "create") {
                if (re) {
                  W = re;
                }
                this._close_not_saved();
                this.unselect(this._select_id);
                this._loading = true;
                z = this._get_date_from_pos(W).valueOf();
                if (!this._drag_start) {
                  if (this.callEvent("onBeforeEventCreated", [T, this._drag_id])) {
                    this._loading = false;
                    this._drag_start = z;
                    return;
                  } else {
                    this._loading = false;
                    return;
                  }
                }
                Z = z;
                var oe = new Date(this._drag_start);
                var _e = new Date(Z);
                if ((this._mode == "day" || this._mode == "week") && oe.getHours() == _e.getHours() && oe.getMinutes() == _e.getMinutes()) {
                  _e = new Date(this._drag_start + 1000);
                }
                this._drag_id = this.uid();
                this.addEvent(oe, _e, this.locale.labels.new_event, this._drag_id, W.fields);
                this.callEvent("onEventCreated", [this._drag_id, T]);
                this._loading = false;
                this._drag_mode = "new-size";
              }
              var he;
              var be = this.config.time_step;
              var Ae = this.getEvent(this._drag_id);
              if (i.matrix) {
                he = i.matrix[i._mode];
              }
              he = he || {
                x_step: 1,
                x_unit: "day"
              };
              if (this._drag_mode == "move") {
                z = this._min_date.valueOf() + (W.y * this.config.time_step + W.x * 24 * 60) * 60000;
                if (!W.custom && this._table_view) {
                  z += this.date.time_part(Ae.start_date) * 1000;
                }
                if (!this._table_view && this._dragEventBody && this._drag_event._move_event_shift === undefined) {
                  this._drag_event._move_event_shift = z - Ae.start_date;
                }
                if (this._drag_event._move_event_shift) {
                  z -= this._drag_event._move_event_shift;
                }
                z = this._correct_shift(z);
                if (W._ignores && this.config.preserve_length && this._table_view) {
                  z = i._correct_drag_start_date(z);
                  Z = i._correct_drag_end_date(z, this._drag_event._event_length);
                } else {
                  Z = Ae.end_date.valueOf() - (Ae.start_date.valueOf() - z);
                }
              } else {
                z = Ae.start_date.valueOf();
                Z = Ae.end_date.valueOf();
                if (this._table_view) {
                  var He = this._min_date.valueOf() + W.y * this.config.time_step * 60000 + (W.custom ? 0 : 86400000);
                  if (this._mode == "month") {
                    He = this._correct_shift(He, false);
                    if (this._drag_from_start) {
                      var Ne = 86400000;
                      if (He <= i.date.date_part(new Date(Z + Ne - 1)).valueOf()) {
                        z = He - Ne;
                      }
                    } else {
                      Z = He;
                    }
                  } else if (this.config.preserve_length) {
                    if (W.resize_from_start) {
                      z = i._correct_drag_start_date(He);
                    } else {
                      Z = i._correct_drag_end_date(He, 0);
                    }
                  } else if (W.resize_from_start) {
                    z = He;
                  } else {
                    Z = He;
                  }
                } else {
                  var Ve = this.date.date_part(new Date(Ae.end_date.valueOf() - 1)).valueOf();
                  var Se = new Date(Ve);
                  var Oe = 60 / be * (this.config.last_hour - this.config.first_hour);
                  this.config.time_step = 1;
                  var at = this._mouse_coords(T);
                  this.config.time_step = be;
                  var ht = W.y * be * 60000;
                  var lt = Math.min(W.y + 1, Oe) * be * 60000;
                  var mt = at.y * 60000;
                  Z = Math.abs(ht - mt) > Math.abs(lt - mt) ? Ve + lt : Ve + ht;
                  Z += (new Date(Z).getTimezoneOffset() - Se.getTimezoneOffset()) * 60000;
                  this._els.dhx_cal_data[0].style.cursor = "s-resize";
                  if (this._mode == "week" || this._mode == "day") {
                    Z = this._correct_shift(Z);
                  }
                }
                if (this._drag_mode == "new-size") {
                  if (Z <= this._drag_start) {
                    var ft = W.shift || (this._table_view && !W.custom ? 86400000 : 0);
                    z = Z - (W.shift ? 0 : ft);
                    Z = this._drag_start + (ft || be * 60000);
                  } else {
                    z = this._drag_start;
                  }
                } else if (Z <= z) {
                  Z = z + be * 60000;
                }
              }
              var yt = new Date(Z - 1);
              var xt = new Date(z);
              if (this._drag_mode == "move" && i.config.limit_drag_out && (+xt < +i._min_date || +Z > +i._max_date)) {
                if (+Ae.start_date < +i._min_date || +Ae.end_date > +i._max_date) {
                  xt = new Date(Ae.start_date);
                  Z = new Date(Ae.end_date);
                } else {
                  var wt = Z - xt;
                  if (+xt < +i._min_date) {
                    xt = new Date(i._min_date);
                    if (W._ignores && this.config.preserve_length && this._table_view) {
                      xt = new Date(i._correct_drag_start_date(xt));
                      if (he._start_correction) {
                        xt = new Date(xt.valueOf() + he._start_correction);
                      }
                      Z = new Date(xt * 1 + this._get_fictional_event_length(xt, this._drag_event._event_length, he));
                    } else {
                      Z = new Date(+xt + wt);
                    }
                  } else {
                    Z = new Date(i._max_date);
                    if (W._ignores && this.config.preserve_length && this._table_view) {
                      if (he._end_correction) {
                        Z = new Date(Z.valueOf() - he._end_correction);
                      }
                      Z = new Date(Z * 1 - this._get_fictional_event_length(Z, 0, he, true));
                      xt = new Date(Z * 1 - this._get_fictional_event_length(Z, this._drag_event._event_length, he, true));
                      if (this._ignores_detected) {
                        xt = i.date.add(xt, he.x_step, he.x_unit);
                        Z = new Date(Z * 1 - this._get_fictional_event_length(Z, 0, he, true));
                        Z = i.date.add(Z, he.x_step, he.x_unit);
                      }
                    } else {
                      xt = new Date(+Z - wt);
                    }
                  }
                }
                yt = new Date(Z - 1);
              }
              if (!this._table_view && this._dragEventBody && !i.config.all_timed && (!i._get_section_view() && W.x != this._get_event_sday({
                start_date: new Date(z),
                end_date: new Date(z)
              }) || new Date(z).getHours() < this.config.first_hour)) {
                wt = Z - xt;
                if (this._drag_mode == "move") {
                  Ne = this._min_date.valueOf() + W.x * 24 * 60 * 60000;
                  (xt = new Date(Ne)).setHours(this.config.first_hour);
                  Z = new Date(xt.valueOf() + wt);
                  yt = new Date(Z - 1);
                }
              }
              if (!this._table_view && !i.config.all_timed && (!!!i.getView() && W.x != this._get_event_sday({
                start_date: new Date(Z),
                end_date: new Date(Z)
              }) || new Date(Z).getHours() >= this.config.last_hour)) {
                wt = Z - xt;
                Ne = this._min_date.valueOf() + W.x * 24 * 60 * 60000;
                (Z = i.date.date_part(new Date(Ne))).setHours(this.config.last_hour);
                yt = new Date(Z - 1);
                if (this._drag_mode == "move") {
                  xt = new Date(+Z - wt);
                }
              }
              if (this._table_view || yt.getDate() == xt.getDate() && yt.getHours() < this.config.last_hour || i._allow_dnd) {
                Ae.start_date = xt;
                Ae.end_date = new Date(Z);
                if (this.config.update_render) {
                  var Dt = i._els.dhx_cal_data[0].scrollTop;
                  this.update_view();
                  i._els.dhx_cal_data[0].scrollTop = Dt;
                } else {
                  this.updateEvent(this._drag_id);
                }
              }
              if (this._table_view) {
                this.for_rendered(this._drag_id, function (Pt) {
                  Pt.className += " dhx_in_move dhx_cal_event_drag";
                });
              }
              this.callEvent("onEventDrag", [this._drag_id, this._drag_mode, T]);
            }
          } else if (i.checkEvent("onMouseMove")) {
            var Rt = this._locate_event(T.target || T.srcElement);
            this.callEvent("onMouseMove", [Rt, T]);
          }
        };
        i._on_mouse_down = function (T, W) {
          if (T.button != 2 && !this.config.readonly && !this._drag_mode) {
            var z = i._getClassName(W = W || T.target || T.srcElement).split(" ")[0];
            if (this.config.drag_event_body && z == "dhx_body" && W.parentNode && W.parentNode.className.indexOf("dhx_cal_select_menu") === -1) {
              z = "dhx_event_move";
              this._dragEventBody = true;
            }
            switch (z) {
              case "dhx_cal_event_line":
              case "dhx_cal_event_clear":
                if (this._table_view) {
                  this._drag_mode = "move";
                }
                break;
              case "dhx_event_move":
              case "dhx_wa_ev_body":
                this._drag_mode = "move";
                break;
              case "dhx_event_resize":
                this._drag_mode = "resize";
                i._drag_from_start = i._getClassName(W).indexOf("dhx_event_resize_end") < 0;
                break;
              case "dhx_scale_holder":
              case "dhx_scale_holder_now":
              case "dhx_month_body":
              case "dhx_matrix_cell":
              case "dhx_marked_timespan":
                this._drag_mode = "create";
                break;
              case "":
                if (W.parentNode) {
                  return i._on_mouse_down(T, W.parentNode);
                }
                break;
              default:
                if ((!i.checkEvent("onMouseDown") || i.callEvent("onMouseDown", [z, T])) && W.parentNode && W != this && z != "dhx_body") {
                  return i._on_mouse_down(T, W.parentNode);
                }
                this._drag_mode = null;
                this._drag_id = null;
            }
            if (this._drag_mode) {
              var Z = this._locate_event(W);
              if (this.config["drag_" + this._drag_mode] && this.callEvent("onBeforeDrag", [Z, this._drag_mode, T])) {
                this._drag_id = Z;
                if (this._edit_id != this._drag_id || this._edit_id && this._drag_mode == "create") {
                  this._close_not_saved();
                }
                if (!this._drag_mode) {
                  return;
                }
                this._drag_event = i._lame_clone(this.getEvent(this._drag_id) || {});
                this._drag_pos = this._mouse_coords(T);
              } else {
                this._drag_mode = this._drag_id = 0;
              }
            }
            this._drag_start = null;
          }
        };
        i._get_private_properties = function (T) {
          var W = {};
          for (var z in T) {
            if (z.indexOf("_") === 0) {
              W[z] = true;
            }
          }
          return W;
        };
        i._clear_temporary_properties = function (T, W) {
          var z = this._get_private_properties(T);
          var Z = this._get_private_properties(W);
          for (var re in Z) {
            if (!z[re]) {
              delete W[re];
            }
          }
        };
        i._on_mouse_up = function (T) {
          if (!T || T.button != 2 || !this._mobile) {
            if (this._drag_mode && this._drag_id) {
              this._els.dhx_cal_data[0].style.cursor = "default";
              var W = this._drag_id;
              var z = this._drag_mode;
              var Z = !this._drag_pos || this._drag_pos.has_moved;
              delete this._drag_event._move_event_shift;
              var re = this.getEvent(this._drag_id);
              if (Z && (this._drag_event._dhx_changed || !this._drag_event.start_date || re.start_date.valueOf() != this._drag_event.start_date.valueOf() || re.end_date.valueOf() != this._drag_event.end_date.valueOf())) {
                var oe = this._drag_mode == "new-size";
                if (this.callEvent("onBeforeEventChanged", [re, T, oe, this._drag_event])) {
                  this._drag_id = this._drag_mode = null;
                  if (oe && this.config.edit_on_create) {
                    this.unselect();
                    this._new_event = new Date();
                    if (this._table_view || this.config.details_on_create || !this.config.select || !this.isOneDayEvent(this.getEvent(W))) {
                      i.callEvent("onDragEnd", [W, z, T]);
                      return this.showLightbox(W);
                    }
                    this._drag_pos = true;
                    this._select_id = this._edit_id = W;
                  } else if (!this._new_event) {
                    this.callEvent(oe ? "onEventAdded" : "onEventChanged", [W, this.getEvent(W)]);
                  }
                } else if (oe) {
                  this.deleteEvent(re.id, true);
                } else {
                  this._drag_event._dhx_changed = false;
                  this._clear_temporary_properties(re, this._drag_event);
                  i._lame_copy(re, this._drag_event);
                  this.updateEvent(re.id);
                }
              }
              if (this._drag_pos && (this._drag_pos.has_moved || this._drag_pos === true)) {
                this._drag_id = this._drag_mode = null;
                this.render_view_data();
              }
              i.callEvent("onDragEnd", [W, z, T]);
            }
            this._drag_id = null;
            this._drag_mode = null;
            this._drag_pos = null;
          }
        };
        i._trigger_dyn_loading = function () {
          return !!this._load_mode && !!this._load() && !(this._render_wait = true, 0);
        };
        i.update_view = function () {
          this._reset_ignores();
          this._update_nav_bar(this.config.header, this.$container.querySelector(".dhx_cal_navline"));
          var T = this[this._mode + "_view"];
          if (T) {
            T.call(this, true);
          } else {
            this._reset_scale();
          }
          if (this._trigger_dyn_loading()) {
            return true;
          }
          this.render_view_data();
        };
        i.isViewExists = function (T) {
          return !!i[T + "_view"] || !!i.date[T + "_start"] && !!i.templates[T + "_date"] && !!i.templates[T + "_scale_date"];
        };
        i._set_aria_buttons_attrs = function () {
          for (var T = ["dhx_cal_next_button", "dhx_cal_prev_button", "dhx_cal_tab", "dhx_cal_today_button"], W = 0; W < T.length; W++) {
            for (var z = this._els[T[W]], Z = 0; z && Z < z.length; Z++) {
              var re = z[Z].getAttribute("data-tab") || z[Z].getAttribute("name");
              var oe = this.locale.labels[T[W]];
              if (re) {
                oe = this.locale.labels[re + "_tab"] || this.locale.labels[re] || oe;
              }
              if (T[W] == "dhx_cal_next_button") {
                oe = this.locale.labels.next;
              } else if (T[W] == "dhx_cal_prev_button") {
                oe = this.locale.labels.prev;
              }
              this._waiAria.headerButtonsAttributes(z[Z], oe || "");
            }
          }
        };
        i.updateView = function (T, W) {
          if (!this.$container) {
            throw new Error("The scheduler is not initialized. \n **scheduler.updateView** or **scheduler.setCurrentView** can be called only after **scheduler.init**");
          }
          T = T || this._date;
          var z = this._obj;
          var Z = "dhx_scheduler_" + this._mode;
          var re = "dhx_scheduler_" + (W = W || this._mode);
          if (this._mode && z.className.indexOf(Z) != -1) {
            z.className = z.className.replace(Z, re);
          } else {
            z.className += " " + re;
          }
          var oe;
          var _e = this._mode == W && !!this.config.preserve_scroll && this._els.dhx_cal_data[0].scrollTop;
          if (this._els.dhx_multi_day && this._els.dhx_multi_day[0]) {
            oe = this._els.dhx_multi_day[0].scrollTop;
          }
          if (this[this._mode + "_view"] && W && this._mode != W) {
            this[this._mode + "_view"](false);
          }
          this._close_not_saved();
          if (this._els.dhx_multi_day) {
            this._els.dhx_multi_day[0].parentNode.removeChild(this._els.dhx_multi_day[0]);
            this._els.dhx_multi_day = null;
          }
          this._mode = W;
          this._date = T;
          this._table_view = this._mode == "month";
          this._dy_shift = 0;
          this.update_view();
          this._set_aria_buttons_attrs();
          var he = this._els.dhx_cal_tab;
          if (he) {
            for (var be = 0; be < he.length; be++) {
              var Ae = he[be];
              if (Ae.getAttribute("data-tab") == this._mode || Ae.getAttribute("name") == this._mode + "_tab") {
                Ae.classList.add("active");
                this._waiAria.headerToggleState(Ae, true);
              } else {
                Ae.classList.remove("active");
                this._waiAria.headerToggleState(Ae, false);
              }
            }
          }
          if (typeof _e == "number") {
            this._els.dhx_cal_data[0].scrollTop = _e;
          }
          if (typeof oe == "number" && this._els.dhx_multi_day && this._els.dhx_multi_day[0]) {
            this._els.dhx_multi_day[0].scrollTop = oe;
          }
        };
        i.setCurrentView = function (T, W) {
          if (this.callEvent("onBeforeViewChange", [this._mode, this._date, W || this._mode, T || this._date])) {
            this.updateView(T, W);
            this.callEvent("onViewChange", [this._mode, this._date]);
          }
        };
        i.render = function (T, W) {
          i.setCurrentView(T, W);
        };
        i._render_x_header = function (T, W, z, Z, re) {
          re = re || 0;
          var oe = document.createElement("div");
          oe.className = "dhx_scale_bar";
          if (this.templates[this._mode + "_scalex_class"]) {
            oe.className += " " + this.templates[this._mode + "_scalex_class"](z);
          }
          var _e = this._cols[T] - 1;
          if (this._mode == "month" && T === 0 && this.config.left_border) {
            oe.className += " dhx_scale_bar_border";
            W += 1;
          }
          this.set_xy(oe, _e, this.xy.scale_height - 2, W, re);
          var he = this.templates[this._mode + "_scale_date"](z, this._mode);
          oe.innerHTML = he;
          this._waiAria.dayHeaderAttr(oe, he);
          Z.appendChild(oe);
        };
        i._get_columns_num = function (T, W) {
          var z = 7;
          if (!i._table_view) {
            var Z = i.date["get_" + i._mode + "_end"];
            if (Z) {
              W = Z(T);
            }
            z = Math.round((W.valueOf() - T.valueOf()) / 86400000);
          }
          return z;
        };
        i._get_timeunit_start = function () {
          return this.date[this._mode + "_start"](new Date(this._date.valueOf()));
        };
        i._get_view_end = function () {
          var T = this._get_timeunit_start();
          var W = i.date.add(T, 1, this._mode);
          if (!i._table_view) {
            var z = i.date["get_" + i._mode + "_end"];
            if (z) {
              W = z(T);
            }
          }
          return W;
        };
        i._calc_scale_sizes = function (T, W, z) {
          var Z = this.config.rtl;
          var re = T;
          var oe = this._get_columns_num(W, z);
          this._process_ignores(W, oe, "day", 1);
          for (var _e = oe - this._ignores_detected, he = 0; he < oe; he++) {
            if (this._ignores[he]) {
              this._cols[he] = 0;
              _e++;
            } else {
              this._cols[he] = Math.floor(re / (_e - he));
            }
            re -= this._cols[he];
            this._colsS[he] = (this._cols[he - 1] || 0) + (this._colsS[he - 1] || (this._table_view ? 0 : (Z ? this.xy.scroll_width : this.xy.scale_width) + 2));
          }
          this._colsS.col_length = oe;
          this._colsS[oe] = this._cols[oe - 1] + this._colsS[oe - 1] || 0;
        };
        i._set_scale_col_size = function (T, W, z) {
          var Z = this.config;
          this.set_xy(T, W - 1, Z.hour_size_px * (Z.last_hour - Z.first_hour), z + this.xy.scale_width + 1, 0);
        };
        i._render_scales = function (T, W) {
          var z = new Date(i._min_date);
          var Z = new Date(i._max_date);
          var re = this.date.date_part(i._currentDate());
          var oe = parseInt(T.style.width, 10);
          var _e = new Date(this._min_date);
          var he = this._get_columns_num(z, Z);
          this._calc_scale_sizes(oe, z, Z);
          var be = 0;
          T.innerHTML = "";
          for (var Ae = 0; Ae < he; Ae++) {
            if (!this._ignores[Ae]) {
              this._render_x_header(Ae, be, _e, T);
            }
            if (!this._table_view) {
              var He = document.createElement("div");
              var Ne = "dhx_scale_holder";
              if (_e.valueOf() == re.valueOf()) {
                Ne = "dhx_scale_holder_now";
              }
              He.setAttribute("data-column-index", Ae);
              if (this._ignores_detected && this._ignores[Ae]) {
                Ne += " dhx_scale_ignore";
              }
              He.className = Ne + " " + this.templates.week_date_class(_e, re);
              this._waiAria.dayColumnAttr(He, _e);
              this._set_scale_col_size(He, this._cols[Ae], be);
              W.appendChild(He);
              this.callEvent("onScaleAdd", [He, _e]);
            }
            be += this._cols[Ae];
            _e = this.date.add(_e, 1, "day");
            _e = this.date.day_start(_e);
          }
        };
        i._getNavDateElement = function () {
          return this.$container.querySelector(".dhx_cal_date");
        };
        i._reset_scale = function () {
          if (this.templates[this._mode + "_date"]) {
            var Z;
            var re;
            var T = this._els.dhx_cal_header[0];
            var W = this._els.dhx_cal_data[0];
            var z = this.config;
            T.innerHTML = "";
            W.innerHTML = "";
            W.className = "dhx_cal_data" + (z.readonly || !z.drag_resize ? " dhx_resize_denied" : "") + (z.readonly || !z.drag_move ? " dhx_move_denied" : "");
            this._scales = {};
            this._cols = [];
            this._colsS = {
              height: 0
            };
            this._dy_shift = 0;
            this.set_sizes();
            var _e = this._get_timeunit_start();
            var he = i._get_view_end();
            Z = re = this._table_view ? i.date.week_start(_e) : _e;
            this._min_date = Z;
            var be = this.templates[this._mode + "_date"](_e, he, this._mode);
            var Ae = this._getNavDateElement();
            if (Ae) {
              Ae.innerHTML = be;
              this._waiAria.navBarDateAttr(Ae, be);
            }
            this._max_date = he;
            i._render_scales(T, W);
            if (this._table_view) {
              this._reset_month_scale(W, _e, re);
            } else {
              this._reset_hours_scale(W, _e, re);
              if (z.multi_day) {
                if (this._els.dhx_multi_day) {
                  this._els.dhx_multi_day[0].parentNode.removeChild(this._els.dhx_multi_day[0]);
                  this._els.dhx_multi_day = null;
                }
                var He = this._els.dhx_cal_navline[0].offsetHeight + this._els.dhx_cal_header[0].offsetHeight + 1;
                var Ne = document.createElement("div");
                Ne.className = "dhx_multi_day";
                Ne.style.visibility = "hidden";
                var Fe = Math.max(this._colsS[this._colsS.col_length] + (z.rtl ? this.xy.scale_width : this.xy.scroll_width) - 2, 0);
                this.set_xy(Ne, Fe, 0, 0, He);
                W.parentNode.insertBefore(Ne, W);
                var Oe = Ne.cloneNode(true);
                Oe.className = "dhx_multi_day_icon";
                Oe.style.visibility = "hidden";
                this.set_xy(Oe, this.xy.scale_width, 0, 0, He);
                Ne.appendChild(Oe);
                this._els.dhx_multi_day = [Ne, Oe];
                i.event(this._els.dhx_multi_day[0], "click", this._click.dhx_cal_data);
              }
            }
          }
        };
        i._reset_hours_scale = function (T, W, z) {
          var Z = document.createElement("div");
          Z.className = "dhx_scale_holder";
          for (var re = new Date(1980, 1, 1, this.config.first_hour, 0, 0), oe = this.config.first_hour * 1; oe < this.config.last_hour; oe++) {
            var _e = document.createElement("div");
            _e.className = "dhx_scale_hour";
            _e.style.height = this.config.hour_size_px + "px";
            var he = this.xy.scale_width;
            if (this.config.left_border) {
              _e.className += " dhx_scale_hour_border";
            }
            _e.style.width = he + "px";
            var be = i.templates.hour_scale(re);
            _e.innerHTML = be;
            this._waiAria.hourScaleAttr(_e, be);
            Z.appendChild(_e);
            re = this.date.add(re, 1, "hour");
          }
          T.appendChild(Z);
          if (this.config.scroll_hour) {
            T.scrollTop = this.config.hour_size_px * (this.config.scroll_hour - this.config.first_hour);
          }
        };
        i._currentDate = function () {
          if (i.config.now_date) {
            return new Date(i.config.now_date);
          } else {
            return new Date();
          }
        };
        i._reset_ignores = function () {
          this._ignores = {};
          this._ignores_detected = 0;
        };
        i._process_ignores = function (T, W, z, Z, re) {
          this._reset_ignores();
          var oe = i["ignore_" + this._mode];
          if (oe) {
            for (var _e = new Date(T), he = 0; he < W; he++) {
              if (oe(_e)) {
                this._ignores_detected += 1;
                this._ignores[he] = true;
                if (re) {
                  W++;
                }
              }
              _e = i.date.add(_e, Z, z);
              if (i.date[z + "_start"]) {
                _e = i.date[z + "_start"](_e);
              }
            }
          }
        };
        i._render_month_scale = function (T, W, z, Z) {
          var re = i.date.add(W, 1, "month");
          var oe = new Date(z);
          var _e = i._currentDate();
          this.date.date_part(_e);
          this.date.date_part(z);
          Z = Z || Math.ceil(Math.round((re.valueOf() - z.valueOf()) / 86400000) / 7);
          for (var he = [], be = 0; be <= 7; be++) {
            var Ae = (this._cols[be] || 0) - 1;
            if (be === 0 && this.config.left_border) {
              Ae -= 1;
            }
            he[be] = Ae + "px";
          }
          function He(Ft) {
            var Lt = i._colsS.height;
            if (i._colsS.heights[Ft + 1] !== undefined) {
              Lt = i._colsS.heights[Ft + 1] - (i._colsS.heights[Ft] || 0);
            }
            return Lt;
          }
          var Ne = 0;
          var Ve = document.createElement("table");
          Ve.setAttribute("cellpadding", "0");
          Ve.setAttribute("cellspacing", "0");
          var Se = document.createElement("tbody");
          Ve.appendChild(Se);
          var Fe = [];
          for (be = 0; be < Z; be++) {
            var Oe = document.createElement("tr");
            Se.appendChild(Oe);
            for (var at = Math.max(He(be) - i.xy.month_head_height, 0), ht = 0; ht < 7; ht++) {
              var lt = document.createElement("td");
              Oe.appendChild(lt);
              var mt = "";
              if (z < W) {
                mt = "dhx_before";
              } else if (z >= re) {
                mt = "dhx_after";
              } else if (z.valueOf() == _e.valueOf()) {
                mt = "dhx_now";
              }
              if (this._ignores_detected && this._ignores[ht]) {
                mt += " dhx_scale_ignore";
              }
              lt.className = mt + " " + this.templates.month_date_class(z, _e);
              lt.setAttribute("data-cell-date", i.templates.format_date(z));
              var ft = "dhx_month_body";
              var yt = "dhx_month_head";
              if (ht === 0 && this.config.left_border) {
                ft += " dhx_month_body_border";
                yt += " dhx_month_head_border";
              }
              if (this._ignores_detected && this._ignores[ht]) {
                lt.appendChild(document.createElement("div"));
                lt.appendChild(document.createElement("div"));
              } else {
                this._waiAria.monthCellAttr(lt, z);
                var xt = document.createElement("div");
                xt.className = yt;
                xt.innerHTML = this.templates.month_day(z);
                lt.appendChild(xt);
                var wt = document.createElement("div");
                wt.className = ft;
                wt.style.height = at + "px";
                wt.style.width = he[ht];
                lt.appendChild(wt);
              }
              Fe.push(z);
              var Dt = z.getDate();
              if ((z = this.date.add(z, 1, "day")).getDate() - Dt > 1) {
                z = new Date(z.getFullYear(), z.getMonth(), Dt + 1, 12, 0);
              }
            }
            i._colsS.heights[be] = Ne;
            Ne += He(be);
          }
          this._min_date = oe;
          this._max_date = z;
          T.innerHTML = "";
          T.appendChild(Ve);
          this._scales = {};
          var Rt = T.getElementsByTagName("div");
          for (be = 0; be < Fe.length; be++) {
            var Pt = Fe[be];
            this._scales[+Pt] = T = Rt[be * 2 + 1];
          }
          for (be = 0; be < Fe.length; be++) {
            this.callEvent("onScaleAdd", [this._scales[+(Pt = Fe[be])], Pt]);
          }
          return this._max_date;
        };
        i._reset_month_scale = function (T, W, z, Z) {
          var re = i.date.add(W, 1, "month");
          var oe = i._currentDate();
          this.date.date_part(oe);
          this.date.date_part(z);
          Z = Z || Math.ceil(Math.round((re.valueOf() - z.valueOf()) / 86400000) / 7);
          var _e = Math.floor(T.clientHeight / Z) - this.xy.month_head_height;
          this._colsS.height = _e + this.xy.month_head_height;
          this._colsS.heights = [];
          return i._render_month_scale(T, W, z, Z);
        };
        i.getView = function (T) {
          T ||= i.getState().mode;
          if (i.matrix && i.matrix[T]) {
            return i.matrix[T];
          } else if (i._props && i._props[T]) {
            return i._props[T];
          } else {
            return null;
          }
        };
        i.getLabel = function (T, W) {
          for (var z = this.config.lightbox.sections, Z = 0; Z < z.length; Z++) {
            if (z[Z].map_to == T) {
              for (var re = z[Z].options, oe = 0; oe < re.length; oe++) {
                if (re[oe].key == W) {
                  return re[oe].label;
                }
              }
            }
          }
          return "";
        };
        i.updateCollection = function (T, W) {
          var z = i.serverList(T);
          return !!z && (z.splice(0, z.length), z.push.apply(z, W || []), i.callEvent("onOptionsLoad", []), i.resetLightbox(), i.hideCover(), true);
        };
        i._lame_clone = function (T, W) {
          var z;
          var Z;
          var re;
          W = W || [];
          z = 0;
          for (; z < W.length; z += 2) {
            if (T === W[z]) {
              return W[z + 1];
            }
          }
          if (T && S(T) == "object") {
            re = Object.create(T);
            Z = [Array, Date, Number, String, Boolean];
            z = 0;
            for (; z < Z.length; z++) {
              if (T instanceof Z[z]) {
                re = z ? new Z[z](T) : new Z[z]();
              }
            }
            W.push(T, re);
            for (z in T) {
              if (Object.prototype.hasOwnProperty.apply(T, [z])) {
                re[z] = i._lame_clone(T[z], W);
              }
            }
          }
          return re || T;
        };
        i._lame_copy = function (T, W) {
          for (var z in W) {
            if (W.hasOwnProperty(z)) {
              T[z] = W[z];
            }
          }
          return T;
        };
        i._get_date_from_pos = function (T) {
          var W = this._min_date.valueOf() + (T.y * this.config.time_step + (this._table_view ? 0 : T.x) * 24 * 60) * 60000;
          return new Date(this._correct_shift(W));
        };
        i.getActionData = function (T) {
          var W = this._mouse_coords(T);
          return {
            date: this._get_date_from_pos(W),
            section: W.section
          };
        };
        i._focus = function (T, W) {
          if (T && T.focus) {
            if (this._mobile) {
              window.setTimeout(function () {
                T.focus();
              }, 10);
            } else {
              try {
                if (W && T.select && T.offsetWidth) {
                  T.select();
                }
                T.focus();
              } catch {}
            }
          }
        };
        i._get_real_event_length = function (T, W, z) {
          var Z;
          var re = W - T;
          var oe = z._start_correction + z._end_correction || 0;
          var _e = this["ignore_" + this._mode];
          var he = 0;
          if (z.render) {
            he = this._get_date_index(z, T);
            Z = this._get_date_index(z, W);
          } else {
            Z = Math.round(re / 60 / 60 / 1000 / 24);
          }
          for (var be = true; he < Z;) {
            var Ae = i.date.add(W, -z.x_step, z.x_unit);
            if (_e && _e(W) && (!be || be && _e(Ae))) {
              re -= W - Ae;
            } else {
              be = false;
              re -= oe;
            }
            W = Ae;
            Z--;
          }
          return re;
        };
        i._get_fictional_event_length = function (T, W, z, Z) {
          var re = new Date(T);
          var oe = Z ? -1 : 1;
          if (z._start_correction || z._end_correction) {
            var _e;
            _e = Z ? re.getHours() * 60 + re.getMinutes() - (z.first_hour || 0) * 60 : (z.last_hour || 0) * 60 - (re.getHours() * 60 + re.getMinutes());
            var he = (z.last_hour - z.first_hour) * 60;
            var be = Math.ceil((W / 60000 - _e) / he);
            if (be < 0) {
              be = 0;
            }
            W += be * (1440 - he) * 60 * 1000;
          }
          var Ae;
          var He = new Date(T * 1 + W * oe);
          var Ne = this["ignore_" + this._mode];
          var Ve = 0;
          for (z.render ? (Ve = this._get_date_index(z, re), Ae = this._get_date_index(z, He)) : Ae = Math.round(W / 60 / 60 / 1000 / 24); Ve * oe <= Ae * oe;) {
            var Se = i.date.add(re, z.x_step * oe, z.x_unit);
            if (Ne && Ne(re)) {
              W += (Se - re) * oe;
              Ae += oe;
            }
            re = Se;
            Ve += oe;
          }
          return W;
        };
        i._get_section_view = function () {
          return this.getView();
        };
        i._get_section_property = function () {
          if (this.matrix && this.matrix[this._mode]) {
            return this.matrix[this._mode].y_property;
          } else if (this._props && this._props[this._mode]) {
            return this._props[this._mode].map_to;
          } else {
            return null;
          }
        };
        i._is_initialized = function () {
          var T = this.getState();
          return this._obj && T.date && T.mode;
        };
        i._is_lightbox_open = function () {
          return this.getState().lightbox_id != null;
        };
      })(j);
      (function (i) {
        (function () {
          var o = new RegExp("<(?:.|\n)*?>", "gm");
          var c = new RegExp(" +", "gm");
          function h(W) {
            return (W + "").replace(o, " ").replace(c, " ");
          }
          var D = new RegExp("'", "gm");
          function V(W) {
            return (W + "").replace(D, "&#39;");
          }
          i._waiAria = {
            getAttributeString: function (W) {
              var z = [" "];
              for (var Z in W) {
                if (typeof W[Z] != "function" && l(W[Z]) != "object") {
                  var re = V(h(W[Z]));
                  z.push(Z + "='" + re + "'");
                }
              }
              z.push(" ");
              return z.join(" ");
            },
            setAttributes: function (W, z) {
              for (var Z in z) {
                W.setAttribute(Z, h(z[Z]));
              }
              return W;
            },
            labelAttr: function (W, z) {
              return this.setAttributes(W, {
                "aria-label": z
              });
            },
            label: function (W) {
              return i._waiAria.getAttributeString({
                "aria-label": W
              });
            },
            hourScaleAttr: function (W, z) {
              this.labelAttr(W, z);
            },
            monthCellAttr: function (W, z) {
              this.labelAttr(W, i.templates.day_date(z));
            },
            navBarDateAttr: function (W, z) {
              this.labelAttr(W, z);
            },
            dayHeaderAttr: function (W, z) {
              this.labelAttr(W, z);
            },
            dayColumnAttr: function (W, z) {
              this.dayHeaderAttr(W, i.templates.day_date(z));
            },
            headerButtonsAttributes: function (W, z) {
              return this.setAttributes(W, {
                role: "button",
                "aria-label": z
              });
            },
            headerToggleState: function (W, z) {
              return this.setAttributes(W, {
                "aria-pressed": z ? "true" : "false"
              });
            },
            getHeaderCellAttr: function (W) {
              return i._waiAria.getAttributeString({
                "aria-label": W
              });
            },
            eventAttr: function (W, z) {
              this._eventCommonAttr(W, z);
            },
            _eventCommonAttr: function (W, z) {
              z.setAttribute("aria-label", h(i.templates.event_text(W.start_date, W.end_date, W)));
              if (i.config.readonly) {
                z.setAttribute("aria-readonly", true);
              }
              if (W.$dataprocessor_class) {
                z.setAttribute("aria-busy", true);
              }
              z.setAttribute("aria-selected", i.getState().select_id == W.id ? "true" : "false");
            },
            setEventBarAttr: function (W, z) {
              this._eventCommonAttr(W, z);
            },
            _getAttributes: function (W, z) {
              var Z = {
                setAttribute: function (re, oe) {
                  this[re] = oe;
                }
              };
              W.apply(this, [z, Z]);
              return Z;
            },
            eventBarAttrString: function (W) {
              return this.getAttributeString(this._getAttributes(this.setEventBarAttr, W));
            },
            agendaHeadAttrString: function () {
              return this.getAttributeString({
                role: "row"
              });
            },
            agendaHeadDateString: function (W) {
              return this.getAttributeString({
                role: "columnheader",
                "aria-label": W
              });
            },
            agendaHeadDescriptionString: function (W) {
              return this.agendaHeadDateString(W);
            },
            agendaDataAttrString: function () {
              return this.getAttributeString({
                role: "grid"
              });
            },
            agendaEventAttrString: function (W) {
              var z = this._getAttributes(this._eventCommonAttr, W);
              z.role = "row";
              return this.getAttributeString(z);
            },
            agendaDetailsBtnString: function () {
              return this.getAttributeString({
                role: "button",
                "aria-label": i.locale.labels.icon_details
              });
            },
            gridAttrString: function () {
              return this.getAttributeString({
                role: "grid"
              });
            },
            gridRowAttrString: function (W) {
              return this.agendaEventAttrString(W);
            },
            gridCellAttrString: function (W, z, Z) {
              return this.getAttributeString({
                role: "gridcell",
                "aria-label": [z.label === undefined ? z.id : z.label, ": ", Z]
              });
            },
            mapAttrString: function () {
              return this.gridAttrString();
            },
            mapRowAttrString: function (W) {
              return this.gridRowAttrString(W);
            },
            mapDetailsBtnString: function () {
              return this.agendaDetailsBtnString();
            },
            minicalHeader: function (W, z) {
              this.setAttributes(W, {
                id: z + "",
                "aria-live": "assertice",
                "aria-atomic": "true"
              });
            },
            minicalGrid: function (W, z) {
              this.setAttributes(W, {
                "aria-labelledby": z + "",
                role: "grid"
              });
            },
            minicalRow: function (W) {
              this.setAttributes(W, {
                role: "row"
              });
            },
            minicalDayCell: function (W, z) {
              var Z = z.valueOf() < i._max_date.valueOf() && z.valueOf() >= i._min_date.valueOf();
              this.setAttributes(W, {
                role: "gridcell",
                "aria-label": i.templates.day_date(z),
                "aria-selected": Z ? "true" : "false"
              });
            },
            minicalHeadCell: function (W) {
              this.setAttributes(W, {
                role: "columnheader"
              });
            },
            weekAgendaDayCell: function (W, z) {
              var Z = W.querySelector(".dhx_wa_scale_bar");
              var re = W.querySelector(".dhx_wa_day_data");
              var oe = i.uid() + "";
              this.setAttributes(Z, {
                id: oe
              });
              this.setAttributes(re, {
                "aria-labelledby": oe
              });
            },
            weekAgendaEvent: function (W, z) {
              this.eventAttr(z, W);
            },
            lightboxHiddenAttr: function (W) {
              W.setAttribute("aria-hidden", "true");
            },
            lightboxVisibleAttr: function (W) {
              W.setAttribute("aria-hidden", "false");
            },
            lightboxSectionButtonAttrString: function (W) {
              return this.getAttributeString({
                role: "button",
                "aria-label": W,
                tabindex: "0"
              });
            },
            yearHeader: function (W, z) {
              this.setAttributes(W, {
                id: z + ""
              });
            },
            yearGrid: function (W, z) {
              this.minicalGrid(W, z);
            },
            yearHeadCell: function (W) {
              return this.minicalHeadCell(W);
            },
            yearRow: function (W) {
              return this.minicalRow(W);
            },
            yearDayCell: function (W) {
              this.setAttributes(W, {
                role: "gridcell"
              });
            },
            lightboxAttr: function (W) {
              W.setAttribute("role", "dialog");
              W.setAttribute("aria-hidden", "true");
              W.firstChild.setAttribute("role", "heading");
            },
            lightboxButtonAttrString: function (W) {
              return this.getAttributeString({
                role: "button",
                "aria-label": i.locale.labels[W],
                tabindex: "0"
              });
            },
            eventMenuAttrString: function (W) {
              return this.getAttributeString({
                role: "button",
                "aria-label": i.locale.labels[W]
              });
            },
            lightboxHeader: function (W, z) {
              W.setAttribute("aria-label", z);
            },
            lightboxSelectAttrString: function (W) {
              var z = "";
              switch (W) {
                case "%Y":
                  z = i.locale.labels.year;
                  break;
                case "%m":
                  z = i.locale.labels.month;
                  break;
                case "%d":
                  z = i.locale.labels.day;
                  break;
                case "%H:%i":
                  z = i.locale.labels.hour + " " + i.locale.labels.minute;
              }
              return i._waiAria.getAttributeString({
                "aria-label": z
              });
            },
            messageButtonAttrString: function (W) {
              return "tabindex='0' role='button' aria-label='" + W + "'";
            },
            messageInfoAttr: function (W) {
              W.setAttribute("role", "alert");
            },
            messageModalAttr: function (W, z) {
              W.setAttribute("role", "dialog");
              if (z) {
                W.setAttribute("aria-labelledby", z);
              }
            },
            quickInfoAttr: function (W) {
              W.setAttribute("role", "dialog");
            },
            quickInfoHeaderAttrString: function () {
              return " role='heading' ";
            },
            quickInfoHeader: function (W, z) {
              W.setAttribute("aria-label", z);
            },
            quickInfoButtonAttrString: function (W) {
              return i._waiAria.getAttributeString({
                role: "button",
                "aria-label": W,
                tabindex: "0"
              });
            },
            tooltipAttr: function (W) {
              W.setAttribute("role", "tooltip");
            },
            tooltipVisibleAttr: function (W) {
              W.setAttribute("aria-hidden", "false");
            },
            tooltipHiddenAttr: function (W) {
              W.setAttribute("aria-hidden", "true");
            }
          };
          for (var T in i._waiAria) {
            i._waiAria[T] = function (W) {
              return function () {
                if (i.config.wai_aria_attributes) {
                  return W.apply(this, arguments);
                } else {
                  return " ";
                }
              };
            }(i._waiAria[T]);
          }
        })();
      })(j);
      j.utils = ee;
      j.$domHelpers = F;
      j.utils.dom = F;
      j.uid = ee.uid;
      j.mixin = ee.mixin;
      j.defined = ee.defined;
      j.assert = function (i) {
        return function (o, c) {
          if (!o) {
            if (i.config.show_errors && i.callEvent("onError", [c]) !== false) {
              if (i.message) {
                i.message({
                  type: "error",
                  text: c,
                  expire: -1
                });
              } else {
                console.log(c);
              }
            }
          }
        };
      }(j);
      j.copy = ee.copy;
      j._getFocusableNodes = F.getFocusableNodes;
      j._getClassName = F.getClassName;
      j._locate_css = F.locateCss;
      var a = function (t) {
        var j = "data-dhxbox";
        var a = null;
        function v(he, be) {
          var Ae = he.callback;
          re.hide(he.box);
          a = he.box = null;
          if (Ae) {
            Ae(be);
          }
        }
        function _(he) {
          if (a) {
            var be = he.which || he.keyCode;
            var Ae = false;
            if (oe.keyboard) {
              if (be == 13 || be == 32) {
                var He = he.target || he.srcElement;
                if (F.getClassName(He).indexOf("scheduler_popup_button") > -1 && He.click) {
                  He.click();
                } else {
                  v(a, true);
                  Ae = true;
                }
              }
              if (be == 27) {
                v(a, false);
                Ae = true;
              }
            }
            if (Ae) {
              if (he.preventDefault) {
                he.preventDefault();
              }
              return !(he.cancelBubble = true);
            } else {
              return undefined;
            }
          }
        }
        function i(he) {
          if (!i.cover) {
            i.cover = document.createElement("div");
            t.event(i.cover, "keydown", _);
            i.cover.className = "dhx_modal_cover";
            document.body.appendChild(i.cover);
          }
          i.cover.style.display = he ? "inline-block" : "none";
        }
        function o(he, be, Ae) {
          var He = t._waiAria.messageButtonAttrString(he);
          var Ne = (be || "").toLowerCase().replace(/ /g, "_");
          var Ve = `scheduler_${Ne}_button dhtmlx_${Ne}_button`;
          return `<div ${He} class='scheduler_popup_button dhtmlx_popup_button ${Ve}' data-result='${Ae}' result='${Ae}' ><div>${he}</div></div>`;
        }
        function c(he) {
          if (!oe.area) {
            oe.area = document.createElement("div");
            oe.area.className = "scheduler_message_area dhtmlx_message_area";
            oe.area.style[oe.position] = "5px";
            document.body.appendChild(oe.area);
          }
          oe.hide(he.id);
          var be = document.createElement("div");
          be.innerHTML = "<div>" + he.text + "</div>";
          be.className = "scheduler-info dhtmlx-info scheduler-" + he.type + " dhtmlx-" + he.type;
          t.event(be, "click", function () {
            oe.hide(he.id);
            he = null;
          });
          t._waiAria.messageInfoAttr(be);
          if (oe.position == "bottom" && oe.area.firstChild) {
            oe.area.insertBefore(be, oe.area.firstChild);
          } else {
            oe.area.appendChild(be);
          }
          if (he.expire > 0) {
            oe.timers[he.id] = window.setTimeout(function () {
              if (oe) {
                oe.hide(he.id);
              }
            }, he.expire);
          }
          oe.pull[he.id] = be;
          be = null;
          return he.id;
        }
        function h() {
          for (var he = [].slice.apply(arguments, [0]), be = 0; be < he.length; be++) {
            if (he[be]) {
              return he[be];
            }
          }
        }
        function D(he, be, Ae) {
          var He = he.tagName ? he : function (Se, Fe, Oe) {
            var at = document.createElement("div");
            var ht = ee.uid();
            t._waiAria.messageModalAttr(at, ht);
            at.className = " scheduler_modal_box dhtmlx_modal_box scheduler-" + Se.type + " dhtmlx-" + Se.type;
            at.setAttribute(j, 1);
            var lt = "";
            if (Se.width) {
              at.style.width = Se.width;
            }
            if (Se.height) {
              at.style.height = Se.height;
            }
            if (Se.title) {
              lt += "<div class=\"scheduler_popup_title dhtmlx_popup_title\">" + Se.title + "</div>";
            }
            lt += "<div class=\"scheduler_popup_text dhtmlx_popup_text\" id=\"" + ht + "\"><span>" + (Se.content ? "" : Se.text) + "</span></div><div  class=\"scheduler_popup_controls dhtmlx_popup_controls\">";
            if (Fe) {
              lt += o(h(Se.ok, t.locale.labels.message_ok, "OK"), "ok", true);
            }
            if (Oe) {
              lt += o(h(Se.cancel, t.locale.labels.message_cancel, "Cancel"), "cancel", false);
            }
            if (Se.buttons) {
              for (var mt = 0; mt < Se.buttons.length; mt++) {
                var ft = Se.buttons[mt];
                if (qe(ft) == "object") {
                  lt += o(ft.label, ft.css || "scheduler_" + ft.label.toLowerCase() + "_button dhtmlx_" + ft.label.toLowerCase() + "_button", ft.value || mt);
                } else {
                  lt += o(ft, ft, mt);
                }
              }
            }
            at.innerHTML = lt += "</div>";
            if (Se.content) {
              var yt = Se.content;
              if (typeof yt == "string") {
                yt = document.getElementById(yt);
              }
              if (yt.style.display == "none") {
                yt.style.display = "";
              }
              at.childNodes[Se.title ? 1 : 0].appendChild(yt);
            }
            t.event(at, "click", function (xt) {
              var wt = xt.target || xt.srcElement;
              if (!wt.className) {
                wt = wt.parentNode;
              }
              if (F.closest(wt, ".scheduler_popup_button")) {
                var Dt = wt.getAttribute("data-result");
                v(Se, Dt = Dt == "true" || Dt != "false" && Dt);
              }
            });
            Se.box = at;
            if (Fe || Oe) {
              a = Se;
            }
            return at;
          }(he, be, Ae);
          if (!he.hidden) {
            i(true);
          }
          document.body.appendChild(He);
          var Ne = Math.abs(Math.floor(((window.innerWidth || document.documentElement.offsetWidth) - He.offsetWidth) / 2));
          var Ve = Math.abs(Math.floor(((window.innerHeight || document.documentElement.offsetHeight) - He.offsetHeight) / 2));
          He.style.top = he.position == "top" ? "-3px" : Ve + "px";
          He.style.left = Ne + "px";
          t.event(He, "keydown", _);
          re.focus(He);
          if (he.hidden) {
            re.hide(He);
          }
          t.callEvent("onMessagePopup", [He]);
          return He;
        }
        function V(he) {
          return D(he, true, false);
        }
        function T(he) {
          return D(he, true, true);
        }
        function W(he) {
          return D(he);
        }
        function z(he, be, Ae) {
          if (qe(he) != "object") {
            if (typeof be == "function") {
              Ae = be;
              be = "";
            }
            he = {
              text: he,
              type: be,
              callback: Ae
            };
          }
          return he;
        }
        function Z(he, be, Ae, He) {
          if (qe(he) != "object") {
            he = {
              text: he,
              type: be,
              expire: Ae,
              id: He
            };
          }
          he.id = he.id || ee.uid();
          he.expire = he.expire || oe.expire;
          return he;
        }
        t.event(document, "keydown", _, true);
        function re() {
          var he = z.apply(this, arguments);
          he.type = he.type || "alert";
          return W(he);
        }
        re.hide = function (he) {
          for (; he && he.getAttribute && !he.getAttribute(j);) {
            he = he.parentNode;
          }
          if (he) {
            he.parentNode.removeChild(he);
            i(false);
            t.callEvent("onAfterMessagePopup", [he]);
          }
        };
        re.focus = function (he) {
          setTimeout(function () {
            var be = F.getFocusableNodes(he);
            if (be.length && be[0].focus) {
              be[0].focus();
            }
          }, 1);
        };
        function oe(he, be, Ae, He) {
          (he = Z.apply(this, arguments)).type = he.type || "info";
          switch (he.type.split("-")[0]) {
            case "alert":
              return V(he);
            case "confirm":
              return T(he);
            case "modalbox":
              return W(he);
            default:
              return c(he);
          }
        }
        oe.seed = new Date().valueOf();
        oe.uid = ee.uid;
        oe.expire = 4000;
        oe.keyboard = true;
        oe.position = "top";
        oe.pull = {};
        oe.timers = {};
        oe.hideAll = function () {
          for (var he in oe.pull) {
            oe.hide(he);
          }
        };
        oe.hide = function (he) {
          var be = oe.pull[he];
          if (be && be.parentNode) {
            window.setTimeout(function () {
              be.parentNode.removeChild(be);
              be = null;
            }, 2000);
            be.className += " hidden";
            if (oe.timers[he]) {
              window.clearTimeout(oe.timers[he]);
            }
            delete oe.pull[he];
          }
        };
        var _e = [];
        t.attachEvent("onMessagePopup", function (he) {
          _e.push(he);
        });
        t.attachEvent("onAfterMessagePopup", function (he) {
          for (var be = 0; be < _e.length; be++) {
            if (_e[be] === he) {
              _e.splice(be, 1);
              be--;
            }
          }
        });
        t.attachEvent("onDestroy", function () {
          if (i.cover && i.cover.parentNode) {
            i.cover.parentNode.removeChild(i.cover);
          }
          for (var he = 0; he < _e.length; he++) {
            if (_e[he].parentNode) {
              _e[he].parentNode.removeChild(_e[he]);
            }
          }
          _e = null;
          if (oe.area && oe.area.parentNode) {
            oe.area.parentNode.removeChild(oe.area);
          }
          oe = null;
        });
        return {
          alert: function () {
            var he = z.apply(this, arguments);
            he.type = he.type || "confirm";
            return V(he);
          },
          confirm: function () {
            var he = z.apply(this, arguments);
            he.type = he.type || "alert";
            return T(he);
          },
          message: oe,
          modalbox: re
        };
      }(j);
      j.utils.mixin(j, a);
      j.env = j.$env = Y;
      j.Promise = ne;
      (function (i) {
        i.destructor = function () {
          i.callEvent("onDestroy", []);
          this.clearAll();
          if (this.$container) {
            this.$container.innerHTML = "";
          }
          if (this._eventRemoveAll) {
            this._eventRemoveAll();
          }
          if (this.resetLightbox) {
            this.resetLightbox();
          }
          if (this._dp && this._dp.destructor) {
            this._dp.destructor();
          }
          this.detachAllEvents();
          for (var o in this) {
            if (o.indexOf("$") === 0) {
              delete this[o];
            }
          }
          i.$destroyed = true;
        };
      })(j);
      (function (i) {
        function o(c, h) {
          var D = {
            method: c
          };
          if (h.length === 0) {
            throw new Error("Arguments list of query is wrong.");
          }
          if (h.length === 1) {
            if (typeof h[0] == "string") {
              D.url = h[0];
              D.async = true;
            } else {
              D.url = h[0].url;
              D.async = h[0].async || true;
              D.callback = h[0].callback;
              D.headers = h[0].headers;
            }
            D.data = h[0].data ? typeof h[0].data != "string" ? ge()(h[0].data) : h[0].data : "";
            return D;
          }
          D.url = h[0];
          switch (c) {
            case "GET":
            case "DELETE":
              D.callback = h[1];
              D.headers = h[2];
              break;
            case "POST":
            case "PUT":
              D.data = h[1] ? typeof h[1] != "string" ? ge()(h[1]) : h[1] : "";
              D.callback = h[2];
              D.headers = h[3];
          }
          return D;
        }
        i.Promise = ne;
        i.ajax = {
          cache: true,
          method: "get",
          serializeRequestParams: ge.a,
          parse: function (c) {
            if (typeof c != "string") {
              return c;
            } else {
              c = c.replace(/^[\s]+/, "");
              if (typeof DOMParser === "undefined" || i.$env.isIE) {
                if (window.ActiveXObject !== undefined) {
                  (h = new window.ActiveXObject("Microsoft.XMLDOM")).async = "false";
                  h.loadXML(c);
                }
              } else {
                h = new DOMParser().parseFromString(c, "text/xml");
              }
              return h;
            }
            var h;
          },
          xmltop: function (c, h, D) {
            if (h.status === undefined || h.status < 400) {
              var V = h.responseXML ? h.responseXML || h : this.parse(h.responseText || h);
              if (V && V.documentElement !== null && !V.getElementsByTagName("parsererror").length) {
                return V.getElementsByTagName(c)[0];
              }
            }
            if (D !== -1) {
              i.callEvent("onLoadXMLError", ["Incorrect XML", arguments[1], D]);
            }
            return document.createElement("DIV");
          },
          xpath: function (c, h) {
            if (!h.nodeName) {
              h = h.responseXML || h;
            }
            if (i.$env.isIE) {
              return h.selectNodes(c) || [];
            }
            for (var D, V = [], T = (h.ownerDocument || h).evaluate(c, h, null, XPathResult.ANY_TYPE, null); D = T.iterateNext();) {
              V.push(D);
            }
            return V;
          },
          query: function (c) {
            return this._call(c.method || "GET", c.url, c.data || "", c.async || true, c.callback, c.headers);
          },
          get: function (c, h, D) {
            var V = o("GET", arguments);
            return this.query(V);
          },
          getSync: function (c, h) {
            var D = o("GET", arguments);
            D.async = false;
            return this.query(D);
          },
          put: function (c, h, D, V) {
            var T = o("PUT", arguments);
            return this.query(T);
          },
          del: function (c, h, D) {
            var V = o("DELETE", arguments);
            return this.query(V);
          },
          post: function (c, h, D, V) {
            if (arguments.length == 1 || arguments.length == 2 && typeof h == "function") {
              h = "";
            }
            var T = o("POST", arguments);
            return this.query(T);
          },
          postSync: function (c, h, D) {
            h = h === null ? "" : String(h);
            var V = o("POST", arguments);
            V.async = false;
            return this.query(V);
          },
          _call: function (c, h, D, V, T, W) {
            return new i.Promise(function (z, Z) {
              var re = (typeof XMLHttpRequest === "undefined" ? "undefined" : Ee(XMLHttpRequest)) === undefined || i.$env.isIE ? new window.ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();
              var oe = navigator.userAgent.match(/AppleWebKit/) !== null && navigator.userAgent.match(/Qt/) !== null && navigator.userAgent.match(/Safari/) !== null;
              if (V) {
                re.addEventListener("readystatechange", function () {
                  if (re.readyState == 4 || oe && re.readyState == 3) {
                    if ((re.status != 200 || re.responseText === "") && !i.callEvent("onAjaxError", [re])) {
                      return;
                    }
                    setTimeout(function () {
                      if (typeof T == "function") {
                        T.apply(window, [{
                          xmlDoc: re,
                          filePath: h
                        }]);
                      }
                      z(re);
                      if (typeof T == "function") {
                        T = null;
                        re = null;
                      }
                    }, 0);
                  }
                });
              }
              if (c == "GET" && !this.cache) {
                h += (h.indexOf("?") >= 0 ? "&" : "?") + "dhxr" + new Date().getTime() + "=1";
              }
              re.open(c, h, V);
              if (W) {
                for (var _e in W) {
                  re.setRequestHeader(_e, W[_e]);
                }
              } else if (c.toUpperCase() == "POST" || c == "PUT" || c == "DELETE") {
                re.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
              } else if (c == "GET") {
                D = null;
              }
              re.setRequestHeader("X-Requested-With", "XMLHttpRequest");
              re.send(D);
              if (!V) {
                return {
                  xmlDoc: re,
                  filePath: h
                };
              }
            }.bind(this));
          },
          urlSeparator: function (c) {
            if (c.indexOf("?") != -1) {
              return "&";
            } else {
              return "?";
            }
          }
        };
        i.$ajax = i.ajax;
      })(j);
      (function Le(t) {
        function j(i, o) {
          for (var c = "var temp=date.match(/[a-zA-Z]+|[0-9]+/g);", h = i.match(/%[a-zA-Z]/g), D = 0; D < h.length; D++) {
            switch (h[D]) {
              case "%j":
              case "%d":
                c += "set[2]=temp[" + D + "]||1;";
                break;
              case "%n":
              case "%m":
                c += "set[1]=(temp[" + D + "]||1)-1;";
                break;
              case "%y":
                c += "set[0]=temp[" + D + "]*1+(temp[" + D + "]>50?1900:2000);";
                break;
              case "%g":
              case "%G":
              case "%h":
              case "%H":
                c += "set[3]=temp[" + D + "]||0;";
                break;
              case "%i":
                c += "set[4]=temp[" + D + "]||0;";
                break;
              case "%Y":
                c += "set[0]=temp[" + D + "]||0;";
                break;
              case "%a":
              case "%A":
                c += "set[3]=set[3]%12+((temp[" + D + "]||'').toLowerCase()=='am'?0:12);";
                break;
              case "%s":
                c += "set[5]=temp[" + D + "]||0;";
                break;
              case "%M":
                c += "set[1]=this.locale.date.month_short_hash[temp[" + D + "]]||0;";
                break;
              case "%F":
                c += "set[1]=this.locale.date.month_full_hash[temp[" + D + "]]||0;";
            }
          }
          var V = "set[0],set[1],set[2],set[3],set[4],set[5]";
          if (o) {
            V = " Date.UTC(" + V + ")";
          }
          return new Function("date", "var set=[0,0,1,0,0,0]; " + c + " return new Date(" + V + ");");
        }
        function a(i, o) {
          return function (c) {
            for (var h = [0, 0, 1, 0, 0, 0], D = c.match(/[a-zA-Z]+|[0-9]+/g), V = i.match(/%[a-zA-Z]/g), T = 0; T < V.length; T++) {
              switch (V[T]) {
                case "%j":
                case "%d":
                  h[2] = D[T] || 1;
                  break;
                case "%n":
                case "%m":
                  h[1] = (D[T] || 1) - 1;
                  break;
                case "%y":
                  h[0] = D[T] * 1 + (D[T] > 50 ? 1900 : 2000);
                  break;
                case "%g":
                case "%G":
                case "%h":
                case "%H":
                  h[3] = D[T] || 0;
                  break;
                case "%i":
                  h[4] = D[T] || 0;
                  break;
                case "%Y":
                  h[0] = D[T] || 0;
                  break;
                case "%a":
                case "%A":
                  h[3] = h[3] % 12 + ((D[T] || "").toLowerCase() == "am" ? 0 : 12);
                  break;
                case "%s":
                  h[5] = D[T] || 0;
                  break;
                case "%M":
                  h[1] = t.locale.date.month_short_hash[D[T]] || 0;
                  break;
                case "%F":
                  h[1] = t.locale.date.month_full_hash[D[T]] || 0;
              }
            }
            if (o) {
              return new Date(Date.UTC(h[0], h[1], h[2], h[3], h[4], h[5]));
            } else {
              return new Date(h[0], h[1], h[2], h[3], h[4], h[5]);
            }
          };
        }
        var v = false;
        function _() {
          if (t.config.csp === "auto") {
            return v;
          } else {
            return t.config.csp;
          }
        }
        (function () {
          try {
            new Function("canUseCsp = false;");
          } catch {
            v = true;
          }
        })();
        t.date = {
          init: function () {
            for (var i = t.locale.date.month_short, o = t.locale.date.month_short_hash = {}, c = 0; c < i.length; c++) {
              o[i[c]] = c;
            }
            i = t.locale.date.month_full;
            o = t.locale.date.month_full_hash = {};
            c = 0;
            for (; c < i.length; c++) {
              o[i[c]] = c;
            }
          },
          _bind_host_object: function (i) {
            if (i.bind) {
              return i.bind(t);
            } else {
              return function () {
                return i.apply(t, arguments);
              };
            }
          },
          date_part: function (i) {
            var o = new Date(i);
            i.setHours(0);
            i.setMinutes(0);
            i.setSeconds(0);
            i.setMilliseconds(0);
            if (i.getHours() && (i.getDate() < o.getDate() || i.getMonth() < o.getMonth() || i.getFullYear() < o.getFullYear())) {
              i.setTime(i.getTime() + (24 - i.getHours()) * 3600000);
            }
            return i;
          },
          time_part: function (i) {
            return (i.valueOf() / 1000 - i.getTimezoneOffset() * 60) % 86400;
          },
          week_start: function (i) {
            var o = i.getDay();
            if (t.config.start_on_monday) {
              if (o === 0) {
                o = 6;
              } else {
                o--;
              }
            }
            return this.date_part(this.add(i, o * -1, "day"));
          },
          month_start: function (i) {
            i.setDate(1);
            return this.date_part(i);
          },
          year_start: function (i) {
            i.setMonth(0);
            return this.month_start(i);
          },
          day_start: function (i) {
            return this.date_part(i);
          },
          _add_days: function (i, o) {
            var c = new Date(i.valueOf());
            c.setDate(c.getDate() + o);
            if (o == Math.round(o) && o > 0) {
              var h = (+c - +i) % 86400000;
              if (h && i.getTimezoneOffset() == c.getTimezoneOffset()) {
                var D = h / 3600000;
                c.setTime(c.getTime() + (24 - D) * 60 * 60 * 1000);
              }
            }
            if (o >= 0 && !i.getHours() && c.getHours() && (c.getDate() < i.getDate() || c.getMonth() < i.getMonth() || c.getFullYear() < i.getFullYear())) {
              c.setTime(c.getTime() + (24 - c.getHours()) * 3600000);
            }
            return c;
          },
          add: function (i, o, c) {
            var h = new Date(i.valueOf());
            switch (c) {
              case "day":
                h = t.date._add_days(h, o);
                break;
              case "week":
                h = t.date._add_days(h, o * 7);
                break;
              case "month":
                h.setMonth(h.getMonth() + o);
                break;
              case "year":
                h.setYear(h.getFullYear() + o);
                break;
              case "hour":
                h.setTime(h.getTime() + o * 60 * 60 * 1000);
                break;
              case "minute":
                h.setTime(h.getTime() + o * 60 * 1000);
                break;
              default:
                return t.date["add_" + c](i, o, c);
            }
            return h;
          },
          to_fixed: function (i) {
            if (i < 10) {
              return "0" + i;
            } else {
              return i;
            }
          },
          copy: function (i) {
            return new Date(i.valueOf());
          },
          date_to_str: function (i, o) {
            if (_()) {
              h = i;
              D = o;
              return function (V) {
                return h.replace(/%[a-zA-Z]/g, function (T) {
                  switch (T) {
                    case "%d":
                      return t.date.to_fixed(D ? V.getUTCDate() : V.getDate());
                    case "%m":
                      return t.date.to_fixed(D ? V.getUTCMonth() + 1 : V.getMonth() + 1);
                    case "%j":
                      if (D) {
                        return V.getUTCDate();
                      } else {
                        return V.getDate();
                      }
                    case "%n":
                      if (D) {
                        return V.getUTCMonth() + 1;
                      } else {
                        return V.getMonth() + 1;
                      }
                    case "%y":
                      return t.date.to_fixed(D ? V.getUTCFullYear() % 100 : V.getFullYear() % 100);
                    case "%Y":
                      if (D) {
                        return V.getUTCFullYear();
                      } else {
                        return V.getFullYear();
                      }
                    case "%D":
                      if (D) {
                        return t.locale.date.day_short[V.getUTCDay()];
                      } else {
                        return t.locale.date.day_short[V.getDay()];
                      }
                    case "%l":
                      if (D) {
                        return t.locale.date.day_full[V.getUTCDay()];
                      } else {
                        return t.locale.date.day_full[V.getDay()];
                      }
                    case "%M":
                      if (D) {
                        return t.locale.date.month_short[V.getUTCMonth()];
                      } else {
                        return t.locale.date.month_short[V.getMonth()];
                      }
                    case "%F":
                      if (D) {
                        return t.locale.date.month_full[V.getUTCMonth()];
                      } else {
                        return t.locale.date.month_full[V.getMonth()];
                      }
                    case "%h":
                      return t.date.to_fixed(D ? (V.getUTCHours() + 11) % 12 + 1 : (V.getHours() + 11) % 12 + 1);
                    case "%g":
                      if (D) {
                        return (V.getUTCHours() + 11) % 12 + 1;
                      } else {
                        return (V.getHours() + 11) % 12 + 1;
                      }
                    case "%G":
                      if (D) {
                        return V.getUTCHours();
                      } else {
                        return V.getHours();
                      }
                    case "%H":
                      return t.date.to_fixed(D ? V.getUTCHours() : V.getHours());
                    case "%i":
                      return t.date.to_fixed(D ? V.getUTCMinutes() : V.getMinutes());
                    case "%a":
                      if (D) {
                        if (V.getUTCHours() > 11) {
                          return "pm";
                        } else {
                          return "am";
                        }
                      } else if (V.getHours() > 11) {
                        return "pm";
                      } else {
                        return "am";
                      }
                    case "%A":
                      if (D) {
                        if (V.getUTCHours() > 11) {
                          return "PM";
                        } else {
                          return "AM";
                        }
                      } else if (V.getHours() > 11) {
                        return "PM";
                      } else {
                        return "AM";
                      }
                    case "%s":
                      return t.date.to_fixed(D ? V.getUTCSeconds() : V.getSeconds());
                    case "%W":
                      return t.date.to_fixed(D ? t.date.getUTCISOWeek(V) : t.date.getISOWeek(V));
                    default:
                      return T;
                  }
                });
              };
            }
            var h;
            var D;
            i = i.replace(/%[a-zA-Z]/g, function (h) {
              switch (h) {
                case "%d":
                  return "\"+this.date.to_fixed(date.getDate())+\"";
                case "%m":
                  return "\"+this.date.to_fixed((date.getMonth()+1))+\"";
                case "%j":
                  return "\"+date.getDate()+\"";
                case "%n":
                  return "\"+(date.getMonth()+1)+\"";
                case "%y":
                  return "\"+this.date.to_fixed(date.getFullYear()%100)+\"";
                case "%Y":
                  return "\"+date.getFullYear()+\"";
                case "%D":
                  return "\"+this.locale.date.day_short[date.getDay()]+\"";
                case "%l":
                  return "\"+this.locale.date.day_full[date.getDay()]+\"";
                case "%M":
                  return "\"+this.locale.date.month_short[date.getMonth()]+\"";
                case "%F":
                  return "\"+this.locale.date.month_full[date.getMonth()]+\"";
                case "%h":
                  return "\"+this.date.to_fixed((date.getHours()+11)%12+1)+\"";
                case "%g":
                  return "\"+((date.getHours()+11)%12+1)+\"";
                case "%G":
                  return "\"+date.getHours()+\"";
                case "%H":
                  return "\"+this.date.to_fixed(date.getHours())+\"";
                case "%i":
                  return "\"+this.date.to_fixed(date.getMinutes())+\"";
                case "%a":
                  return "\"+(date.getHours()>11?\"pm\":\"am\")+\"";
                case "%A":
                  return "\"+(date.getHours()>11?\"PM\":\"AM\")+\"";
                case "%s":
                  return "\"+this.date.to_fixed(date.getSeconds())+\"";
                case "%W":
                  return "\"+this.date.to_fixed(this.date.getISOWeek(date))+\"";
                default:
                  return h;
              }
            });
            if (o) {
              i = i.replace(/date\.get/g, "date.getUTC");
            }
            var c = new Function("date", "return \"" + i + "\";");
            return t.date._bind_host_object(c);
          },
          str_to_date: function (i, o, c) {
            var h = _() ? a : j;
            var D = h(i, o);
            var V = /^[0-9]{4}(\-|\/)[0-9]{2}(\-|\/)[0-9]{2} ?(([0-9]{1,2}:[0-9]{1,2})(:[0-9]{1,2})?)?$/;
            var T = /^[0-9]{2}\/[0-9]{2}\/[0-9]{4} ?(([0-9]{1,2}:[0-9]{2})(:[0-9]{1,2})?)?$/;
            var W = /^[0-9]{2}\-[0-9]{2}\-[0-9]{4} ?(([0-9]{1,2}:[0-9]{1,2})(:[0-9]{1,2})?)?$/;
            var z = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
            var Z = h("%Y-%m-%d %H:%i:%s", o);
            var re = h("%m/%d/%Y %H:%i:%s", o);
            var oe = h("%d-%m-%Y %H:%i:%s", o);
            return function (_e) {
              if (!c && !t.config.parse_exact_format) {
                if (_e && _e.getISOWeek) {
                  return new Date(_e);
                }
                if (typeof _e == "number") {
                  return new Date(_e);
                }
                if (V.test(String(_e))) {
                  return Z(_e);
                }
                if (T.test(String(_e))) {
                  return re(_e);
                }
                if (W.test(String(_e))) {
                  return oe(_e);
                }
                if (function (he) {
                  return z.test(he);
                }(_e)) {
                  return new Date(_e);
                }
              }
              return D.call(t, _e);
            };
          },
          getISOWeek: function (i) {
            if (!i) {
              return false;
            }
            var o = (i = this.date_part(new Date(i))).getDay();
            if (o === 0) {
              o = 7;
            }
            var c = new Date(i.valueOf());
            c.setDate(i.getDate() + (4 - o));
            var h = c.getFullYear();
            var D = Math.round((c.getTime() - new Date(h, 0, 1).getTime()) / 86400000);
            return 1 + Math.floor(D / 7);
          },
          getUTCISOWeek: function (i) {
            return this.getISOWeek(this.convert_to_utc(i));
          },
          convert_to_utc: function (i) {
            return new Date(i.getUTCFullYear(), i.getUTCMonth(), i.getUTCDate(), i.getUTCHours(), i.getUTCMinutes(), i.getUTCSeconds());
          }
        };
      })(j);
      (function (i) {
        i.config = {
          default_date: "%j %M %Y",
          month_date: "%F %Y",
          load_date: "%Y-%m-%d",
          week_date: "%l",
          day_date: "%D, %F %j",
          hour_date: "%H:%i",
          month_day: "%d",
          date_format: "%Y-%m-%d %H:%i",
          api_date: "%d-%m-%Y %H:%i",
          parse_exact_format: false,
          preserve_length: true,
          time_step: 5,
          start_on_monday: true,
          first_hour: 0,
          last_hour: 24,
          readonly: false,
          drag_resize: true,
          drag_move: true,
          drag_create: true,
          drag_event_body: true,
          dblclick_create: true,
          edit_on_create: true,
          details_on_create: false,
          header: null,
          resize_month_events: false,
          resize_month_timed: false,
          responsive_lightbox: false,
          rtl: false,
          cascade_event_display: false,
          cascade_event_count: 4,
          cascade_event_margin: 30,
          multi_day: true,
          multi_day_height_limit: 0,
          drag_lightbox: true,
          preserve_scroll: true,
          select: true,
          server_utc: false,
          touch: true,
          touch_tip: true,
          touch_drag: 500,
          touch_swipe_dates: false,
          quick_info_detached: true,
          positive_closing: false,
          drag_highlight: true,
          limit_drag_out: false,
          icons_edit: ["icon_save", "icon_cancel"],
          icons_select: ["icon_details", "icon_edit", "icon_delete"],
          buttons_left: ["dhx_save_btn", "dhx_cancel_btn"],
          buttons_right: ["dhx_delete_btn"],
          lightbox: {
            sections: [{
              name: "description",
              map_to: "text",
              type: "textarea",
              focus: true
            }, {
              name: "time",
              height: 72,
              type: "time",
              map_to: "auto"
            }]
          },
          highlight_displayed_event: true,
          left_border: false,
          ajax_error: "alert",
          delay_render: 0,
          timeline_swap_resize: true,
          wai_aria_attributes: true,
          wai_aria_application_role: true,
          csp: "auto",
          event_attribute: "data-event-id",
          show_errors: true
        };
        i.config.buttons_left.$initial = i.config.buttons_left.join();
        i.config.buttons_right.$initial = i.config.buttons_right.join();
        i._helpers = {
          parseDate: function (o) {
            return (i.templates.xml_date || i.templates.parse_date)(o);
          },
          formatDate: function (o) {
            return (i.templates.xml_format || i.templates.format_date)(o);
          }
        };
        i.templates = {};
        i.init_templates = function () {
          var o = i.locale.labels;
          o.dhx_save_btn = o.icon_save;
          o.dhx_cancel_btn = o.icon_cancel;
          o.dhx_delete_btn = o.icon_delete;
          var c = i.date.date_to_str;
          var h = i.config;
          (function (D, V) {
            for (var T in V) {
              D[T] ||= V[T];
            }
          })(i.templates, {
            day_date: c(h.default_date),
            month_date: c(h.month_date),
            week_date: function (D, V) {
              if (h.rtl) {
                return i.templates.day_date(i.date.add(V, -1, "day")) + " &ndash; " + i.templates.day_date(D);
              } else {
                return i.templates.day_date(D) + " &ndash; " + i.templates.day_date(i.date.add(V, -1, "day"));
              }
            },
            day_scale_date: c(h.default_date),
            month_scale_date: c(h.week_date),
            week_scale_date: c(h.day_date),
            hour_scale: c(h.hour_date),
            time_picker: c(h.hour_date),
            event_date: c(h.hour_date),
            month_day: c(h.month_day),
            load_format: c(h.load_date),
            format_date: c(h.date_format, h.server_utc),
            parse_date: i.date.str_to_date(h.date_format, h.server_utc),
            api_date: i.date.str_to_date(h.api_date, false, false),
            event_header: function (D, V, T) {
              return i.templates.event_date(D) + " - " + i.templates.event_date(V);
            },
            event_text: function (D, V, T) {
              return T.text;
            },
            event_class: function (D, V, T) {
              return "";
            },
            month_date_class: function (D) {
              return "";
            },
            week_date_class: function (D) {
              return "";
            },
            event_bar_date: function (D, V, T) {
              return i.templates.event_date(D) + " ";
            },
            event_bar_text: function (D, V, T) {
              return T.text;
            },
            month_events_link: function (D, V) {
              return "<a>View more(" + V + " events)</a>";
            },
            drag_marker_class: function (D, V, T) {
              return "";
            },
            drag_marker_content: function (D, V, T) {
              return "";
            },
            tooltip_date_format: i.date.date_to_str("%Y-%m-%d %H:%i"),
            tooltip_text: function (D, V, T) {
              return "<b>Event:</b> " + T.text + "<br/><b>Start date:</b> " + i.templates.tooltip_date_format(D) + "<br/><b>End date:</b> " + i.templates.tooltip_date_format(V);
            }
          });
          this.callEvent("onTemplatesReady", []);
        };
      })(j);
      (function (i) {
        i._events = {};
        i.clearAll = function () {
          this._events = {};
          this._loaded = {};
          this._edit_id = null;
          this._select_id = null;
          this._drag_id = null;
          this._drag_mode = null;
          this._drag_pos = null;
          this._new_event = null;
          this.clear_view();
          this.callEvent("onClearAll", []);
        };
        i.addEvent = function (o, c, h, D, V) {
          if (!arguments.length) {
            return this.addEventNow();
          }
          var T = o;
          if (arguments.length != 1) {
            (T = V || {}).start_date = o;
            T.end_date = c;
            T.text = h;
            T.id = D;
          }
          T.id = T.id || i.uid();
          T.text = T.text || "";
          if (typeof T.start_date == "string") {
            T.start_date = this.templates.api_date(T.start_date);
          }
          if (typeof T.end_date == "string") {
            T.end_date = this.templates.api_date(T.end_date);
          }
          var W = (this.config.event_duration || this.config.time_step) * 60000;
          if (T.start_date.valueOf() == T.end_date.valueOf()) {
            T.end_date.setTime(T.end_date.valueOf() + W);
          }
          T.start_date.setMilliseconds(0);
          T.end_date.setMilliseconds(0);
          T._timed = this.isOneDayEvent(T);
          var z = !this._events[T.id];
          this._events[T.id] = T;
          this.event_updated(T);
          if (!this._loading) {
            this.callEvent(z ? "onEventAdded" : "onEventChanged", [T.id, T]);
          }
          return T.id;
        };
        i.deleteEvent = function (o, c) {
          var h = this._events[o];
          if (c || this.callEvent("onBeforeEventDelete", [o, h]) && this.callEvent("onConfirmedBeforeEventDelete", [o, h])) {
            if (h) {
              if (i.getState().select_id == o) {
                i.unselect();
              }
              delete this._events[o];
              this.event_updated(h);
              if (this._drag_id == h.id) {
                this._drag_id = null;
                this._drag_mode = null;
                this._drag_pos = null;
              }
            }
            this.callEvent("onEventDeleted", [o, h]);
          }
        };
        i.getEvent = function (o) {
          return this._events[o];
        };
        i.setEvent = function (o, c) {
          c.id ||= o;
          this._events[o] = c;
        };
        i.for_rendered = function (o, c) {
          for (var h = this._rendered.length - 1; h >= 0; h--) {
            if (this._rendered[h].getAttribute(this.config.event_attribute) == o) {
              c(this._rendered[h], h);
            }
          }
        };
        i.changeEventId = function (o, c) {
          if (o != c) {
            var h = this._events[o];
            if (h) {
              h.id = c;
              this._events[c] = h;
              delete this._events[o];
            }
            this.for_rendered(o, function (D) {
              D.setAttribute("event_id", c);
              D.setAttribute(i.config.event_attribute, c);
            });
            if (this._select_id == o) {
              this._select_id = c;
            }
            if (this._edit_id == o) {
              this._edit_id = c;
            }
            this.callEvent("onEventIdChange", [o, c]);
          }
        };
        (function () {
          for (var o = ["text", "Text", "start_date", "StartDate", "end_date", "EndDate"], c = function (V) {
              return function (T) {
                return i.getEvent(T)[V];
              };
            }, h = function (V) {
              return function (T, W) {
                var z = i.getEvent(T);
                z[V] = W;
                z._changed = true;
                z._timed = this.isOneDayEvent(z);
                i.event_updated(z, true);
              };
            }, D = 0; D < o.length; D += 2) {
            i["getEvent" + o[D + 1]] = c(o[D]);
            i["setEvent" + o[D + 1]] = h(o[D]);
          }
        })();
        i.event_updated = function (o, c) {
          if (this.is_visible_events(o)) {
            this.render_view_data();
          } else {
            this.clear_event(o.id);
          }
        };
        i.is_visible_events = function (o) {
          if (!this._min_date || !this._max_date) {
            return false;
          }
          if (o.start_date.valueOf() < this._max_date.valueOf() && this._min_date.valueOf() < o.end_date.valueOf()) {
            var c = o.start_date.getHours();
            var h = o.end_date.getHours() + o.end_date.getMinutes() / 60;
            var D = this.config.last_hour;
            var V = this.config.first_hour;
            return !!this._table_view || h <= D && h > V || c < D && c >= V || (o.end_date.valueOf() - o.start_date.valueOf()) / 3600000 > 24 - (this.config.last_hour - this.config.first_hour) || c < D && h > V;
          }
          return false;
        };
        i.isOneDayEvent = function (o) {
          var c = new Date(o.end_date.valueOf() - 1);
          return o.start_date.getFullYear() === c.getFullYear() && o.start_date.getMonth() === c.getMonth() && o.start_date.getDate() === c.getDate() && o.end_date.valueOf() - o.start_date.valueOf() < 86400000;
        };
        i.get_visible_events = function (o) {
          var c = [];
          for (var h in this._events) {
            if (this.is_visible_events(this._events[h])) {
              if (!o || !!this._events[h]._timed) {
                if (this.filter_event(h, this._events[h])) {
                  c.push(this._events[h]);
                }
              }
            }
          }
          return c;
        };
        i.filter_event = function (o, c) {
          var h = this["filter_" + this._mode];
          return !h || h(o, c);
        };
        i._is_main_area_event = function (o) {
          return !!o._timed;
        };
        i.render_view_data = function (o, c) {
          var h = false;
          if (!o) {
            h = true;
            if (this._not_render) {
              this._render_wait = true;
              return;
            }
            this._render_wait = false;
            this.clear_view();
            o = this.get_visible_events(!this._table_view && !this.config.multi_day);
          }
          for (var D = 0, V = o.length; D < V; D++) {
            this._recalculate_timed(o[D]);
          }
          if (this.config.multi_day && !this._table_view) {
            var T = [];
            var W = [];
            for (D = 0; D < o.length; D++) {
              if (this._is_main_area_event(o[D])) {
                T.push(o[D]);
              } else {
                W.push(o[D]);
              }
            }
            if (!this._els.dhx_multi_day) {
              var z = i._commonErrorMessages.unknownView(this._mode);
              throw new Error(z);
            }
            this._rendered_location = this._els.dhx_multi_day[0];
            this._table_view = true;
            this.render_data(W, c);
            this._table_view = false;
            this._rendered_location = this._els.dhx_cal_data[0];
            this._table_view = false;
            this.render_data(T, c);
          } else {
            var Z = document.createDocumentFragment();
            var re = this._els.dhx_cal_data[0];
            this._rendered_location = Z;
            this.render_data(o, c);
            re.appendChild(Z);
            this._rendered_location = re;
          }
          if (h) {
            this.callEvent("onDataRender", []);
          }
        };
        i._view_month_day = function (o) {
          var c = i.getActionData(o).date;
          if (i.callEvent("onViewMoreClick", [c])) {
            i.setCurrentView(c, "day");
          }
        };
        i._render_month_link = function (o) {
          for (var c = this._rendered_location, h = this._lame_clone(o), D = o._sday; D < o._eday; D++) {
            h._sday = D;
            h._eday = D + 1;
            var V = i.date;
            var T = i._min_date;
            T = V.add(T, h._sweek, "week");
            T = V.add(T, h._sday, "day");
            var W = i.getEvents(T, V.add(T, 1, "day")).length;
            var z = this._get_event_bar_pos(h);
            var Z = z.x2 - z.x;
            var re = document.createElement("div");
            i.event(re, "click", function (oe) {
              i._view_month_day(oe);
            });
            re.className = "dhx_month_link";
            re.style.top = z.y + "px";
            re.style.left = z.x + "px";
            re.style.width = Z + "px";
            re.innerHTML = i.templates.month_events_link(T, W);
            this._rendered.push(re);
            c.appendChild(re);
          }
        };
        i._recalculate_timed = function (o) {
          var c;
          if (o && (c = Qe(o) != "object" ? this._events[o] : o)) {
            c._timed = i.isOneDayEvent(c);
          }
        };
        i.attachEvent("onEventChanged", i._recalculate_timed);
        i.attachEvent("onEventAdded", i._recalculate_timed);
        i.render_data = function (o, c) {
          o = this._pre_render_events(o, c);
          for (var h = {}, D = 0; D < o.length; D++) {
            if (this._table_view) {
              if (i._mode != "month") {
                this.render_event_bar(o[D]);
              } else {
                var V = i.config.max_month_events;
                if (V !== V * 1 || o[D]._sorder < V) {
                  this.render_event_bar(o[D]);
                } else if (V !== undefined && o[D]._sorder == V) {
                  i._render_month_link(o[D]);
                }
              }
            } else {
              var T = o[D];
              var W = i.locate_holder(T._sday);
              if (!W) {
                continue;
              }
              h[T._sday] ||= {
                real: W,
                buffer: document.createDocumentFragment(),
                width: W.clientWidth
              };
              var z = h[T._sday];
              this.render_event(T, z.buffer, z.width);
            }
          }
          for (var D in h) {
            if ((z = h[D]).real && z.buffer) {
              z.real.appendChild(z.buffer);
            }
          }
        };
        i._get_first_visible_cell = function (o) {
          for (var c = 0; c < o.length; c++) {
            if ((o[c].className || "").indexOf("dhx_scale_ignore") == -1) {
              return o[c];
            }
          }
          return o[0];
        };
        i._pre_render_events = function (o, c) {
          var h = this.xy.bar_height;
          var D = this._colsS.heights;
          var V = this._colsS.heights = [0, 0, 0, 0, 0, 0, 0];
          var T = this._els.dhx_cal_data[0];
          o = this._table_view ? this._pre_render_events_table(o, c) : this._pre_render_events_line(o, c);
          if (this._table_view) {
            if (c) {
              this._colsS.heights = D;
            } else {
              var W = T.firstChild;
              if (W.rows) {
                for (var z = 0; z < W.rows.length; z++) {
                  V[z]++;
                  var Z = W.rows[z].cells;
                  var re = this._colsS.height - this.xy.month_head_height;
                  if (V[z] * h > re) {
                    var oe = re;
                    if (this.config.max_month_events * 1 !== this.config.max_month_events || V[z] <= this.config.max_month_events) {
                      oe = V[z] * h;
                    } else if ((this.config.max_month_events + 1) * h > re) {
                      oe = (this.config.max_month_events + 1) * h;
                    }
                    for (var _e = 0; _e < Z.length; _e++) {
                      Z[_e].childNodes[1].style.height = oe + "px";
                    }
                  }
                  V[z] = (V[z - 1] || 0) + i._get_first_visible_cell(Z).offsetHeight;
                }
                V.unshift(0);
                if (W.parentNode.offsetHeight < W.parentNode.scrollHeight && !i._colsS.scroll_fix && i.xy.scroll_width) {
                  var he = i._colsS;
                  var be = he[he.col_length];
                  var Ae = he.heights.slice();
                  this._calc_scale_sizes(be -= i.xy.scroll_width || 0, this._min_date, this._max_date);
                  i._colsS.heights = Ae;
                  this.set_xy(this._els.dhx_cal_header[0], be, this.xy.scale_height);
                  i._render_scales(this._els.dhx_cal_header[0]);
                  i._render_month_scale(this._els.dhx_cal_data[0], this._get_timeunit_start(), this._min_date);
                  he.scroll_fix = true;
                }
              } else {
                if (!o.length && this._els.dhx_multi_day[0].style.visibility == "visible") {
                  V[0] = -1;
                }
                if (o.length || V[0] == -1) {
                  var He = (V[0] + 1) * h + 1;
                  var Ne = He;
                  var Ve = He + "px";
                  if (this.config.multi_day_height_limit) {
                    Ve = (Ne = Math.min(He, this.config.multi_day_height_limit)) + "px";
                  }
                  T.style.top = this._els.dhx_cal_navline[0].offsetHeight + this._els.dhx_cal_header[0].offsetHeight + Ne + "px";
                  T.style.height = this._obj.offsetHeight - parseInt(T.style.top, 10) - (this.xy.margin_top || 0) + "px";
                  var Se = this._els.dhx_multi_day[0];
                  Se.style.height = Ve;
                  Se.style.visibility = V[0] == -1 ? "hidden" : "visible";
                  var Fe = this._els.dhx_multi_day[1];
                  Fe.style.height = Ve;
                  Fe.style.visibility = V[0] == -1 ? "hidden" : "visible";
                  Fe.className = V[0] ? "dhx_multi_day_icon" : "dhx_multi_day_icon_small";
                  this._dy_shift = (V[0] + 1) * h;
                  if (this.config.multi_day_height_limit) {
                    this._dy_shift = Math.min(this.config.multi_day_height_limit, this._dy_shift);
                  }
                  V[0] = 0;
                  if (Ne != He) {
                    T.style.top = parseInt(T.style.top) + 2 + "px";
                    Se.style.overflowY = "auto";
                    Fe.style.position = "fixed";
                    Fe.style.top = "";
                    Fe.style.left = "";
                  }
                }
              }
            }
          }
          return o;
        };
        i._get_event_sday = function (o) {
          var c = this.date.day_start(new Date(o.start_date));
          return Math.round((c.valueOf() - this._min_date.valueOf()) / 86400000);
        };
        i._get_event_mapped_end_date = function (o) {
          var c = o.end_date;
          if (this.config.separate_short_events) {
            var h = (o.end_date - o.start_date) / 60000;
            if (h < this._min_mapped_duration) {
              c = this.date.add(c, this._min_mapped_duration - h, "minute");
            }
          }
          return c;
        };
        i._pre_render_events_line = function (o, c) {
          o.sort(function (Se, Fe) {
            if (Se.start_date.valueOf() == Fe.start_date.valueOf()) {
              if (Se.id > Fe.id) {
                return 1;
              } else {
                return -1;
              }
            } else if (Se.start_date > Fe.start_date) {
              return 1;
            } else {
              return -1;
            }
          });
          var h = [];
          var D = [];
          this._min_mapped_duration = Math.ceil(this.xy.min_event_height * 60 / this.config.hour_size_px);
          for (var V = 0; V < o.length; V++) {
            var T = o[V];
            var z = T.end_date;
            var Z = T.start_date.getHours();
            var re = z.getHours();
            T._sday = this._get_event_sday(T);
            if (this._ignores[T._sday]) {
              o.splice(V, 1);
              V--;
            } else {
              h[T._sday] ||= [];
              if (!c) {
                T._inner = false;
                for (var oe = h[T._sday]; oe.length;) {
                  var _e = oe[oe.length - 1];
                  if (this._get_event_mapped_end_date(_e).valueOf() > T.start_date.valueOf()) {
                    break;
                  }
                  oe.splice(oe.length - 1, 1);
                }
                for (var he = oe.length, be = false, Ae = 0; Ae < oe.length; Ae++) {
                  if (this._get_event_mapped_end_date(_e = oe[Ae]).valueOf() <= T.start_date.valueOf()) {
                    be = true;
                    T._sorder = _e._sorder;
                    he = Ae;
                    T._inner = true;
                    break;
                  }
                }
                if (oe.length) {
                  oe[oe.length - 1]._inner = true;
                }
                if (!be) {
                  if (oe.length) {
                    if (oe.length <= oe[oe.length - 1]._sorder) {
                      if (oe[oe.length - 1]._sorder) {
                        for (Ae = 0; Ae < oe.length; Ae++) {
                          for (var He = false, Ne = 0; Ne < oe.length; Ne++) {
                            if (oe[Ne]._sorder == Ae) {
                              He = true;
                              break;
                            }
                          }
                          if (!He) {
                            T._sorder = Ae;
                            break;
                          }
                        }
                      } else {
                        T._sorder = 0;
                      }
                      T._inner = true;
                    } else {
                      var Ve = oe[0]._sorder;
                      for (Ae = 1; Ae < oe.length; Ae++) {
                        if (oe[Ae]._sorder > Ve) {
                          Ve = oe[Ae]._sorder;
                        }
                      }
                      T._sorder = Ve + 1;
                      T._inner = false;
                    }
                  } else {
                    T._sorder = 0;
                  }
                }
                oe.splice(he, he == oe.length ? 0 : 1, T);
                if (oe.length > (oe.max_count || 0)) {
                  oe.max_count = oe.length;
                  T._count = oe.length;
                } else {
                  T._count = T._count ? T._count : 1;
                }
              }
              if ((Z < this.config.first_hour || re >= this.config.last_hour) && (D.push(T), o[V] = T = this._copy_event(T), Z < this.config.first_hour && (T.start_date.setHours(this.config.first_hour), T.start_date.setMinutes(0)), re >= this.config.last_hour && (T.end_date.setMinutes(0), T.end_date.setHours(this.config.last_hour)), T.start_date > T.end_date || Z == this.config.last_hour)) {
                o.splice(V, 1);
                V--;
              }
            }
          }
          if (!c) {
            for (V = 0; V < o.length; V++) {
              o[V]._count = h[o[V]._sday].max_count;
            }
            for (V = 0; V < D.length; V++) {
              D[V]._count = h[D[V]._sday].max_count;
            }
          }
          return o;
        };
        i._time_order = function (o) {
          o.sort(function (c, h) {
            if (c.start_date.valueOf() == h.start_date.valueOf()) {
              if (c._timed && !h._timed) {
                return 1;
              } else if (!c._timed && h._timed) {
                return -1;
              } else if (c.id > h.id) {
                return 1;
              } else {
                return -1;
              }
            } else if (c.start_date > h.start_date) {
              return 1;
            } else {
              return -1;
            }
          });
        };
        i._is_any_multiday_cell_visible = function (o, c, h) {
          var D = this._cols.length;
          var V = false;
          var T = o;
          var W = true;
          var z = new Date(c);
          for (i.date.day_start(new Date(c)).valueOf() != c.valueOf() && (z = i.date.day_start(z), z = i.date.add(z, 1, "day")); T < z;) {
            W = false;
            var Z = this.locate_holder_day(T, false, h) % D;
            if (!this._ignores[Z]) {
              V = true;
              break;
            }
            T = i.date.add(T, 1, "day");
          }
          return W || V;
        };
        i._pre_render_events_table = function (o, c) {
          this._time_order(o);
          for (var h, D = [], V = [[], [], [], [], [], [], []], T = this._colsS.heights, W = this._cols.length, z = {}, Z = 0; Z < o.length; Z++) {
            var re = o[Z];
            var oe = re.id;
            z[oe] ||= {
              first_chunk: true,
              last_chunk: true
            };
            var _e = z[oe];
            var he = h || re.start_date;
            var be = re.end_date;
            if (he < this._min_date) {
              _e.first_chunk = false;
              he = this._min_date;
            }
            if (be > this._max_date) {
              _e.last_chunk = false;
              be = this._max_date;
            }
            var Ae = this.locate_holder_day(he, false, re);
            re._sday = Ae % W;
            if (!this._ignores[re._sday] || !re._timed) {
              var He = this.locate_holder_day(be, true, re) || W;
              re._eday = He % W || W;
              re._length = He - Ae;
              re._sweek = Math.floor((this._correct_shift(he.valueOf(), 1) - this._min_date.valueOf()) / (W * 86400000));
              if (i._is_any_multiday_cell_visible(he, be, re)) {
                var Ne;
                var Ve = V[re._sweek];
                for (Ne = 0; Ne < Ve.length && Ve[Ne]._eday > re._sday; Ne++);
                if (!re._sorder || !c) {
                  re._sorder = Ne;
                }
                if (re._sday + re._length <= W) {
                  h = null;
                  D.push(re);
                  Ve[Ne] = re;
                  T[re._sweek] = Ve.length - 1;
                  re._first_chunk = _e.first_chunk;
                  re._last_chunk = _e.last_chunk;
                } else {
                  var Se = this._copy_event(re);
                  Se.id = re.id;
                  Se._length = W - re._sday;
                  Se._eday = W;
                  Se._sday = re._sday;
                  Se._sweek = re._sweek;
                  Se._sorder = re._sorder;
                  Se.end_date = this.date.add(he, Se._length, "day");
                  Se._first_chunk = _e.first_chunk;
                  _e.first_chunk &&= false;
                  D.push(Se);
                  Ve[Ne] = Se;
                  h = Se.end_date;
                  T[re._sweek] = Ve.length - 1;
                  Z--;
                }
              }
            }
          }
          return D;
        };
        i._copy_dummy = function () {
          var o = new Date(this.start_date);
          var c = new Date(this.end_date);
          this.start_date = o;
          this.end_date = c;
        };
        i._copy_event = function (o) {
          this._copy_dummy.prototype = o;
          return new this._copy_dummy();
        };
        i._rendered = [];
        i.clear_view = function () {
          for (var o = 0; o < this._rendered.length; o++) {
            var c = this._rendered[o];
            if (c.parentNode) {
              c.parentNode.removeChild(c);
            }
          }
          this._rendered = [];
        };
        i.updateEvent = function (o) {
          var c = this.getEvent(o);
          this.clear_event(o);
          if (c && this.is_visible_events(c) && this.filter_event(o, c) && (this._table_view || this.config.multi_day || c._timed)) {
            if (this.config.update_render) {
              this.render_view_data();
            } else if (this.getState().mode != "month" || this.getState().drag_id || this.isOneDayEvent(c)) {
              this.render_view_data([c], true);
            } else {
              this.render_view_data();
            }
          }
        };
        i.clear_event = function (o) {
          this.for_rendered(o, function (c, h) {
            if (c.parentNode) {
              c.parentNode.removeChild(c);
            }
            i._rendered.splice(h, 1);
          });
        };
        i._y_from_date = function (o) {
          var c = o.getHours() * 60 + o.getMinutes();
          return Math.round((c * 60 * 1000 - this.config.first_hour * 60 * 60 * 1000) * this.config.hour_size_px / 3600000) % (this.config.hour_size_px * 24);
        };
        i._calc_event_y = function (o, c) {
          c = c || 0;
          var h = o.start_date.getHours() * 60 + o.start_date.getMinutes();
          var D = o.end_date.getHours() * 60 + o.end_date.getMinutes() || i.config.last_hour * 60;
          return {
            top: this._y_from_date(o.start_date),
            height: Math.max(c, (D - h) * this.config.hour_size_px / 60)
          };
        };
        i.render_event = function (o, c, h) {
          var D = i.xy.menu_width;
          var V = this.config.use_select_menu_space ? 0 : D;
          if (o._sday >= 0) {
            var T = i.locate_holder(o._sday);
            if (T) {
              c = c || T;
              var W = this._calc_event_y(o, i.xy.min_event_height);
              var z = W.top;
              var Z = W.height;
              var re = o._count || 1;
              var oe = o._sorder || 0;
              h = h || T.clientWidth;
              var _e = Math.floor((h - V) / re);
              var he = oe * _e + 1;
              if (!o._inner) {
                _e *= re - oe;
              }
              if (this.config.cascade_event_display) {
                var be = this.config.cascade_event_count;
                var Ae = this.config.cascade_event_margin;
                he = oe % be * Ae;
                _e = Math.floor(h - V - he - (o._inner ? (re - oe - 1) % be * Ae / 2 : 0));
              }
              var Ne = this._render_v_bar(o, V + he, z, _e, Z, o._text_style, i.templates.event_header(o.start_date, o.end_date, o), i.templates.event_text(o.start_date, o.end_date, o));
              this._waiAria.eventAttr(o, Ne);
              this._rendered.push(Ne);
              c.appendChild(Ne);
              he = he + parseInt(this.config.rtl ? T.style.right : T.style.left, 10) + V;
              if (this._edit_id == o.id) {
                Ne.style.zIndex = 1;
                _e = Math.max(_e - 4, i.xy.editor_width);
                (Ne = document.createElement("div")).setAttribute("event_id", o.id);
                Ne.setAttribute(this.config.event_attribute, o.id);
                this._waiAria.eventAttr(o, Ne);
                Ne.className = "dhx_cal_event dhx_cal_editor";
                if (this.config.rtl) {
                  he++;
                }
                this.set_xy(Ne, _e, Z - 20, he, z + (i.xy.event_header_height || 14));
                if (o.color) {
                  Ne.style.backgroundColor = o.color;
                }
                var Ve = i.templates.event_class(o.start_date, o.end_date, o);
                if (Ve) {
                  Ne.className += " " + Ve;
                }
                var Se = document.createElement("div");
                this.set_xy(Se, _e - 6, Z - 26);
                Se.style.cssText += ";margin:2px 2px 2px 2px;overflow:hidden;";
                Ne.appendChild(Se);
                this._els.dhx_cal_data[0].appendChild(Ne);
                this._rendered.push(Ne);
                Se.innerHTML = "<textarea class='dhx_cal_editor'>" + o.text + "</textarea>";
                this._editor = Se.querySelector("textarea");
                if (this._quirks7) {
                  this._editor.style.height = Z - 12 + "px";
                }
                i.event(this._editor, "keydown", function (yt) {
                  if (yt.shiftKey) {
                    return true;
                  }
                  var xt = yt.keyCode;
                  if (xt == i.keys.edit_save) {
                    i.editStop(true);
                  }
                  if (xt == i.keys.edit_cancel) {
                    i.editStop(false);
                  }
                  if (xt == i.keys.edit_save || xt == i.keys.edit_cancel) {
                    if (yt.preventDefault) {
                      yt.preventDefault();
                    }
                  }
                });
                i.event(this._editor, "selectstart", function (yt) {
                  yt.cancelBubble = true;
                  return true;
                });
                i._focus(this._editor, true);
                this._els.dhx_cal_data[0].scrollLeft = 0;
              }
              if (this.xy.menu_width !== 0 && this._select_id == o.id) {
                if (this.config.cascade_event_display && this._drag_mode) {
                  Ne.style.zIndex = 1;
                }
                for (var Fe, Oe = this.config["icons_" + (this._edit_id == o.id ? "edit" : "select")], at = "", ht = o.color ? "background-color: " + o.color + ";" : "", lt = o.textColor ? "color: " + o.textColor + ";" : "", mt = 0; mt < Oe.length; mt++) {
                  Fe = this._waiAria.eventMenuAttrString(Oe[mt]);
                  at += "<div class='dhx_menu_icon " + Oe[mt] + "' style='" + ht + lt + "' title='" + this.locale.labels[Oe[mt]] + "'" + Fe + "></div>";
                }
                var ft = this._render_v_bar(o, he - D + 1, z, D, Oe.length * 20 + 26 - 2, "", "<div style='" + ht + lt + "' class='dhx_menu_head'></div>", at, true);
                ft.style.left = he - D + 1;
                this._els.dhx_cal_data[0].appendChild(ft);
                this._rendered.push(ft);
              }
              if (this.config.drag_highlight && this._drag_id == o.id) {
                this.highlightEventPosition(o);
              }
            }
          }
        };
        i._render_v_bar = function (o, c, h, D, V, T, W, z, Z) {
          var re = document.createElement("div");
          var oe = o.id;
          var _e = Z ? "dhx_cal_event dhx_cal_select_menu" : "dhx_cal_event";
          var he = i.getState();
          if (he.drag_id == o.id) {
            _e += " dhx_cal_event_drag";
          }
          if (he.select_id == o.id) {
            _e += " dhx_cal_event_selected";
          }
          var be = i.templates.event_class(o.start_date, o.end_date, o);
          if (be) {
            _e = _e + " " + be;
          }
          if (this.config.cascade_event_display) {
            _e += " dhx_cal_event_cascade";
          }
          var Ae = o.color ? "background-color:" + o.color + ";" : "";
          var He = o.textColor ? "color:" + o.textColor + ";" : "";
          var Ne = i._border_box_events();
          var Ve = D - 2;
          var Fe = Ne ? Ve : D - 6;
          var Oe = Ne ? Ve : D - (this._quirks ? 4 : 14);
          var at = Ne ? Ve - 2 : D - 8;
          var ht = Ne ? V - this.xy.event_header_height - 1 : V - (this._quirks ? 20 : 30) + 1;
          re.innerHTML = "<div event_id=\"" + oe + "\" " + this.config.event_attribute + "=\"" + oe + "\" class=\"" + _e + "\" style=\"position:absolute; top:" + h + "px; " + (this.config.rtl ? "right:" : "left:") + c + "px; width:" + (Ne ? Ve : D - 4) + "px; height:" + V + "px;" + (T || "") + "\"></div>";
          var mt = re.cloneNode(true).firstChild;
          if (!Z && i.renderEvent(mt, o, D, V, W, z)) {
            return mt;
          }
          var ft = "<div class=\"dhx_event_move dhx_header\" style=\" width:" + Fe + "px;" + Ae + "\" >&nbsp;</div>";
          ft += "<div class=\"dhx_event_move dhx_title\" style=\"" + Ae + He + "\">" + W + "</div>";
          ft += "<div class=\"dhx_body\" style=\" width:" + Oe + "px; height:" + ht + "px;" + Ae + He + "\">" + z + "</div>";
          var yt = "dhx_event_resize dhx_footer";
          if (Z || o._drag_resize === false) {
            yt = "dhx_resize_denied " + yt;
          }
          (mt = re.firstChild).innerHTML = ft += "<div class=\"" + yt + "\" style=\" width:" + at + "px;" + (Z ? " margin-top:-1px;" : "") + Ae + He + "\" ></div>";
          return mt;
        };
        i.renderEvent = function () {
          return false;
        };
        i.locate_holder = function (o) {
          if (this._mode == "day") {
            return this._els.dhx_cal_data[0].firstChild;
          } else {
            return this._els.dhx_cal_data[0].childNodes[o];
          }
        };
        i.locate_holder_day = function (o, c) {
          var h = Math.floor((this._correct_shift(o, 1) - this._min_date) / 86400000);
          if (c && this.date.time_part(o)) {
            h++;
          }
          return h;
        };
        i._get_dnd_order = function (o, c, h) {
          if (!this._drag_event) {
            return o;
          }
          if (this._drag_event._orig_sorder) {
            o = this._drag_event._orig_sorder;
          } else {
            this._drag_event._orig_sorder = o;
          }
          for (var D = c * o; D + c > h;) {
            o--;
            D -= c;
          }
          return Math.max(o, 0);
        };
        i._get_event_bar_pos = function (o) {
          var h = this._colsS;
          var D = h[o._sday];
          var V = h[o._eday];
          if (this.config.rtl) {
            D = h[h.col_length] - h[o._eday] + h[0];
            V = h[h.col_length] - h[o._sday] + h[0];
          }
          if (V == D) {
            V = h[o._eday + 1];
          }
          var T = this.xy.bar_height;
          var W = o._sorder;
          if (o.id == this._drag_id) {
            W = i._get_dnd_order(W, T, h.heights[o._sweek + 1] - h.heights[o._sweek] - this.xy.month_head_height);
          }
          return {
            x: D,
            x2: V,
            y: h.heights[o._sweek] + (h.height ? this.xy.month_scale_height + 2 : 2) + W * T
          };
        };
        i.render_event_bar = function (o) {
          var c = this._rendered_location;
          var h = this._get_event_bar_pos(o);
          var D = h.y;
          var V = h.x;
          var T = h.x2;
          var W = "";
          if (T) {
            var z = i.config.resize_month_events && this._mode == "month" && (!o._timed || i.config.resize_month_timed);
            var Z = document.createElement("div");
            var re = o.hasOwnProperty("_first_chunk") && o._first_chunk;
            var oe = o.hasOwnProperty("_last_chunk") && o._last_chunk;
            var be = true;
            var Ae = "dhx_cal_event_clear";
            if (!o._timed || !!z) {
              be = false;
              Ae = "dhx_cal_event_line";
            }
            if (re) {
              Ae += " dhx_cal_event_line_start";
            }
            if (oe) {
              Ae += " dhx_cal_event_line_end";
            }
            if (z && (o._timed || re)) {
              W += "<div class='dhx_event_resize dhx_event_resize_start'></div>";
            }
            if (z && (o._timed || oe)) {
              W += "<div class='dhx_event_resize dhx_event_resize_end'></div>";
            }
            var He = i.templates.event_class(o.start_date, o.end_date, o);
            if (He) {
              Ae += " " + He;
            }
            var Se = ["position:absolute", "top:" + D + "px", "left:" + V + "px", "width:" + (T - V - 3 - (be ? 1 : 0)) + "px", o.textColor ? "color:" + o.textColor + ";" : "", o.color ? "background:" + o.color + ";" : "", o._text_style || ""].join(";");
            var Fe = "<div event_id='" + o.id + "' " + this.config.event_attribute + "='" + o.id + "' class='" + Ae + "' style='" + Se + "'" + this._waiAria.eventBarAttrString(o) + ">";
            if (z) {
              Fe += W;
            }
            if (i.getState().mode == "month") {
              o = i.getEvent(o.id);
            }
            if (o._timed) {
              Fe += i.templates.event_bar_date(o.start_date, o.end_date, o);
            }
            Fe += i.templates.event_bar_text(o.start_date, o.end_date, o) + "</div>";
            Z.innerHTML = Fe += "</div>";
            this._rendered.push(Z.firstChild);
            c.appendChild(Z.firstChild);
          }
        };
        i._locate_event = function (o) {
          for (var c = null; o && !c && o.getAttribute;) {
            c = o.getAttribute(this.config.event_attribute);
            o = o.parentNode;
          }
          return c;
        };
        i.edit = function (o) {
          if (this._edit_id != o) {
            this.editStop(false, o);
            this._edit_id = o;
            this.updateEvent(o);
          }
        };
        i.editStop = function (o, c) {
          if (!c || this._edit_id != c) {
            var h = this.getEvent(this._edit_id);
            if (h) {
              if (o) {
                h.text = this._editor.value;
              }
              this._edit_id = null;
              this._editor = null;
              this.updateEvent(h.id);
              this._edit_stop_event(h, o);
            }
          }
        };
        i._edit_stop_event = function (o, c) {
          if (this._new_event) {
            if (c) {
              this.callEvent("onEventAdded", [o.id, o]);
            } else if (o) {
              this.deleteEvent(o.id, true);
            }
            this._new_event = null;
          } else if (c) {
            this.callEvent("onEventChanged", [o.id, o]);
          }
        };
        i.getEvents = function (o, c) {
          var h = [];
          for (var D in this._events) {
            var V = this._events[D];
            if (V && (!o && !c || V.start_date < c && V.end_date > o)) {
              h.push(V);
            }
          }
          return h;
        };
        i.getRenderedEvent = function (o) {
          if (o) {
            for (var c = i._rendered, h = 0; h < c.length; h++) {
              var D = c[h];
              if (D.getAttribute(i.config.event_attribute) == o) {
                return D;
              }
            }
            return null;
          }
        };
        i.showEvent = function (o, c) {
          if (o && Qe(o) === "object") {
            c = o.mode;
            oe = o.section;
            o = o.section;
          }
          var h = typeof o == "number" || typeof o == "string" ? i.getEvent(o) : o;
          c = c || i._mode;
          if (h && (!this.checkEvent("onBeforeEventDisplay") || this.callEvent("onBeforeEventDisplay", [h, c]))) {
            var D = i.config.scroll_hour;
            i.config.scroll_hour = h.start_date.getHours();
            var V = i.config.preserve_scroll;
            i.config.preserve_scroll = false;
            var T = h.color;
            var W = h.textColor;
            if (i.config.highlight_displayed_event) {
              h.color = i.config.displayed_event_color;
              h.textColor = i.config.displayed_event_text_color;
            }
            i.setCurrentView(new Date(h.start_date), c);
            i.config.scroll_hour = D;
            i.config.preserve_scroll = V;
            if (i.matrix && i.matrix[c]) {
              var z = i.getView();
              var Z = z.y_property;
              var re = i.getEvent(h.id);
              if (re) {
                if (!oe) {
                  var oe = re[Z];
                  if (Array.isArray(oe)) {
                    oe = oe[0];
                  } else if (typeof oe == "string" && i.config.section_delimiter && oe.indexOf(i.config.section_delimiter) > -1) {
                    oe = oe.split(i.config.section_delimiter)[0];
                  }
                }
                var _e = z.getSectionTop(oe);
                var he = z.posFromDate(re.start_date);
                var be = i.$container.querySelector(".dhx_timeline_data_wrapper");
                he -= (be.offsetWidth - z.dx) / 2;
                _e = _e - be.offsetHeight / 2 + z.dy / 2;
                if (z._smartRenderingEnabled()) {
                  var Ae = z.attachEvent("onScroll", function () {
                    He();
                    z.detachEvent(Ae);
                  });
                }
                z.scrollTo({
                  left: he,
                  top: _e
                });
                if (!z._smartRenderingEnabled()) {
                  He();
                }
              }
            } else {
              He();
            }
            i.callEvent("onAfterEventDisplay", [h, c]);
          }
          function He() {
            h.color = T;
            h.textColor = W;
          }
        };
      })(j);
      (function (i) {
        i._append_drag_marker = function (o) {
          if (!o.parentNode) {
            var c = i._els.dhx_cal_data[0].lastChild;
            var h = i._getClassName(c);
            if (h.indexOf("dhx_scale_holder") < 0 && c.previousSibling) {
              c = c.previousSibling;
            }
            h = i._getClassName(c);
            if (c && h.indexOf("dhx_scale_holder") === 0) {
              c.appendChild(o);
            }
          }
        };
        i._update_marker_position = function (o, c) {
          var h = i._calc_event_y(c, 0);
          o.style.top = h.top + "px";
          o.style.height = h.height + "px";
        };
        i.highlightEventPosition = function (o) {
          var c = document.createElement("div");
          c.setAttribute("event_id", o.id);
          c.setAttribute(this.config.event_attribute, o.id);
          this._rendered.push(c);
          this._update_marker_position(c, o);
          var h = this.templates.drag_marker_class(o.start_date, o.end_date, o);
          var D = this.templates.drag_marker_content(o.start_date, o.end_date, o);
          c.className = "dhx_drag_marker";
          if (h) {
            c.className += " " + h;
          }
          if (D) {
            c.innerHTML = D;
          }
          this._append_drag_marker(c);
        };
      })(j);
      (function ze(t) {
        var a;
        t._loaded = {};
        t._load = function (a, v) {
          if (a = a || this._load_url) {
            var _;
            a += (a.indexOf("?") == -1 ? "?" : "&") + "timeshift=" + new Date().getTimezoneOffset();
            if (this.config.prevent_cache) {
              a += "&uid=" + this.uid();
            }
            v = v || this._date;
            if (this._load_mode) {
              var i = this.templates.load_format;
              for (v = this.date[this._load_mode + "_start"](new Date(v.valueOf())); v > this._min_date;) {
                v = this.date.add(v, -1, this._load_mode);
              }
              _ = v;
              for (var o = true; _ < this._max_date;) {
                _ = this.date.add(_, 1, this._load_mode);
                if (this._loaded[i(v)] && o) {
                  v = this.date.add(v, 1, this._load_mode);
                } else {
                  o = false;
                }
              }
              var c = _;
              do {
                c = this.date.add(_ = c, -1, this._load_mode);
              } while (c > v && this._loaded[i(c)]);
              if (_ <= v) {
                return false;
              }
              for (t.ajax.get(a + "&from=" + i(v) + "&to=" + i(_), h); v < _;) {
                this._loaded[i(v)] = true;
                v = this.date.add(v, 1, this._load_mode);
              }
            } else {
              t.ajax.get(a, h);
            }
            this.callEvent("onXLS", []);
            this.callEvent("onLoadStart", []);
            return true;
          }
          function h(D) {
            t.on_load(D);
            t.callEvent("onLoadEnd", []);
          }
        };
        t._parsers = {};
        (a = t)._parsers.xml = {
          canParse: function (v, _) {
            if (_.responseXML && _.responseXML.firstChild) {
              return true;
            }
            try {
              var i = a.ajax.parse(_.responseText);
              var o = a.ajax.xmltop("data", i);
              if (o && o.tagName === "data") {
                return true;
              }
            } catch {}
            return false;
          },
          parse: function (v) {
            var _;
            v.xmlDoc.responseXML ||= a.ajax.parse(v.xmlDoc.responseText);
            if ((_ = a.ajax.xmltop("data", v.xmlDoc)).tagName != "data") {
              return null;
            }
            var i = _.getAttribute("dhx_security");
            if (i) {
              if (window.dhtmlx) {
                window.dhtmlx.security_key = i;
              }
              a.security_key = i;
            }
            for (var o = a.ajax.xpath("//coll_options", v.xmlDoc), c = 0; c < o.length; c++) {
              var h = o[c].getAttribute("for");
              var D = a.serverList[h];
              if (!D) {
                a.serverList[h] = D = [];
              }
              D.splice(0, D.length);
              for (var V = a.ajax.xpath(".//item", o[c]), T = 0; T < V.length; T++) {
                for (var W = V[T].attributes, z = {
                    key: V[T].getAttribute("value"),
                    label: V[T].getAttribute("label")
                  }, Z = 0; Z < W.length; Z++) {
                  var re = W[Z];
                  if (re.nodeName != "value" && re.nodeName != "label") {
                    z[re.nodeName] = re.nodeValue;
                  }
                }
                D.push(z);
              }
            }
            if (o.length) {
              a.callEvent("onOptionsLoad", []);
            }
            var oe = a.ajax.xpath("//userdata", v.xmlDoc);
            for (c = 0; c < oe.length; c++) {
              var _e = a._xmlNodeToJSON(oe[c]);
              a._userdata[_e.name] = _e.text;
            }
            var he = [];
            _ = a.ajax.xpath("//event", v.xmlDoc);
            c = 0;
            for (; c < _.length; c++) {
              var be = he[c] = a._xmlNodeToJSON(_[c]);
              a._init_event(be);
            }
            return he;
          }
        };
        (function (a) {
          a.json = a._parsers.json = {
            canParse: function (v) {
              if (v && ae(v) === "object") {
                return true;
              }
              if (typeof v == "string") {
                try {
                  var _ = JSON.parse(v);
                  return Object.prototype.toString.call(_) === "[object Object]" || Object.prototype.toString.call(_) === "[object Array]";
                } catch {
                  return false;
                }
              }
              return false;
            },
            parse: function (v) {
              var _ = [];
              if (typeof v == "string") {
                v = JSON.parse(v);
              }
              if (Object.prototype.toString.call(v) === "[object Array]") {
                _ = v;
              } else if (v) {
                if (v.events) {
                  _ = v.events;
                } else if (v.data) {
                  _ = v.data;
                }
              }
              _ = _ || [];
              if (v.dhx_security) {
                if (window.dhtmlx) {
                  window.dhtmlx.security_key = v.dhx_security;
                }
                a.security_key = v.dhx_security;
              }
              var i = v && v.collections ? v.collections : {};
              var o = false;
              for (var c in i) {
                if (i.hasOwnProperty(c)) {
                  o = true;
                  var h = i[c];
                  var D = a.serverList[c];
                  if (!D) {
                    a.serverList[c] = D = [];
                  }
                  D.splice(0, D.length);
                  for (var V = 0; V < h.length; V++) {
                    var T = h[V];
                    var W = {
                      key: T.value,
                      label: T.label
                    };
                    for (var z in T) {
                      if (T.hasOwnProperty(z)) {
                        if (z == "value" || z == "label") {
                          continue;
                        }
                        W[z] = T[z];
                      }
                    }
                    D.push(W);
                  }
                }
              }
              if (o) {
                a.callEvent("onOptionsLoad", []);
              }
              for (var Z = [], re = 0; re < _.length; re++) {
                var oe = _[re];
                a._init_event(oe);
                Z.push(oe);
              }
              return Z;
            }
          };
        })(t);
        (function (a) {
          a.ical = a._parsers.ical = {
            canParse: function (v) {
              return typeof v == "string" && new RegExp("^BEGIN:VCALENDAR").test(v);
            },
            parse: function (v) {
              var _ = v.match(RegExp(this.c_start + "[^\f]*" + this.c_end, ""));
              if (_.length) {
                _[0] = _[0].replace(/[\r\n]+ /g, "");
                _[0] = _[0].replace(/[\r\n]+(?=[a-z \t])/g, " ");
                _[0] = _[0].replace(/;[^:\r\n]*:/g, ":");
                for (var i, o = [], c = RegExp("(?:" + this.e_start + ")([^\f]*?)(?:" + this.e_end + ")", "g"); (i = c.exec(_)) !== null;) {
                  for (var h, D = {}, V = /[^\r\n]+[\r\n]+/g; (h = V.exec(i[1])) !== null;) {
                    this.parse_param(h.toString(), D);
                  }
                  if (D.uid && !D.id) {
                    D.id = D.uid;
                  }
                  o.push(D);
                }
                return o;
              }
            },
            parse_param: function (v, _) {
              var i = v.indexOf(":");
              if (i != -1) {
                var o = v.substr(0, i).toLowerCase();
                var c = v.substr(i + 1).replace(/\\,/g, ",").replace(/[\r\n]+$/, "");
                if (o == "summary") {
                  o = "text";
                } else if (o == "dtstart") {
                  o = "start_date";
                  c = this.parse_date(c, 0, 0);
                } else if (o == "dtend") {
                  o = "end_date";
                  c = this.parse_date(c, 0, 0);
                }
                _[o] = c;
              }
            },
            parse_date: function (v, _, i) {
              var o = v.split("T");
              var c = false;
              if (o[1]) {
                _ = o[1].substr(0, 2);
                i = o[1].substr(2, 2);
                c = o[1][6] == "Z";
              }
              var h = o[0].substr(0, 4);
              var D = parseInt(o[0].substr(4, 2), 10) - 1;
              var V = o[0].substr(6, 2);
              if (a.config.server_utc || c) {
                return new Date(Date.UTC(h, D, V, _, i));
              } else {
                return new Date(h, D, V, _, i);
              }
            },
            c_start: "BEGIN:VCALENDAR",
            e_start: "BEGIN:VEVENT",
            e_end: "END:VEVENT",
            c_end: "END:VCALENDAR"
          };
        })(t);
        t.on_load = function (a) {
          var v;
          this.callEvent("onBeforeParse", []);
          var _ = false;
          var i = false;
          for (var o in this._parsers) {
            var c = this._parsers[o];
            if (c.canParse(a.xmlDoc.responseText, a.xmlDoc)) {
              try {
                var h = a.xmlDoc.responseText;
                if (o === "xml") {
                  h = a;
                }
                if (!(v = c.parse(h))) {
                  _ = true;
                }
              } catch {
                _ = true;
              }
              i = true;
              break;
            }
          }
          if (!i) {
            if (this._process && this[this._process]) {
              try {
                v = this[this._process].parse(a.xmlDoc.responseText);
              } catch {
                _ = true;
              }
            } else {
              _ = true;
            }
          }
          if (_ || a.xmlDoc.status && a.xmlDoc.status >= 400) {
            this.callEvent("onLoadError", [a.xmlDoc]);
            v = [];
          }
          this._process_loading(v);
          this.callEvent("onXLE", []);
          this.callEvent("onParse", []);
        };
        t._process_loading = function (a) {
          this._loading = true;
          this._not_render = true;
          for (var v = 0; v < a.length; v++) {
            if (this.callEvent("onEventLoading", [a[v]])) {
              this.addEvent(a[v]);
            }
          }
          this._not_render = false;
          if (this._render_wait) {
            this.render_view_data();
          }
          this._loading = false;
          if (this._after_call) {
            this._after_call();
          }
          this._after_call = null;
        };
        t._init_event = function (a) {
          a.text = a.text || a._tagvalue || "";
          a.start_date = t._init_date(a.start_date);
          a.end_date = t._init_date(a.end_date);
        };
        t._init_date = function (a) {
          if (a) {
            if (typeof a == "string") {
              return t._helpers.parseDate(a);
            } else {
              return new Date(a);
            }
          } else {
            return null;
          }
        };
        var j = Me()(t);
        t.serialize = function () {
          var a = [];
          var v = j();
          for (var _ in v) {
            var i = {};
            var o = v[_];
            for (var c in o) {
              if (c.charAt(0) != "$" && c.charAt(0) != "_") {
                var h;
                var D = o[c];
                h = t.utils.isDate(D) ? t.defined(t.templates.xml_format) ? t.templates.xml_format(D) : t.templates.format_date(D) : D;
                i[c] = h;
              }
            }
            a.push(i);
          }
          return a;
        };
        t.parse = function (a, v) {
          this._process = v;
          this.on_load({
            xmlDoc: {
              responseText: a
            }
          });
        };
        t.load = function (a, v) {
          if (typeof v == "string") {
            this._process = v;
            v = arguments[2];
          }
          this._load_url = a;
          this._after_call = v;
          this._load(a, this._date);
        };
        t.setLoadMode = function (a) {
          if (a == "all") {
            a = "";
          }
          this._load_mode = a;
        };
        t.serverList = function (a, v) {
          if (v) {
            this.serverList[a] = v.slice(0);
            return this.serverList[a];
          } else {
            this.serverList[a] = this.serverList[a] || [];
            return this.serverList[a];
          }
        };
        t._userdata = {};
        t._xmlNodeToJSON = function (a) {
          for (var v = {}, _ = 0; _ < a.attributes.length; _++) {
            v[a.attributes[_].name] = a.attributes[_].value;
          }
          for (_ = 0; _ < a.childNodes.length; _++) {
            var i = a.childNodes[_];
            if (i.nodeType == 1) {
              v[i.tagName] = i.firstChild ? i.firstChild.nodeValue : "";
            }
          }
          v.text ||= a.firstChild ? a.firstChild.nodeValue : "";
          return v;
        };
        t.attachEvent("onXLS", function () {
          var a;
          if (this.config.show_loading === true) {
            (a = this.config.show_loading = document.createElement("div")).className = "dhx_loading";
            a.style.left = Math.round((this._x - 128) / 2) + "px";
            a.style.top = Math.round((this._y - 15) / 2) + "px";
            this._obj.appendChild(a);
          }
        });
        t.attachEvent("onXLE", function () {
          var a = this.config.show_loading;
          if (a && je(a) == "object") {
            if (a.parentNode) {
              a.parentNode.removeChild(a);
            }
            this.config.show_loading = true;
          }
        });
      })(j);
      (function (i) {
        i._lightbox_controls = {};
        i.formSection = function (o) {
          for (var c = this.config.lightbox.sections, h = 0; h < c.length && c[h].name != o; h++);
          if (h === c.length) {
            return null;
          }
          var D = c[h];
          if (!i._lightbox) {
            i.getLightbox();
          }
          var V = document.getElementById(D.id);
          var T = V.nextSibling;
          var W = {
            section: D,
            header: V,
            node: T,
            getValue: function (Z) {
              return i.form_blocks[D.type].get_value(T, Z || {}, D);
            },
            setValue: function (Z, re) {
              return i.form_blocks[D.type].set_value(T, Z, re || {}, D);
            }
          };
          var z = i._lightbox_controls["get_" + D.type + "_control"];
          if (z) {
            return z(W);
          } else {
            return W;
          }
        };
        i._lightbox_controls.get_template_control = function (o) {
          o.control = o.node;
          return o;
        };
        i._lightbox_controls.get_select_control = function (o) {
          o.control = o.node.getElementsByTagName("select")[0];
          return o;
        };
        i._lightbox_controls.get_textarea_control = function (o) {
          o.control = o.node.getElementsByTagName("textarea")[0];
          return o;
        };
        i._lightbox_controls.get_time_control = function (o) {
          o.control = o.node.getElementsByTagName("select");
          return o;
        };
        i._lightbox_controls.defaults = {
          template: {
            height: 30
          },
          textarea: {
            height: 200
          },
          select: {
            height: 23
          },
          time: {
            height: 20
          }
        };
        i.form_blocks = {
          template: {
            render: function (o) {
              var c = i._lightbox_controls.defaults.template;
              return "<div class='dhx_cal_ltext dhx_cal_template' style='height:" + (o.height || (c ? c.height : 30) || 30) + "px;'></div>";
            },
            set_value: function (o, c, h, D) {
              o.innerHTML = c || "";
            },
            get_value: function (o, c, h) {
              return o.innerHTML || "";
            },
            focus: function (o) {}
          },
          textarea: {
            render: function (o) {
              var c = i._lightbox_controls.defaults.textarea;
              return "<div class='dhx_cal_ltext' style='height:" + (o.height || (c ? c.height : 200) || "130") + "px;'><textarea></textarea></div>";
            },
            set_value: function (o, c, h) {
              i.form_blocks.textarea._get_input(o).value = c || "";
            },
            get_value: function (o, c) {
              return i.form_blocks.textarea._get_input(o).value;
            },
            focus: function (o) {
              var c = i.form_blocks.textarea._get_input(o);
              i._focus(c, true);
            },
            _get_input: function (o) {
              return o.getElementsByTagName("textarea")[0];
            }
          },
          select: {
            render: function (o) {
              for (var c = i._lightbox_controls.defaults.select, D = "<div class='dhx_cal_ltext' style='height:" + (o.height || (c ? c.height : 23) || "23") + "px;'><select style='width:100%;'>", V = 0; V < o.options.length; V++) {
                D += "<option value='" + o.options[V].key + "'>" + o.options[V].label + "</option>";
              }
              return D + "</select></div>";
            },
            set_value: function (o, c, h, D) {
              var V = o.firstChild;
              if (!V._dhx_onchange && D.onchange) {
                i.event(V, "change", D.onchange);
                V._dhx_onchange = true;
              }
              if (c === undefined) {
                c = (V.options[0] || {}).value;
              }
              V.value = c || "";
            },
            get_value: function (o, c) {
              return o.firstChild.value;
            },
            focus: function (o) {
              i._focus(o.firstChild, true);
            }
          },
          time: {
            render: function (o) {
              o.time_format ||= ["%H:%i", "%d", "%m", "%Y"];
              o._time_format_order = {};
              var c = o.time_format;
              var h = i.config;
              var D = i.date.date_part(i._currentDate());
              var V = 1440;
              var T = 0;
              if (i.config.limit_time_select) {
                V = h.last_hour * 60 + 1;
                T = h.first_hour * 60;
                D.setHours(h.first_hour);
              }
              for (var W = "", z = 0; z < c.length; z++) {
                var Z = c[z];
                if (z > 0) {
                  W += " ";
                }
                var re = "";
                var oe = "";
                switch (Z) {
                  case "%Y":
                    var _e;
                    var he;
                    var be;
                    re = "dhx_lightbox_year_select";
                    o._time_format_order[3] = z;
                    if (o.year_range) {
                      if (isNaN(o.year_range)) {
                        if (o.year_range.push) {
                          he = o.year_range[0];
                          be = o.year_range[1];
                        }
                      } else {
                        _e = o.year_range;
                      }
                    }
                    _e = _e || 10;
                    var Ae = Ae || Math.floor(_e / 2);
                    he = he || D.getFullYear() - Ae;
                    be = be || he + _e;
                    for (var He = he; He < be; He++) {
                      oe += "<option value='" + He + "'>" + He + "</option>";
                    }
                    break;
                  case "%m":
                    re = "dhx_lightbox_month_select";
                    o._time_format_order[2] = z;
                    He = 0;
                    for (; He < 12; He++) {
                      oe += "<option value='" + He + "'>" + this.locale.date.month_full[He] + "</option>";
                    }
                    break;
                  case "%d":
                    re = "dhx_lightbox_day_select";
                    o._time_format_order[1] = z;
                    He = 1;
                    for (; He < 32; He++) {
                      oe += "<option value='" + He + "'>" + He + "</option>";
                    }
                    break;
                  case "%H:%i":
                    re = "dhx_lightbox_time_select";
                    o._time_format_order[0] = z;
                    He = T;
                    var Ne = D.getDate();
                    for (o._time_values = []; He < V;) {
                      oe += "<option value='" + He + "'>" + this.templates.time_picker(D) + "</option>";
                      o._time_values.push(He);
                      D.setTime(D.valueOf() + this.config.time_step * 60 * 1000);
                      He = (D.getDate() != Ne ? 1 : 0) * 24 * 60 + D.getHours() * 60 + D.getMinutes();
                    }
                }
                if (oe) {
                  var Ve = i._waiAria.lightboxSelectAttrString(Z);
                  W += "<select class='" + re + "' " + (o.readonly ? "disabled='disabled'" : "") + Ve + ">" + oe + "</select> ";
                }
              }
              var Se = i._lightbox_controls.defaults.select;
              return "<div style='height:" + (o.height || (Se ? Se.height : 23) || 23) + "px;padding-top:0px;font-size:inherit;' class='dhx_section_time'>" + W + "<span style='font-weight:normal; font-size:10pt;'> &nbsp;&ndash;&nbsp; </span>" + W + "</div>";
            },
            set_value: function (o, c, h, D) {
              var V;
              var T;
              var W = i.config;
              var z = o.getElementsByTagName("select");
              var Z = D._time_format_order;
              if (W.full_day) {
                if (!o._full_day) {
                  var re = "<label class='dhx_fullday'><input type='checkbox' name='full_day' value='true'> " + i.locale.labels.full_day + "&nbsp;</label></input>";
                  if (!i.config.wide_form) {
                    re = o.previousSibling.innerHTML + re;
                  }
                  o.previousSibling.innerHTML = re;
                  o._full_day = true;
                }
                var oe = o.previousSibling.getElementsByTagName("input")[0];
                oe.checked = i.date.time_part(h.start_date) === 0 && i.date.time_part(h.end_date) === 0;
                z[Z[0]].disabled = oe.checked;
                z[Z[0] + z.length / 2].disabled = oe.checked;
                if (!oe.$_eventAttached) {
                  oe.$_eventAttached = true;
                  i.event(oe, "click", function () {
                    if (oe.checked) {
                      var Ae = {};
                      i.form_blocks.time.get_value(o, Ae, D);
                      V = i.date.date_part(Ae.start_date);
                      if (+(T = i.date.date_part(Ae.end_date)) == +V || +T >= +V && (h.end_date.getHours() !== 0 || h.end_date.getMinutes() !== 0)) {
                        T = i.date.add(T, 1, "day");
                      }
                    } else {
                      V = null;
                      T = null;
                    }
                    z[Z[0]].disabled = oe.checked;
                    z[Z[0] + z.length / 2].disabled = oe.checked;
                    be(z, 0, V || h.start_date);
                    be(z, 4, T || h.end_date);
                  });
                }
              }
              if (W.auto_end_date && W.event_duration) {
                for (var _e = function () {
                    if (W.auto_end_date && W.event_duration) {
                      V = new Date(z[Z[3]].value, z[Z[2]].value, z[Z[1]].value, 0, z[Z[0]].value);
                      T = new Date(V.getTime() + i.config.event_duration * 60 * 1000);
                      be(z, 4, T);
                    }
                  }, he = 0; he < 4; he++) {
                  if (!z[he].$_eventAttached) {
                    z[he].$_eventAttached = true;
                    i.event(z[he], "change", _e);
                  }
                }
              }
              function be(Ae, He, Ne) {
                for (var Ve = D._time_values, Se = Ne.getHours() * 60 + Ne.getMinutes(), Fe = Se, Oe = false, at = 0; at < Ve.length; at++) {
                  var ht = Ve[at];
                  if (ht === Se) {
                    Oe = true;
                    break;
                  }
                  if (ht < Se) {
                    Fe = ht;
                  }
                }
                Ae[He + Z[0]].value = Oe ? Se : Fe;
                if (!Oe && !Fe) {
                  Ae[He + Z[0]].selectedIndex = -1;
                }
                Ae[He + Z[1]].value = Ne.getDate();
                Ae[He + Z[2]].value = Ne.getMonth();
                Ae[He + Z[3]].value = Ne.getFullYear();
              }
              be(z, 0, h.start_date);
              be(z, 4, h.end_date);
            },
            get_value: function (o, c, h) {
              var D = o.getElementsByTagName("select");
              var V = h._time_format_order;
              c.start_date = new Date(D[V[3]].value, D[V[2]].value, D[V[1]].value, 0, D[V[0]].value);
              c.end_date = new Date(D[V[3] + 4].value, D[V[2] + 4].value, D[V[1] + 4].value, 0, D[V[0] + 4].value);
              if (!D[V[3]].value || !D[V[3] + 4].value) {
                var T = i.getEvent(i._lightbox_id);
                if (T) {
                  c.start_date = T.start_date;
                  c.end_date = T.end_date;
                }
              }
              if (c.end_date <= c.start_date) {
                c.end_date = i.date.add(c.start_date, i.config.time_step, "minute");
              }
              return {
                start_date: new Date(c.start_date),
                end_date: new Date(c.end_date)
              };
            },
            focus: function (o) {
              i._focus(o.getElementsByTagName("select")[0]);
            }
          }
        };
        i._setLbPosition = function (o) {
          if (o) {
            var c = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
            var h = window.pageXOffset || document.body.scrollLeft || document.documentElement.scrollLeft;
            var D = window.innerHeight || document.documentElement.clientHeight;
            o.style.top = c ? Math.round(c + Math.max((D - o.offsetHeight) / 2, 0)) + "px" : Math.round(Math.max((D - o.offsetHeight) / 2, 0) + 9) + "px";
            o.style.left = document.documentElement.scrollWidth > document.body.offsetWidth ? Math.round(h + (document.body.offsetWidth - o.offsetWidth) / 2) + "px" : Math.round((document.body.offsetWidth - o.offsetWidth) / 2) + "px";
          }
        };
        i.showCover = function (o) {
          if (o) {
            o.style.display = "block";
            this._setLbPosition(o);
          }
          if (i.config.responsive_lightbox) {
            document.documentElement.classList.add("dhx_cal_overflow_container");
            document.body.classList.add("dhx_cal_overflow_container");
          }
          this.show_cover();
        };
        i.showLightbox = function (o) {
          if (o) {
            if (this.callEvent("onBeforeLightbox", [o])) {
              var c = this.getLightbox();
              this.showCover(c);
              this._fill_lightbox(o, c);
              this._waiAria.lightboxVisibleAttr(c);
              this.callEvent("onLightbox", [o]);
            } else {
              this._new_event &&= null;
            }
          }
        };
        i._fill_lightbox = function (o, c) {
          var h = this.getEvent(o);
          var D = c.getElementsByTagName("span");
          var V = [];
          if (i.templates.lightbox_header) {
            V.push("");
            var T = i.templates.lightbox_header(h.start_date, h.end_date, h);
            V.push(T);
            D[1].innerHTML = "";
            D[2].innerHTML = T;
          } else {
            var W = this.templates.event_header(h.start_date, h.end_date, h);
            var z = (this.templates.event_bar_text(h.start_date, h.end_date, h) || "").substr(0, 70);
            V.push(W);
            V.push(z);
            D[1].innerHTML = W;
            D[2].innerHTML = z;
          }
          this._waiAria.lightboxHeader(c, V.join(" "));
          for (var Z = this.config.lightbox.sections, re = 0; re < Z.length; re++) {
            var oe = Z[re];
            var _e = i._get_lightbox_section_node(oe);
            var he = this.form_blocks[oe.type];
            he.set_value.call(this, _e, h[oe.map_to] !== undefined ? h[oe.map_to] : oe.default_value, h, oe);
            if (Z[re].focus) {
              he.focus.call(this, _e);
            }
          }
          i._lightbox_id = o;
        };
        i._get_lightbox_section_node = function (o) {
          return document.getElementById(o.id).nextSibling;
        };
        i._lightbox_out = function (o) {
          for (var c = this.config.lightbox.sections, h = 0; h < c.length; h++) {
            var D = document.getElementById(c[h].id);
            var V = this.form_blocks[c[h].type].get_value.call(this, D = D && D.nextSibling, o, c[h]);
            if (c[h].map_to != "auto") {
              o[c[h].map_to] = V;
            }
          }
          return o;
        };
        i._empty_lightbox = function (o) {
          var h = this.getEvent(i._lightbox_id);
          this._lame_copy(h, o);
          this.setEvent(h.id, h);
          this._edit_stop_event(h, true);
          this.render_view_data();
        };
        i.hide_lightbox = function (o) {
          i.endLightbox(false, this.getLightbox());
        };
        i.hideCover = function (o) {
          if (o) {
            o.style.display = "none";
          }
          this.hide_cover();
          if (i.config.responsive_lightbox) {
            document.documentElement.classList.remove("dhx_cal_overflow_container");
            document.body.classList.remove("dhx_cal_overflow_container");
          }
        };
        i.hide_cover = function () {
          if (this._cover) {
            this._cover.parentNode.removeChild(this._cover);
          }
          this._cover = null;
        };
        i.show_cover = function () {
          if (!this._cover) {
            this._cover = document.createElement("div");
            this._cover.className = "dhx_cal_cover";
            document.body.appendChild(this._cover);
          }
        };
        i.save_lightbox = function () {
          var o = this._lightbox_out({}, this._lame_copy(this.getEvent(this._lightbox_id)));
          if (!this.checkEvent("onEventSave") || !!this.callEvent("onEventSave", [this._lightbox_id, o, this._new_event])) {
            this._empty_lightbox(o);
            this.hide_lightbox();
          }
        };
        i.startLightbox = function (o, c) {
          this._lightbox_id = o;
          this._custom_lightbox = true;
          this._temp_lightbox = this._lightbox;
          this._lightbox = c;
          this.showCover(c);
        };
        i.endLightbox = function (o, c) {
          c = c || i.getLightbox();
          var h = i.getEvent(this._lightbox_id);
          if (h) {
            this._edit_stop_event(h, o);
          }
          if (o) {
            i.render_view_data();
          }
          this.hideCover(c);
          if (this._custom_lightbox) {
            this._lightbox = this._temp_lightbox;
            this._custom_lightbox = false;
          }
          this._temp_lightbox = this._lightbox_id = null;
          this._waiAria.lightboxHiddenAttr(c);
          this.callEvent("onAfterLightbox", []);
        };
        i.resetLightbox = function () {
          if (i._lightbox && !i._custom_lightbox) {
            i._lightbox.parentNode.removeChild(i._lightbox);
          }
          i._lightbox = null;
        };
        i.cancel_lightbox = function () {
          if (this._lightbox_id) {
            this.callEvent("onEventCancel", [this._lightbox_id, !!this._new_event]);
          }
          this.hide_lightbox();
        };
        i.hideLightbox = i.cancel_lightbox;
        i._init_lightbox_events = function () {
          if (!this.getLightbox().$_eventAttached) {
            var o = this.getLightbox();
            o.$_eventAttached = true;
            i.event(o, "click", function (c) {
              var h = i.$domHelpers.closest(c.target, ".dhx_btn_set");
              if (h) {
                var D = h ? h.getAttribute("data-action") : null;
                switch (D) {
                  case "dhx_save_btn":
                  case "save":
                    if (i.config.readonly_active) {
                      return;
                    }
                    i.save_lightbox();
                    break;
                  case "dhx_delete_btn":
                  case "delete":
                    if (i.config.readonly_active) {
                      return;
                    }
                    i._dhtmlx_confirm(i.locale.labels.confirm_deleting, i.locale.labels.title_confirm_deleting, function () {
                      i.deleteEvent(i._lightbox_id);
                      i._new_event = null;
                      i.hide_lightbox();
                    });
                    break;
                  case "dhx_cancel_btn":
                  case "cancel":
                    i.cancel_lightbox();
                    break;
                  default:
                    i.callEvent("onLightboxButton", [D, h, c]);
                }
              } else {
                var T = i.$domHelpers.closest(c.target, ".dhx_custom_button[data-section-index]");
                if (T) {
                  var W = Number(T.getAttribute("data-section-index"));
                  i.form_blocks[i.config.lightbox.sections[W].type].button_click(i.$domHelpers.closest(T, ".dhx_cal_lsection"), T, c);
                }
              }
            });
            i.event(o, "keydown", function (c) {
              var h = c || window.event;
              var D = c.target || c.srcElement;
              var V = D.querySelector("[dhx_button]");
              V ||= D.parentNode.querySelector(".dhx_custom_button, .dhx_readonly");
              switch ((c || h).keyCode) {
                case 32:
                  if ((c || h).shiftKey) {
                    return;
                  }
                  if (V && V.click) {
                    V.click();
                  }
                  break;
                case i.keys.edit_save:
                  if ((c || h).shiftKey) {
                    return;
                  }
                  if (V && V.click) {
                    V.click();
                  } else {
                    if (i.config.readonly_active) {
                      return;
                    }
                    i.save_lightbox();
                  }
                  break;
                case i.keys.edit_cancel:
                  i.cancel_lightbox();
              }
            });
          }
        };
        i.setLightboxSize = function () {
          var o = this._lightbox;
          if (o) {
            var c = o.childNodes[1];
            c.style.height = "0px";
            c.style.height = c.scrollHeight + "px";
            o.style.height = c.scrollHeight + i.xy.lightbox_additional_height + "px";
            c.style.height = c.scrollHeight + "px";
          }
        };
        i._init_dnd_events = function () {
          i.event(document.body, "mousemove", i._move_while_dnd);
          i.event(document.body, "mouseup", i._finish_dnd);
          i._init_dnd_events = function () {};
        };
        i._move_while_dnd = function (o) {
          if (i._dnd_start_lb) {
            if (!document.dhx_unselectable) {
              document.body.className += " dhx_unselectable";
              document.dhx_unselectable = true;
            }
            var c = i.getLightbox();
            var h = [o.pageX, o.pageY];
            c.style.top = i._lb_start[1] + h[1] - i._dnd_start_lb[1] + "px";
            c.style.left = i._lb_start[0] + h[0] - i._dnd_start_lb[0] + "px";
          }
        };
        i._ready_to_dnd = function (o) {
          var c = i.getLightbox();
          i._lb_start = [parseInt(c.style.left, 10), parseInt(c.style.top, 10)];
          i._dnd_start_lb = [o.pageX, o.pageY];
        };
        i._finish_dnd = function () {
          if (i._lb_start) {
            i._lb_start = i._dnd_start_lb = false;
            document.body.className = document.body.className.replace(" dhx_unselectable", "");
            document.dhx_unselectable = false;
          }
        };
        i.getLightbox = function () {
          if (!this._lightbox) {
            var o = document.createElement("div");
            o.className = "dhx_cal_light";
            if (i.config.wide_form) {
              o.className += " dhx_cal_light_wide";
            }
            if (i.form_blocks.recurring) {
              o.className += " dhx_cal_light_rec";
            }
            if (i.config.rtl) {
              o.className += " dhx_cal_light_rtl";
            }
            if (i.config.responsive_lightbox) {
              o.className += " dhx_cal_light_responsive";
            }
            o.style.visibility = "hidden";
            for (var c = this._lightbox_template, h = this.config.buttons_left, D = 0; D < h.length; D++) {
              c += "<div " + this._waiAria.lightboxButtonAttrString(h[D]) + " data-action='" + h[D] + "' class='dhx_btn_set dhx_" + (i.config.rtl ? "right" : "left") + "_btn_set " + h[D] + "_set'><div class='" + h[D] + "'></div><div>" + i.locale.labels[h[D]] + "</div></div>";
            }
            h = this.config.buttons_right;
            var V = i.config.rtl;
            for (D = 0; D < h.length; D++) {
              c += "<div " + this._waiAria.lightboxButtonAttrString(h[D]) + " data-action='" + h[D] + "' class='dhx_btn_set dhx_" + (V ? "left" : "right") + "_btn_set " + h[D] + "_set' style='float:" + (V ? "left" : "right") + ";'><div class='" + h[D] + "'></div><div>" + i.locale.labels[h[D]] + "</div></div>";
            }
            o.innerHTML = c += "</div>";
            if (i.config.drag_lightbox) {
              i.event(o.firstChild, "mousedown", i._ready_to_dnd);
              i.event(o.firstChild, "selectstart", function (_e) {
                _e.preventDefault();
                return false;
              });
              o.firstChild.style.cursor = "move";
              i._init_dnd_events();
            }
            this._waiAria.lightboxAttr(o);
            document.body.insertBefore(o, document.body.firstChild);
            this._lightbox = o;
            var T = this.config.lightbox.sections;
            c = "";
            D = 0;
            for (; D < T.length; D++) {
              var W = this.form_blocks[T[D].type];
              if (W) {
                T[D].id = "area_" + this.uid();
                var z = "";
                if (T[D].button) {
                  z = "<div " + i._waiAria.lightboxSectionButtonAttrString(this.locale.labels["button_" + T[D].button]) + " class='dhx_custom_button' data-section-index='" + D + "' index='" + D + "'><div class='dhx_custom_button_" + T[D].button + "'></div><div>" + this.locale.labels["button_" + T[D].button] + "</div></div>";
                }
                if (this.config.wide_form) {
                  c += "<div class='dhx_wrap_section'>";
                }
                var Z = this.locale.labels["section_" + T[D].name];
                if (typeof Z != "string") {
                  Z = T[D].name;
                }
                c += "<div id='" + T[D].id + "' class='dhx_cal_lsection'>" + z + "<label>" + Z + "</label></div>" + W.render.call(this, T[D]);
                c += "</div>";
              }
            }
            var re = o.getElementsByTagName("div");
            for (D = 0; D < re.length; D++) {
              var oe = re[D];
              if (i._getClassName(oe) == "dhx_cal_larea") {
                oe.innerHTML = c;
                break;
              }
            }
            i._bindLightboxLabels(T);
            this.setLightboxSize();
            this._init_lightbox_events(this);
            o.style.display = "none";
            o.style.visibility = "visible";
          }
          return this._lightbox;
        };
        i._bindLightboxLabels = function (o) {
          for (var c = 0; c < o.length; c++) {
            var h = o[c];
            if (h.id && document.getElementById(h.id)) {
              for (var D = document.getElementById(h.id).querySelector("label"), V = i._get_lightbox_section_node(h); V && !V.querySelector;) {
                V = V.nextSibling;
              }
              var T = true;
              if (V) {
                var W = V.querySelector("input, select, textarea");
                if (W) {
                  h.inputId = W.id || "input_" + i.uid();
                  W.id ||= h.inputId;
                  D.setAttribute("for", h.inputId);
                  T = false;
                }
              }
              if (T && i.form_blocks[h.type].focus) {
                i.event(D, "click", function (z) {
                  return function () {
                    var Z = i.form_blocks[z.type];
                    var re = i._get_lightbox_section_node(z);
                    if (Z && Z.focus) {
                      Z.focus.call(i, re);
                    }
                  };
                }(h));
              }
            }
          }
        };
        i.attachEvent("onEventIdChange", function (o, c) {
          if (this._lightbox_id == o) {
            this._lightbox_id = c;
          }
        });
        i._lightbox_template = "<div class='dhx_cal_ltitle'><span class='dhx_mark'>&nbsp;</span><span class='dhx_time'></span><span class='dhx_title'></span></div><div class='dhx_cal_larea'></div>";
      })(j);
      (function we(t) {
        t._init_touch_events = function () {
          if (this.config.touch && (navigator.userAgent.indexOf("Mobile") != -1 || navigator.userAgent.indexOf("iPad") != -1 || navigator.userAgent.indexOf("Android") != -1 || navigator.userAgent.indexOf("Touch") != -1) && !window.MSStream || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) {
            this.xy.scroll_width = 0;
            this._mobile = true;
          }
          if (this.config.touch) {
            var j = true;
            try {
              document.createEvent("TouchEvent");
            } catch {
              j = false;
            }
            if (j) {
              this._touch_events(["touchmove", "touchstart", "touchend"], function (a) {
                if (a.touches && a.touches.length > 1) {
                  return null;
                } else if (a.touches[0]) {
                  return {
                    target: a.target,
                    pageX: a.touches[0].pageX,
                    pageY: a.touches[0].pageY,
                    clientX: a.touches[0].clientX,
                    clientY: a.touches[0].clientY
                  };
                } else {
                  return a;
                }
              }, function () {
                return false;
              });
            } else if (window.PointerEvent || window.navigator.pointerEnabled) {
              this._touch_events(["pointermove", "pointerdown", "pointerup"], function (a) {
                if (a.pointerType == "mouse") {
                  return null;
                } else {
                  return a;
                }
              }, function (a) {
                return !a || a.pointerType == "mouse";
              });
            } else if (window.navigator.msPointerEnabled) {
              this._touch_events(["MSPointerMove", "MSPointerDown", "MSPointerUp"], function (a) {
                if (a.pointerType == a.MSPOINTER_TYPE_MOUSE) {
                  return null;
                } else {
                  return a;
                }
              }, function (a) {
                return !a || a.pointerType == a.MSPOINTER_TYPE_MOUSE;
              });
            }
          }
        };
        t._touch_events = function (j, a, v) {
          var _;
          var i;
          var o;
          var c;
          var h;
          var D;
          var V = 0;
          function T(z, Z, re) {
            z.addEventListener(Z, function (oe) {
              return !!t._is_lightbox_open() || (v(oe) ? undefined : re(oe));
            }, {
              passive: false
            });
          }
          function W(z) {
            if (!v(z)) {
              t._hide_global_tip();
              if (c) {
                t._on_mouse_up(a(z));
                t._temp_touch_block = false;
              }
              t._drag_id = null;
              t._drag_mode = null;
              t._drag_pos = null;
              t._pointerDragId = null;
              clearTimeout(o);
              c = D = false;
              h = true;
            }
          }
          T(document.body, j[0], function (z) {
            if (!v(z)) {
              var Z = a(z);
              if (Z) {
                if (c) {
                  (function (re) {
                    if (!v(re)) {
                      var oe = t.getState().drag_mode;
                      var _e = !!t.matrix && t.matrix[t._mode];
                      var he = t.render_view_data;
                      if (oe == "create" && _e) {
                        t.render_view_data = function () {
                          for (var be = t.getState().drag_id, Ae = t.getEvent(be), He = _e.y_property, Ne = t.getEvents(Ae.start_date, Ae.end_date), Ve = 0; Ve < Ne.length; Ve++) {
                            if (Ne[Ve][He] != Ae[He]) {
                              Ne.splice(Ve, 1);
                              Ve--;
                            }
                          }
                          Ae._sorder = Ne.length - 1;
                          Ae._count = Ne.length;
                          this.render_data([Ae], t.getState().mode);
                        };
                      }
                      t._on_mouse_move(re);
                      if (oe == "create" && _e) {
                        t.render_view_data = he;
                      }
                      if (re.preventDefault) {
                        re.preventDefault();
                      }
                      re.cancelBubble = true;
                    }
                  })(Z);
                  if (z.preventDefault) {
                    z.preventDefault();
                  }
                  z.cancelBubble = true;
                  t._update_global_tip();
                  return false;
                }
                i = a(z);
                if (D) {
                  if (i) {
                    if (_.target != i.target || Math.abs(_.pageX - i.pageX) > 5 || Math.abs(_.pageY - i.pageY) > 5) {
                      h = true;
                      clearTimeout(o);
                    }
                  } else {
                    h = true;
                  }
                }
              }
            }
          });
          T(this._els.dhx_cal_data[0], "touchcancel", W);
          T(this._els.dhx_cal_data[0], "contextmenu", function (z) {
            if (!v(z)) {
              if (D) {
                if (z && z.preventDefault) {
                  z.preventDefault();
                }
                z.cancelBubble = true;
                return false;
              } else {
                return undefined;
              }
            }
          });
          T(this._obj, j[1], function (z) {
            var Z;
            if (document && document.body) {
              document.body.classList.add("dhx_cal_touch_active");
            }
            if (!v(z)) {
              t._pointerDragId = z.pointerId;
              c = h = false;
              D = true;
              if (Z = i = a(z)) {
                var re = new Date();
                if (!h && !c && re - V < 250) {
                  t._click.dhx_cal_data(Z);
                  window.setTimeout(function () {
                    Z.type = "dblclick";
                    t._on_dbl_click(Z);
                  }, 50);
                  if (z.preventDefault) {
                    z.preventDefault();
                  }
                  z.cancelBubble = true;
                  t._block_next_stop = true;
                  return false;
                }
                V = re;
                if (!h && !c && t.config.touch_drag) {
                  var oe = t._locate_event(document.activeElement);
                  var _e = t._locate_event(Z.target);
                  var he = _ ? t._locate_event(_.target) : null;
                  if (oe && _e && oe == _e && oe != he) {
                    if (z.preventDefault) {
                      z.preventDefault();
                    }
                    z.cancelBubble = true;
                    t._ignore_next_click = false;
                    t._click.dhx_cal_data(Z);
                    _ = Z;
                    return false;
                  }
                  o = setTimeout(function () {
                    c = true;
                    var be = _.target;
                    var Ae = t._getClassName(be);
                    if (be && Ae.indexOf("dhx_body") != -1) {
                      be = be.previousSibling;
                    }
                    t._on_mouse_down(_, be);
                    if (t._drag_mode && t._drag_mode != "create") {
                      t.for_rendered(t._drag_id, function (He, Ne) {
                        He.style.display = "none";
                        t._rendered.splice(Ne, 1);
                      });
                    }
                    if (t.config.touch_tip) {
                      t._show_global_tip();
                    }
                    t.updateEvent(t._drag_id);
                  }, t.config.touch_drag);
                  _ = Z;
                }
              } else {
                h = true;
              }
            }
          });
          T(this._els.dhx_cal_data[0], j[2], function (z) {
            if (document && document.body) {
              document.body.classList.remove("dhx_cal_touch_active");
            }
            if (!v(z)) {
              if (t.config.touch_swipe_dates && !c && function (Z, re, oe, _e) {
                if (!Z || !re) {
                  return false;
                }
                for (var he = Z.target; he && he != t._obj;) {
                  he = he.parentNode;
                }
                if (he != t._obj || t.matrix && t.matrix[t.getState().mode] && t.matrix[t.getState().mode].scrollable) {
                  return false;
                }
                var be = Math.abs(Z.pageY - re.pageY);
                var Ae = Math.abs(Z.pageX - re.pageX);
                return be < 100 && Ae > 200 && (!be || Ae / be > 3) && (Z.pageX > re.pageX ? t._click.dhx_cal_next_button() : t._click.dhx_cal_prev_button(), true);
              }(_, i)) {
                t._block_next_stop = true;
              }
              if (c) {
                t._ignore_next_click = true;
                setTimeout(function () {
                  t._ignore_next_click = false;
                }, 100);
              }
              W(z);
              if (t._block_next_stop) {
                t._block_next_stop = false;
                if (z.preventDefault) {
                  z.preventDefault();
                }
                z.cancelBubble = true;
                return false;
              } else {
                return undefined;
              }
            }
          });
          t.event(document.body, j[2], W);
        };
        t._show_global_tip = function () {
          t._hide_global_tip();
          var j = t._global_tip = document.createElement("div");
          j.className = "dhx_global_tip";
          t._update_global_tip(1);
          document.body.appendChild(j);
        };
        t._update_global_tip = function (j) {
          var a = t._global_tip;
          if (a) {
            var v = "";
            if (t._drag_id && !j) {
              var _ = t.getEvent(t._drag_id);
              if (_) {
                v = "<div>" + (_._timed ? t.templates.event_header(_.start_date, _.end_date, _) : t.templates.day_date(_.start_date, _.end_date, _)) + "</div>";
              }
            }
            a.innerHTML = t._drag_mode == "create" || t._drag_mode == "new-size" ? (t.locale.labels.drag_to_create || "Drag to create") + v : (t.locale.labels.drag_to_move || "Drag to move") + v;
          }
        };
        t._hide_global_tip = function () {
          var j = t._global_tip;
          if (j && j.parentNode) {
            j.parentNode.removeChild(j);
            t._global_tip = 0;
          }
        };
      })(j);
      (function (i) {
        i.getRootView = function () {
          return {
            view: {
              render: function () {
                return {
                  tag: "div",
                  type: 1,
                  attrs: {
                    style: "width:100%;height:100%;"
                  },
                  hooks: {
                    didInsert: function () {
                      i.setCurrentView();
                    }
                  },
                  body: [{
                    el: this.el,
                    type: 1
                  }]
                };
              },
              init: function () {
                var o = document.createElement("DIV");
                o.id = "scheduler_" + i.uid();
                o.style.width = "100%";
                o.style.height = "100%";
                o.classList.add("dhx_cal_container");
                o.cmp = "grid";
                o.innerHTML = "<div class=\"dhx_cal_navline\"><div class=\"dhx_cal_prev_button\">&nbsp;</div><div class=\"dhx_cal_next_button\">&nbsp;</div><div class=\"dhx_cal_today_button\"></div><div class=\"dhx_cal_date\"></div><div class=\"dhx_cal_tab\" data-tab=\"day\"></div><div class=\"dhx_cal_tab\" data-tab=\"week\"></div><div class=\"dhx_cal_tab\" data-tab=\"month\"></div></div><div class=\"dhx_cal_header\"></div><div class=\"dhx_cal_data\"></div>";
                i.init(o);
                this.el = o;
              }
            },
            type: 4
          };
        };
      })(j);
      (function Ce(t) {
        var j;
        var a;
        function v() {
          if (t._is_material_skin()) {
            return true;
          }
          if (a !== undefined) {
            return a;
          }
          var i = document.createElement("div");
          i.style.position = "absolute";
          i.style.left = "-9999px";
          i.style.top = "-9999px";
          i.innerHTML = "<div class='dhx_cal_container'><div class='dhx_cal_data'><div class='dhx_cal_event'><div class='dhx_body'></div></div><div>";
          document.body.appendChild(i);
          var o = window.getComputedStyle(i.querySelector(".dhx_body")).getPropertyValue("box-sizing");
          document.body.removeChild(i);
          if (!(a = o === "border-box")) {
            setTimeout(function () {
              a = undefined;
            }, 1000);
          }
        }
        function _() {
          if (!t._is_material_skin() && !t._border_box_events()) {
            var i = a;
            a = undefined;
            j = undefined;
            if (i !== v() && t.$container && t.getState().mode) {
              t.setCurrentView();
            }
          }
        }
        t._skin_settings = {
          fix_tab_position: [1, 0],
          use_select_menu_space: [1, 0],
          wide_form: [1, 0],
          hour_size_px: [44, 42],
          displayed_event_color: ["#ff4a4a", "ffc5ab"],
          displayed_event_text_color: ["#ffef80", "7e2727"]
        };
        t._skin_xy = {
          lightbox_additional_height: [90, 50],
          nav_height: [59, 22],
          bar_height: [24, 20]
        };
        t._is_material_skin = function () {
          if (t.skin) {
            return (t.skin + "").indexOf("material") > -1;
          } else {
            return function () {
              if (j === undefined) {
                var i = document.createElement("div");
                i.style.position = "absolute";
                i.style.left = "-9999px";
                i.style.top = "-9999px";
                i.innerHTML = "<div class='dhx_cal_container'><div class='dhx_cal_scale_placeholder'></div><div>";
                document.body.appendChild(i);
                var c = window.getComputedStyle(i.querySelector(".dhx_cal_scale_placeholder")).getPropertyValue("position");
                j = c === "absolute";
                setTimeout(function () {
                  j = null;
                }, 500);
              }
              return j;
            }();
          }
        };
        window.addEventListener("DOMContentLoaded", _);
        window.addEventListener("load", _);
        t._border_box_events = function () {
          return v();
        };
        t._configure = function (i, o, c) {
          for (var h in o) {
            if (i[h] === undefined) {
              i[h] = o[h][c];
            }
          }
        };
        t._skin_init = function () {
          if (!t.skin) {
            for (var i = document.getElementsByTagName("link"), o = 0; o < i.length; o++) {
              var c = i[o].href.match("dhtmlxscheduler_([a-z]+).css");
              if (c) {
                t.skin = c[1];
                break;
              }
            }
          }
          var h = 0;
          if (!!t.skin && (t.skin === "classic" || t.skin === "glossy")) {
            h = 1;
          }
          if (t._is_material_skin()) {
            var D = t.config.buttons_left.$initial;
            var V = t.config.buttons_right.$initial;
            if (D && t.config.buttons_left.slice().join() == D && V && t.config.buttons_right.slice().join() == V) {
              var T = t.config.buttons_left.slice();
              t.config.buttons_left = t.config.buttons_right.slice();
              t.config.buttons_right = T;
            }
            t.xy.event_header_height = 18;
            t.xy.week_agenda_scale_height = 35;
            t.xy.map_icon_width = 38;
            t._lightbox_controls.defaults.textarea.height = 64;
            t._lightbox_controls.defaults.time.height = "auto";
          }
          this._configure(t.config, t._skin_settings, h);
          this._configure(t.xy, t._skin_xy, h);
          if (t.skin === "flat") {
            t.xy.scale_height = 35;
            t.templates.hour_scale = function (z) {
              var Z = z.getMinutes();
              Z = Z < 10 ? "0" + Z : Z;
              return "<span class='dhx_scale_h'>" + z.getHours() + "</span><span class='dhx_scale_m'>&nbsp;" + Z + "</span>";
            };
          }
          if (!h) {
            var W = t.config.minicalendar;
            if (W) {
              W.padding = 14;
            }
            t.templates.event_bar_date = function (z, Z, re) {
              return "• <b>" + t.templates.event_date(z) + "</b> ";
            };
            t.attachEvent("onTemplatesReady", function () {
              var z = t.date.date_to_str("%d");
              t.templates._old_month_day ||= t.templates.month_day;
              var Z = t.templates._old_month_day;
              t.templates.month_day = function (Ve) {
                if (this._mode == "month") {
                  var Se = z(Ve);
                  if (Ve.getDate() == 1) {
                    Se = t.locale.date.month_full[Ve.getMonth()] + " " + Se;
                  }
                  if (+Ve == +t.date.date_part(this._currentDate())) {
                    Se = t.locale.labels.dhx_cal_today_button + " " + Se;
                  }
                  return Se;
                }
                return Z.call(this, Ve);
              };
              if (t.config.fix_tab_position) {
                var re = t._els.dhx_cal_navline[0].getElementsByTagName("div");
                var oe = null;
                var _e = 211;
                var he = [14, 75, 136];
                var be = 14;
                if (t._is_material_skin()) {
                  he = [16, 103, 192];
                  _e = 294;
                  be = -1;
                }
                for (var Ae = 0; Ae < re.length; Ae++) {
                  var He = re[Ae];
                  var Ne = He.getAttribute("data-tab") || He.getAttribute("name");
                  if (Ne) {
                    He.style.right = "auto";
                    switch (Ne) {
                      case "day":
                      case "day_tab":
                        He.style.left = he[0] + "px";
                        He.className += " dhx_cal_tab_first";
                        break;
                      case "week":
                      case "week_tab":
                        He.style.left = he[1] + "px";
                        break;
                      case "month":
                      case "month_tab":
                        He.style.left = he[2] + "px";
                        He.className += " dhx_cal_tab_last";
                        break;
                      default:
                        He.style.left = _e + "px";
                        He.className += " dhx_cal_tab_standalone";
                        _e = _e + be + He.offsetWidth;
                    }
                    He.className += " " + Ne;
                  } else if ((He.className || "").indexOf("dhx_minical_icon") === 0 && He.parentNode == t._els.dhx_cal_navline[0]) {
                    oe = He;
                  }
                }
                if (oe) {
                  oe.style.left = _e + "px";
                }
              }
            });
            t._skin_init = function () {};
          }
        };
      })(j);
      if (window.jQuery) {
        (function (i) {
          var o = 0;
          var c = [];
          i.fn.dhx_scheduler = function (h) {
            if (typeof h != "string") {
              var D = [];
              this.each(function () {
                if (this && this.getAttribute) {
                  if (this.getAttribute("dhxscheduler")) {
                    D.push(window[this.getAttribute("dhxscheduler")]);
                  } else {
                    var V = "scheduler";
                    if (o) {
                      V = "scheduler" + (o + 1);
                      window[V] = Scheduler.getSchedulerInstance();
                    }
                    var T = window[V];
                    this.setAttribute("dhxscheduler", V);
                    for (var W in h) {
                      if (W != "data") {
                        T.config[W] = h[W];
                      }
                    }
                    if (!this.getElementsByTagName("div").length) {
                      this.innerHTML = "<div class=\"dhx_cal_navline\"><div class=\"dhx_cal_prev_button\">&nbsp;</div><div class=\"dhx_cal_next_button\">&nbsp;</div><div class=\"dhx_cal_today_button\"></div><div class=\"dhx_cal_date\"></div><div class=\"dhx_cal_tab\" name=\"day_tab\" data-tab=\"day\" style=\"right:204px;\"></div><div class=\"dhx_cal_tab\" name=\"week_tab\" data-tab=\"week\" style=\"right:140px;\"></div><div class=\"dhx_cal_tab\" name=\"month_tab\" data-tab=\"month\" style=\"right:76px;\"></div></div><div class=\"dhx_cal_header\"></div><div class=\"dhx_cal_data\"></div>";
                      this.className += " dhx_cal_container";
                    }
                    T.init(this, T.config.date, T.config.mode);
                    if (h.data) {
                      T.parse(h.data);
                    }
                    D.push(T);
                    o++;
                  }
                }
              });
              if (D.length === 1) {
                return D[0];
              } else {
                return D;
              }
            }
            if (c[h]) {
              return c[h].apply(this, []);
            }
            i.error("Method " + h + " does not exist on jQuery.dhx_scheduler");
          };
        })(window.jQuery);
      }
      (function (i) {
        (function () {
          var o = i.setCurrentView;
          var c = i.updateView;
          var h = null;
          var D = null;
          function V(z, Z) {
            var re = this;
            y.a.clearTimeout(D);
            y.a.clearTimeout(h);
            var oe = re._date;
            var _e = re._mode;
            W(this, z, Z);
            D = setTimeout(function () {
              if (re.callEvent("onBeforeViewChange", [_e, oe, Z || re._mode, z || re._date])) {
                c.call(re, z, Z);
                re.callEvent("onViewChange", [re._mode, re._date]);
                y.a.clearTimeout(h);
                D = 0;
              } else {
                W(re, oe, _e);
              }
            }, i.config.delay_render);
          }
          function T(z, Z) {
            var re = this;
            var oe = arguments;
            W(this, z, Z);
            y.a.clearTimeout(h);
            h = setTimeout(function () {
              if (!D) {
                c.apply(re, oe);
              }
            }, i.config.delay_render);
          }
          function W(z, Z, re) {
            if (Z) {
              z._date = Z;
            }
            if (re) {
              z._mode = re;
            }
          }
          i.attachEvent("onSchedulerReady", function () {
            if (i.config.delay_render) {
              i.setCurrentView = V;
              i.updateView = T;
            } else {
              i.setCurrentView = o;
              i.updateView = c;
            }
          });
        })();
      })(j);
      (function (i) {
        i.createDataProcessor = function (o) {
          var c;
          var h;
          if (o instanceof Function) {
            c = o;
          } else if (o.hasOwnProperty("router")) {
            c = o.router;
          } else if (o.hasOwnProperty("event")) {
            c = o;
          }
          h = c ? "CUSTOM" : o.mode || "REST-JSON";
          var D = new $e(o.url);
          D.init(i);
          D.setTransactionMode({
            mode: h,
            router: c
          }, o.batchUpdate);
          return D;
        };
        i.DataProcessor = $e;
      })(j);
      (function (i) {
        i.attachEvent("onSchedulerReady", function () {
          if (typeof dhtmlxError !== "undefined") {
            window.dhtmlxError.catchError("LoadXML", function (o, c, h) {
              var D = h[0].responseText;
              switch (i.config.ajax_error) {
                case "alert":
                  y.a.alert(D);
                  break;
                case "console":
                  y.a.console.log(D);
              }
            });
          }
        });
      })(j);
      var v = new Et({
        en: pt,
        ar: de,
        be: pe,
        ca: xe,
        cn: Xe,
        cs: rt,
        da: tt,
        de: Re,
        el: ot,
        es: ct,
        fi: st,
        fr: Ze,
        he: it,
        hu: vt,
        id: nt,
        it: gt,
        jp: Ye,
        nb: Ct,
        nl: Nt,
        no: Ie,
        pl: me,
        pt: Be,
        ro: se,
        ru: De,
        si: We,
        sk: ke,
        sv: Pe,
        tr: ce,
        ua: Ge
      });
      j.i18n = {
        addLocale: v.addLocale,
        setLocale: function (i) {
          if (typeof i == "string") {
            var o = v.getLocale(i);
            o ||= v.getLocale("en");
            j.locale = o;
          } else if (i) {
            if (j.locale) {
              for (var c in i) {
                if (i[c] && dt(i[c]) === "object") {
                  j.locale[c] ||= {};
                  j.mixin(j.locale[c], i[c], true);
                } else {
                  j.locale[c] = i[c];
                }
              }
            } else {
              j.locale = i;
            }
          }
        },
        getLocale: v.getLocale
      };
      j.i18n.setLocale("en");
      j.ext = {};
      var _ = {};
      j.plugins = function (i) {
        (function (o, c, h) {
          var D = [];
          for (var V in o) {
            if (o[V]) {
              var T = V.toLowerCase();
              if (c[T]) {
                c[T].forEach(function (W) {
                  var z = W.toLowerCase();
                  if (!o[z]) {
                    D.push(z);
                  }
                });
              }
              D.push(T);
            }
          }
          D.sort(function (W, z) {
            var Z = h[W] || 0;
            var re = h[z] || 0;
            if (Z > re) {
              return 1;
            } else if (Z < re) {
              return -1;
            } else {
              return 0;
            }
          });
          return D;
        })(i, {
          treetimeline: ["timeline"],
          daytimeline: ["timeline"],
          outerdrag: ["legacy"]
        }, {
          legacy: 1,
          limit: 1,
          timeline: 2,
          daytimeline: 3,
          treetimeline: 3,
          outerdrag: 6
        }).forEach(function (o) {
          if (!_[o]) {
            var c = t.getExtension(o);
            if (!c) {
              throw new Error("unknown plugin " + o);
            }
            c(j);
            _[o] = true;
          }
        });
      };
      return j;
    }
    var Ke = function () {
      function t(j) {
        (function (v, _) {
          if (!(v instanceof _)) {
            throw new TypeError("Cannot call a class as a function");
          }
        })(this, t);
        this._extensions = {};
        for (var a in j) {
          this._extensions[a] = j[a];
        }
      }
      a = [{
        key: "addExtension",
        value: function (j, a) {
          this._extensions[j] = a;
        }
      }, {
        key: "getExtension",
        value: function (j) {
          return this._extensions[j];
        }
      }];
      if (a) {
        (function Ue(t, j) {
          for (var a = 0; a < j.length; a++) {
            var v = j[a];
            v.enumerable = v.enumerable || false;
            v.configurable = true;
            if ("value" in v) {
              v.writable = true;
            }
            Object.defineProperty(t, v.key, v);
          }
        })(t.prototype, a);
      }
      return t;
      var a;
    }();
    if (typeof dhtmlx !== "undefined" && dhtmlx.attaches) {
      dhtmlx.attaches.attachScheduler = function (t, j, a, v) {
        a = a || "<div class=\"dhx_cal_tab\" name=\"day_tab\" data-tab=\"day\" style=\"right:204px;\"></div><div class=\"dhx_cal_tab\" name=\"week_tab\" data-tab=\"week\" style=\"right:140px;\"></div><div class=\"dhx_cal_tab\" name=\"month_tab\" data-tab=\"month\" style=\"right:76px;\"></div>";
        var _ = document.createElement("DIV");
        _.id = "dhxSchedObj_" + this._genStr(12);
        _.innerHTML = "<div id=\"" + _.id + "\" class=\"dhx_cal_container\" style=\"width:100%; height:100%;\"><div class=\"dhx_cal_navline\"><div class=\"dhx_cal_prev_button\">&nbsp;</div><div class=\"dhx_cal_next_button\">&nbsp;</div><div class=\"dhx_cal_today_button\"></div><div class=\"dhx_cal_date\"></div>" + a + "</div><div class=\"dhx_cal_header\"></div><div class=\"dhx_cal_data\"></div></div>";
        document.body.appendChild(_.firstChild);
        this.attachObject(_.id, false, true);
        this.vs[this.av].sched = v;
        this.vs[this.av].schedId = _.id;
        v.setSizes = v.updateView;
        v.destructor = function () {};
        v.init(_.id, t, j);
        return this.vs[this._viewRestore()].sched;
      };
    }
    function Te(t, j) {
      j(false, `The ${t} extension is not included in this version of dhtmlxScheduler.<br>
\t\tYou may need a <a href="https://docs.dhtmlx.com/scheduler/editions_comparison.html" target="_blank">Professional version of the component</a>.<br>
\t\tContact us at <a href="https://dhtmlx.com/docs/contact.shtml" target="_blank">https://dhtmlx.com/docs/contact.shtml</a> if you have any questions.`);
    }
    function _t(t) {
      return (_t = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function kt(t) {
      return (kt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function It(t) {
      return (It = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function Tt(t) {
      return (Tt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    function St(t) {
      return (St = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (j) {
        return typeof j;
      } : function (j) {
        if (j && typeof Symbol == "function" && j.constructor === Symbol && j !== Symbol.prototype) {
          return "symbol";
        } else {
          return typeof j;
        }
      })(t);
    }
    var At = new (function () {
      function t(j) {
        (function (a, v) {
          if (!(a instanceof v)) {
            throw new TypeError("Cannot call a class as a function");
          }
        })(this, t);
        this._seed = 0;
        this._schedulerPlugins = [];
        this._bundledExtensions = j;
        this._extensionsManager = new Ke(j);
      }
      a = [{
        key: "plugin",
        value: function (j) {
          this._schedulerPlugins.push(j);
          if (y.a.scheduler) {
            j(y.a.scheduler);
          }
        }
      }, {
        key: "getSchedulerInstance",
        value: function (j) {
          for (var a = te(this._extensionsManager), v = 0; v < this._schedulerPlugins.length; v++) {
            this._schedulerPlugins[v](a);
          }
          a._internal_id = this._seed++;
          if (this.$syncFactory) {
            this.$syncFactory(a);
          }
          if (j) {
            this._initFromConfig(a, j);
          }
          return a;
        }
      }, {
        key: "_initFromConfig",
        value: function (j, a) {
          if (a.plugins) {
            j.plugins(a.plugins);
          }
          if (a.config) {
            j.mixin(j.config, a.config, true);
          }
          if (a.templates) {
            j.attachEvent("onTemplatesReady", function () {
              j.mixin(j.templates, a.templates, true);
            }, {
              once: true
            });
          }
          if (a.events) {
            for (var v in a.events) {
              j.attachEvent(v, a.events[v]);
            }
          }
          if (a.locale) {
            j.i18n.setLocale(a.locale);
          }
          if (Array.isArray(a.calendars)) {
            a.calendars.forEach(function (_) {
              j.addCalendar(_);
            });
          }
          if (a.container) {
            j.init(a.container);
          } else {
            j.init();
          }
          if (a.data) {
            if (typeof a.data == "string") {
              j.load(a.data);
            } else {
              j.parse(a.data);
            }
          }
        }
      }];
      if (a) {
        (function ve(t, j) {
          for (var a = 0; a < j.length; a++) {
            var v = j[a];
            v.enumerable = v.enumerable || false;
            v.configurable = true;
            if ("value" in v) {
              v.writable = true;
            }
            Object.defineProperty(t, v.key, v);
          }
        })(t.prototype, a);
      }
      return t;
      var a;
    }())({
      active_links: function (t) {
        t.config.active_link_view = "day";
        t._active_link_click = function (j) {
          var a = j.target.getAttribute("data-link-date");
          var v = t.date.str_to_date(t.config.api_date, false, true);
          if (a) {
            t.setCurrentView(v(a), t.config.active_link_view);
            if (j && j.preventDefault) {
              j.preventDefault();
            }
            return false;
          }
        };
        t.attachEvent("onTemplatesReady", function () {
          function j(v, _) {
            if (!t.templates["_active_links_old_" + (_ = _ || v + "_scale_date")]) {
              t.templates["_active_links_old_" + _] = t.templates[_];
            }
            var i = t.templates["_active_links_old_" + _];
            var o = t.date.date_to_str(t.config.api_date);
            t.templates[_] = function (c) {
              return "<a data-link-date='" + o(c) + "' href='#'>" + i(c) + "</a>";
            };
          }
          j("week");
          j("", "month_day");
          if (this.matrix) {
            for (var a in this.matrix) {
              j(a);
            }
          }
          this._detachDomEvent(this._obj, "click", t._active_link_click);
          t.event(this._obj, "click", t._active_link_click);
        });
      },
      agenda_view: function (t) {
        t.date.add_agenda = function (j) {
          return t.date.add(j, 1, "year");
        };
        t.templates.agenda_time = function (j, a, v) {
          if (v._timed) {
            return this.day_date(v.start_date, v.end_date, v) + " " + this.event_date(j);
          } else {
            return t.templates.day_date(j) + " &ndash; " + t.templates.day_date(a);
          }
        };
        t.templates.agenda_text = function (j, a, v) {
          return v.text;
        };
        t.templates.agenda_date = function () {
          return "";
        };
        t.date.agenda_start = function () {
          return t.date.date_part(t._currentDate());
        };
        t.attachEvent("onTemplatesReady", function () {
          var j = t.dblclick_dhx_cal_data;
          t.dblclick_dhx_cal_data = function () {
            if (this._mode == "agenda") {
              if (!this.config.readonly && this.config.dblclick_create) {
                this.addEventNow();
              }
            } else if (j) {
              return j.apply(this, arguments);
            }
          };
          var a = t.render_data;
          t.render_data = function (i) {
            if (this._mode != "agenda") {
              return a.apply(this, arguments);
            }
            _();
          };
          var v = t.render_view_data;
          function _() {
            var i = t.get_visible_events();
            i.sort(function (_e, he) {
              if (_e.start_date > he.start_date) {
                return 1;
              } else {
                return -1;
              }
            });
            for (var o, c = "<div class='dhx_agenda_area' " + t._waiAria.agendaDataAttrString() + ">", h = 0; h < i.length; h++) {
              var D = i[h];
              var V = D.color ? "background:" + D.color + ";" : "";
              var T = D.textColor ? "color:" + D.textColor + ";" : "";
              var W = t.templates.event_class(D.start_date, D.end_date, D);
              o = t._waiAria.agendaEventAttrString(D);
              var z = t._waiAria.agendaDetailsBtnString();
              c += "<div " + o + " class='dhx_agenda_line" + (W ? " " + W : "") + "' event_id='" + D.id + "' " + t.config.event_attribute + "='" + D.id + "' style='" + T + V + (D._text_style || "") + "'><div class='dhx_agenda_event_time'>" + (t.config.rtl ? t.templates.agenda_time(D.end_date, D.start_date, D) : t.templates.agenda_time(D.start_date, D.end_date, D)) + "</div>";
              c += "<div " + z + " class='dhx_event_icon icon_details'>&nbsp;</div>";
              c += "<span>" + t.templates.agenda_text(D.start_date, D.end_date, D) + "</span></div>";
            }
            t._els.dhx_cal_data[0].innerHTML = c += "<div class='dhx_v_border'></div></div>";
            t._els.dhx_cal_data[0].childNodes[0].scrollTop = t._agendaScrollTop || 0;
            var Z = t._els.dhx_cal_data[0].childNodes[0];
            Z.childNodes[Z.childNodes.length - 1].style.height = Z.offsetHeight < t._els.dhx_cal_data[0].offsetHeight ? "100%" : Z.offsetHeight + "px";
            var re = t._els.dhx_cal_data[0].firstChild.childNodes;
            var oe = t._getNavDateElement();
            if (oe) {
              oe.innerHTML = t.templates.agenda_date(t._min_date, t._max_date, t._mode);
            }
            t._rendered = [];
            h = 0;
            for (; h < re.length - 1; h++) {
              t._rendered[h] = re[h];
            }
          }
          t.render_view_data = function () {
            if (this._mode == "agenda") {
              t._agendaScrollTop = t._els.dhx_cal_data[0].childNodes[0].scrollTop;
              t._els.dhx_cal_data[0].childNodes[0].scrollTop = 0;
            }
            return v.apply(this, arguments);
          };
          t.agenda_view = function (i) {
            t._min_date = t.config.agenda_start || t.date.agenda_start(t._date);
            t._max_date = t.config.agenda_end || t.date.add_agenda(t._min_date, 1);
            (function (o) {
              if (o) {
                var c = t.locale.labels;
                var h = t._waiAria.agendaHeadAttrString();
                var D = t._waiAria.agendaHeadDateString(c.date);
                var V = t._waiAria.agendaHeadDescriptionString(c.description);
                t._els.dhx_cal_header[0].innerHTML = "<div " + h + " class='dhx_agenda_line'><div " + D + ">" + c.date + "</div><span class = 'description_header' style='padding-left:25px' " + V + ">" + c.description + "</span></div>";
                t._table_view = true;
                t.set_sizes();
              }
            })(i);
            if (i) {
              t._cols = null;
              t._colsS = null;
              t._table_view = true;
              _();
            } else {
              t._table_view = false;
            }
          };
        });
      },
      all_timed: function (t) {
        t.config.all_timed = "short";
        t.config.all_timed_month = false;
        function j(c) {
          return (c.end_date - c.start_date) / 3600000 < 24 || t._drag_mode == "resize" && t._drag_id == c.id;
        }
        t._safe_copy = function (c) {
          var h = null;
          var D = t._copy_event(c);
          if (c.event_pid) {
            h = t.getEvent(c.event_pid);
          }
          if (h && h.isPrototypeOf(c)) {
            delete D.event_length;
            delete D.event_pid;
            delete D.rec_pattern;
            delete D.rec_type;
          }
          return D;
        };
        var a = t._pre_render_events_line;
        var v = t._pre_render_events_table;
        function _(c, h) {
          if (this._table_view) {
            return v.call(this, c, h);
          } else {
            return a.call(this, c, h);
          }
        }
        t._pre_render_events_line = t._pre_render_events_table = function (c, h) {
          if (!this.config.all_timed || this._table_view && this._mode != "month" || this._mode == "month" && !this.config.all_timed_month) {
            return _.call(this, c, h);
          }
          for (var D = 0; D < c.length; D++) {
            var V = c[D];
            if (!V._timed) {
              if (this.config.all_timed != "short" || j(V)) {
                var T = this._safe_copy(V);
                T._first_chunk = !V._virtual;
                T._drag_resize = false;
                T._virtual = true;
                T.start_date = new Date(T.start_date);
                undefined;
                be = oe((he = V).start_date);
                if (+he.end_date > +be) {
                  T.end_date = oe(T.start_date);
                  if (this.config.last_hour != 24) {
                    T.end_date = _e(T.start_date, this.config.last_hour);
                  }
                } else {
                  T.end_date = new Date(V.end_date);
                }
                var W = false;
                if (T.start_date < this._max_date && T.end_date > this._min_date && T.start_date < T.end_date) {
                  c[D] = T;
                  W = true;
                }
                var z = this._safe_copy(V);
                z._virtual = true;
                z.end_date = new Date(z.end_date);
                z.start_date = _e(z.start_date < this._min_date ? this._min_date : oe(V.start_date), this.config.first_hour);
                if (z.start_date < this._max_date && z.start_date < z.end_date) {
                  if (!W) {
                    c[D--] = z;
                    continue;
                  }
                  c.splice(D + 1, 0, z);
                  z._last_chunk = false;
                } else {
                  T._last_chunk = true;
                  T._drag_resize = true;
                }
              } else if (this._mode != "month") {
                c.splice(D--, 1);
              }
            }
          }
          var he;
          var be;
          return _.call(this, c, this._drag_mode != "move" && h);
          function oe(he) {
            var be = t.date.add(he, 1, "day");
            return t.date.date_part(be);
          }
          function _e(he, be) {
            var Ae = t.date.date_part(new Date(he));
            Ae.setHours(be);
            return Ae;
          }
        };
        var i = t.get_visible_events;
        t.get_visible_events = function (c) {
          return i.call(this, (!this.config.all_timed || !this.config.multi_day) && c);
        };
        t.attachEvent("onBeforeViewChange", function (c, h, D, V) {
          t._allow_dnd = D == "day" || D == "week";
          return true;
        });
        t._is_main_area_event = function (c) {
          return !!c._timed || this.config.all_timed === true || this.config.all_timed == "short" && !!j(c);
        };
        var o = t.updateEvent;
        t.updateEvent = function (c) {
          var h;
          var D;
          var V = t.getEvent(c);
          if (V && (h = t.config.all_timed && !t.isOneDayEvent(t._events[c]) && !t.getState().drag_id)) {
            D = t.config.update_render;
            t.config.update_render = true;
          }
          o.apply(t, arguments);
          if (V && h) {
            t.config.update_render = D;
          }
        };
      },
      collision: function (t) {
        var j;
        var a;
        function v(_) {
          if (t._get_section_view() && _) {
            j = t.getEvent(_)[t._get_section_property()];
          }
        }
        t.config.collision_limit = 1;
        t.attachEvent("onBeforeDrag", function (_) {
          v(_);
          return true;
        });
        t.attachEvent("onBeforeLightbox", function (_) {
          var i = t.getEvent(_);
          a = [i.start_date, i.end_date];
          v(_);
          return true;
        });
        t.attachEvent("onEventChanged", function (_) {
          if (!_ || !t.getEvent(_)) {
            return true;
          }
          var i = t.getEvent(_);
          if (!t.checkCollision(i)) {
            if (!a) {
              return false;
            }
            i.start_date = a[0];
            i.end_date = a[1];
            i._timed = this.isOneDayEvent(i);
          }
          return true;
        });
        t.attachEvent("onBeforeEventChanged", function (_, i, o) {
          return t.checkCollision(_);
        });
        t.attachEvent("onEventAdded", function (_, i) {
          if (!t.checkCollision(i)) {
            t.deleteEvent(_);
          }
        });
        t.attachEvent("onEventSave", function (_, i, o) {
          (i = t._lame_clone(i)).id = _;
          if (!i.start_date || !i.end_date) {
            var c = t.getEvent(_);
            i.start_date = new Date(c.start_date);
            i.end_date = new Date(c.end_date);
          }
          if (i.rec_type) {
            t._roll_back_dates(i);
          }
          return t.checkCollision(i);
        });
        t._check_sections_collision = function (_, i) {
          var o = t._get_section_property();
          return _[o] == i[o] && _.id != i.id;
        };
        t.checkCollision = function (_) {
          var i = [];
          var o = t.config.collision_limit;
          if (_.rec_type) {
            for (var c = t.getRecDates(_), h = 0; h < c.length; h++) {
              for (var D = t.getEvents(c[h].start_date, c[h].end_date), V = 0; V < D.length; V++) {
                if ((D[V].event_pid || D[V].id) != _.id) {
                  i.push(D[V]);
                }
              }
            }
          } else {
            i = t.getEvents(_.start_date, _.end_date);
            for (var T = 0; T < i.length; T++) {
              var W = i[T];
              if (W.id == _.id || W.event_length && [W.event_pid, W.event_length].join("#") == _.id) {
                i.splice(T, 1);
                break;
              }
            }
          }
          var z = t._get_section_view();
          var Z = t._get_section_property();
          var re = true;
          if (z) {
            var oe = 0;
            for (T = 0; T < i.length; T++) {
              if (i[T].id != _.id && this._check_sections_collision(i[T], _)) {
                oe++;
              }
            }
            if (oe >= o) {
              re = false;
            }
          } else if (i.length >= o) {
            re = false;
          }
          if (!re) {
            var _e = !t.callEvent("onEventCollision", [_, i]);
            if (!_e) {
              _[Z] = j || _[Z];
            }
            return _e;
          }
          return re;
        };
      },
      container_autoresize: function (t) {
        t.config.container_autoresize = true;
        t.config.month_day_min_height = 90;
        t.config.min_grid_size = 25;
        t.config.min_map_size = 400;
        var j = t._pre_render_events;
        var a = true;
        var v = 0;
        var _ = 0;
        t._pre_render_events = function (V, T) {
          if (!t.config.container_autoresize || !a) {
            return j.apply(this, arguments);
          }
          var W = this.xy.bar_height;
          var z = this._colsS.heights;
          var Z = this._colsS.heights = [0, 0, 0, 0, 0, 0, 0];
          var re = this._els.dhx_cal_data[0];
          V = this._table_view ? this._pre_render_events_table(V, T) : this._pre_render_events_line(V, T);
          if (this._table_view) {
            if (T) {
              this._colsS.heights = z;
            } else {
              var oe = re.firstChild;
              if (oe.rows) {
                for (var _e = 0; _e < oe.rows.length; _e++) {
                  Z[_e]++;
                  if (Z[_e] * W > this._colsS.height - this.xy.month_head_height) {
                    var he = oe.rows[_e].cells;
                    var be = this._colsS.height - this.xy.month_head_height;
                    if (this.config.max_month_events * 1 !== this.config.max_month_events || Z[_e] <= this.config.max_month_events) {
                      be = Z[_e] * W;
                    } else if ((this.config.max_month_events + 1) * W > this._colsS.height - this.xy.month_head_height) {
                      be = (this.config.max_month_events + 1) * W;
                    }
                    for (var Ae = 0; Ae < he.length; Ae++) {
                      he[Ae].childNodes[1].style.height = be + "px";
                    }
                    Z[_e] = (Z[_e - 1] || 0) + he[0].offsetHeight;
                  }
                  Z[_e] = (Z[_e - 1] || 0) + oe.rows[_e].cells[0].offsetHeight;
                }
                Z.unshift(0);
              } else {
                if (!V.length && this._els.dhx_multi_day[0].style.visibility == "visible") {
                  Z[0] = -1;
                }
                if (V.length || Z[0] == -1) {
                  var He = (Z[0] + 1) * W + 1;
                  if (_ != He + 1) {
                    this._obj.style.height = v - _ + He - 1 + "px";
                  }
                  He += "px";
                  re.style.top = this._els.dhx_cal_navline[0].offsetHeight + this._els.dhx_cal_header[0].offsetHeight + parseInt(He, 10) + "px";
                  re.style.height = this._obj.offsetHeight - parseInt(re.style.top, 10) - (this.xy.margin_top || 0) + "px";
                  var Ne = this._els.dhx_multi_day[0];
                  Ne.style.height = He;
                  Ne.style.visibility = Z[0] == -1 ? "hidden" : "visible";
                  (Ne = this._els.dhx_multi_day[1]).style.height = He;
                  Ne.style.visibility = Z[0] == -1 ? "hidden" : "visible";
                  Ne.className = Z[0] ? "dhx_multi_day_icon" : "dhx_multi_day_icon_small";
                  this._dy_shift = (Z[0] + 1) * W;
                  Z[0] = 0;
                }
              }
            }
          }
          return V;
        };
        var i = ["dhx_cal_navline", "dhx_cal_header", "dhx_multi_day", "dhx_cal_data"];
        function o(V) {
          v = 0;
          for (var T = 0; T < i.length; T++) {
            var W = i[T];
            var z = t._els[W] ? t._els[W][0] : null;
            var Z = 0;
            switch (W) {
              case "dhx_cal_navline":
              case "dhx_cal_header":
                Z = parseInt(z.style.height, 10);
                break;
              case "dhx_multi_day":
                _ = Z = z ? z.offsetHeight - 1 : 0;
                break;
              case "dhx_cal_data":
                var re = t.getState().mode;
                Z = z.childNodes[1] && re != "month" ? z.childNodes[1].offsetHeight : Math.max(z.offsetHeight - 1, z.scrollHeight);
                if (re == "month") {
                  if (t.config.month_day_min_height && !V) {
                    Z = z.getElementsByTagName("tr").length * t.config.month_day_min_height;
                  }
                  if (V) {
                    z.style.height = Z + "px";
                  }
                } else if (re == "year") {
                  Z = t.config.year_y * 190;
                } else if (re == "agenda") {
                  Z = 0;
                  if (z.childNodes && z.childNodes.length) {
                    for (var oe = 0; oe < z.childNodes.length; oe++) {
                      Z += z.childNodes[oe].offsetHeight;
                    }
                  }
                  if (Z + 2 < t.config.min_grid_size) {
                    Z = t.config.min_grid_size;
                  } else {
                    Z += 2;
                  }
                } else if (re == "week_agenda") {
                  for (var _e, he, be = t.xy.week_agenda_scale_height + t.config.min_grid_size, Ae = 0; Ae < z.childNodes.length; Ae++) {
                    he = z.childNodes[Ae];
                    oe = 0;
                    he = z.childNodes[Ae];
                    oe = 0;
                    for (; oe < he.childNodes.length; oe++) {
                      for (var He = 0, Ne = he.childNodes[oe].childNodes[1], Ve = 0; Ve < Ne.childNodes.length; Ve++) {
                        He += Ne.childNodes[Ve].offsetHeight;
                      }
                      _e = He + t.xy.week_agenda_scale_height;
                      if ((_e = Ae != 1 || oe != 2 && oe != 3 ? _e : _e * 2) > be) {
                        be = _e;
                      }
                    }
                  }
                  Z = be * 3;
                } else if (re == "map") {
                  Z = 0;
                  var Se = z.querySelectorAll(".dhx_map_line");
                  for (oe = 0; oe < Se.length; oe++) {
                    Z += Se[oe].offsetHeight;
                  }
                  if (Z + 2 < t.config.min_map_size) {
                    Z = t.config.min_map_size;
                  } else {
                    Z += 2;
                  }
                } else if (t._gridView) {
                  Z = 0;
                  if (z.childNodes[1].childNodes[0].childNodes && z.childNodes[1].childNodes[0].childNodes.length) {
                    Se = z.childNodes[1].childNodes[0].childNodes[0].childNodes;
                    oe = 0;
                    for (; oe < Se.length; oe++) {
                      Z += Se[oe].offsetHeight;
                    }
                    if ((Z += 2) < t.config.min_grid_size) {
                      Z = t.config.min_grid_size;
                    }
                  } else {
                    Z = t.config.min_grid_size;
                  }
                }
                if (t.matrix && t.matrix[re]) {
                  if (V) {
                    z.style.height = (Z += 0) + "px";
                  } else {
                    Z = 0;
                    for (var Fe = t.matrix[re], Oe = Fe.y_unit, at = 0; at < Oe.length; at++) {
                      Z += Fe.getSectionHeight(Oe[at].key);
                    }
                    if (t.$container.clientWidth != t.$container.scrollWidth) {
                      Z += D();
                    }
                  }
                  Z -= 1;
                }
                if (re == "day" || re == "week" || t._props && t._props[re]) {
                  Z += 2;
                }
            }
            v += Z += 1;
          }
          t._obj.style.height = v + "px";
          if (!V) {
            t.updateView();
          }
        }
        function c() {
          a = false;
          t.callEvent("onAfterSchedulerResize", []);
          a = true;
        }
        function h() {
          if (!t.config.container_autoresize || !a) {
            return true;
          }
          var V = t.getState().mode;
          if (!V) {
            return true;
          }
          var T = window.requestAnimationFrame || window.setTimeout;
          var W = document.documentElement.scrollTop;
          T(function () {
            o();
          });
          if (t.matrix && t.matrix[V] || V == "month") {
            T(function () {
              o(true);
              document.documentElement.scrollTop = W;
              c();
            }, 1);
          } else {
            c();
          }
        }
        function D() {
          var V = document.createElement("div");
          V.style.cssText = "visibility:hidden;position:absolute;left:-1000px;width:100px;padding:0px;margin:0px;height:110px;min-height:100px;overflow-y:scroll;";
          document.body.appendChild(V);
          var T = V.offsetWidth - V.clientWidth;
          document.body.removeChild(V);
          return T;
        }
        t.attachEvent("onBeforeViewChange", function () {
          var V = t.config.container_autoresize;
          t.xy.$original_scroll_width ||= t.xy.scroll_width;
          t.xy.scroll_width = V ? 0 : t.xy.$original_scroll_width;
          if (t.matrix) {
            for (var T in t.matrix) {
              var W = t.matrix[T];
              W.$original_section_autoheight ||= W.section_autoheight;
              W.section_autoheight = !V && W.$original_section_autoheight;
            }
          }
          return true;
        });
        t.attachEvent("onViewChange", h);
        t.attachEvent("onXLE", h);
        t.attachEvent("onEventChanged", h);
        t.attachEvent("onEventCreated", h);
        t.attachEvent("onEventAdded", h);
        t.attachEvent("onEventDeleted", h);
        t.attachEvent("onAfterSchedulerResize", h);
        t.attachEvent("onClearAll", h);
        t.attachEvent("onBeforeExpand", function () {
          a = false;
          return true;
        });
        t.attachEvent("onBeforeCollapse", function () {
          a = true;
          return true;
        });
      },
      cookie: function (t) {
        function j(_) {
          return (_._obj.id || "scheduler") + "_settings";
        }
        var a = true;
        t.attachEvent("onBeforeViewChange", function (_, i, o, c) {
          if (a && t._get_url_nav) {
            var h = t._get_url_nav();
            if (h.date || h.mode || h.event) {
              a = false;
            }
          }
          var D = j(t);
          if (a) {
            a = false;
            var V = function (W) {
              var z = W + "=";
              if (document.cookie.length > 0) {
                var Z = document.cookie.indexOf(z);
                if (Z != -1) {
                  Z += z.length;
                  var re = document.cookie.indexOf(";", Z);
                  if (re == -1) {
                    re = document.cookie.length;
                  }
                  return document.cookie.substring(Z, re);
                }
              }
              return "";
            }(D);
            if (V) {
              t._min_date ||= c;
              (V = unescape(V).split("@"))[0] = this._helpers.parseDate(V[0]);
              var T = this.isViewExists(V[1]) ? V[1] : o;
              c = isNaN(+V[0]) ? c : V[0];
              window.setTimeout(function () {
                t.setCurrentView(c, T);
              }, 1);
              return false;
            }
          }
          return true;
        });
        t.attachEvent("onViewChange", function (_, i) {
          var o;
          var h;
          o = j(t);
          h = escape(this._helpers.formatDate(i) + "@" + _);
          document.cookie = o + "=" + h + "; expires=Sun, 31 Jan 9999 22:00:00 GMT";
        });
        var v = t._load;
        t._load = function () {
          var _ = arguments;
          if (t._date) {
            v.apply(this, _);
          } else {
            var i = this;
            window.setTimeout(function () {
              v.apply(i, _);
            }, 1);
          }
        };
      },
      daytimeline: function (t) {
        Te("Day Timeline", t.assert);
      },
      drag_between: function (t) {
        Te("Drag Between", t.assert);
      },
      editors: function (t) {
        t.form_blocks.combo = {
          render: function (j) {
            j.cached_options ||= {};
            return "<div class='" + j.type + "' style='height:" + (j.height || 20) + "px;' ></div>";
          },
          set_value: function (j, a, v, _) {
            (function () {
              z();
              var W = t.attachEvent("onAfterLightbox", function () {
                z();
                t.detachEvent(W);
              });
              function z() {
                if (j._combo && j._combo.DOMParent) {
                  var Z = j._combo;
                  if (Z.unload) {
                    Z.unload();
                  } else if (Z.destructor) {
                    Z.destructor();
                  }
                  Z.DOMParent = Z.DOMelem = null;
                }
              }
            })();
            window.dhx_globalImgPath = _.image_path || "/";
            j._combo = new dhtmlXCombo(j, _.name, j.offsetWidth - 8);
            if (_.onchange) {
              j._combo.attachEvent("onChange", _.onchange);
            }
            if (_.options_height) {
              j._combo.setOptionHeight(_.options_height);
            }
            var i = j._combo;
            i.enableFilteringMode(_.filtering, _.script_path || null, !!_.cache);
            if (_.script_path) {
              var o = v[_.map_to];
              if (o) {
                if (_.cached_options[o]) {
                  i.addOption(o, _.cached_options[o]);
                  i.disable(1);
                  i.selectOption(0);
                  i.disable(0);
                } else {
                  t.ajax.get(_.script_path + "?id=" + o + "&uid=" + t.uid(), function (W) {
                    var z;
                    var Z = W.xmlDoc.responseText;
                    try {
                      z = JSON.parse(Z).options[0].text;
                    } catch {
                      z = t.ajax.xpath("//option", W.xmlDoc)[0].childNodes[0].nodeValue;
                    }
                    _.cached_options[o] = z;
                    i.addOption(o, z);
                    i.disable(1);
                    i.selectOption(0);
                    i.disable(0);
                  });
                }
              } else {
                i.setComboValue("");
              }
            } else {
              for (var c = [], h = 0; h < _.options.length; h++) {
                var D = _.options[h];
                c.push([D.key, D.label, D.css]);
              }
              i.addOption(c);
              if (v[_.map_to]) {
                var T = i.getIndexByValue(v[_.map_to]);
                i.selectOption(T);
              }
            }
          },
          get_value: function (j, a, v) {
            var _ = j._combo.getSelectedValue();
            if (v.script_path) {
              v.cached_options[_] = j._combo.getSelectedText();
            }
            return _;
          },
          focus: function (j) {}
        };
        t.form_blocks.radio = {
          render: function (j) {
            var a = "";
            a += "<div class='dhx_cal_ltext dhx_cal_radio' style='height:" + j.height + "px;' >";
            for (var v = 0; v < j.options.length; v++) {
              var _ = t.uid();
              a += "<input id='" + _ + "' type='radio' name='" + j.name + "' value='" + j.options[v].key + "'><label for='" + _ + "'> " + j.options[v].label + "</label>";
              if (j.vertical) {
                a += "<br/>";
              }
            }
            return a + "</div>";
          },
          set_value: function (j, a, v, _) {
            for (var i = j.getElementsByTagName("input"), o = 0; o < i.length; o++) {
              i[o].checked = false;
              if (i[o].value == (v[_.map_to] || a)) {
                i[o].checked = true;
              }
            }
          },
          get_value: function (j, a, v) {
            for (var _ = j.getElementsByTagName("input"), i = 0; i < _.length; i++) {
              if (_[i].checked) {
                return _[i].value;
              }
            }
          },
          focus: function (j) {}
        };
        t.form_blocks.checkbox = {
          render: function (j) {
            if (t.config.wide_form) {
              return "<div class=\"dhx_cal_wide_checkbox\" " + (j.height ? "style='height:" + j.height + "px;'" : "") + "></div>";
            } else {
              return "";
            }
          },
          set_value: function (j, a, v, _) {
            j = document.getElementById(_.id);
            var i = t.uid();
            var o = _.checked_value !== undefined ? a == _.checked_value : !!a;
            j.className += " dhx_cal_checkbox";
            var c = "<input id='" + i + "' type='checkbox' value='true' name='" + _.name + "'" + (o ? "checked='true'" : "") + "'>";
            var h = "<label for='" + i + "'>" + (t.locale.labels["section_" + _.name] || _.name) + "</label>";
            if (t.config.wide_form) {
              j.innerHTML = h;
              j.nextSibling.innerHTML = c;
            } else {
              j.innerHTML = c + h;
            }
            if (_.handler) {
              var D = j.getElementsByTagName("input")[0];
              if (D.$_eventAttached) {
                return;
              }
              D.$_eventAttached = true;
              t.event(D, "click", _.handler);
            }
          },
          get_value: function (j, a, v) {
            var _ = (j = document.getElementById(v.id)).getElementsByTagName("input")[0];
            _ ||= j.nextSibling.getElementsByTagName("input")[0];
            if (_.checked) {
              return v.checked_value || true;
            } else {
              return v.unchecked_value || false;
            }
          },
          focus: function (j) {}
        };
      },
      expand: function (t) {
        t.ext.fullscreen = {
          toggleIcon: null
        };
        t.expand = function () {
          if (t.callEvent("onBeforeExpand", [])) {
            var j = t._obj;
            do {
              j._position = j.style.position || "";
              j.style.position = "static";
            } while ((j = j.parentNode) && j.style);
            (j = t._obj).style.position = "absolute";
            j._width = j.style.width;
            j._height = j.style.height;
            j.style.width = j.style.height = "100%";
            j.style.top = j.style.left = "0px";
            var a = document.body;
            a.scrollTop = 0;
            if (a = a.parentNode) {
              a.scrollTop = 0;
            }
            document.body._overflow = document.body.style.overflow || "";
            document.body.style.overflow = "hidden";
            t._maximize();
            t.callEvent("onExpand", []);
          }
        };
        t.collapse = function () {
          if (t.callEvent("onBeforeCollapse", [])) {
            var j = t._obj;
            do {
              j.style.position = j._position;
            } while ((j = j.parentNode) && j.style);
            (j = t._obj).style.width = j._width;
            j.style.height = j._height;
            document.body.style.overflow = document.body._overflow;
            t._maximize();
            t.callEvent("onCollapse", []);
          }
        };
        t.attachEvent("onTemplatesReady", function () {
          var j = document.createElement("div");
          j.className = "dhx_expand_icon";
          t.ext.fullscreen.toggleIcon = j;
          t._obj.appendChild(j);
          t.event(j, "click", function () {
            if (t.expanded) {
              t.collapse();
            } else {
              t.expand();
            }
          });
        });
        t._maximize = function () {
          this.expanded = !this.expanded;
          t.ext.fullscreen.toggleIcon.style.backgroundPosition = "0 " + (this.expanded ? "0" : "18") + "px";
          for (var j = ["left", "top"], a = 0; a < j.length; a++) {
            var v = t["_prev_margin_" + j[a]];
            if (t.xy["margin_" + j[a]]) {
              t["_prev_margin_" + j[a]] = t.xy["margin_" + j[a]];
              t.xy["margin_" + j[a]] = 0;
            } else if (v) {
              t.xy["margin_" + j[a]] = t["_prev_margin_" + j[a]];
              delete t["_prev_margin_" + j[a]];
            }
          }
          t.setCurrentView();
        };
      },
      grid_view: function (t) {
        Te("Grid", t.assert);
      },
      html_templates: function (t) {
        t.attachEvent("onTemplatesReady", function () {
          for (var j = document.body.getElementsByTagName("DIV"), a = 0; a < j.length; a++) {
            var v = j[a].className || "";
            if ((v = v.split(":")).length == 2 && v[0] == "template") {
              var _ = "return \"" + (j[a].innerHTML || "").replace(/"/g, "\\\"").replace(/[\n\r]+/g, "") + "\";";
              _ = unescape(_).replace(/\{event\.([a-z]+)\}/g, function (i, o) {
                return "\"+ev." + o + "+\"";
              });
              t.templates[v[1]] = Function("start", "end", "ev", _);
              j[a].style.display = "none";
            }
          }
        });
      },
      key_nav: function (t) {
        function j(a) {
          var v = {
            minicalButton: t.$keyboardNavigation.MinicalButton,
            minicalDate: t.$keyboardNavigation.MinicalCell,
            scheduler: t.$keyboardNavigation.SchedulerNode,
            dataArea: t.$keyboardNavigation.DataArea,
            timeSlot: t.$keyboardNavigation.TimeSlot,
            event: t.$keyboardNavigation.Event
          };
          var _ = {};
          for (var i in v) {
            _[i.toLowerCase()] = v[i];
          }
          return _[a = (a + "").toLowerCase()] || v.scheduler;
        }
        var a;
        t.config.key_nav = true;
        t.config.key_nav_step = 30;
        t.addShortcut = function (a, v, _) {
          var i = j(_);
          if (i) {
            i.prototype.bind(a, v);
          }
        };
        t.getShortcutHandler = function (a, v) {
          var _ = j(v);
          if (_) {
            var i = t.$keyboardNavigation.shortcuts.parse(a);
            if (i.length) {
              return _.prototype.findHandler(i[0]);
            }
          }
        };
        t.removeShortcut = function (a, v) {
          var _ = j(v);
          if (_) {
            _.prototype.unbind(a);
          }
        };
        t.focus = function () {
          if (t.config.key_nav) {
            var a = t.$keyboardNavigation.dispatcher;
            a.enable();
            var v = a.getActiveNode();
            if (!v || v instanceof t.$keyboardNavigation.MinicalButton || v instanceof t.$keyboardNavigation.MinicalCell) {
              a.setDefaultNode();
            } else {
              a.focusNode(a.getActiveNode());
            }
          }
        };
        t.$keyboardNavigation = {};
        t._compose = function () {
          for (var a = Array.prototype.slice.call(arguments, 0), v = {}, _ = 0; _ < a.length; _++) {
            var i = a[_];
            if (typeof i == "function") {
              i = new i();
            }
            for (var o in i) {
              v[o] = i[o];
            }
          }
          return v;
        };
        t.$keyboardNavigation.shortcuts = {
          createCommand: function () {
            return {
              modifiers: {
                shift: false,
                alt: false,
                ctrl: false,
                meta: false
              },
              keyCode: null
            };
          },
          parse: function (v) {
            for (var _ = [], i = this.getExpressions(this.trim(v)), o = 0; o < i.length; o++) {
              for (var c = this.getWords(i[o]), h = this.createCommand(), D = 0; D < c.length; D++) {
                if (this.commandKeys[c[D]]) {
                  h.modifiers[c[D]] = true;
                } else {
                  h.keyCode = this.specialKeys[c[D]] ? this.specialKeys[c[D]] : c[D].charCodeAt(0);
                }
              }
              _.push(h);
            }
            return _;
          },
          getCommandFromEvent: function (v) {
            var _ = this.createCommand();
            _.modifiers.shift = !!v.shiftKey;
            _.modifiers.alt = !!v.altKey;
            _.modifiers.ctrl = !!v.ctrlKey;
            _.modifiers.meta = !!v.metaKey;
            _.keyCode = v.which || v.keyCode;
            if (_.keyCode >= 96 && _.keyCode <= 105) {
              _.keyCode -= 48;
            }
            var i = String.fromCharCode(_.keyCode);
            if (i) {
              _.keyCode = i.toLowerCase().charCodeAt(0);
            }
            return _;
          },
          getHashFromEvent: function (v) {
            return this.getHash(this.getCommandFromEvent(v));
          },
          getHash: function (v) {
            var _ = [];
            for (var i in v.modifiers) {
              if (v.modifiers[i]) {
                _.push(i);
              }
            }
            _.push(v.keyCode);
            return _.join(this.junctionChar);
          },
          getExpressions: function (v) {
            return v.split(this.junctionChar);
          },
          getWords: function (v) {
            return v.split(this.combinationChar);
          },
          trim: function (v) {
            return v.replace(/\s/g, "");
          },
          junctionChar: ",",
          combinationChar: "+",
          commandKeys: {
            shift: 16,
            alt: 18,
            ctrl: 17,
            meta: true
          },
          specialKeys: {
            backspace: 8,
            tab: 9,
            enter: 13,
            esc: 27,
            space: 32,
            up: 38,
            down: 40,
            left: 37,
            right: 39,
            home: 36,
            end: 35,
            pageup: 33,
            pagedown: 34,
            delete: 46,
            insert: 45,
            plus: 107,
            f1: 112,
            f2: 113,
            f3: 114,
            f4: 115,
            f5: 116,
            f6: 117,
            f7: 118,
            f8: 119,
            f9: 120,
            f10: 121,
            f11: 122,
            f12: 123
          }
        };
        (a = t).$keyboardNavigation.EventHandler = {
          _handlers: null,
          findHandler: function (v) {
            this._handlers ||= {};
            var _ = a.$keyboardNavigation.shortcuts.getHash(v);
            return this._handlers[_];
          },
          doAction: function (v, _) {
            var i = this.findHandler(v);
            if (i) {
              i.call(this, _);
              if (_.preventDefault) {
                _.preventDefault();
              } else {
                _.returnValue = false;
              }
            }
          },
          bind: function (v, _) {
            this._handlers ||= {};
            for (var i = a.$keyboardNavigation.shortcuts, o = i.parse(v), c = 0; c < o.length; c++) {
              this._handlers[i.getHash(o[c])] = _;
            }
          },
          unbind: function (v) {
            for (var _ = a.$keyboardNavigation.shortcuts, i = _.parse(v), o = 0; o < i.length; o++) {
              if (this._handlers[_.getHash(i[o])]) {
                delete this._handlers[_.getHash(i[o])];
              }
            }
          },
          bindAll: function (v) {
            for (var _ in v) {
              this.bind(_, v[_]);
            }
          },
          initKeys: function () {
            this._handlers ||= {};
            if (this.keys) {
              this.bindAll(this.keys);
            }
          }
        };
        (function (a) {
          a.$keyboardNavigation.getFocusableNodes = a._getFocusableNodes;
          a.$keyboardNavigation.trapFocus = function (v, _) {
            if (_.keyCode != 9) {
              return false;
            }
            for (var i, o = a.$keyboardNavigation.getFocusableNodes(v), c = document.activeElement, h = -1, D = 0; D < o.length; D++) {
              if (o[D] == c) {
                h = D;
                break;
              }
            }
            if (_.shiftKey) {
              if (i = o[h <= 0 ? o.length - 1 : h - 1]) {
                i.focus();
                _.preventDefault();
                return true;
              }
            } else if (i = o[h >= o.length - 1 ? 0 : h + 1]) {
              i.focus();
              _.preventDefault();
              return true;
            }
            return false;
          };
        })(t);
        (function (a) {
          a.$keyboardNavigation.marker = {
            clear: function () {
              for (var v = a.$container.querySelectorAll(".dhx_focus_slot"), _ = 0; _ < v.length; _++) {
                v[_].parentNode.removeChild(v[_]);
              }
            },
            createElement: function () {
              var v = document.createElement("div");
              v.setAttribute("tabindex", -1);
              v.className = "dhx_focus_slot";
              return v;
            },
            renderMultiple: function (v, _, i) {
              for (var o = [], c = new Date(v), h = new Date(Math.min(_.valueOf(), a.date.add(a.date.day_start(new Date(v)), 1, "day").valueOf())); c.valueOf() < _.valueOf();) {
                o = o.concat(i.call(this, c, new Date(Math.min(h.valueOf(), _.valueOf()))));
                c = a.date.day_start(a.date.add(c, 1, "day"));
                h = a.date.day_start(a.date.add(c, 1, "day"));
                h = new Date(Math.min(h.valueOf(), _.valueOf()));
              }
              return o;
            },
            render: function (v, _, i) {
              this.clear();
              var o = [];
              var c = a.$keyboardNavigation.TimeSlot.prototype._modes;
              switch (a.$keyboardNavigation.TimeSlot.prototype._getMode()) {
                case c.units:
                  o = this.renderVerticalMarker(v, _, i);
                  break;
                case c.timeline:
                  o = this.renderTimelineMarker(v, _, i);
                  break;
                case c.year:
                  o = o.concat(this.renderMultiple(v, _, this.renderYearMarker));
                  break;
                case c.month:
                  o = this.renderMonthMarker(v, _);
                  break;
                case c.weekAgenda:
                  o = o.concat(this.renderMultiple(v, _, this.renderWeekAgendaMarker));
                  break;
                case c.list:
                  o = this.renderAgendaMarker(v, _);
                  break;
                case c.dayColumns:
                  o = o.concat(this.renderMultiple(v, _, this.renderVerticalMarker));
              }
              this.addWaiAriaLabel(o, v, _, i);
              this.addDataAttributes(o, v, _, i);
              for (var h = o.length - 1; h >= 0; h--) {
                if (o[h].offsetWidth) {
                  return o[h];
                }
              }
              return null;
            },
            addDataAttributes: function (v, _, i, o) {
              for (var c = a.date.date_to_str(a.config.api_date), h = c(_), D = c(i), V = 0; V < v.length; V++) {
                v[V].setAttribute("data-start-date", h);
                v[V].setAttribute("data-end-date", D);
                if (o) {
                  v[V].setAttribute("data-section", o);
                }
              }
            },
            addWaiAriaLabel: function (v, _, i, o) {
              var c = "";
              var h = a.getState().mode;
              var D = false;
              c += a.templates.day_date(_);
              if (a.date.day_start(new Date(_)).valueOf() != _.valueOf()) {
                c += " " + a.templates.hour_scale(_);
                D = true;
              }
              if (a.date.day_start(new Date(_)).valueOf() != a.date.day_start(new Date(i)).valueOf()) {
                c += " - " + a.templates.day_date(i);
                if (D || a.date.day_start(new Date(i)).valueOf() != i.valueOf()) {
                  c += " " + a.templates.hour_scale(i);
                }
              }
              if (o) {
                if (a.matrix && a.matrix[h]) {
                  c += ", " + a.templates[h + "_scale_label"](o.key, o.label, o);
                } else if (a._props && a._props[h]) {
                  c += ", " + a.templates[h + "_scale_text"](o.key, o.label, o);
                }
              }
              for (var V = 0; V < v.length; V++) {
                a._waiAria.setAttributes(v[V], {
                  "aria-label": c,
                  "aria-live": "polite"
                });
              }
            },
            renderWeekAgendaMarker: function (v, _) {
              for (var i = a.$container.querySelectorAll(".dhx_wa_day_cont .dhx_wa_scale_bar"), o = a.date.week_start(new Date(a.getState().min_date)), c = -1, h = a.date.day_start(new Date(v)), D = 0; D < i.length && (c++, a.date.day_start(new Date(o)).valueOf() != h.valueOf()); D++) {
                o = a.date.add(o, 1, "day");
              }
              if (c != -1) {
                return this._wrapDiv(i[c]);
              } else {
                return [];
              }
            },
            _wrapDiv: function (v) {
              var _ = this.createElement();
              _.style.top = v.offsetTop + "px";
              _.style.left = v.offsetLeft + "px";
              _.style.width = v.offsetWidth + "px";
              _.style.height = v.offsetHeight + "px";
              v.appendChild(_);
              return [_];
            },
            renderYearMarker: function (v, _) {
              var i = a._get_year_cell(v);
              i.style.position = "relative";
              var o = this.createElement();
              o.style.top = "0px";
              o.style.left = "0px";
              o.style.width = "100%";
              o.style.height = "100%";
              i.appendChild(o);
              return [o];
            },
            renderAgendaMarker: function (v, _) {
              var i = this.createElement();
              i.style.height = "1px";
              i.style.width = "100%";
              i.style.opacity = 1;
              i.style.top = "0px";
              i.style.left = "0px";
              a.$container.querySelector(".dhx_cal_data").appendChild(i);
              return [i];
            },
            renderTimelineMarker: function (v, _, i) {
              var o = a._lame_copy({}, a.matrix[a._mode]);
              var c = o._scales;
              o.round_position = false;
              var h = [];
              var D = v ? new Date(v) : a._min_date;
              var V = _ ? new Date(_) : a._max_date;
              if (D.valueOf() < a._min_date.valueOf()) {
                D = new Date(a._min_date);
              }
              if (V.valueOf() > a._max_date.valueOf()) {
                V = new Date(a._max_date);
              }
              if (!o._trace_x) {
                return h;
              }
              for (var T = 0; T < o._trace_x.length && !a._is_column_visible(o._trace_x[T]); T++);
              if (T == o._trace_x.length) {
                return h;
              }
              var W = c[i];
              if (D >= _ || V <= v) {
                return h;
              }
              var z = this.createElement();
              var Z = a._timeline_getX({
                start_date: v
              }, false, o) - 1;
              var re = a._timeline_getX({
                start_date: _
              }, false, o) - 1;
              var oe = o._section_height[i] - 1 || o.dy - 1;
              var _e = 0;
              if (a._isRender("cell")) {
                _e = W.offsetTop;
                Z += o.dx;
                re += o.dx;
                W = a.$container.querySelector(".dhx_cal_data");
              }
              var he = Math.max(1, re - Z - 1);
              z.style.cssText = "height: " + oe + "px; left: " + Z + "px; width: " + he + "px; top: " + _e + "px;";
              if (W) {
                W.appendChild(z);
                h.push(z);
              }
              return h;
            },
            renderMonthCell: function (v) {
              for (var _ = a.$container.querySelectorAll(".dhx_month_head"), i = [], o = 0; o < _.length; o++) {
                i.push(_[o].parentNode);
              }
              var c = -1;
              var h = 0;
              var D = -1;
              var V = a.date.week_start(new Date(a.getState().min_date));
              var T = a.date.day_start(new Date(v));
              for (o = 0; o < i.length && (c++, D == 6 ? (h++, D = 0) : D++, a.date.day_start(new Date(V)).valueOf() != T.valueOf()); o++) {
                V = a.date.add(V, 1, "day");
              }
              if (c == -1) {
                return [];
              }
              var W = a._colsS[D];
              var z = a._colsS.heights[h];
              var Z = this.createElement();
              Z.style.top = z + "px";
              Z.style.left = W + "px";
              Z.style.width = a._cols[D] + "px";
              Z.style.height = (a._colsS.heights[h + 1] - z || a._colsS.height) + "px";
              var re = a.$container.querySelector(".dhx_cal_data");
              var oe = re.querySelector("table");
              if (oe.nextSibling) {
                re.insertBefore(Z, oe.nextSibling);
              } else {
                re.appendChild(Z);
              }
              return Z;
            },
            renderMonthMarker: function (v, _) {
              for (var i = [], o = v; o.valueOf() < _.valueOf();) {
                i.push(this.renderMonthCell(o));
                o = a.date.add(o, 1, "day");
              }
              return i;
            },
            renderVerticalMarker: function (v, _, i) {
              var o = a.locate_holder_day(v);
              var c = [];
              var h = null;
              var D = a.config;
              if (a._ignores[o]) {
                return c;
              }
              if (a._props && a._props[a._mode] && i) {
                var V = a._props[a._mode];
                o = V.order[i];
                var T = V.order[i];
                if (V.days > 1) {
                  o = a.locate_holder_day(v) + T;
                } else {
                  o = T;
                  if (V.size && o > V.position + V.size) {
                    o = 0;
                  }
                }
              }
              if (!(h = a.locate_holder(o)) || h.querySelector(".dhx_scale_hour")) {
                return document.createElement("div");
              }
              var W = Math.max(v.getHours() * 60 + v.getMinutes(), D.first_hour * 60);
              var z = Math.min(_.getHours() * 60 + _.getMinutes(), D.last_hour * 60);
              if (!z && a.date.day_start(new Date(_)).valueOf() > a.date.day_start(new Date(v)).valueOf()) {
                z = D.last_hour * 60;
              }
              if (z <= W) {
                return [];
              }
              var Z = this.createElement();
              var re = a.config.hour_size_px * D.last_hour + 1;
              Z.style.top = Math.round((W * 60 * 1000 - a.config.first_hour * 3600000) * a.config.hour_size_px / 3600000) % re + "px";
              Z.style.lineHeight = Z.style.height = Math.max(Math.round((z - W) * 60 * 1000 * a.config.hour_size_px / 3600000) % re, 1) + "px";
              Z.style.width = "100%";
              h.appendChild(Z);
              c.push(Z);
              return c[0];
            }
          };
        })(t);
        (function (a) {
          a.$keyboardNavigation.SchedulerNode = function () {};
          a.$keyboardNavigation.SchedulerNode.prototype = a._compose(a.$keyboardNavigation.EventHandler, {
            getDefaultNode: function () {
              var v = new a.$keyboardNavigation.TimeSlot();
              if (!v.isValid()) {
                v = v.fallback();
              }
              return v;
            },
            _modes: {
              month: "month",
              year: "year",
              dayColumns: "dayColumns",
              timeline: "timeline",
              units: "units",
              weekAgenda: "weekAgenda",
              list: "list"
            },
            getMode: function () {
              var v = a.getState().mode;
              if (a.matrix && a.matrix[v]) {
                return this._modes.timeline;
              } else if (a._props && a._props[v]) {
                return this._modes.units;
              } else if (v == "month") {
                return this._modes.month;
              } else if (v == "year") {
                return this._modes.year;
              } else if (v == "week_agenda") {
                return this._modes.weekAgenda;
              } else if (v == "map" || v == "agenda" || a._grid && a["grid_" + v]) {
                return this._modes.list;
              } else {
                return this._modes.dayColumns;
              }
            },
            focus: function () {
              a.focus();
            },
            blur: function () {},
            disable: function () {
              a.$container.setAttribute("tabindex", "0");
            },
            enable: function () {
              if (a.$container) {
                a.$container.removeAttribute("tabindex");
              }
            },
            isEnabled: function () {
              return a.$container.hasAttribute("tabindex");
            },
            _compareEvents: function (v, _) {
              if (v.start_date.valueOf() == _.start_date.valueOf()) {
                if (v.id > _.id) {
                  return 1;
                } else {
                  return -1;
                }
              } else if (v.start_date.valueOf() > _.start_date.valueOf()) {
                return 1;
              } else {
                return -1;
              }
            },
            _pickEvent: function (v, _, i, o) {
              var c = a.getState();
              v = new Date(Math.max(c.min_date.valueOf(), v.valueOf()));
              _ = new Date(Math.min(c.max_date.valueOf(), _.valueOf()));
              var h = a.getEvents(v, _);
              h.sort(this._compareEvents);
              if (o) {
                h = h.reverse();
              }
              for (var D = !!i, V = 0; V < h.length && D; V++) {
                if (h[V].id == i) {
                  D = false;
                }
                h.splice(V, 1);
                V--;
              }
              for (V = 0; V < h.length; V++) {
                if (new a.$keyboardNavigation.Event(h[V].id).getNode()) {
                  return h[V];
                }
              }
              return null;
            },
            nextEventHandler: function (v) {
              var _ = a.$keyboardNavigation.dispatcher.activeNode;
              var i = v || _ && _.eventId;
              var o = null;
              if (i && a.getEvent(i)) {
                var c = a.getEvent(i);
                o = a.$keyboardNavigation.SchedulerNode.prototype._pickEvent(c.start_date, a.date.add(c.start_date, 1, "year"), c.id, false);
              }
              if (!o && !v) {
                var h = a.getState();
                o = a.$keyboardNavigation.SchedulerNode.prototype._pickEvent(h.min_date, a.date.add(h.min_date, 1, "year"), null, false);
              }
              if (o) {
                var D = new a.$keyboardNavigation.Event(o.id);
                if (D.isValid()) {
                  if (_) {
                    _.blur();
                  }
                  a.$keyboardNavigation.dispatcher.setActiveNode(D);
                } else {
                  this.nextEventHandler(o.id);
                }
              }
            },
            prevEventHandler: function (v) {
              var _ = a.$keyboardNavigation.dispatcher.activeNode;
              var i = v || _ && _.eventId;
              var o = null;
              if (i && a.getEvent(i)) {
                var c = a.getEvent(i);
                o = a.$keyboardNavigation.SchedulerNode.prototype._pickEvent(a.date.add(c.end_date, -1, "year"), c.end_date, c.id, true);
              }
              if (!o && !v) {
                var h = a.getState();
                o = a.$keyboardNavigation.SchedulerNode.prototype._pickEvent(a.date.add(h.max_date, -1, "year"), h.max_date, null, true);
              }
              if (o) {
                var D = new a.$keyboardNavigation.Event(o.id);
                if (D.isValid()) {
                  if (_) {
                    _.blur();
                  }
                  a.$keyboardNavigation.dispatcher.setActiveNode(D);
                } else {
                  this.prevEventHandler(o.id);
                }
              }
            },
            keys: {
              "alt+1, alt+2, alt+3, alt+4, alt+5, alt+6, alt+7, alt+8, alt+9": function (v) {
                var _ = a.$keyboardNavigation.HeaderCell.prototype.getNodes(".dhx_cal_navline .dhx_cal_tab");
                var i = v.key;
                if (i === undefined) {
                  i = v.keyCode - 48;
                }
                if (_[i * 1 - 1]) {
                  _[i * 1 - 1].click();
                }
              },
              "ctrl+left,meta+left": function (v) {
                a._click.dhx_cal_prev_button();
              },
              "ctrl+right,meta+right": function (v) {
                a._click.dhx_cal_next_button();
              },
              "ctrl+up,meta+up": function (v) {
                a.$container.querySelector(".dhx_cal_data").scrollTop -= 20;
              },
              "ctrl+down,meta+down": function (v) {
                a.$container.querySelector(".dhx_cal_data").scrollTop += 20;
              },
              e: function () {
                this.nextEventHandler();
              },
              home: function () {
                a.setCurrentView(new Date());
              },
              "shift+e": function () {
                this.prevEventHandler();
              },
              "ctrl+enter,meta+enter": function () {
                a.addEventNow({
                  start_date: new Date(a.getState().date)
                });
              },
              "ctrl+c,meta+c": function (v) {
                a._key_nav_copy_paste(v);
              },
              "ctrl+v,meta+v": function (v) {
                a._key_nav_copy_paste(v);
              },
              "ctrl+x,meta+x": function (v) {
                a._key_nav_copy_paste(v);
              }
            }
          });
          a.$keyboardNavigation.SchedulerNode.prototype.bindAll(a.$keyboardNavigation.SchedulerNode.prototype.keys);
        })(t);
        (function (a) {
          a.$keyboardNavigation.KeyNavNode = function () {};
          a.$keyboardNavigation.KeyNavNode.prototype = a._compose(a.$keyboardNavigation.EventHandler, {
            isValid: function () {
              return true;
            },
            fallback: function () {
              return null;
            },
            moveTo: function (v) {
              a.$keyboardNavigation.dispatcher.setActiveNode(v);
            },
            compareTo: function (v) {
              if (!v) {
                return false;
              }
              for (var _ in this) {
                if (!!this[_] != !!v[_]) {
                  return false;
                }
                var i = !!this[_] && !!this[_].toString;
                var o = !!v[_] && !!v[_].toString;
                if (o != i) {
                  return false;
                }
                if (o && i) {
                  if (v[_].toString() != this[_].toString()) {
                    return false;
                  }
                } else if (v[_] != this[_]) {
                  return false;
                }
              }
              return true;
            },
            getNode: function () {},
            focus: function () {
              var v = this.getNode();
              if (v) {
                v.setAttribute("tabindex", "-1");
                if (v.focus) {
                  v.focus();
                }
              }
            },
            blur: function () {
              var v = this.getNode();
              if (v) {
                v.setAttribute("tabindex", "-1");
              }
            }
          });
        })(t);
        (function (a) {
          a.$keyboardNavigation.HeaderCell = function (v) {
            this.index = v || 0;
          };
          a.$keyboardNavigation.HeaderCell.prototype = a._compose(a.$keyboardNavigation.KeyNavNode, {
            getNode: function (v) {
              v = v || this.index || 0;
              var _ = this.getNodes();
              if (_[v]) {
                return _[v];
              }
            },
            getNodes: function (v) {
              v = v || [".dhx_cal_navline .dhx_cal_prev_button", ".dhx_cal_navline .dhx_cal_next_button", ".dhx_cal_navline .dhx_cal_today_button", ".dhx_cal_navline .dhx_cal_tab"].join(", ");
              var _ = Array.prototype.slice.call(a.$container.querySelectorAll(v));
              _.sort(function (i, o) {
                return i.offsetLeft - o.offsetLeft;
              });
              return _;
            },
            _handlers: null,
            isValid: function () {
              return !!this.getNode(this.index);
            },
            fallback: function () {
              var v = this.getNode(0);
              v ||= new a.$keyboardNavigation.TimeSlot();
              return v;
            },
            keys: {
              left: function () {
                var v = this.index - 1;
                if (v < 0) {
                  v = this.getNodes().length - 1;
                }
                this.moveTo(new a.$keyboardNavigation.HeaderCell(v));
              },
              right: function () {
                var v = this.index + 1;
                if (v >= this.getNodes().length) {
                  v = 0;
                }
                this.moveTo(new a.$keyboardNavigation.HeaderCell(v));
              },
              down: function () {
                this.moveTo(new a.$keyboardNavigation.TimeSlot());
              },
              enter: function () {
                var v = this.getNode();
                if (v) {
                  v.click();
                }
              }
            }
          });
          a.$keyboardNavigation.HeaderCell.prototype.bindAll(a.$keyboardNavigation.HeaderCell.prototype.keys);
        })(t);
        (function (a) {
          a.$keyboardNavigation.Event = function (v) {
            this.eventId = null;
            if (a.getEvent(v)) {
              var _ = a.getEvent(v);
              this.start = new Date(_.start_date);
              this.end = new Date(_.end_date);
              this.section = this._getSection(_);
              this.eventId = v;
            }
          };
          a.$keyboardNavigation.Event.prototype = a._compose(a.$keyboardNavigation.KeyNavNode, {
            _getNodes: function () {
              return Array.prototype.slice.call(a.$container.querySelectorAll("[" + a.config.event_attribute + "]"));
            },
            _modes: a.$keyboardNavigation.SchedulerNode.prototype._modes,
            getMode: a.$keyboardNavigation.SchedulerNode.prototype.getMode,
            _handlers: null,
            isValid: function () {
              return !!a.getEvent(this.eventId) && !!this.getNode();
            },
            fallback: function () {
              var v = this._getNodes()[0];
              var _ = null;
              if (v && a._locate_event(v)) {
                var i = a._locate_event(v);
                _ = new a.$keyboardNavigation.Event(i);
              } else {
                _ = new a.$keyboardNavigation.TimeSlot();
              }
              return _;
            },
            isScrolledIntoView: function (v) {
              var _ = v.getBoundingClientRect();
              var i = a.$container.querySelector(".dhx_cal_data").getBoundingClientRect();
              return _.bottom >= i.top && _.top <= i.bottom;
            },
            getNode: function () {
              var v = "[" + a.config.event_attribute + "='" + this.eventId + "']";
              var _ = a.$keyboardNavigation.dispatcher.getInlineEditor(this.eventId);
              if (_) {
                return _;
              }
              if (a.isMultisectionEvent && a.isMultisectionEvent(a.getEvent(this.eventId))) {
                for (var i = a.$container.querySelectorAll(v), o = 0; o < i.length; o++) {
                  if (this.isScrolledIntoView(i[o])) {
                    return i[o];
                  }
                }
                return i[0];
              }
              return a.$container.querySelector(v);
            },
            focus: function () {
              var v = a.getEvent(this.eventId);
              var _ = a.getState();
              if (v.start_date.valueOf() > _.max_date.valueOf() || v.end_date.valueOf() <= _.min_date.valueOf()) {
                a.setCurrentView(v.start_date);
              }
              var i = this.getNode();
              if (this.isScrolledIntoView(i)) {
                a.$keyboardNavigation.dispatcher.keepScrollPosition(function () {
                  a.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
                }.bind(this));
              } else {
                a.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
              }
            },
            blur: function () {
              a.$keyboardNavigation.KeyNavNode.prototype.blur.apply(this);
            },
            _getSection: function (v) {
              var _ = null;
              var i = a.getState().mode;
              if (a.matrix && a.matrix[i]) {
                _ = v[a.matrix[a.getState().mode].y_property];
              } else if (a._props && a._props[i]) {
                _ = v[a._props[i].map_to];
              }
              return _;
            },
            _moveToSlot: function (v) {
              var _ = a.getEvent(this.eventId);
              if (_) {
                var i = this._getSection(_);
                var o = new a.$keyboardNavigation.TimeSlot(_.start_date, null, i);
                this.moveTo(o.nextSlot(o, v));
              } else {
                this.moveTo(new a.$keyboardNavigation.TimeSlot());
              }
            },
            keys: {
              left: function () {
                this._moveToSlot("left");
              },
              right: function () {
                this._moveToSlot("right");
              },
              down: function () {
                if (this.getMode() == this._modes.list) {
                  a.$keyboardNavigation.SchedulerNode.prototype.nextEventHandler();
                } else {
                  this._moveToSlot("down");
                }
              },
              space: function () {
                var v = this.getNode();
                if (v && v.click) {
                  v.click();
                } else {
                  this.moveTo(new a.$keyboardNavigation.TimeSlot());
                }
              },
              up: function () {
                if (this.getMode() == this._modes.list) {
                  a.$keyboardNavigation.SchedulerNode.prototype.prevEventHandler();
                } else {
                  this._moveToSlot("up");
                }
              },
              delete: function () {
                if (a.getEvent(this.eventId)) {
                  a._click.buttons.delete(this.eventId);
                } else {
                  this.moveTo(new a.$keyboardNavigation.TimeSlot());
                }
              },
              enter: function () {
                if (a.getEvent(this.eventId)) {
                  a.showLightbox(this.eventId);
                } else {
                  this.moveTo(new a.$keyboardNavigation.TimeSlot());
                }
              }
            }
          });
          a.$keyboardNavigation.Event.prototype.bindAll(a.$keyboardNavigation.Event.prototype.keys);
        })(t);
        (function (a) {
          a.$keyboardNavigation.TimeSlot = function (v, _, i, o) {
            var c = a.getState();
            var h = a.matrix && a.matrix[c.mode];
            v ||= this.getDefaultDate();
            _ ||= h ? a.date.add(v, h.x_step, h.x_unit) : a.date.add(v, a.config.key_nav_step, "minute");
            this.section = i || this._getDefaultSection();
            this.start_date = new Date(v);
            this.end_date = new Date(_);
            this.movingDate = o || null;
          };
          a.$keyboardNavigation.TimeSlot.prototype = a._compose(a.$keyboardNavigation.KeyNavNode, {
            _handlers: null,
            getDefaultDate: function () {
              var v;
              var _ = a.getState();
              var i = new Date(_.date);
              i.setSeconds(0);
              i.setMilliseconds(0);
              var o = new Date();
              o.setSeconds(0);
              o.setMilliseconds(0);
              var c = a.matrix && a.matrix[_.mode];
              var h = false;
              if (i.valueOf() === o.valueOf()) {
                h = true;
              }
              if (c) {
                if (h) {
                  if (c.x_unit === "day") {
                    o.setHours(0);
                    o.setMinutes(0);
                  } else if (c.x_unit === "hour") {
                    o.setMinutes(0);
                  }
                  v = o;
                } else {
                  v = a.date[c.name + "_start"](new Date(_.date));
                }
                v = this.findVisibleColumn(v);
              } else {
                v = new Date(a.getState().min_date);
                if (h) {
                  v = o;
                }
                v = this.findVisibleColumn(v);
                if (!h) {
                  v.setHours(a.config.first_hour);
                }
                if (!a._table_view) {
                  var D = a.$container.querySelector(".dhx_cal_data");
                  if (D.scrollTop) {
                    v.setHours(a.config.first_hour + Math.ceil(D.scrollTop / a.config.hour_size_px));
                  }
                }
              }
              return v;
            },
            clone: function (v) {
              return new a.$keyboardNavigation.TimeSlot(v.start_date, v.end_date, v.section, v.movingDate);
            },
            _getMultisectionView: function () {
              var v;
              var _ = a.getState();
              if (a._props && a._props[_.mode]) {
                v = a._props[_.mode];
              } else if (a.matrix && a.matrix[_.mode]) {
                v = a.matrix[_.mode];
              }
              return v;
            },
            _getDefaultSection: function () {
              var v = null;
              if (this._getMultisectionView() && !v) {
                v = this._getNextSection();
              }
              return v;
            },
            _getNextSection: function (v, _) {
              var i = this._getMultisectionView();
              var o = i.order[v];
              var c = o;
              if ((c = o !== undefined ? o + _ : i.size && i.position ? i.position : 0) < 0) {
                c = 0;
              }
              var h = i.options || i.y_unit;
              if (c >= h.length) {
                c = h.length - 1;
              }
              if (h[c]) {
                return h[c].key;
              } else {
                return null;
              }
            },
            isValid: function () {
              var v = a.getState();
              if (this.start_date.valueOf() < v.min_date.valueOf() || this.start_date.valueOf() >= v.max_date.valueOf() || !this.isVisible(this.start_date, this.end_date)) {
                return false;
              }
              var _ = this._getMultisectionView();
              return !_ || _.order[this.section] !== undefined;
            },
            fallback: function () {
              var v = new a.$keyboardNavigation.TimeSlot();
              if (v.isValid()) {
                return v;
              } else {
                return new a.$keyboardNavigation.DataArea();
              }
            },
            getNodes: function () {
              return Array.prototype.slice.call(a.$container.querySelectorAll(".dhx_focus_slot"));
            },
            getNode: function () {
              return this.getNodes()[0];
            },
            focus: function () {
              if (this.section && a.getView() && a.getView().smart_rendering && a.getView().scrollTo && !a.$container.querySelector(`[data-section-id="${this.section}"]`)) {
                a.getView().scrollTo({
                  section: this.section
                });
              }
              a.$keyboardNavigation.marker.render(this.start_date, this.end_date, this.section);
              a.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
              a.$keyboardNavigation._pasteDate = this.start_date;
              a.$keyboardNavigation._pasteSection = this.section;
            },
            blur: function () {
              a.$keyboardNavigation.KeyNavNode.prototype.blur.apply(this);
              a.$keyboardNavigation.marker.clear();
            },
            _modes: a.$keyboardNavigation.SchedulerNode.prototype._modes,
            _getMode: a.$keyboardNavigation.SchedulerNode.prototype.getMode,
            addMonthDate: function (v, _, i) {
              var o;
              switch (_) {
                case "up":
                  o = a.date.add(v, -1, "week");
                  break;
                case "down":
                  o = a.date.add(v, 1, "week");
                  break;
                case "left":
                  o = a.date.day_start(a.date.add(v, -1, "day"));
                  o = this.findVisibleColumn(o, -1);
                  break;
                case "right":
                  o = a.date.day_start(a.date.add(v, 1, "day"));
                  o = this.findVisibleColumn(o, 1);
                  break;
                default:
                  o = a.date.day_start(new Date(v));
              }
              var c = a.getState();
              if (v.valueOf() < c.min_date.valueOf() || !i && v.valueOf() >= c.max_date.valueOf()) {
                o = new Date(c.min_date);
              }
              return o;
            },
            nextMonthSlot: function (v, _, i) {
              var o;
              var c;
              (o = this.addMonthDate(v.start_date, _, i)).setHours(a.config.first_hour);
              (c = new Date(o)).setHours(a.config.last_hour);
              return {
                start_date: o,
                end_date: c
              };
            },
            _alignTimeSlot: function (v, _, i, o) {
              for (var c = new Date(_); c.valueOf() < v.valueOf();) {
                c = a.date.add(c, o, i);
              }
              if (c.valueOf() > v.valueOf()) {
                c = a.date.add(c, -o, i);
              }
              return c;
            },
            nextTimelineSlot: function (v, _, i) {
              var o = a.getState();
              var c = a.matrix[o.mode];
              var h = this._alignTimeSlot(v.start_date, a.date[c.name + "_start"](new Date(v.start_date)), c.x_unit, c.x_step);
              var D = this._alignTimeSlot(v.end_date, a.date[c.name + "_start"](new Date(v.end_date)), c.x_unit, c.x_step);
              if (D.valueOf() <= h.valueOf()) {
                D = a.date.add(h, c.x_step, c.x_unit);
              }
              var V = this.clone(v);
              V.start_date = h;
              V.end_date = D;
              V.section = v.section || this._getNextSection();
              switch (_) {
                case "up":
                  V.section = this._getNextSection(v.section, -1);
                  break;
                case "down":
                  V.section = this._getNextSection(v.section, 1);
                  break;
                case "left":
                  V.start_date = this.findVisibleColumn(a.date.add(V.start_date, -c.x_step, c.x_unit), -1);
                  V.end_date = a.date.add(V.start_date, c.x_step, c.x_unit);
                  break;
                case "right":
                  V.start_date = this.findVisibleColumn(a.date.add(V.start_date, c.x_step, c.x_unit), 1);
                  V.end_date = a.date.add(V.start_date, c.x_step, c.x_unit);
              }
              if (V.start_date.valueOf() < o.min_date.valueOf() || V.start_date.valueOf() >= o.max_date.valueOf()) {
                if (i && V.start_date.valueOf() >= o.max_date.valueOf()) {
                  V.start_date = new Date(o.max_date);
                } else {
                  V.start_date = a.date[o.mode + "_start"](a.date.add(o.date, _ == "left" ? -1 : 1, o.mode));
                  V.end_date = a.date.add(V.start_date, c.x_step, c.x_unit);
                }
              }
              return V;
            },
            nextUnitsSlot: function (v, _, i) {
              var o = this.clone(v);
              o.section = v.section || this._getNextSection();
              var c = v.section || this._getNextSection();
              var h = a.getState();
              var D = a._props[h.mode];
              switch (_) {
                case "left":
                  c = this._getNextSection(v.section, -1);
                  if (D.days > 1 && D.order[c] == (D.size ? D.size - 1 : D.options.length) - 1 && a.date.add(v.start_date, -1, "day").valueOf() >= h.min_date.valueOf()) {
                    o = this.nextDaySlot(v, _, i);
                  }
                  break;
                case "right":
                  c = this._getNextSection(v.section, 1);
                  if (D.days > 1 && !D.order[c] && a.date.add(v.start_date, 1, "day").valueOf() < h.max_date.valueOf()) {
                    o = this.nextDaySlot(v, _, i);
                  }
                  break;
                default:
                  o = this.nextDaySlot(v, _, i);
                  c = v.section;
              }
              o.section = c;
              return o;
            },
            _moveDate: function (v, _) {
              var i = this.findVisibleColumn(a.date.add(v, _, "day"), _);
              i.setHours(v.getHours());
              i.setMinutes(v.getMinutes());
              return i;
            },
            isBeforeLastHour: function (v, _) {
              var i = v.getMinutes();
              var o = v.getHours();
              var c = a.config.last_hour;
              return o < c || !_ && (c == 24 || o == c) && !i;
            },
            isAfterFirstHour: function (v, _) {
              var i = v.getMinutes();
              var o = v.getHours();
              var h = a.config.last_hour;
              return o >= a.config.first_hour || !_ && !i && (!o && h == 24 || o == h);
            },
            isInVisibleDayTime: function (v, _) {
              return this.isBeforeLastHour(v, _) && this.isAfterFirstHour(v, _);
            },
            nextDaySlot: function (v, _, i) {
              var o;
              var c;
              var h = a.config.key_nav_step;
              var D = this._alignTimeSlot(v.start_date, a.date.day_start(new Date(v.start_date)), "minute", h);
              var V = v.start_date;
              switch (_) {
                case "up":
                  o = a.date.add(D, -h, "minute");
                  if (!this.isInVisibleDayTime(o, true) && (!i || this.isInVisibleDayTime(V, true))) {
                    var T = true;
                    if (i && a.date.date_part(new Date(o)).valueOf() != a.date.date_part(new Date(V)).valueOf()) {
                      T = false;
                    }
                    if (T) {
                      o = this.findVisibleColumn(a.date.add(v.start_date, -1, "day"), -1);
                    }
                    o.setHours(a.config.last_hour);
                    o.setMinutes(0);
                    o = a.date.add(o, -h, "minute");
                  }
                  c = a.date.add(o, h, "minute");
                  break;
                case "down":
                  o = a.date.add(D, h, "minute");
                  var W = i ? o : a.date.add(o, h, "minute");
                  if (!this.isInVisibleDayTime(W, false) && (!i || !!this.isInVisibleDayTime(V, false))) {
                    if (i) {
                      T = true;
                      if (a.date.date_part(new Date(V)).valueOf() == V.valueOf()) {
                        T = false;
                      }
                      if (T) {
                        o = this.findVisibleColumn(a.date.add(v.start_date, 1, "day"), 1);
                      }
                      o.setHours(a.config.first_hour);
                      o.setMinutes(0);
                      o = a.date.add(o, h, "minute");
                    } else {
                      (o = this.findVisibleColumn(a.date.add(v.start_date, 1, "day"), 1)).setHours(a.config.first_hour);
                      o.setMinutes(0);
                    }
                  }
                  c = a.date.add(o, h, "minute");
                  break;
                case "left":
                  o = this._moveDate(v.start_date, -1);
                  c = this._moveDate(v.end_date, -1);
                  break;
                case "right":
                  o = this._moveDate(v.start_date, 1);
                  c = this._moveDate(v.end_date, 1);
                  break;
                default:
                  c = a.date.add(o = D, h, "minute");
              }
              return {
                start_date: o,
                end_date: c
              };
            },
            nextWeekAgendaSlot: function (v, _) {
              var i;
              var o;
              var c = a.getState();
              switch (_) {
                case "down":
                case "left":
                  i = a.date.day_start(a.date.add(v.start_date, -1, "day"));
                  i = this.findVisibleColumn(i, -1);
                  break;
                case "up":
                case "right":
                  i = a.date.day_start(a.date.add(v.start_date, 1, "day"));
                  i = this.findVisibleColumn(i, 1);
                  break;
                default:
                  i = a.date.day_start(v.start_date);
              }
              if (v.start_date.valueOf() < c.min_date.valueOf() || v.start_date.valueOf() >= c.max_date.valueOf()) {
                i = new Date(c.min_date);
              }
              (o = new Date(i)).setHours(a.config.last_hour);
              return {
                start_date: i,
                end_date: o
              };
            },
            nextAgendaSlot: function (v, _) {
              return {
                start_date: v.start_date,
                end_date: v.end_date
              };
            },
            isDateVisible: function (v) {
              if (!a._ignores_detected) {
                return true;
              }
              var _;
              var i = a.matrix && a.matrix[a.getState().mode];
              _ = i ? a._get_date_index(i, v) : a.locate_holder_day(v);
              return !a._ignores[_];
            },
            findVisibleColumn: function (v, _) {
              var i = v;
              _ = _ || 1;
              for (var o = a.getState(); !this.isDateVisible(i) && (_ > 0 && i.valueOf() <= o.max_date.valueOf() || _ < 0 && i.valueOf() >= o.min_date.valueOf());) {
                i = this.nextDateColumn(i, _);
              }
              return i;
            },
            nextDateColumn: function (v, _) {
              _ = _ || 1;
              var i = a.matrix && a.matrix[a.getState().mode];
              if (i) {
                return a.date.add(v, _ * i.x_step, i.x_unit);
              } else {
                return a.date.day_start(a.date.add(v, _, "day"));
              }
            },
            isVisible: function (v, _) {
              if (!a._ignores_detected) {
                return true;
              }
              for (var i = new Date(v); i.valueOf() < _.valueOf();) {
                if (this.isDateVisible(i)) {
                  return true;
                }
                i = this.nextDateColumn(i);
              }
              return false;
            },
            nextSlot: function (v, _, i, o) {
              var c;
              i = i || this._getMode();
              var h = a.$keyboardNavigation.TimeSlot.prototype.clone(v);
              switch (i) {
                case this._modes.units:
                  c = this.nextUnitsSlot(h, _, o);
                  break;
                case this._modes.timeline:
                  c = this.nextTimelineSlot(h, _, o);
                  break;
                case this._modes.year:
                case this._modes.month:
                  c = this.nextMonthSlot(h, _, o);
                  break;
                case this._modes.weekAgenda:
                  c = this.nextWeekAgendaSlot(h, _, o);
                  break;
                case this._modes.list:
                  c = this.nextAgendaSlot(h, _, o);
                  break;
                case this._modes.dayColumns:
                  c = this.nextDaySlot(h, _, o);
              }
              if (c.start_date.valueOf() >= c.end_date.valueOf()) {
                c = this.nextSlot(c, _, i);
              }
              return a.$keyboardNavigation.TimeSlot.prototype.clone(c);
            },
            extendSlot: function (v, _) {
              var i;
              switch (this._getMode()) {
                case this._modes.units:
                  i = _ == "left" || _ == "right" ? this.nextUnitsSlot(v, _) : this.extendUnitsSlot(v, _);
                  break;
                case this._modes.timeline:
                  i = _ == "down" || _ == "up" ? this.nextTimelineSlot(v, _) : this.extendTimelineSlot(v, _);
                  break;
                case this._modes.year:
                case this._modes.month:
                  i = this.extendMonthSlot(v, _);
                  break;
                case this._modes.dayColumns:
                  i = this.extendDaySlot(v, _);
                  break;
                case this._modes.weekAgenda:
                  i = this.extendWeekAgendaSlot(v, _);
                  break;
                default:
                  i = v;
              }
              var o = a.getState();
              if (i.start_date.valueOf() < o.min_date.valueOf()) {
                i.start_date = this.findVisibleColumn(o.min_date);
                i.start_date.setHours(a.config.first_hour);
              }
              if (i.end_date.valueOf() > o.max_date.valueOf()) {
                i.end_date = this.findVisibleColumn(o.max_date, -1);
              }
              return a.$keyboardNavigation.TimeSlot.prototype.clone(i);
            },
            extendTimelineSlot: function (v, _) {
              return this.extendGenericSlot({
                left: "start_date",
                right: "end_date"
              }, v, _, "timeline");
            },
            extendWeekAgendaSlot: function (v, _) {
              return this.extendGenericSlot({
                left: "start_date",
                right: "end_date"
              }, v, _, "weekAgenda");
            },
            extendGenericSlot: function (v, _, i, o) {
              var c;
              var h = _.movingDate;
              h ||= v[i];
              if (!h || !v[i]) {
                return _;
              }
              if (!i) {
                return a.$keyboardNavigation.TimeSlot.prototype.clone(_);
              }
              if ((c = this.nextSlot({
                start_date: _[h],
                section: _.section
              }, i, o, true)).start_date.valueOf() == _.start_date.valueOf()) {
                c = this.nextSlot({
                  start_date: c.start_date,
                  section: c.section
                }, i, o, true);
              }
              c.movingDate = h;
              var D = this.extendSlotDates(_, c, c.movingDate);
              if (D.end_date.valueOf() <= D.start_date.valueOf()) {
                c.movingDate = c.movingDate == "end_date" ? "start_date" : "end_date";
              }
              D = this.extendSlotDates(_, c, c.movingDate);
              c.start_date = D.start_date;
              c.end_date = D.end_date;
              return c;
            },
            extendSlotDates: function (v, _, i) {
              var o = {
                start_date: null,
                end_date: null
              };
              if (i == "start_date") {
                o.start_date = _.start_date;
                o.end_date = v.end_date;
              } else {
                o.start_date = v.start_date;
                o.end_date = _.start_date;
              }
              return o;
            },
            extendMonthSlot: function (v, _) {
              (v = this.extendGenericSlot({
                up: "start_date",
                down: "end_date",
                left: "start_date",
                right: "end_date"
              }, v, _, "month")).start_date.setHours(a.config.first_hour);
              v.end_date = a.date.add(v.end_date, -1, "day");
              v.end_date.setHours(a.config.last_hour);
              return v;
            },
            extendUnitsSlot: function (v, _) {
              var i;
              switch (_) {
                case "down":
                case "up":
                  i = this.extendDaySlot(v, _);
                  break;
                default:
                  i = v;
              }
              i.section = v.section;
              return i;
            },
            extendDaySlot: function (v, _) {
              return this.extendGenericSlot({
                up: "start_date",
                down: "end_date",
                left: "start_date",
                right: "end_date"
              }, v, _, "dayColumns");
            },
            scrollSlot: function (v) {
              var _ = a.getState();
              var i = this.nextSlot(this, v);
              if (i.start_date.valueOf() < _.min_date.valueOf() || i.start_date.valueOf() >= _.max_date.valueOf()) {
                a.setCurrentView(new Date(i.start_date));
              }
              this.moveTo(i);
            },
            keys: {
              left: function () {
                this.scrollSlot("left");
              },
              right: function () {
                this.scrollSlot("right");
              },
              down: function () {
                if (this._getMode() == this._modes.list) {
                  a.$keyboardNavigation.SchedulerNode.prototype.nextEventHandler();
                } else {
                  this.scrollSlot("down");
                }
              },
              up: function () {
                if (this._getMode() == this._modes.list) {
                  a.$keyboardNavigation.SchedulerNode.prototype.prevEventHandler();
                } else {
                  this.scrollSlot("up");
                }
              },
              "shift+down": function () {
                this.moveTo(this.extendSlot(this, "down"));
              },
              "shift+up": function () {
                this.moveTo(this.extendSlot(this, "up"));
              },
              "shift+right": function () {
                this.moveTo(this.extendSlot(this, "right"));
              },
              "shift+left": function () {
                this.moveTo(this.extendSlot(this, "left"));
              },
              enter: function () {
                var v = {
                  start_date: new Date(this.start_date),
                  end_date: new Date(this.end_date)
                };
                var _ = a.getState().mode;
                if (a.matrix && a.matrix[_]) {
                  v[a.matrix[a.getState().mode].y_property] = this.section;
                } else if (a._props && a._props[_]) {
                  v[a._props[_].map_to] = this.section;
                }
                a.addEventNow(v);
              }
            }
          });
          a.$keyboardNavigation.TimeSlot.prototype.bindAll(a.$keyboardNavigation.TimeSlot.prototype.keys);
        })(t);
        (function (a) {
          a.$keyboardNavigation.MinicalButton = function (v, _) {
            this.container = v;
            this.index = _ || 0;
          };
          a.$keyboardNavigation.MinicalButton.prototype = a._compose(a.$keyboardNavigation.KeyNavNode, {
            isValid: function () {
              return !!this.container.offsetWidth;
            },
            fallback: function () {
              var v = new a.$keyboardNavigation.TimeSlot();
              if (v.isValid()) {
                return v;
              } else {
                return new a.$keyboardNavigation.DataArea();
              }
            },
            focus: function () {
              a.$keyboardNavigation.dispatcher.globalNode.disable();
              this.container.removeAttribute("tabindex");
              a.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
            },
            blur: function () {
              this.container.setAttribute("tabindex", "0");
              a.$keyboardNavigation.KeyNavNode.prototype.blur.apply(this);
            },
            getNode: function () {
              return this.container.querySelector(this.index ? ".dhx_cal_next_button" : ".dhx_cal_prev_button");
            },
            keys: {
              right: function (v) {
                this.moveTo(new a.$keyboardNavigation.MinicalButton(this.container, this.index ? 0 : 1));
              },
              left: function (v) {
                this.moveTo(new a.$keyboardNavigation.MinicalButton(this.container, this.index ? 0 : 1));
              },
              down: function () {
                var v = new a.$keyboardNavigation.MinicalCell(this.container, 0, 0);
                if (v && !v.isValid()) {
                  v = v.fallback();
                }
                this.moveTo(v);
              },
              enter: function (v) {
                this.getNode().click();
              }
            }
          });
          a.$keyboardNavigation.MinicalButton.prototype.bindAll(a.$keyboardNavigation.MinicalButton.prototype.keys);
        })(t);
        (function (a) {
          a.$keyboardNavigation.MinicalCell = function (v, _, i) {
            this.container = v;
            this.row = _ || 0;
            this.col = i || 0;
          };
          a.$keyboardNavigation.MinicalCell.prototype = a._compose(a.$keyboardNavigation.KeyNavNode, {
            isValid: function () {
              var v = this._getGrid();
              return !!v[this.row] && !!v[this.row][this.col];
            },
            fallback: function () {
              var v = this.row;
              var _ = this.col;
              var i = this._getGrid();
              if (!i[v]) {
                v = 0;
              }
              var o = true;
              if (v > i.length / 2) {
                o = false;
              }
              if (!i[v]) {
                var c = new a.$keyboardNavigation.TimeSlot();
                if (c.isValid()) {
                  return c;
                } else {
                  return new a.$keyboardNavigation.DataArea();
                }
              }
              if (o) {
                for (var h = _; i[v] && h < i[v].length; h++) {
                  if (!i[v][h] && h == i[v].length - 1) {
                    v++;
                    _ = 0;
                  }
                  if (i[v][h]) {
                    return new a.$keyboardNavigation.MinicalCell(this.container, v, h);
                  }
                }
              } else {
                for (h = _; i[v] && h < i[v].length; h--) {
                  if (!i[v][h] && !h) {
                    _ = i[--v].length - 1;
                  }
                  if (i[v][h]) {
                    return new a.$keyboardNavigation.MinicalCell(this.container, v, h);
                  }
                }
              }
              return new a.$keyboardNavigation.MinicalButton(this.container, 0);
            },
            focus: function () {
              a.$keyboardNavigation.dispatcher.globalNode.disable();
              this.container.removeAttribute("tabindex");
              a.$keyboardNavigation.KeyNavNode.prototype.focus.apply(this);
            },
            blur: function () {
              this.container.setAttribute("tabindex", "0");
              a.$keyboardNavigation.KeyNavNode.prototype.blur.apply(this);
            },
            _getNode: function (v, _) {
              return this.container.querySelector(".dhx_year_body tr:nth-child(" + (v + 1) + ") td:nth-child(" + (_ + 1) + ")");
            },
            getNode: function () {
              return this._getNode(this.row, this.col);
            },
            _getGrid: function () {
              for (var v = this.container.querySelectorAll(".dhx_year_body tr"), _ = [], i = 0; i < v.length; i++) {
                _[i] = [];
                for (var o = v[i].querySelectorAll("td"), c = 0; c < o.length; c++) {
                  var D = true;
                  var V = a._getClassName(o[c]);
                  if (V.indexOf("dhx_after") > -1 || V.indexOf("dhx_before") > -1 || V.indexOf("dhx_scale_ignore") > -1) {
                    D = false;
                  }
                  _[i][c] = D;
                }
              }
              return _;
            },
            keys: {
              right: function (v) {
                var _ = this._getGrid();
                var i = this.row;
                var o = this.col + 1;
                if (!_[i] || !_[i][o]) {
                  if (_[i + 1]) {
                    i += 1;
                    o = 0;
                  } else {
                    o = this.col;
                  }
                }
                var c = new a.$keyboardNavigation.MinicalCell(this.container, i, o);
                if (!c.isValid()) {
                  c = c.fallback();
                }
                this.moveTo(c);
              },
              left: function (v) {
                var _ = this._getGrid();
                var i = this.row;
                var o = this.col - 1;
                if (!_[i] || !_[i][o]) {
                  o = _[i - 1] ? _[i -= 1].length - 1 : this.col;
                }
                var c = new a.$keyboardNavigation.MinicalCell(this.container, i, o);
                if (!c.isValid()) {
                  c = c.fallback();
                }
                this.moveTo(c);
              },
              down: function () {
                var v = this._getGrid();
                var _ = this.row + 1;
                var i = this.col;
                if (!v[_] || !v[_][i]) {
                  _ = this.row;
                }
                var o = new a.$keyboardNavigation.MinicalCell(this.container, _, i);
                if (!o.isValid()) {
                  o = o.fallback();
                }
                this.moveTo(o);
              },
              up: function () {
                var v = this._getGrid();
                var _ = this.row - 1;
                var i = this.col;
                if (v[_] && v[_][i]) {
                  var o = new a.$keyboardNavigation.MinicalCell(this.container, _, i);
                  if (!o.isValid()) {
                    o = o.fallback();
                  }
                  this.moveTo(o);
                } else {
                  var c = 0;
                  if (this.col > v[this.row].length / 2) {
                    c = 1;
                  }
                  this.moveTo(new a.$keyboardNavigation.MinicalButton(this.container, c));
                }
              },
              enter: function (v) {
                this.getNode().querySelector(".dhx_month_head").click();
              }
            }
          });
          a.$keyboardNavigation.MinicalCell.prototype.bindAll(a.$keyboardNavigation.MinicalCell.prototype.keys);
        })(t);
        (function (a) {
          a.$keyboardNavigation.DataArea = function (v) {
            this.index = v || 0;
          };
          a.$keyboardNavigation.DataArea.prototype = a._compose(a.$keyboardNavigation.KeyNavNode, {
            getNode: function (v) {
              return a.$container.querySelector(".dhx_cal_data");
            },
            _handlers: null,
            isValid: function () {
              return true;
            },
            fallback: function () {
              return this;
            },
            keys: {
              "up,down,right,left": function () {
                this.moveTo(new a.$keyboardNavigation.TimeSlot());
              }
            }
          });
          a.$keyboardNavigation.DataArea.prototype.bindAll(a.$keyboardNavigation.DataArea.prototype.keys);
        })(t);
        (function (t) {
          (function () {
            var j = [];
            function a() {
              return !!j.length;
            }
            function v(h) {
              setTimeout(function () {
                if (!a() && !function (D, V) {
                  for (; D && D != V;) {
                    D = D.parentNode;
                  }
                  return D == V;
                }(document.activeElement, t.$container)) {
                  t.focus();
                }
              }, 1);
            }
            function _(h) {
              var D = (h = h || window.event).currentTarget;
              if (D == j[j.length - 1]) {
                t.$keyboardNavigation.trapFocus(D, h);
              }
            }
            t.attachEvent("onLightbox", function () {
              var h;
              h = t.getLightbox();
              t.eventRemove(h, "keydown", _);
              t.event(h, "keydown", _);
              j.push(h);
            });
            t.attachEvent("onAfterLightbox", function () {
              var h = j.pop();
              if (h) {
                t.eventRemove(h, "keydown", _);
              }
              v();
            });
            t.attachEvent("onAfterQuickInfo", function () {
              v();
            });
            if (!t._keyNavMessagePopup) {
              t._keyNavMessagePopup = true;
              var i = null;
              var o = null;
              var c = [];
              t.attachEvent("onMessagePopup", function (h) {
                i = document.activeElement;
                o = i;
                for (; o && t._getClassName(o).indexOf("dhx_cal_data") < 0;) {
                  o = o.parentNode;
                }
                o &&= o.parentNode;
                t.eventRemove(h, "keydown", _);
                t.event(h, "keydown", _);
                c.push(h);
              });
              t.attachEvent("onAfterMessagePopup", function () {
                var h = c.pop();
                if (h) {
                  t.eventRemove(h, "keydown", _);
                }
                setTimeout(function () {
                  for (var D = document.activeElement; D && t._getClassName(D).indexOf("dhx_cal_light") < 0;) {
                    D = D.parentNode;
                  }
                  if (!D) {
                    if (i && i.parentNode) {
                      i.focus();
                    } else if (o && o.parentNode) {
                      o.focus();
                    }
                    i = null;
                    o = null;
                  }
                }, 1);
              });
            }
            t.$keyboardNavigation.isModal = a;
          })();
        })(t);
        (function (a) {
          a.$keyboardNavigation.dispatcher = {
            isActive: false,
            activeNode: null,
            globalNode: new a.$keyboardNavigation.SchedulerNode(),
            keepScrollPosition: function (v) {
              var _;
              var i;
              var o = a.$container.querySelector(".dhx_timeline_scrollable_data");
              o ||= a.$container.querySelector(".dhx_cal_data");
              if (o) {
                _ = o.scrollTop;
                i = o.scrollLeft;
              }
              v();
              if (o) {
                o.scrollTop = _;
                o.scrollLeft = i;
              }
            },
            enable: function () {
              if (a.$container) {
                this.isActive = true;
                var v = this;
                this.keepScrollPosition(function () {
                  v.globalNode.enable();
                  v.setActiveNode(v.getActiveNode());
                });
              }
            },
            disable: function () {
              this.isActive = false;
              this.globalNode.disable();
            },
            isEnabled: function () {
              return !!this.isActive;
            },
            getDefaultNode: function () {
              return this.globalNode.getDefaultNode();
            },
            setDefaultNode: function () {
              this.setActiveNode(this.getDefaultNode());
            },
            getActiveNode: function () {
              var v = this.activeNode;
              if (v && !v.isValid()) {
                v = v.fallback();
              }
              return v;
            },
            focusGlobalNode: function () {
              this.blurNode(this.globalNode);
              this.focusNode(this.globalNode);
            },
            setActiveNode: function (v) {
              if (v && v.isValid()) {
                if (!this.activeNode || !this.activeNode.compareTo(v)) {
                  if (this.isEnabled()) {
                    this.blurNode(this.activeNode);
                    this.activeNode = v;
                    this.focusNode(this.activeNode);
                  }
                }
              }
            },
            focusNode: function (v) {
              if (v && v.focus) {
                v.focus();
                if (v.getNode && document.activeElement != v.getNode()) {
                  this.setActiveNode(new a.$keyboardNavigation.DataArea());
                }
              }
            },
            blurNode: function (v) {
              if (v && v.blur) {
                v.blur();
              }
            },
            getInlineEditor: function (v) {
              var _ = a.$container.querySelector(".dhx_cal_editor[" + a.config.event_attribute + "='" + v + "'] textarea");
              if (_ && _.offsetWidth) {
                return _;
              } else {
                return null;
              }
            },
            keyDownHandler: function (v) {
              if (!v.defaultPrevented) {
                var _ = this.getActiveNode();
                if ((!a.$keyboardNavigation.isModal() || _ && _.container && a.utils.dom.locateCss({
                  target: _.container
                }, "dhx_minical_popup", false)) && (!a.getState().editor_id || !this.getInlineEditor(a.getState().editor_id)) && this.isEnabled()) {
                  v = v || window.event;
                  var i = this.globalNode;
                  var o = a.$keyboardNavigation.shortcuts.getCommandFromEvent(v);
                  if (_) {
                    if (_.findHandler(o)) {
                      _.doAction(o, v);
                    } else if (i.findHandler(o)) {
                      i.doAction(o, v);
                    }
                  } else {
                    this.setDefaultNode();
                  }
                }
              }
            },
            _timeout: null,
            delay: function (v, _) {
              clearTimeout(this._timeout);
              this._timeout = setTimeout(v, _ || 1);
            }
          };
        })(t);
        (function (t) {
          t._temp_key_scope = function () {
            t.config.key_nav = true;
            t.$keyboardNavigation._pasteDate = null;
            t.$keyboardNavigation._pasteSection = null;
            var j = null;
            var a = {};
            function v(o) {
              o = o || window.event;
              a.x = o.clientX;
              a.y = o.clientY;
            }
            function _() {
              for (var o, c, h = document.elementFromPoint(a.x, a.y); h && h != t._obj;) {
                h = h.parentNode;
              }
              o = h == t._obj;
              c = t.$keyboardNavigation.dispatcher.isEnabled();
              return o || c;
            }
            function i(o) {
              return t._lame_copy({}, o);
            }
            if (document.body) {
              t.event(document.body, "mousemove", v);
            } else {
              t.event(window, "load", function () {
                t.event(document.body, "mousemove", v);
              });
            }
            t.attachEvent("onMouseMove", function (o, c) {
              var h = t.getState();
              if (h.mode && h.min_date) {
                var D = t.getActionData(c);
                t.$keyboardNavigation._pasteDate = D.date;
                t.$keyboardNavigation._pasteSection = D.section;
              }
            });
            t._make_pasted_event = function (o) {
              var W;
              var c = t.$keyboardNavigation._pasteDate;
              var h = t.$keyboardNavigation._pasteSection;
              var D = o.end_date - o.start_date;
              var V = i(o);
              delete (W = V).rec_type;
              delete W.rec_pattern;
              delete W.event_pid;
              delete W.event_length;
              V.start_date = new Date(c);
              V.end_date = new Date(V.start_date.valueOf() + D);
              if (h) {
                var T = t._get_section_property();
                V[T] = t.config.multisection ? o[T] : h;
              }
              return V;
            };
            t._do_paste = function (o, c, h) {
              if (t.callEvent("onBeforeEventPasted", [o, c, h]) !== false) {
                t.addEvent(c);
                t.callEvent("onEventPasted", [o, c, h]);
              }
            };
            t._is_key_nav_active = function () {
              return !!this._is_initialized() && !this._is_lightbox_open() && !!this.config.key_nav;
            };
            t.event(document, "keydown", function (o) {
              if ((o.ctrlKey || o.metaKey) && o.keyCode == 86 && t._buffer_event && !t.$keyboardNavigation.dispatcher.isEnabled()) {
                t.$keyboardNavigation.dispatcher.isActive = _();
              }
            });
            t._key_nav_copy_paste = function (o) {
              if (!t._is_key_nav_active()) {
                return true;
              }
              if (o.keyCode == 37 || o.keyCode == 39) {
                o.cancelBubble = true;
                var c = t.date.add(t._date, o.keyCode == 37 ? -1 : 1, t._mode);
                t.setCurrentView(c);
                return true;
              }
              var T;
              var h = (T = t.$keyboardNavigation.dispatcher.getActiveNode()) && T.eventId ? T.eventId : t._select_id;
              if ((o.ctrlKey || o.metaKey) && o.keyCode == 67) {
                if (h) {
                  t._buffer_event = i(t.getEvent(h));
                  j = true;
                  t.callEvent("onEventCopied", [t.getEvent(h)]);
                }
                return true;
              }
              if ((o.ctrlKey || o.metaKey) && o.keyCode == 88 && h) {
                j = false;
                var D = t._buffer_event = i(t.getEvent(h));
                t.updateEvent(D.id);
                t.callEvent("onEventCut", [D]);
              }
              if ((o.ctrlKey || o.metaKey) && o.keyCode == 86 && _()) {
                if (D = (D = t._buffer_event ? t.getEvent(t._buffer_event.id) : t._buffer_event) || t._buffer_event) {
                  var V = t._make_pasted_event(D);
                  if (j) {
                    V.id = t.uid();
                    t._do_paste(j, V, D);
                  } else if (t.callEvent("onBeforeEventChanged", [V, o, false, D])) {
                    t._do_paste(j, V, D);
                    j = true;
                  }
                }
                return true;
              }
            };
          };
          t._temp_key_scope();
        })(t);
        (function () {
          var o;
          (function (t) {
            t.$keyboardNavigation.attachSchedulerHandlers = function () {
              var j;
              var a = t.$keyboardNavigation.dispatcher;
              function v(h) {
                if (t.config.key_nav) {
                  return a.keyDownHandler(h);
                }
              }
              function _() {
                a.keepScrollPosition(function () {
                  a.focusGlobalNode();
                });
              }
              t.attachEvent("onDataRender", function () {
                if (t.config.key_nav && a.isEnabled() && !t.getState().editor_id) {
                  clearTimeout(j);
                  j = setTimeout(function () {
                    if (!a.isEnabled()) {
                      a.enable();
                    }
                    i();
                  });
                }
              });
              function i() {
                if (a.isEnabled()) {
                  var h = a.getActiveNode();
                  if (h) {
                    if (!h.isValid()) {
                      h = h.fallback();
                    }
                    if (!!h && !(h instanceof t.$keyboardNavigation.MinicalButton) && !(h instanceof t.$keyboardNavigation.MinicalCell)) {
                      a.keepScrollPosition(function () {
                        h.focus(true);
                      });
                    }
                  }
                }
              }
              function o(h) {
                if (!t.config.key_nav) {
                  return true;
                }
                var D;
                var V = t.$keyboardNavigation.isChildOf(h.target || h.srcElement, t.$container.querySelector(".dhx_cal_data"));
                var T = t.getActionData(h);
                if (t._locate_event(h.target || h.srcElement)) {
                  D = new t.$keyboardNavigation.Event(t._locate_event(h.target || h.srcElement));
                } else if (V) {
                  D = new t.$keyboardNavigation.TimeSlot();
                  if (T.date && V) {
                    D = D.nextSlot(new t.$keyboardNavigation.TimeSlot(T.date, null, T.section));
                  }
                }
                if (D) {
                  if (a.isEnabled()) {
                    if (T.date && V) {
                      a.delay(function () {
                        a.setActiveNode(D);
                      });
                    }
                  } else {
                    a.activeNode = D;
                  }
                }
              }
              t.attachEvent("onSchedulerReady", function () {
                var h = t.$container;
                t.eventRemove(document, "keydown", v);
                t.eventRemove(h, "mousedown", o);
                t.eventRemove(h, "focus", _);
                if (t.config.key_nav) {
                  t.event(document, "keydown", v);
                  t.event(h, "mousedown", o);
                  t.event(h, "focus", _);
                  h.setAttribute("tabindex", "0");
                } else {
                  h.removeAttribute("tabindex");
                }
              });
              var c = t.updateEvent;
              t.updateEvent = function (h) {
                var D = c.apply(this, arguments);
                if (t.config.key_nav && a.isEnabled() && t.getState().select_id == h) {
                  var V = new t.$keyboardNavigation.Event(h);
                  if (!t.getState().lightbox_id) {
                    (function (T) {
                      if (t.config.key_nav && a.isEnabled()) {
                        var W = T;
                        var z = new t.$keyboardNavigation.Event(W.eventId);
                        if (!z.isValid() && !(z = new t.$keyboardNavigation.TimeSlot(z.start || W.start, z.end || W.end, z.section || W.section)).isValid()) {
                          z = new t.$keyboardNavigation.TimeSlot();
                        }
                        a.setActiveNode(z);
                        var _e = a.getActiveNode();
                        if (_e && _e.getNode && document.activeElement != _e.getNode()) {
                          a.focusNode(a.getActiveNode());
                        }
                      }
                    })(V);
                  }
                }
                return D;
              };
              t.attachEvent("onEventDeleted", function (h) {
                if (t.config.key_nav && a.isEnabled() && a.getActiveNode().eventId == h) {
                  a.setActiveNode(new t.$keyboardNavigation.TimeSlot());
                }
                return true;
              });
              t.attachEvent("onClearAll", function () {
                if (!t.config.key_nav) {
                  return true;
                }
                if (a.isEnabled() && a.getActiveNode() instanceof t.$keyboardNavigation.Event) {
                  a.setActiveNode(new t.$keyboardNavigation.TimeSlot());
                }
              });
            };
          })(t);
          (o = t).$keyboardNavigation._minicalendars = [];
          o.$keyboardNavigation.isMinical = function (c) {
            for (var h = o.$keyboardNavigation._minicalendars, D = 0; D < h.length; D++) {
              if (this.isChildOf(c, h[D])) {
                return true;
              }
            }
            return false;
          };
          o.$keyboardNavigation.isChildOf = function (c, h) {
            for (; c && c !== h;) {
              c = c.parentNode;
            }
            return c === h;
          };
          o.$keyboardNavigation.patchMinicalendar = function () {
            var c = o.$keyboardNavigation.dispatcher;
            function h(W) {
              var z = W.target;
              c.enable();
              c.setActiveNode(new o.$keyboardNavigation.MinicalButton(z, 0));
            }
            function D(W) {
              var z = W.target || W.srcElement;
              var Z = o.utils.dom.locateCss(W, "dhx_cal_prev_button", false);
              var re = o.utils.dom.locateCss(W, "dhx_cal_next_button", false);
              var oe = o.utils.dom.locateCss(W, "dhx_year_body", false);
              var _e = 0;
              var he = 0;
              if (oe) {
                for (var be, Ae, He = z; He && He.tagName.toLowerCase() != "td";) {
                  He = He.parentNode;
                }
                if (He) {
                  be = (Ae = He).parentNode;
                }
                if (be && Ae) {
                  for (var Ne = be.parentNode.querySelectorAll("tr"), Ve = 0; Ve < Ne.length; Ve++) {
                    if (Ne[Ve] == be) {
                      _e = Ve;
                      break;
                    }
                  }
                  var Se = be.querySelectorAll("td");
                  for (Ve = 0; Ve < Se.length; Ve++) {
                    if (Se[Ve] == Ae) {
                      he = Ve;
                      break;
                    }
                  }
                }
              }
              var Fe = W.currentTarget;
              c.delay(function () {
                var Oe;
                if (Z || re || oe) {
                  if (Z) {
                    Oe = new o.$keyboardNavigation.MinicalButton(Fe, 0);
                    c.setActiveNode(new o.$keyboardNavigation.MinicalButton(Fe, 0));
                  } else if (re) {
                    Oe = new o.$keyboardNavigation.MinicalButton(Fe, 1);
                  } else if (oe) {
                    Oe = new o.$keyboardNavigation.MinicalCell(Fe, _e, he);
                  }
                  if (Oe) {
                    c.enable();
                    if (Oe.isValid()) {
                      c.activeNode = null;
                      c.setActiveNode(Oe);
                    }
                  }
                }
              });
            }
            if (o.renderCalendar) {
              var V = o.renderCalendar;
              o.renderCalendar = function () {
                var W = V.apply(this, arguments);
                var z = o.$keyboardNavigation._minicalendars;
                o.eventRemove(W, "click", D);
                o.event(W, "click", D);
                o.eventRemove(W, "focus", h);
                o.event(W, "focus", h);
                for (var Z = false, re = 0; re < z.length; re++) {
                  if (z[re] == W) {
                    Z = true;
                    break;
                  }
                }
                if (!Z) {
                  z.push(W);
                }
                if (c.isEnabled()) {
                  var oe = c.getActiveNode();
                  if (oe && oe.container == W) {
                    c.focusNode(oe);
                  } else {
                    W.setAttribute("tabindex", "0");
                  }
                } else {
                  W.setAttribute("tabindex", "0");
                }
                return W;
              };
            }
            if (o.destroyCalendar) {
              var T = o.destroyCalendar;
              o.destroyCalendar = function (W, z) {
                W = W || (o._def_count ? o._def_count.firstChild : null);
                var Z = T.apply(this, arguments);
                if (!W || !W.parentNode) {
                  for (var re = o.$keyboardNavigation._minicalendars, oe = 0; oe < re.length; oe++) {
                    if (re[oe] == W) {
                      o.eventRemove(re[oe], "focus", h);
                      re.splice(oe, 1);
                      oe--;
                    }
                  }
                }
                return Z;
              };
            }
          };
          var a = t.$keyboardNavigation.dispatcher;
          t.$keyboardNavigation.attachSchedulerHandlers();
          if (t.renderCalendar) {
            t.$keyboardNavigation.patchMinicalendar();
          } else {
            var v = t.attachEvent("onSchedulerReady", function () {
              t.detachEvent(v);
              t.$keyboardNavigation.patchMinicalendar();
            });
          }
          function _() {
            if (t.config.key_nav) {
              var o = document.activeElement;
              return !!o && !t.utils.dom.locateCss(o, "dhx_cal_quick_info", false) && (t.$keyboardNavigation.isChildOf(o, t.$container) || t.$keyboardNavigation.isMinical(o));
            }
          }
          function i(o) {
            if (o && !a.isEnabled()) {
              a.enable();
            } else if (!o && a.isEnabled()) {
              a.disable();
            }
          }
          setInterval(function () {
            if (t.$container && t.$keyboardNavigation.isChildOf(t.$container, document.body)) {
              var o = _();
              if (o) {
                i(o);
              } else if (!o && a.isEnabled()) {
                setTimeout(function () {
                  if (t.config.key_nav) {
                    i(_());
                  } else {
                    t.$container.removeAttribute("tabindex");
                  }
                }, 100);
              }
            }
          }, 500);
        })();
      },
      layer: function (t) {
        t.attachEvent("onTemplatesReady", function () {
          this.layers.sort(function (a, v) {
            return a.zIndex - v.zIndex;
          });
          t._dp_init = function (a) {
            a._methods = ["_set_event_text_style", "", "changeEventId", "deleteEvent"];
            this.attachEvent("onEventAdded", function (v) {
              if (!this._loading && this.validId(v) && this.getEvent(v) && this.getEvent(v).layer == a.layer) {
                a.setUpdated(v, true, "inserted");
              }
            });
            this.attachEvent("onBeforeEventDelete", function (v) {
              if (this.getEvent(v) && this.getEvent(v).layer == a.layer) {
                if (!this.validId(v)) {
                  return;
                }
                var _ = a.getState(v);
                if (_ == "inserted" || this._new_event) {
                  a.setUpdated(v, false);
                  return true;
                } else {
                  return _ != "deleted" && (_ == "true_deleted" || (a.setUpdated(v, true, "deleted"), false));
                }
              }
              return true;
            });
            this.attachEvent("onEventChanged", function (v) {
              if (!this._loading && this.validId(v) && this.getEvent(v) && this.getEvent(v).layer == a.layer) {
                a.setUpdated(v, true, "updated");
              }
            });
            a._getRowData = function (v, _) {
              var i = this.obj.getEvent(v);
              var o = {};
              for (var c in i) {
                if (c.indexOf("_") !== 0) {
                  o[c] = i[c] && i[c].getUTCFullYear ? this.obj._helpers.formatDate(i[c]) : i[c];
                }
              }
              return o;
            };
            a._clearUpdateFlag = function () {};
            a.attachEvent("insertCallback", t._update_callback);
            a.attachEvent("updateCallback", t._update_callback);
            a.attachEvent("deleteCallback", function (v, _) {
              this.obj.setUserData(_, this.action_param, "true_deleted");
              this.obj.deleteEvent(_);
            });
          };
          (function () {
            var a = function i(o) {
              if (o === null || _t(o) != "object") {
                return o;
              }
              var c = new o.constructor();
              for (var h in o) {
                c[h] = i(o[h]);
              }
              return c;
            };
            t._dataprocessors = [];
            t._layers_zindex = {};
            for (var v = 0; v < t.layers.length; v++) {
              t.config["lightbox_" + t.layers[v].name] = {};
              t.config["lightbox_" + t.layers[v].name].sections = a(t.config.lightbox.sections);
              t._layers_zindex[t.layers[v].name] = t.config.initial_layer_zindex || 5 + v * 3;
              if (t.layers[v].url) {
                var _ = t.createDataProcessor({
                  url: t.layers[v].url
                });
                _.layer = t.layers[v].name;
                t._dataprocessors.push(_);
                t._dataprocessors[v].init(t);
              }
              if (t.layers[v].isDefault) {
                t.defaultLayer = t.layers[v].name;
              }
            }
          })();
          t.showLayer = function (a) {
            this.toggleLayer(a, true);
          };
          t.hideLayer = function (a) {
            this.toggleLayer(a, false);
          };
          t.toggleLayer = function (a, v) {
            var _ = this.getLayer(a);
            _.visible = v !== undefined ? !!v : !_.visible;
            this.setCurrentView(this._date, this._mode);
          };
          t.getLayer = function (a) {
            var v;
            var _;
            if (typeof a == "string") {
              _ = a;
            }
            if (_t(a) == "object") {
              _ = a.layer;
            }
            for (var i = 0; i < t.layers.length; i++) {
              if (t.layers[i].name == _) {
                v = t.layers[i];
              }
            }
            return v;
          };
          t.attachEvent("onBeforeLightbox", function (a) {
            var v = this.getEvent(a);
            this.config.lightbox.sections = this.config["lightbox_" + v.layer].sections;
            t.resetLightbox();
            return true;
          });
          t.attachEvent("onClick", function (a, v) {
            var _ = t.getEvent(a);
            return !t.getLayer(_.layer).noMenu;
          });
          t.attachEvent("onEventCollision", function (a, v) {
            var _ = this.getLayer(a);
            if (!_.checkCollision) {
              return false;
            }
            for (var i = 0, o = 0; o < v.length; o++) {
              if (v[o].layer == _.name && v[o].id != a.id) {
                i++;
              }
            }
            return i >= t.config.collision_limit;
          });
          t.addEvent = function (a, v, _, i, o) {
            var c = a;
            if (arguments.length != 1) {
              (c = o || {}).start_date = a;
              c.end_date = v;
              c.text = _;
              c.id = i;
              c.layer = this.defaultLayer;
            }
            c.id = c.id || t.uid();
            c.text = c.text || "";
            if (typeof c.start_date == "string") {
              c.start_date = this.templates.api_date(c.start_date);
            }
            if (typeof c.end_date == "string") {
              c.end_date = this.templates.api_date(c.end_date);
            }
            c._timed = this.isOneDayEvent(c);
            var h = !this._events[c.id];
            this._events[c.id] = c;
            this.event_updated(c);
            if (!this._loading) {
              this.callEvent(h ? "onEventAdded" : "onEventChanged", [c.id, c]);
            }
          };
          this._evs_layer = {};
          for (var j = 0; j < this.layers.length; j++) {
            this._evs_layer[this.layers[j].name] = [];
          }
          t.addEventNow = function (a, v, _) {
            var i = {};
            if (_t(a) == "object") {
              i = a;
              a = null;
            }
            var o = (this.config.event_duration || this.config.time_step) * 60000;
            a ||= Math.round(t._currentDate().valueOf() / o) * o;
            var c = new Date(a);
            if (!v) {
              var h = this.config.first_hour;
              if (h > c.getHours()) {
                c.setHours(h);
                a = c.valueOf();
              }
              v = a + o;
            }
            i.start_date = i.start_date || c;
            i.end_date = i.end_date || new Date(v);
            i.text = i.text || this.locale.labels.new_event;
            i.id = this._drag_id = this.uid();
            i.layer = this.defaultLayer;
            this._drag_mode = "new-size";
            this._loading = true;
            this.addEvent(i);
            this.callEvent("onEventCreated", [this._drag_id, _]);
            this._loading = false;
            this._drag_event = {};
            this._on_mouse_up(_);
          };
          t._t_render_view_data = function (a) {
            if (this.config.multi_day && !this._table_view) {
              for (var v = [], _ = [], i = 0; i < a.length; i++) {
                if (a[i]._timed) {
                  v.push(a[i]);
                } else {
                  _.push(a[i]);
                }
              }
              this._table_view = true;
              this.render_data(_);
              this._table_view = false;
              this.render_data(v);
            } else {
              this.render_data(a);
            }
          };
          t.render_view_data = function () {
            if (this._not_render) {
              this._render_wait = true;
            } else {
              this._render_wait = false;
              this.clear_view();
              this._evs_layer = {};
              for (var a = 0; a < this.layers.length; a++) {
                this._evs_layer[this.layers[a].name] = [];
              }
              var v = this.get_visible_events();
              for (a = 0; a < v.length; a++) {
                if (this._evs_layer[v[a].layer]) {
                  this._evs_layer[v[a].layer].push(v[a]);
                }
              }
              if (this._mode == "month") {
                var _ = [];
                for (a = 0; a < this.layers.length; a++) {
                  if (this.layers[a].visible) {
                    _ = _.concat(this._evs_layer[this.layers[a].name]);
                  }
                }
                this._t_render_view_data(_);
              } else {
                for (a = 0; a < this.layers.length; a++) {
                  if (this.layers[a].visible) {
                    this._t_render_view_data(this._evs_layer[this.layers[a].name]);
                  }
                }
              }
            }
          };
          t._render_v_bar = function (a, v, _, i, o, c, h, D, V) {
            var T = a.id;
            if (h.indexOf("<div class=") == -1) {
              h = t.templates["event_header_" + a.layer] ? t.templates["event_header_" + a.layer](a.start_date, a.end_date, a) : h;
            }
            if (D.indexOf("<div class=") == -1) {
              D = t.templates["event_text_" + a.layer] ? t.templates["event_text_" + a.layer](a.start_date, a.end_date, a) : D;
            }
            var W = document.createElement("div");
            var z = "dhx_cal_event";
            var Z = t.templates["event_class_" + a.layer] ? t.templates["event_class_" + a.layer](a.start_date, a.end_date, a) : t.templates.event_class(a.start_date, a.end_date, a);
            if (Z) {
              z = z + " " + Z;
            }
            var re = t._border_box_events();
            var oe = i - 2;
            var Ne = "<div event_id=\"" + T + "\" " + t.config.event_attribute + "=\"" + T + "\" class=\"" + z + "\" style=\"position:absolute; top:" + _ + "px; left:" + v + "px; width:" + (re ? oe : i - 4) + "px; height:" + o + "px;" + (c || "") + "\">";
            Ne += "<div class=\"dhx_header\" style=\" width:" + (re ? oe : i - 6) + "px;\" >&nbsp;</div>";
            Ne += "<div class=\"dhx_title\">" + h + "</div>";
            Ne += "<div class=\"dhx_body\" style=\" width:" + (re ? oe : i - (this._quirks ? 4 : 14)) + "px; height:" + (re ? o - this.xy.event_header_height : o - (this._quirks ? 20 : 30) + 1) + "px;\">" + D + "</div>";
            W.innerHTML = Ne += "<div class=\"dhx_footer\" style=\" width:" + (re ? oe - 2 : i - 8) + "px;" + (V ? " margin-top:-1px;" : "") + "\" ></div></div>";
            W.style.zIndex = 100;
            return W.firstChild;
          };
          t.render_event_bar = function (a) {
            var v = this._els.dhx_cal_data[0];
            var _ = this._colsS[a._sday];
            var i = this._colsS[a._eday];
            if (i == _) {
              i = this._colsS[a._eday + 1];
            }
            var c = this._colsS.heights[a._sweek] + (this._colsS.height ? this.xy.month_scale_height + 2 : 2) + a._sorder * this.xy.bar_height;
            var h = document.createElement("div");
            var D = a._timed ? "dhx_cal_event_clear" : "dhx_cal_event_line";
            var V = t.templates["event_class_" + a.layer] ? t.templates["event_class_" + a.layer](a.start_date, a.end_date, a) : t.templates.event_class(a.start_date, a.end_date, a);
            if (V) {
              D = D + " " + V;
            }
            var T = "<div event_id=\"" + a.id + "\" " + this.config.event_attribute + "=\"" + a.id + "\" class=\"" + D + "\" style=\"position:absolute; top:" + c + "px; left:" + _ + "px; width:" + (i - _ - 15) + "px;" + (a._text_style || "") + "\">";
            if (a._timed) {
              T += t.templates["event_bar_date_" + a.layer] ? t.templates["event_bar_date_" + a.layer](a.start_date, a.end_date, a) : t.templates.event_bar_date(a.start_date, a.end_date, a);
            }
            T += t.templates["event_bar_text_" + a.layer] ? t.templates["event_bar_text_" + a.layer](a.start_date, a.end_date, a) : t.templates.event_bar_text(a.start_date, a.end_date, a) + "</div>)";
            h.innerHTML = T += "</div>";
            this._rendered.push(h.firstChild);
            v.appendChild(h.firstChild);
          };
          t.render_event = function (a) {
            var v = t.xy.menu_width;
            if (t.getLayer(a.layer).noMenu) {
              v = 0;
            }
            if (a._sday >= 0) {
              var _ = t.locate_holder(a._sday);
              if (_) {
                var i = a.start_date.getHours() * 60 + a.start_date.getMinutes();
                var o = a.end_date.getHours() * 60 + a.end_date.getMinutes() || t.config.last_hour * 60;
                var c = Math.round((i * 60 * 1000 - this.config.first_hour * 60 * 60 * 1000) * this.config.hour_size_px / 3600000) % (this.config.hour_size_px * 24) + 1;
                var h = Math.max(t.xy.min_event_height, (o - i) * this.config.hour_size_px / 60) + 1;
                var D = Math.floor((_.clientWidth - v) / a._count);
                var V = a._sorder * D + 1;
                if (!a._inner) {
                  D *= a._count - a._sorder;
                }
                var T = this._render_v_bar(a.id, v + V, c, D, h, a._text_style, t.templates.event_header(a.start_date, a.end_date, a), t.templates.event_text(a.start_date, a.end_date, a));
                this._rendered.push(T);
                _.appendChild(T);
                V = V + parseInt(_.style.left, 10) + v;
                c += this._dy_shift;
                T.style.zIndex = this._layers_zindex[a.layer];
                if (this._edit_id == a.id) {
                  T.style.zIndex = parseInt(T.style.zIndex) + 1;
                  var W = T.style.zIndex;
                  D = Math.max(D - 4, t.xy.editor_width);
                  (T = document.createElement("div")).setAttribute("event_id", a.id);
                  T.setAttribute(this.config.event_attribute, a.id);
                  this.set_xy(T, D, h - 20, V, c + 14);
                  T.className = "dhx_cal_editor";
                  T.style.zIndex = W;
                  var z = document.createElement("div");
                  this.set_xy(z, D - 6, h - 26);
                  z.style.cssText += ";margin:2px 2px 2px 2px;overflow:hidden;";
                  z.style.zIndex = W;
                  T.appendChild(z);
                  this._els.dhx_cal_data[0].appendChild(T);
                  this._rendered.push(T);
                  z.innerHTML = "<textarea class='dhx_cal_editor'>" + a.text + "</textarea>";
                  if (this._quirks7) {
                    z.firstChild.style.height = h - 12 + "px";
                  }
                  this._editor = z.firstChild;
                  this._editor.addEventListener("keypress", function (he) {
                    if (he.shiftKey) {
                      return true;
                    }
                    var be = he.keyCode;
                    if (be == t.keys.edit_save) {
                      t.editStop(true);
                    }
                    if (be == t.keys.edit_cancel) {
                      t.editStop(false);
                    }
                  });
                  this._editor.addEventListener("selectstart", function (he) {
                    he.cancelBubble = true;
                    return true;
                  });
                  z.firstChild.focus();
                  this._els.dhx_cal_data[0].scrollLeft = 0;
                  z.firstChild.select();
                }
                if (this._select_id == a.id) {
                  T.style.zIndex = parseInt(T.style.zIndex) + 1;
                  for (var Z = this.config["icons_" + (this._edit_id == a.id ? "edit" : "select")], re = "", oe = 0; oe < Z.length; oe++) {
                    re += "<div class='dhx_menu_icon " + Z[oe] + "' title='" + this.locale.labels[Z[oe]] + "'></div>";
                  }
                  var _e = this._render_v_bar(a.id, V - v + 1, c, v, Z.length * 20 + 26, "", "<div class='dhx_menu_head'></div>", re, true);
                  _e.style.left = V - v + 1;
                  _e.style.zIndex = T.style.zIndex;
                  this._els.dhx_cal_data[0].appendChild(_e);
                  this._rendered.push(_e);
                }
              }
            }
          };
          t.filter_agenda = function (a, v) {
            var _ = t.getLayer(v.layer);
            return _ && _.visible;
          };
        });
      },
      limit: function (t) {
        t.config.limit_start = null;
        t.config.limit_end = null;
        t.config.limit_view = false;
        t.config.check_limits = true;
        t.config.mark_now = true;
        t.config.display_marked_timespans = true;
        t.config.overwrite_marked_timespans = true;
        t._temp_limit_scope = function () {
          var j = null;
          function a(i, o, c) {
            var D;
            var V;
            var T;
            var h = kt(i) == "object" ? i : {
              days: i
            };
            h.type = "dhx_time_block";
            h.css = "";
            if (o) {
              if (c) {
                h.sections = c;
              }
              D = h;
              T = o;
              if ((V = i) instanceof Date && T instanceof Date) {
                D.start_date = V;
                D.end_date = T;
              } else {
                D.days = V;
                D.zones = T;
              }
              h = D;
            }
            return h;
          }
          t.blockTime = function (i, o, c) {
            var h = a(i, o, c);
            return t.addMarkedTimespan(h);
          };
          t.unblockTime = function (i, o, c) {
            var h = a(i, o = o || "fullday", c);
            return t.deleteMarkedTimespan(h);
          };
          t.attachEvent("onBeforeViewChange", function (i, o, c, h) {
            function D(V, T) {
              var W = t.config.limit_start;
              var z = t.config.limit_end;
              var Z = t.date.add(V, 1, T);
              return V.valueOf() > z.valueOf() || Z <= W.valueOf();
            }
            return !t.config.limit_view || !D(h = h || o, c = c || i) || o.valueOf() == h.valueOf() || (setTimeout(function () {
              var V = D(o, c) ? t.config.limit_start : o;
              t.setCurrentView(D(V, c) ? null : V, c);
            }, 1), false);
          });
          t.checkInMarkedTimespan = function (i, o, c) {
            o = o || "default";
            for (var h = true, D = new Date(i.start_date.valueOf()), V = t.date.add(D, 1, "day"), T = t._marked_timespans; D < i.end_date; D = t.date.date_part(V), V = t.date.add(D, 1, "day")) {
              var W = +t.date.date_part(new Date(D));
              var z = _(i, T, D.getDay(), W, o);
              if (z) {
                for (var Z = 0; Z < z.length; Z += 2) {
                  var re = t._get_zone_minutes(D);
                  var oe = i.end_date > V || i.end_date.getDate() != D.getDate() ? 1440 : t._get_zone_minutes(i.end_date);
                  var _e = z[Z];
                  var he = z[Z + 1];
                  if (_e < oe && he > re && !(h = typeof c == "function" && c(i, re, oe, _e, he))) {
                    break;
                  }
                }
              }
            }
            return !h;
          };
          var v = t.checkLimitViolation = function (i) {
            if (!i || !t.config.check_limits) {
              return true;
            }
            var o = t;
            var c = o.config;
            var h = [];
            if (i.rec_type) {
              for (var D = t.getRecDates(i), V = 0; V < D.length; V++) {
                var T = t._copy_event(i);
                t._lame_copy(T, D[V]);
                h.push(T);
              }
            } else {
              h = [i];
            }
            for (var W = true, z = 0; z < h.length; z++) {
              var Z = true;
              (T = h[z])._timed = t.isOneDayEvent(T);
              if (Z = !c.limit_start || !c.limit_end || T.start_date.valueOf() >= c.limit_start.valueOf() && T.end_date.valueOf() <= c.limit_end.valueOf()) {
                Z = !t.checkInMarkedTimespan(T, "dhx_time_block", function (re, oe, _e, he, be) {
                  var Ae = true;
                  if (oe <= be && oe >= he) {
                    if (be == 1440 || _e <= be) {
                      Ae = false;
                    }
                    if (re._timed && o._drag_id && o._drag_mode == "new-size") {
                      re.start_date.setHours(0);
                      re.start_date.setMinutes(be);
                    } else {
                      Ae = false;
                    }
                  }
                  if (_e >= he && _e <= be || oe < he && _e > be) {
                    if (re._timed && o._drag_id && o._drag_mode == "new-size") {
                      re.end_date.setHours(0);
                      re.end_date.setMinutes(he);
                    } else {
                      Ae = false;
                    }
                  }
                  return Ae;
                });
              }
              Z ||= o.checkEvent("onLimitViolation") ? o.callEvent("onLimitViolation", [T.id, T]) : Z;
              W = W && Z;
            }
            if (!W) {
              o._drag_id = null;
              o._drag_mode = null;
            }
            return W;
          };
          function _(i, o, c, h, D) {
            var V = t;
            var T = [];
            var W = {
              _props: "map_to",
              matrix: "y_property"
            };
            for (var z in W) {
              var Z = W[z];
              if (V[z]) {
                for (var re in V[z]) {
                  var oe = V[z][re][Z];
                  if (i[oe]) {
                    T = V._add_timespan_zones(T, t._get_blocked_zones(o[re], i[oe], c, h, D));
                  }
                }
              }
            }
            return V._add_timespan_zones(T, t._get_blocked_zones(o, "global", c, h, D));
          }
          t._get_blocked_zones = function (i, o, c, h, D) {
            var V = [];
            if (i && i[o]) {
              for (var W = this._get_relevant_blocked_zones(c, h, i[o], D), z = 0; z < W.length; z++) {
                V = this._add_timespan_zones(V, W[z].zones);
              }
            }
            return V;
          };
          t._get_relevant_blocked_zones = function (i, o, c, h) {
            var D;
            if (t.config.overwrite_marked_timespans) {
              D = c[o] && c[o][h] ? c[o][h] : c[i] && c[i][h] ? c[i][h] : [];
            } else {
              D = [];
              if (c[o] && c[o][h]) {
                D = D.concat(c[o][h]);
              }
              if (c[i] && c[i][h]) {
                D = D.concat(c[i][h]);
              }
            }
            return D;
          };
          t.attachEvent("onMouseDown", function (i) {
            return i != "dhx_time_block";
          });
          t.attachEvent("onBeforeDrag", function (i) {
            return !i || v(t.getEvent(i));
          });
          t.attachEvent("onClick", function (i, o) {
            return v(t.getEvent(i));
          });
          t.attachEvent("onBeforeLightbox", function (i) {
            var o = t.getEvent(i);
            j = [o.start_date, o.end_date];
            return v(o);
          });
          t.attachEvent("onEventSave", function (i, o, c) {
            if (!o.start_date || !o.end_date) {
              var h = t.getEvent(i);
              o.start_date = new Date(h.start_date);
              o.end_date = new Date(h.end_date);
            }
            if (o.rec_type) {
              var D = t._lame_clone(o);
              t._roll_back_dates(D);
              return v(D);
            }
            return v(o);
          });
          t.attachEvent("onEventAdded", function (i) {
            if (!i) {
              return true;
            }
            var o = t.getEvent(i);
            if (!v(o) && t.config.limit_start && t.config.limit_end) {
              if (o.start_date < t.config.limit_start) {
                o.start_date = new Date(t.config.limit_start);
              }
              if (o.start_date.valueOf() >= t.config.limit_end.valueOf()) {
                o.start_date = this.date.add(t.config.limit_end, -1, "day");
              }
              if (o.end_date < t.config.limit_start) {
                o.end_date = new Date(t.config.limit_start);
              }
              if (o.end_date.valueOf() >= t.config.limit_end.valueOf()) {
                o.end_date = this.date.add(t.config.limit_end, -1, "day");
              }
              if (o.start_date.valueOf() >= o.end_date.valueOf()) {
                o.end_date = this.date.add(o.start_date, this.config.event_duration || this.config.time_step, "minute");
              }
              o._timed = this.isOneDayEvent(o);
            }
            return true;
          });
          t.attachEvent("onEventChanged", function (i) {
            if (!i) {
              return true;
            }
            var o = t.getEvent(i);
            if (!v(o)) {
              if (!j) {
                return false;
              }
              o.start_date = j[0];
              o.end_date = j[1];
              o._timed = this.isOneDayEvent(o);
            }
            return true;
          });
          t.attachEvent("onBeforeEventChanged", function (i, o, c) {
            return v(i);
          });
          t.attachEvent("onBeforeEventCreated", function (i) {
            var o = t.getActionData(i).date;
            var c = {
              _timed: true,
              start_date: o,
              end_date: t.date.add(o, t.config.time_step, "minute")
            };
            return v(c);
          });
          t.attachEvent("onViewChange", function () {
            t._mark_now();
          });
          t.attachEvent("onAfterSchedulerResize", function () {
            window.setTimeout(function () {
              t._mark_now();
            }, 1);
            return true;
          });
          t.attachEvent("onTemplatesReady", function () {
            t._mark_now_timer = window.setInterval(function () {
              if (t._is_initialized()) {
                t._mark_now();
              }
            }, 60000);
          });
          t._mark_now = function (i) {
            this._els.dhx_now_time ||= [];
            var o = t._currentDate();
            var c = this.config;
            t._remove_mark_now();
            if (!i && c.mark_now && o < this._max_date && o > this._min_date && o.getHours() >= c.first_hour && o.getHours() < c.last_hour) {
              var h = this.locate_holder_day(o);
              this._els.dhx_now_time = t._append_mark_now(h, o);
            }
          };
          t._append_mark_now = function (i, o) {
            var c = t._get_zone_minutes(o);
            var h = {
              zones: [c, c + 1],
              css: "dhx_now_time",
              type: "dhx_now_time"
            };
            if (!this._table_view) {
              if (this._props && this._props[this._mode]) {
                var D;
                var V;
                var T = this._props[this._mode];
                var W = T.size || T.options.length;
                if (T.days > 1) {
                  if (T.size && T.options.length) {
                    i = (T.position + i) / T.options.length * T.size;
                  }
                  D = i;
                  V = i + W;
                } else {
                  V = (D = 0) + W;
                }
                for (var z = [], Z = D; Z < V; Z++) {
                  var re = Z;
                  h.days = re;
                  var oe = t._render_marked_timespan(h, null, re)[0];
                  z.push(oe);
                }
                return z;
              }
              h.days = i;
              return t._render_marked_timespan(h, null, i);
            }
            if (this._mode == "month") {
              h.days = +t.date.date_part(o);
              return t._render_marked_timespan(h, null, null);
            }
          };
          t._remove_mark_now = function () {
            for (var i = this._els.dhx_now_time, o = 0; o < i.length; o++) {
              var c = i[o];
              var h = c.parentNode;
              if (h) {
                h.removeChild(c);
              }
            }
            this._els.dhx_now_time = [];
          };
          t._marked_timespans = {
            global: {}
          };
          t._get_zone_minutes = function (i) {
            return i.getHours() * 60 + i.getMinutes();
          };
          t._prepare_timespan_options = function (i) {
            var o = [];
            var c = [];
            if (i.days == "fullweek") {
              i.days = [0, 1, 2, 3, 4, 5, 6];
            }
            if (i.days instanceof Array) {
              for (var h = i.days.slice(), D = 0; D < h.length; D++) {
                var V = t._lame_clone(i);
                V.days = h[D];
                o.push.apply(o, t._prepare_timespan_options(V));
              }
              return o;
            }
            if (!i || (!i.start_date || !i.end_date || i.end_date <= i.start_date) && (i.days === undefined || !i.zones) && !i.type) {
              return o;
            }
            if (i.zones == "fullday") {
              i.zones = [0, 1440];
            }
            if (i.zones && i.invert_zones) {
              i.zones = t.invertZones(i.zones);
            }
            i.id = t.uid();
            i.css = i.css || "";
            i.type = i.type || "default";
            var T = i.sections;
            if (T) {
              for (var W in T) {
                if (T.hasOwnProperty(W)) {
                  var z = T[W];
                  if (!(z instanceof Array)) {
                    z = [z];
                  }
                  D = 0;
                  for (; D < z.length; D++) {
                    (Ae = t._lame_copy({}, i)).sections = {};
                    Ae.sections[W] = z[D];
                    c.push(Ae);
                  }
                }
              }
            } else {
              c.push(i);
            }
            for (var Z = 0; Z < c.length; Z++) {
              var re = c[Z];
              var oe = re.start_date;
              var _e = re.end_date;
              if (oe && _e) {
                for (var he = t.date.date_part(new Date(oe)), be = t.date.add(he, 1, "day"); he < _e;) {
                  var Ae;
                  delete (Ae = t._lame_copy({}, re)).start_date;
                  delete Ae.end_date;
                  Ae.days = he.valueOf();
                  var He = oe > he ? t._get_zone_minutes(oe) : 0;
                  var Ne = _e > be || _e.getDate() != he.getDate() ? 1440 : t._get_zone_minutes(_e);
                  Ae.zones = [He, Ne];
                  o.push(Ae);
                  he = be;
                  be = t.date.add(be, 1, "day");
                }
              } else {
                if (re.days instanceof Date) {
                  re.days = t.date.date_part(re.days).valueOf();
                }
                re.zones = i.zones.slice();
                o.push(re);
              }
            }
            return o;
          };
          t._get_dates_by_index = function (i, o, c) {
            var h = [];
            o = t.date.date_part(new Date(o || t._min_date));
            c = new Date(c || t._max_date);
            for (var D = o.getDay(), V = i - D >= 0 ? i - D : 7 - o.getDay() + i, T = t.date.add(o, V, "day"); T < c; T = t.date.add(T, 1, "week")) {
              h.push(T);
            }
            return h;
          };
          t._get_css_classes_by_config = function (i) {
            var o = [];
            if (i.type == "dhx_time_block") {
              o.push("dhx_time_block");
              if (i.css) {
                o.push("dhx_time_block_reset");
              }
            }
            o.push("dhx_marked_timespan", i.css);
            return o.join(" ");
          };
          t._get_block_by_config = function (i) {
            var o = document.createElement("div");
            if (i.html) {
              if (typeof i.html == "string") {
                o.innerHTML = i.html;
              } else {
                o.appendChild(i.html);
              }
            }
            return o;
          };
          t._render_marked_timespan = function (i, o, c) {
            var h = [];
            var D = t.config;
            var V = this._min_date;
            var T = this._max_date;
            var W = false;
            if (!D.display_marked_timespans) {
              return h;
            }
            if (!c && c !== 0) {
              if (i.days < 7) {
                c = i.days;
              } else {
                var z = new Date(i.days);
                W = +z;
                if (+T <= +z || +V > +z) {
                  return h;
                }
                c = z.getDay();
              }
              var Z = V.getDay();
              if (Z > c) {
                c = 7 - (Z - c);
              } else {
                c -= Z;
              }
            }
            var re = i.zones;
            var oe = t._get_css_classes_by_config(i);
            if (t._table_view && t._mode == "month") {
              var _e = [];
              var he = [];
              if (o) {
                _e.push(o);
                he.push(c);
              } else {
                he = W ? [W] : t._get_dates_by_index(c);
                for (var be = 0; be < he.length; be++) {
                  _e.push(this._scales[he[be]]);
                }
              }
              for (be = 0; be < _e.length; be++) {
                o = _e[be];
                c = he[be];
                var Ae = Math.floor((this._correct_shift(c, 1) - V.valueOf()) / (this._cols.length * 86400000));
                var He = this.locate_holder_day(c, false) % this._cols.length;
                if (!this._ignores[He]) {
                  var Ne = this.config.rtl ? this._colsS.col_length - 1 - He : He;
                  var Ve = t._get_block_by_config(i);
                  var Se = Math.max(o.offsetHeight - 1, 0);
                  var Fe = Math.max(o.offsetWidth - 1, 0);
                  var Oe = this._colsS[Ne];
                  var at = this._colsS.heights[Ae] + (this._colsS.height ? this.xy.month_scale_height + 2 : 2) - 1;
                  Ve.className = oe;
                  Ve.style.top = at + "px";
                  Ve.style.lineHeight = Ve.style.height = Se + "px";
                  for (var ht = 0; ht < re.length; ht += 2) {
                    var lt = re[be];
                    if ((xt = re[be + 1]) <= lt) {
                      return [];
                    }
                    (wt = Ve.cloneNode(true)).style.left = Oe + Math.round(lt / 1440 * Fe) + "px";
                    wt.style.width = Math.round((xt - lt) / 1440 * Fe) + "px";
                    o.appendChild(wt);
                    h.push(wt);
                  }
                }
              }
            } else {
              var mt = c;
              if (this._ignores[this.locate_holder_day(c, false)]) {
                return h;
              }
              if (this._props && this._props[this._mode] && i.sections && i.sections[this._mode]) {
                var ft = this._props[this._mode];
                mt = ft.order[i.sections[this._mode]];
                var yt = ft.order[i.sections[this._mode]];
                if (ft.days > 1) {
                  mt = mt * (ft.size || ft.options.length) + yt;
                } else {
                  mt = yt;
                  if (ft.size && mt > ft.position + ft.size) {
                    mt = 0;
                  }
                }
              }
              o = o || t.locate_holder(mt);
              be = 0;
              for (; be < re.length; be += 2) {
                var xt;
                var wt;
                lt = Math.max(re[be], D.first_hour * 60);
                if ((xt = Math.min(re[be + 1], D.last_hour * 60)) <= lt) {
                  if (be + 2 < re.length) {
                    continue;
                  }
                  return [];
                }
                (wt = t._get_block_by_config(i)).className = oe;
                var Dt = this.config.hour_size_px * 24 + 1;
                wt.style.top = Math.round((lt * 60 * 1000 - this.config.first_hour * 3600000) * this.config.hour_size_px / 3600000) % Dt + "px";
                wt.style.lineHeight = wt.style.height = Math.max(Math.round((xt - lt) * 60 * 1000 * this.config.hour_size_px / 3600000) % Dt, 1) + "px";
                o.appendChild(wt);
                h.push(wt);
              }
            }
            return h;
          };
          t._mark_timespans = function () {
            var i = this._els.dhx_cal_data[0];
            var o = [];
            if (t._table_view && t._mode == "month") {
              for (var c in this._scales) {
                var h = new Date(+c);
                o.push.apply(o, t._on_scale_add_marker(this._scales[c], h));
              }
            } else {
              h = new Date(t._min_date);
              for (var D = 0, V = i.childNodes.length; D < V; D++) {
                var T = i.childNodes[D];
                if (!T.firstChild || t._getClassName(T.firstChild).indexOf("dhx_scale_hour") <= -1) {
                  o.push.apply(o, t._on_scale_add_marker(T, h));
                  h = t.date.add(h, 1, "day");
                }
              }
            }
            return o;
          };
          t.markTimespan = function (i) {
            var o = false;
            if (!this._els.dhx_cal_data) {
              t.get_elements();
              o = true;
            }
            var c = t._marked_timespans_ids;
            var h = t._marked_timespans_types;
            var D = t._marked_timespans;
            t.deleteMarkedTimespan();
            t.addMarkedTimespan(i);
            var V = t._mark_timespans();
            if (o) {
              t._els = [];
            }
            t._marked_timespans_ids = c;
            t._marked_timespans_types = h;
            t._marked_timespans = D;
            return V;
          };
          t.unmarkTimespan = function (i) {
            if (i) {
              for (var o = 0; o < i.length; o++) {
                var c = i[o];
                if (c.parentNode) {
                  c.parentNode.removeChild(c);
                }
              }
            }
          };
          t._addMarkerTimespanConfig = function (i) {
            var o = t._marked_timespans;
            var c = i.id;
            var h = t._marked_timespans_ids;
            h[c] ||= [];
            var D = i.days;
            var V = i.sections;
            var T = i.type;
            i.id = c;
            if (V) {
              for (var W in V) {
                if (V.hasOwnProperty(W)) {
                  o[W] ||= {};
                  var z = V[W];
                  var Z = o[W];
                  Z[z] ||= {};
                  Z[z][D] ||= {};
                  if (!Z[z][D][T]) {
                    Z[z][D][T] = [];
                    t._marked_timespans_types ||= {};
                    t._marked_timespans_types[T] ||= true;
                  }
                  var re = Z[z][D][T];
                  i._array = re;
                  re.push(i);
                  h[c].push(i);
                }
              }
            } else {
              o.global[D] ||= {};
              o.global[D][T] ||= [];
              t._marked_timespans_types ||= {};
              t._marked_timespans_types[T] ||= true;
              i._array = re = o.global[D][T];
              re.push(i);
              h[c].push(i);
            }
          };
          t._marked_timespans_ids = {};
          t.addMarkedTimespan = function (i) {
            var o = t._prepare_timespan_options(i);
            if (o.length) {
              for (var c = o[0].id, h = 0; h < o.length; h++) {
                t._addMarkerTimespanConfig(o[h]);
              }
              return c;
            }
          };
          t._add_timespan_zones = function (i, o) {
            var c = i.slice();
            o = o.slice();
            if (!c.length) {
              return o;
            }
            for (var h = 0; h < c.length; h += 2) {
              for (var D = c[h], V = c[h + 1], T = h + 2 == c.length, W = 0; W < o.length; W += 2) {
                var z = o[W];
                var Z = o[W + 1];
                if (Z > V && z <= V || z < D && Z >= D) {
                  c[h] = Math.min(D, z);
                  c[h + 1] = Math.max(V, Z);
                  h -= 2;
                } else {
                  if (!T) {
                    continue;
                  }
                  c.splice(h + (D > z ? 0 : 2), 0, z, Z);
                }
                o.splice(W--, 2);
                break;
              }
            }
            return c;
          };
          t._subtract_timespan_zones = function (i, o) {
            for (var c = i.slice(), h = 0; h < c.length; h += 2) {
              for (var D = c[h], V = c[h + 1], T = 0; T < o.length; T += 2) {
                var W = o[T];
                var z = o[T + 1];
                if (z > D && W < V) {
                  var Z = false;
                  if (D >= W && V <= z) {
                    c.splice(h, 2);
                  }
                  if (D < W) {
                    c.splice(h, 2, D, W);
                    Z = true;
                  }
                  if (V > z) {
                    c.splice(Z ? h + 2 : h, Z ? 0 : 2, z, V);
                  }
                  h -= 2;
                  break;
                }
              }
            }
            return c;
          };
          t.invertZones = function (i) {
            return t._subtract_timespan_zones([0, 1440], i.slice());
          };
          t._delete_marked_timespan_by_id = function (i) {
            var o = t._marked_timespans_ids[i];
            if (o) {
              for (var c = 0; c < o.length; c++) {
                for (var h = o[c], D = h._array, V = 0; V < D.length; V++) {
                  if (D[V] == h) {
                    D.splice(V, 1);
                    break;
                  }
                }
              }
            }
          };
          t._delete_marked_timespan_by_config = function (i) {
            var o;
            var c = t._marked_timespans;
            var h = i.sections;
            var D = i.days;
            var V = i.type || "default";
            if (h) {
              for (var T in h) {
                if (h.hasOwnProperty(T) && c[T]) {
                  var W = h[T];
                  if (c[T][W]) {
                    o = c[T][W];
                  }
                }
              }
            } else {
              o = c.global;
            }
            if (o) {
              if (D !== undefined) {
                if (o[D] && o[D][V]) {
                  t._addMarkerTimespanConfig(i);
                  t._delete_marked_timespans_list(o[D][V], i);
                }
              } else {
                for (var z in o) {
                  if (o[z][V]) {
                    var Z = t._lame_clone(i);
                    i.days = z;
                    t._addMarkerTimespanConfig(Z);
                    t._delete_marked_timespans_list(o[z][V], i);
                  }
                }
              }
            }
          };
          t._delete_marked_timespans_list = function (i, o) {
            for (var c = 0; c < i.length; c++) {
              var h = i[c];
              var D = t._subtract_timespan_zones(h.zones, o.zones);
              if (D.length) {
                h.zones = D;
              } else {
                i.splice(c, 1);
                c--;
                for (var V = t._marked_timespans_ids[h.id], T = 0; T < V.length; T++) {
                  if (V[T] == h) {
                    V.splice(T, 1);
                    break;
                  }
                }
              }
            }
          };
          t.deleteMarkedTimespan = function (i) {
            if (!arguments.length) {
              t._marked_timespans = {
                global: {}
              };
              t._marked_timespans_ids = {};
              t._marked_timespans_types = {};
            }
            if (kt(i) != "object") {
              t._delete_marked_timespan_by_id(i);
            } else {
              if (!i.start_date || !i.end_date) {
                if (i.days === undefined && !i.type) {
                  i.days = "fullweek";
                }
                i.zones ||= "fullday";
              }
              var o = [];
              if (i.type) {
                o.push(i.type);
              } else {
                for (var c in t._marked_timespans_types) {
                  o.push(c);
                }
              }
              for (var h = t._prepare_timespan_options(i), D = 0; D < h.length; D++) {
                for (var V = h[D], T = 0; T < o.length; T++) {
                  var W = t._lame_clone(V);
                  W.type = o[T];
                  t._delete_marked_timespan_by_config(W);
                }
              }
            }
          };
          t._get_types_to_render = function (i, o) {
            var c = i ? t._lame_copy({}, i) : {};
            for (var h in o || {}) {
              if (o.hasOwnProperty(h)) {
                c[h] = o[h];
              }
            }
            return c;
          };
          t._get_configs_to_render = function (i) {
            var o = [];
            for (var c in i) {
              if (i.hasOwnProperty(c)) {
                o.push.apply(o, i[c]);
              }
            }
            return o;
          };
          t._on_scale_add_marker = function (i, o) {
            if (!t._table_view || t._mode == "month") {
              var c = o.getDay();
              var h = o.valueOf();
              var D = this._mode;
              var V = t._marked_timespans;
              var T = [];
              var W = [];
              if (this._props && this._props[D]) {
                var z = this._props[D];
                var Z = z.options;
                var re = Z[t._get_unit_index(z, o)];
                if (z.days > 1) {
                  var oe = Math.round((o - t._min_date) / 86400000);
                  o = t.date.add(t._min_date, Math.floor(oe / (z.size || Z.length)), "day");
                  o = t.date.date_part(o);
                } else {
                  o = t.date.date_part(new Date(this._date));
                }
                c = o.getDay();
                h = o.valueOf();
                if (V[D] && V[D][re.key]) {
                  var he = V[D][re.key];
                  var be = t._get_types_to_render(he[c], he[h]);
                  T.push.apply(T, t._get_configs_to_render(be));
                }
              }
              var Ae = V.global;
              if (t.config.overwrite_marked_timespans) {
                T.push.apply(T, t._get_configs_to_render(Ae[h] || Ae[c]));
              } else {
                if (Ae[h]) {
                  T.push.apply(T, t._get_configs_to_render(Ae[h]));
                }
                if (Ae[c]) {
                  T.push.apply(T, t._get_configs_to_render(Ae[c]));
                }
              }
              for (var Ne = 0; Ne < T.length; Ne++) {
                W.push.apply(W, t._render_marked_timespan(T[Ne], i, o));
              }
              return W;
            }
          };
          t.attachEvent("onScaleAdd", function () {
            t._on_scale_add_marker.apply(t, arguments);
          });
          t.dblclick_dhx_marked_timespan = function (i, o) {
            t.callEvent("onScaleDblClick", [t.getActionData(i).date, o, i]);
            if (t.config.dblclick_create) {
              t.addEventNow(t.getActionData(i).date, null, i);
            }
          };
        };
        t._temp_limit_scope();
      },
      map_view: function (t) {
        var j;
        t.xy.map_date_width = 188;
        t.xy.map_icon_width = 25;
        t.xy.map_description_width = 400;
        t.config.map_resolve_event_location = true;
        t.config.map_resolve_user_location = true;
        t.config.map_initial_position = new google.maps.LatLng(48.724, 8.215);
        t.config.map_error_position = new google.maps.LatLng(15, 15);
        t.config.map_infowindow_max_width = 300;
        t.config.map_type = google.maps.MapTypeId.ROADMAP;
        t.config.map_zoom_after_resolve = 15;
        t.locale.labels.marker_geo_success = "It seems you are here.";
        t.locale.labels.marker_geo_fail = "Sorry, could not get your current position using geolocation.";
        t.templates.marker_date = t.date.date_to_str("%Y-%m-%d %H:%i");
        t.templates.marker_text = function (a, v, _) {
          return "<div><b>" + _.text + "</b><br/><br/>" + (_.event_location || "") + "<br/><br/>" + t.templates.marker_date(a) + " - " + t.templates.marker_date(v) + "</div>";
        };
        t.dblclick_dhx_map_area = function () {
          if (!this.config.readonly && this.config.dblclick_create) {
            this.addEventNow({
              start_date: t._date,
              end_date: t.date.add(t._date, t.config.time_step, "minute")
            });
          }
        };
        t.templates.map_time = function (a, v, _) {
          if (t.config.rtl && !_._timed) {
            return t.templates.day_date(v) + " &ndash; " + t.templates.day_date(a);
          } else if (_._timed) {
            return this.day_date(_.start_date, _.end_date, _) + " " + this.event_date(a);
          } else {
            return t.templates.day_date(a) + " &ndash; " + t.templates.day_date(v);
          }
        };
        t.templates.map_text = function (a, v, _) {
          return _.text;
        };
        t.date.map_start = function (a) {
          return a;
        };
        t.date.add_map = function (a, v, _) {
          return new Date(a.valueOf());
        };
        t.templates.map_date = function (a, v, _) {
          return "";
        };
        t._latLngUpdate = false;
        t.attachEvent("onSchedulerReady", function () {
          t._isMapPositionSet = false;
          var a = document.createElement("div");
          a.className = "dhx_map";
          a.id = "dhx_gmap";
          a.style.display = "none";
          t._obj.appendChild(a);
          t._els.dhx_gmap = [];
          t._els.dhx_gmap.push(a);
          h("dhx_gmap");
          var v = {
            zoom: t.config.map_initial_zoom || 10,
            center: t.config.map_initial_position,
            mapTypeId: t.config.map_type || google.maps.MapTypeId.ROADMAP
          };
          var _ = new google.maps.Map(document.getElementById("dhx_gmap"), v);
          _.disableDefaultUI = false;
          _.disableDoubleClickZoom = !t.config.readonly;
          google.maps.event.addListener(_, "dblclick", function (z) {
            if (!t.config.readonly && t.config.dblclick_create) {
              var Z = z.latLng;
              j.geocode({
                latLng: Z
              }, function (re, oe) {
                if (oe == google.maps.GeocoderStatus.OK) {
                  t.addEventNow({
                    lat: (Z = re[0].geometry.location).lat(),
                    lng: Z.lng(),
                    event_location: re[0].formatted_address,
                    start_date: t._date,
                    end_date: t.date.add(t._date, t.config.time_step, "minute")
                  });
                }
              });
            }
          });
          var i = {
            content: ""
          };
          if (t.config.map_infowindow_max_width) {
            i.maxWidth = t.config.map_infowindow_max_width;
          }
          t.map = {
            _points: [],
            _markers: [],
            _infowindow: new google.maps.InfoWindow(i),
            _infowindows_content: [],
            _initialization_count: -1,
            _obj: _
          };
          j = new google.maps.Geocoder();
          if (t.config.map_resolve_user_location && navigator.geolocation) {
            if (!t._isMapPositionSet) {
              navigator.geolocation.getCurrentPosition(function (z) {
                var Z = new google.maps.LatLng(z.coords.latitude, z.coords.longitude);
                _.setCenter(Z);
                _.setZoom(t.config.map_zoom_after_resolve || 10);
                t.map._infowindow.setContent(t.locale.labels.marker_geo_success);
                t.map._infowindow.position = _.getCenter();
                t.map._infowindow.open(_);
                t._isMapPositionSet = true;
              }, function () {
                t.map._infowindow.setContent(t.locale.labels.marker_geo_fail);
                t.map._infowindow.setPosition(_.getCenter());
                t.map._infowindow.open(_);
                t._isMapPositionSet = true;
              });
            }
          }
          google.maps.event.addListener(_, "resize", function (z) {
            a.style.zIndex = "5";
            _.setZoom(_.getZoom());
          });
          google.maps.event.addListener(_, "tilesloaded", function (z) {
            a.style.zIndex = "5";
          });
          a.style.display = "none";
          var o = t.render_data;
          function c() {
            var z = t.get_visible_events();
            z.sort(function (Se, Fe) {
              if (Se.start_date.valueOf() == Fe.start_date.valueOf()) {
                if (Se.id > Fe.id) {
                  return 1;
                } else {
                  return -1;
                }
              } else if (Se.start_date > Fe.start_date) {
                return 1;
              } else {
                return -1;
              }
            });
            for (var Z = "<div " + (Ae = t._waiAria.mapAttrString()) + " class='dhx_map_area'>", re = 0; re < z.length; re++) {
              var oe = z[re];
              var _e = oe.id == t._selected_event_id ? "dhx_map_line highlight" : "dhx_map_line";
              var he = oe.color ? "background:" + oe.color + ";" : "";
              var be = oe.textColor ? "color:" + oe.textColor + ";" : "";
              var Ae = t._waiAria.mapRowAttrString(oe);
              var He = t._waiAria.mapDetailsBtnString();
              Z += "<div " + Ae + " class='" + _e + "' event_id='" + oe.id + "' " + t.config.event_attribute + "='" + oe.id + "' style='" + he + be + (oe._text_style || "") + " width: " + (t.xy.map_date_width + t.xy.map_description_width + 2) + "px;'><div class='dhx_map_event_time' style='width: " + t.xy.map_date_width + "px;' >" + t.templates.map_time(oe.start_date, oe.end_date, oe) + "</div>";
              Z += "<div " + He + " class='dhx_event_icon icon_details'>&nbsp;</div>";
              Z += "<div class='line_description' style='width:" + (t.xy.map_description_width - t.xy.map_icon_width) + "px;'>" + t.templates.map_text(oe.start_date, oe.end_date, oe) + "</div></div>";
            }
            Z += "<div class='dhx_v_border' style=" + (t.config.rtl ? "'right: " : "'left: ") + (t.xy.map_date_width - 2) + "px;'></div><div class='dhx_v_border_description'></div></div>";
            t._els.dhx_cal_data[0].scrollTop = 0;
            t._els.dhx_cal_data[0].innerHTML = Z;
            t._els.dhx_cal_data[0].style.width = t.xy.map_date_width + t.xy.map_description_width + 1 + "px";
            var Ne = t._els.dhx_cal_data[0].firstChild.childNodes;
            var Ve = t._getNavDateElement();
            if (Ve) {
              Ve.innerHTML = t.templates[t._mode + "_date"](t._min_date, t._max_date, t._mode);
            }
            t._rendered = [];
            re = 0;
            for (; re < Ne.length - 2; re++) {
              t._rendered[re] = Ne[re];
            }
          }
          function h(z) {
            var Z = document.getElementById(z);
            var re = t._y - t.xy.nav_height;
            if (re < 0) {
              re = 0;
            }
            var oe = t._x - t.xy.map_date_width - t.xy.map_description_width - 1;
            if (oe < 0) {
              oe = 0;
            }
            Z.style.height = re + "px";
            Z.style.width = oe + "px";
            if (t.config.rtl) {
              Z.style.marginRight = t.xy.map_date_width + t.xy.map_description_width + 1 + "px";
            } else {
              Z.style.marginLeft = t.xy.map_date_width + t.xy.map_description_width + 1 + "px";
            }
            Z.style.marginTop = t.xy.nav_height + 2 + "px";
          }
          t.render_data = function (z, Z) {
            if (this._mode != "map") {
              return o.apply(this, arguments);
            }
            c();
            for (var re = t.get_visible_events(), oe = 0; oe < re.length; oe++) {
              if (!t.map._markers[re[oe].id]) {
                V(re[oe], false, false);
              }
            }
          };
          t.map_view = function (z) {
            t.map._initialization_count++;
            var Z;
            var re = t._els.dhx_gmap[0];
            t._els.dhx_cal_data[0].style.width = t.xy.map_date_width + t.xy.map_description_width + 1 + "px";
            t._min_date = t.config.map_start || t._currentDate();
            t._max_date = t.config.map_end || t.date.add(t._currentDate(), 1, "year");
            t._table_view = true;
            (function (he) {
              if (he) {
                var be = t.locale.labels;
                t._els.dhx_cal_header[0].innerHTML = "<div class='dhx_map_line' style='width: " + (t.xy.map_date_width + t.xy.map_description_width + 2) + "px;' ><div class='headline_date' style='width: " + t.xy.map_date_width + "px;'>" + be.date + "</div><div class='headline_description' style='width: " + t.xy.map_description_width + "px;'>" + be.description + "</div></div>";
                t._table_view = true;
                t.set_sizes();
              }
            })(z);
            if (z) {
              (function () {
                t._selected_event_id = null;
                t.map._infowindow.close();
                var he = t.map._markers;
                for (var be in he) {
                  if (he.hasOwnProperty(be)) {
                    he[be].setMap(null);
                    delete t.map._markers[be];
                    if (t.map._infowindows_content[be]) {
                      delete t.map._infowindows_content[be];
                    }
                  }
                }
              })();
              c();
              re.style.display = "block";
              h("dhx_gmap");
              Z = t.map._obj.getCenter();
              for (var oe = t.get_visible_events(), _e = 0; _e < oe.length; _e++) {
                if (!t.map._markers[oe[_e].id]) {
                  V(oe[_e]);
                }
              }
            } else {
              re.style.display = "none";
            }
            google.maps.event.trigger(t.map._obj, "resize");
            if (t.map._initialization_count === 0 && Z) {
              t.map._obj.setCenter(Z);
            }
            if (t._selected_event_id) {
              D(t._selected_event_id);
            }
          };
          function D(z) {
            t.map._obj.setCenter(t.map._points[z]);
            t.callEvent("onClick", [z]);
          }
          function V(z, Z, re) {
            var oe = t.config.map_error_position;
            if (z.lat && z.lng) {
              oe = new google.maps.LatLng(z.lat, z.lng);
            }
            var _e = t.templates.marker_text(z.start_date, z.end_date, z);
            if (!t._new_event) {
              t.map._infowindows_content[z.id] = _e;
              if (t.map._markers[z.id]) {
                t.map._markers[z.id].setMap(null);
              }
              t.map._markers[z.id] = new google.maps.Marker({
                position: oe,
                map: t.map._obj
              });
              google.maps.event.addListener(t.map._markers[z.id], "click", function () {
                t.map._infowindow.setContent(t.map._infowindows_content[z.id]);
                t.map._infowindow.open(t.map._obj, t.map._markers[z.id]);
                t._selected_event_id = z.id;
                t.render_data();
              });
              t.map._points[z.id] = oe;
              if (Z) {
                t.map._obj.setCenter(t.map._points[z.id]);
              }
              if (re) {
                t.callEvent("onClick", [z.id]);
              }
            }
          }
          t.attachEvent("onClick", function (z, Z) {
            if (this._mode == "map") {
              t._selected_event_id = z;
              for (var re = 0; re < t._rendered.length; re++) {
                t._rendered[re].className = "dhx_map_line";
                if (t._rendered[re].getAttribute(t.config.event_attribute) == z) {
                  t._rendered[re].className += " highlight";
                }
              }
              if (t.map._points[z] && t.map._markers[z]) {
                t.map._obj.setCenter(t.map._points[z]);
                google.maps.event.trigger(t.map._markers[z], "click");
              }
            }
            return true;
          });
          function T(z) {
            if (z.event_location && j) {
              j.geocode({
                address: z.event_location,
                language: t.uid().toString()
              }, function (Z, re) {
                var oe = {};
                if (re != google.maps.GeocoderStatus.OK) {
                  if (!(oe = t.callEvent("onLocationError", [z.id])) || oe === true) {
                    oe = t.config.map_error_position;
                  }
                } else {
                  oe = Z[0].geometry.location;
                }
                z.lat = oe.lat();
                z.lng = oe.lng();
                t._selected_event_id = z.id;
                t._latLngUpdate = true;
                t.callEvent("onEventChanged", [z.id, z]);
                V(z, true, true);
              });
            } else {
              V(z, true, true);
            }
          }
          function W(z) {
            if (z.event_location && j) {
              j.geocode({
                address: z.event_location,
                language: t.uid().toString()
              }, function (Z, re) {
                var oe = {};
                if (re != google.maps.GeocoderStatus.OK) {
                  if (!(oe = t.callEvent("onLocationError", [z.id])) || oe === true) {
                    oe = t.config.map_error_position;
                  }
                } else {
                  oe = Z[0].geometry.location;
                }
                z.lat = oe.lat();
                z.lng = oe.lng();
                t._latLngUpdate = true;
                t.callEvent("onEventChanged", [z.id, z]);
              });
            }
          }
          t.attachEvent("onEventChanged", function (z, Z) {
            if (this._latLngUpdate) {
              this._latLngUpdate = false;
            } else {
              var re = t.getEvent(z);
              if (re.start_date < t._min_date && re.end_date > t._min_date || re.start_date < t._max_date && re.end_date > t._max_date || re.start_date.valueOf() >= t._min_date && re.end_date.valueOf() <= t._max_date) {
                if (t.map._markers[z]) {
                  t.map._markers[z].setMap(null);
                }
                T(re);
              } else {
                t._selected_event_id = null;
                t.map._infowindow.close();
                if (t.map._markers[z]) {
                  t.map._markers[z].setMap(null);
                }
              }
            }
            return true;
          });
          t.attachEvent("onEventIdChange", function (z, Z) {
            var re = t.getEvent(Z);
            if (re.start_date < t._min_date && re.end_date > t._min_date || re.start_date < t._max_date && re.end_date > t._max_date || re.start_date.valueOf() >= t._min_date && re.end_date.valueOf() <= t._max_date) {
              if (t.map._markers[z]) {
                t.map._markers[z].setMap(null);
                delete t.map._markers[z];
              }
              if (t.map._infowindows_content[z]) {
                delete t.map._infowindows_content[z];
              }
              T(re);
            }
            return true;
          });
          t.attachEvent("onEventAdded", function (z, Z) {
            if (!t._dataprocessor) {
              if (Z.start_date < t._min_date && Z.end_date > t._min_date || Z.start_date < t._max_date && Z.end_date > t._max_date || Z.start_date.valueOf() >= t._min_date && Z.end_date.valueOf() <= t._max_date) {
                if (t.map._markers[z]) {
                  t.map._markers[z].setMap(null);
                }
                T(Z);
              }
            }
            return true;
          });
          t.attachEvent("onBeforeEventDelete", function (z, Z) {
            if (t.map._markers[z]) {
              t.map._markers[z].setMap(null);
            }
            t._selected_event_id = null;
            t.map._infowindow.close();
            return true;
          });
          t._event_resolve_delay = 1500;
          t.attachEvent("onEventLoading", function (z) {
            if (t.config.map_resolve_event_location && z.event_location && !z.lat && !z.lng) {
              t._event_resolve_delay += 1500;
              Z = W;
              re = this;
              oe = [z];
              setTimeout(function () {
                var he = Z.apply(re, oe);
                Z = re = oe = null;
                return he;
              }, t._event_resolve_delay || 1);
            }
            return true;
            var Z;
            var re;
            var oe;
          });
          t.attachEvent("onEventCancel", function (z, Z) {
            if (Z) {
              if (t.map._markers[z]) {
                t.map._markers[z].setMap(null);
              }
              t.map._infowindow.close();
            }
            return true;
          });
        });
      },
      minical: function (t) {
        var j = t._createDomEventScope();
        t.templates.calendar_month = t.date.date_to_str("%F %Y");
        t.templates.calendar_scale_date = t.date.date_to_str("%D");
        t.templates.calendar_date = t.date.date_to_str("%d");
        t.config.minicalendar = {
          mark_events: true
        };
        t._synced_minicalendars = [];
        t.renderCalendar = function (a, v, _) {
          var i = null;
          var o = a.date || t._currentDate();
          if (typeof o == "string") {
            o = this.templates.api_date(o);
          }
          if (v) {
            i = this._render_calendar(v.parentNode, o, a, v);
            t.unmarkCalendar(i);
          } else {
            var c = a.container;
            var h = a.position;
            if (typeof c == "string") {
              c = document.getElementById(c);
            }
            if (typeof h == "string") {
              h = document.getElementById(h);
            }
            if (h && h.left === undefined && h.right === undefined) {
              var D = t.$domHelpers.getOffset(h);
              h = {
                top: D.top + h.offsetHeight,
                left: D.left
              };
            }
            c ||= t._get_def_cont(h);
            if (!(i = this._render_calendar(c, o, a)).$_eventAttached) {
              i.$_eventAttached = true;
              j.attach(i, "click", function (he) {
                var be = he.target || he.srcElement;
                var Ae = t.$domHelpers;
                if (Ae.closest(be, ".dhx_month_head") && !Ae.closest(be, ".dhx_after") && !Ae.closest(be, ".dhx_before")) {
                  var He = Ae.closest(be, "[data-cell-date]").getAttribute("data-cell-date");
                  var Ne = t.templates.parse_date(He);
                  t.unmarkCalendar(this);
                  t.markCalendar(this, Ne, "dhx_calendar_click");
                  this._last_date = Ne;
                  if (this.conf.handler) {
                    this.conf.handler.call(t, Ne, this);
                  }
                }
              }.bind(i));
            }
          }
          if (t.config.minicalendar.mark_events) {
            for (var V = t.date.month_start(o), T = t.date.add(V, 1, "month"), W = this.getEvents(V, T), z = this["filter_" + this._mode], Z = {}, re = 0; re < W.length; re++) {
              var oe = W[re];
              if (!z || z(oe.id, oe)) {
                var _e = oe.start_date;
                if (_e.valueOf() < V.valueOf()) {
                  _e = V;
                }
                _e = t.date.date_part(new Date(_e.valueOf()));
                for (; _e < oe.end_date && (Z[+_e] || (Z[+_e] = true, this.markCalendar(i, _e, "dhx_year_event")), (_e = this.date.add(_e, 1, "day")).valueOf() < T.valueOf()););
              }
            }
          }
          this._markCalendarCurrentDate(i);
          i.conf = a;
          if (a.sync && !_) {
            this._synced_minicalendars.push(i);
          }
          i.conf._on_xle_handler ||= t.attachEvent("onXLE", function () {
            t.updateCalendar(i, i.conf.date);
          });
          if (this.config.wai_aria_attributes && this.config.wai_aria_application_role) {
            i.setAttribute("role", "application");
          }
          return i;
        };
        t._get_def_cont = function (a) {
          if (!this._def_count) {
            this._def_count = document.createElement("div");
            this._def_count.className = "dhx_minical_popup";
            t.event(this._def_count, "click", function (v) {
              v.cancelBubble = true;
            });
            document.body.appendChild(this._def_count);
          }
          if (a.left) {
            this._def_count.style.left = a.left + "px";
          }
          if (a.right) {
            this._def_count.style.right = a.right + "px";
          }
          if (a.top) {
            this._def_count.style.top = a.top + "px";
          }
          if (a.bottom) {
            this._def_count.style.bottom = a.bottom + "px";
          }
          this._def_count._created = new Date();
          return this._def_count;
        };
        t._locateCalendar = function (a, v) {
          if (typeof v == "string") {
            v = t.templates.api_date(v);
          }
          if (+v > +a._max_date || +v < +a._min_date) {
            return null;
          }
          for (var _ = a.querySelector(".dhx_year_body").childNodes[0], i = 0, o = new Date(a._min_date); +this.date.add(o, 1, "week") <= +v;) {
            o = this.date.add(o, 1, "week");
            i++;
          }
          var c = t.config.start_on_monday;
          var h = (v.getDay() || (c ? 7 : 0)) - (c ? 1 : 0);
          return _.rows[i].cells[h].firstChild;
        };
        t.markCalendar = function (a, v, _) {
          var i = this._locateCalendar(a, v);
          if (i) {
            i.className += " " + _;
          }
        };
        t.unmarkCalendar = function (a, v, _) {
          _ = _ || "dhx_calendar_click";
          if (v = v || a._last_date) {
            var i = this._locateCalendar(a, v);
            if (i) {
              i.className = (i.className || "").replace(RegExp(_, "g"));
            }
          }
        };
        t._week_template = function (a) {
          for (var v = a || 250, _ = 0, i = document.createElement("div"), o = this.date.week_start(t._currentDate()), c = 0; c < 7; c++) {
            this._cols[c] = Math.floor(v / (7 - c));
            this._render_x_header(c, _, o, i);
            o = this.date.add(o, 1, "day");
            v -= this._cols[c];
            _ += this._cols[c];
          }
          i.lastChild.className += " dhx_scale_bar_last";
          return i;
        };
        t.updateCalendar = function (a, v) {
          a.conf.date = v;
          this.renderCalendar(a.conf, a, true);
        };
        t._mini_cal_arrows = ["&nbsp;", "&nbsp;"];
        t._render_calendar = function (a, v, _, i) {
          var o = t.templates;
          var c = this._cols;
          this._cols = [];
          var h = this._mode;
          this._mode = "calendar";
          var D = this._colsS;
          this._colsS = {
            height: 0
          };
          var V = new Date(this._min_date);
          var T = new Date(this._max_date);
          var W = new Date(t._date);
          var z = o.month_day;
          var Z = this._ignores_detected;
          this._ignores_detected = 0;
          o.month_day = o.calendar_date;
          v = this.date.month_start(v);
          var re;
          var oe = this._week_template(a.offsetWidth - 1 - this.config.minicalendar.padding);
          if (i) {
            re = i;
          } else {
            (re = document.createElement("div")).className = "dhx_cal_container dhx_mini_calendar";
          }
          re.setAttribute("date", this._helpers.formatDate(v));
          re.innerHTML = "<div class='dhx_year_month'></div><div class='dhx_year_grid" + (t.config.rtl ? " dhx_grid_rtl'>" : "'>") + "<div class='dhx_year_week'>" + (oe ? oe.innerHTML : "") + "</div><div class='dhx_year_body'></div></div>";
          var _e = re.querySelector(".dhx_year_month");
          var he = re.querySelector(".dhx_year_week");
          var be = re.querySelector(".dhx_year_body");
          _e.innerHTML = this.templates.calendar_month(v);
          if (_.navigation) {
            for (var Ae = function (wt, Dt) {
                var Rt = t.date.add(wt._date, Dt, "month");
                t.updateCalendar(wt, Rt);
                if (t._date.getMonth() == wt._date.getMonth() && t._date.getFullYear() == wt._date.getFullYear()) {
                  t._markCalendarCurrentDate(wt);
                }
              }, He = ["dhx_cal_prev_button", "dhx_cal_next_button"], Ne = ["left:1px;top:2px;position:absolute;", "left:auto; right:1px;top:2px;position:absolute;"], Ve = [-1, 1], Se = function (wt) {
                return function () {
                  if (_.sync) {
                    for (var Dt = t._synced_minicalendars, Rt = 0; Rt < Dt.length; Rt++) {
                      Ae(Dt[Rt], wt);
                    }
                  } else {
                    if (t.config.rtl) {
                      wt = -wt;
                    }
                    Ae(re, wt);
                  }
                };
              }, Fe = [t.locale.labels.prev, t.locale.labels.next], Oe = 0; Oe < 2; Oe++) {
              var at = document.createElement("div");
              at.className = He[Oe];
              t._waiAria.headerButtonsAttributes(at, Fe[Oe]);
              at.style.cssText = Ne[Oe];
              at.innerHTML = this._mini_cal_arrows[Oe];
              _e.appendChild(at);
              j.attach(at, "click", Se(Ve[Oe]));
            }
          }
          re._date = new Date(v);
          re.week_start = (v.getDay() - (this.config.start_on_monday ? 1 : 0) + 7) % 7;
          var ht = re._min_date = this.date.week_start(v);
          re._max_date = this.date.add(re._min_date, 6, "week");
          this._reset_month_scale(be, v, ht, 6);
          if (!i) {
            a.appendChild(re);
          }
          he.style.height = he.childNodes[0].offsetHeight - 1 + "px";
          var lt = t.uid();
          t._waiAria.minicalHeader(_e, lt);
          t._waiAria.minicalGrid(re.querySelector(".dhx_year_grid"), lt);
          t._waiAria.minicalRow(he);
          for (var mt = he.querySelectorAll(".dhx_scale_bar"), ft = 0; ft < mt.length; ft++) {
            t._waiAria.minicalHeadCell(mt[ft]);
          }
          var yt = be.querySelectorAll("td");
          var xt = new Date(ht);
          for (ft = 0; ft < yt.length; ft++) {
            t._waiAria.minicalDayCell(yt[ft], new Date(xt));
            xt = t.date.add(xt, 1, "day");
          }
          t._waiAria.minicalHeader(_e, lt);
          this._cols = c;
          this._mode = h;
          this._colsS = D;
          this._min_date = V;
          this._max_date = T;
          t._date = W;
          o.month_day = z;
          this._ignores_detected = Z;
          return re;
        };
        t.destroyCalendar = function (a, v) {
          if (!a && this._def_count && this._def_count.firstChild && (v || new Date().valueOf() - this._def_count._created.valueOf() > 500)) {
            a = this._def_count.firstChild;
          }
          if (a) {
            j.detachAll();
            a.innerHTML = "";
            if (a.parentNode) {
              a.parentNode.removeChild(a);
            }
            if (this._def_count) {
              this._def_count.style.top = "-1000px";
            }
            if (a.conf && a.conf._on_xle_handler) {
              t.detachEvent(a.conf._on_xle_handler);
            }
          }
        };
        t.isCalendarVisible = function () {
          return !!this._def_count && parseInt(this._def_count.style.top, 10) > 0 && this._def_count;
        };
        t.attachEvent("onTemplatesReady", function () {
          t.event(document.body, "click", function () {
            t.destroyCalendar();
          });
        }, {
          once: true
        });
        t.templates.calendar_time = t.date.date_to_str("%d-%m-%Y");
        t.form_blocks.calendar_time = {
          render: function (a) {
            var v = "<input class='dhx_readonly' type='text' readonly='true'>";
            var _ = t.config;
            var i = this.date.date_part(t._currentDate());
            var o = 1440;
            var c = 0;
            if (_.limit_time_select) {
              c = _.first_hour * 60;
              o = _.last_hour * 60 + 1;
            }
            i.setHours(c / 60);
            a._time_values = [];
            v += " <select class='dhx_lightbox_time_select'>";
            for (var h = c; h < o; h += this.config.time_step * 1) {
              v += "<option value='" + h + "'>" + this.templates.time_picker(i) + "</option>";
              a._time_values.push(h);
              i = this.date.add(i, this.config.time_step, "minute");
            }
            return "<div style='height:30px;padding-top:0; font-size:inherit;' class='dhx_section_time dhx_lightbox_minical'>" + (v += "</select>") + "<span style='font-weight:normal; font-size:10pt;'> &nbsp;&ndash;&nbsp; </span>" + v + "</div>";
          },
          set_value: function (a, v, _, i) {
            var o;
            var c;
            var h = a.getElementsByTagName("input");
            var D = a.getElementsByTagName("select");
            function V(_e, he, be) {
              t.event(_e, "click", function () {
                t.destroyCalendar(null, true);
                t.renderCalendar({
                  position: _e,
                  date: new Date(this._date),
                  navigation: true,
                  handler: function (Ae) {
                    _e.value = t.templates.calendar_time(Ae);
                    _e._date = new Date(Ae);
                    t.destroyCalendar();
                    if (t.config.event_duration && t.config.auto_end_date && be === 0) {
                      Z();
                    }
                  }
                });
              });
            }
            if (t.config.full_day) {
              if (!a._full_day) {
                var T = "<label class='dhx_fullday'><input type='checkbox' name='full_day' value='true'> " + t.locale.labels.full_day + "&nbsp;</label></input>";
                if (!t.config.wide_form) {
                  T = a.previousSibling.innerHTML + T;
                }
                a.previousSibling.innerHTML = T;
                a._full_day = true;
              }
              var W = a.previousSibling.getElementsByTagName("input")[0];
              var z = t.date.time_part(_.start_date) === 0 && t.date.time_part(_.end_date) === 0;
              W.checked = z;
              D[0].disabled = W.checked;
              D[1].disabled = W.checked;
              if (!W.$_eventAttached) {
                W.$_eventAttached = true;
                t.event(W, "click", function () {
                  if (W.checked === true) {
                    var _e = {};
                    t.form_blocks.calendar_time.get_value(a, _e);
                    o = t.date.date_part(_e.start_date);
                    if (+(c = t.date.date_part(_e.end_date)) == +o || +c >= +o && (_.end_date.getHours() !== 0 || _.end_date.getMinutes() !== 0)) {
                      c = t.date.add(c, 1, "day");
                    }
                  }
                  var he = o || _.start_date;
                  var be = c || _.end_date;
                  re(h[0], he);
                  re(h[1], be);
                  D[0].value = he.getHours() * 60 + he.getMinutes();
                  D[1].value = be.getHours() * 60 + be.getMinutes();
                  D[0].disabled = W.checked;
                  D[1].disabled = W.checked;
                });
              }
            }
            if (t.config.event_duration && t.config.auto_end_date) {
              function Z() {
                if (t.config.auto_end_date && t.config.event_duration) {
                  o = t.date.add(h[0]._date, D[0].value, "minute");
                  c = new Date(o.getTime() + t.config.event_duration * 60 * 1000);
                  h[1].value = t.templates.calendar_time(c);
                  h[1]._date = t.date.date_part(new Date(c));
                  D[1].value = c.getHours() * 60 + c.getMinutes();
                }
              }
              if (!D[0].$_eventAttached) {
                D[0].addEventListener("change", Z);
              }
            }
            function re(_e, he, be) {
              V(_e, he, be);
              _e.value = t.templates.calendar_time(he);
              _e._date = t.date.date_part(new Date(he));
            }
            function oe(_e) {
              for (var he = i._time_values, be = _e.getHours() * 60 + _e.getMinutes(), Ae = be, He = false, Ne = 0; Ne < he.length; Ne++) {
                var Ve = he[Ne];
                if (Ve === be) {
                  He = true;
                  break;
                }
                if (Ve < be) {
                  Ae = Ve;
                }
              }
              if (He || Ae) {
                if (He) {
                  return be;
                } else {
                  return Ae;
                }
              } else {
                return -1;
              }
            }
            re(h[0], _.start_date, 0);
            re(h[1], _.end_date, 1);
            V = function () {};
            D[0].value = oe(_.start_date);
            D[1].value = oe(_.end_date);
          },
          get_value: function (a, v) {
            var _ = a.getElementsByTagName("input");
            var i = a.getElementsByTagName("select");
            v.start_date = t.date.add(_[0]._date, i[0].value, "minute");
            v.end_date = t.date.add(_[1]._date, i[1].value, "minute");
            if (v.end_date <= v.start_date) {
              v.end_date = t.date.add(v.start_date, t.config.time_step, "minute");
            }
            return {
              start_date: new Date(v.start_date),
              end_date: new Date(v.end_date)
            };
          },
          focus: function (a) {}
        };
        t.linkCalendar = function (a, v) {
          function _() {
            var o = new Date(t._date.valueOf());
            if (v) {
              o = v(o);
            }
            o.setDate(1);
            t.updateCalendar(a, o);
            return true;
          }
          t.attachEvent("onViewChange", _);
          t.attachEvent("onXLE", _);
          t.attachEvent("onEventAdded", _);
          t.attachEvent("onEventChanged", _);
          t.attachEvent("onEventDeleted", _);
          _();
        };
        t._markCalendarCurrentDate = function (a) {
          var v = t.getState();
          var _ = v.min_date;
          var i = v.max_date;
          var o = v.mode;
          var c = t.date.month_start(new Date(a._date));
          var h = t.date.add(c, 1, "month");
          if (!{
            month: true,
            year: true,
            agenda: true,
            grid: true
          }[o] && (_.valueOf() > c.valueOf() || i.valueOf() < h.valueOf())) {
            for (var D = _; D.valueOf() < i.valueOf();) {
              if (c.valueOf() <= D.valueOf() && h > D) {
                t.markCalendar(a, D, "dhx_calendar_click");
              }
              D = t.date.add(D, 1, "day");
            }
          }
        };
        t.attachEvent("onEventCancel", function () {
          t.destroyCalendar(null, true);
        });
        t.attachEvent("onDestroy", function () {
          t.destroyCalendar();
        });
      },
      monthheight: function (t) {
        t.attachEvent("onTemplatesReady", function () {
          t.xy.scroll_width = 0;
          var j = t.render_view_data;
          t.render_view_data = function () {
            var v = this._els.dhx_cal_data[0];
            v.firstChild._h_fix = true;
            j.apply(t, arguments);
            var _ = parseInt(v.style.height);
            v.style.height = "1px";
            v.style.height = v.scrollHeight + "px";
            this._obj.style.height = this._obj.clientHeight + v.scrollHeight - _ + "px";
          };
          var a = t._reset_month_scale;
          t._reset_month_scale = function (v, _, i, o) {
            var c = {
              clientHeight: 100
            };
            a.apply(t, [c, _, i, o]);
            v.innerHTML = c.innerHTML;
          };
        });
      },
      multisection: function (t) {
        Te("Multisection", t.assert);
      },
      multisource: function (t) {
        var j = t._load;
        t._load = function (a, v) {
          if (It(a = a || this._load_url) == "object") {
            for (var _ = (c = undefined, (c = function () {}).prototype = this._loaded, c), i = 0; i < a.length; i++) {
              this._loaded = new _();
              j.call(this, a[i], v);
            }
          } else {
            j.apply(this, arguments);
          }
          var c;
        };
      },
      mvc: function (t) {
        var j;
        var a = {
          use_id: false
        };
        function v(o) {
          var c = {};
          for (var h in o) {
            if (h.indexOf("_") !== 0) {
              c[h] = o[h];
            }
          }
          if (!a.use_id) {
            delete c.id;
          }
          return c;
        }
        function _(o) {
          o._not_render = false;
          if (o._render_wait) {
            o.render_view_data();
          }
          o._loading = false;
          o.callEvent("onXLE", []);
        }
        function i(o) {
          if (a.use_id) {
            return o.id;
          } else {
            return o.cid;
          }
        }
        t.backbone = function (o, c) {
          if (c) {
            a = c;
          }
          o.bind("change", function (V, T) {
            var W = i(V);
            var z = t._events[W] = V.toJSON();
            z.id = W;
            t._init_event(z);
            clearTimeout(j);
            j = setTimeout(function () {
              t.updateView();
            }, 1);
          });
          o.bind("remove", function (V, T) {
            var W = i(V);
            if (t._events[W]) {
              t.deleteEvent(W);
            }
          });
          var h = [];
          function D() {
            if (h.length) {
              t.parse(h, "json");
              h = [];
            }
          }
          o.bind("add", function (V, T) {
            var W = i(V);
            if (!t._events[W]) {
              var z = V.toJSON();
              z.id = W;
              t._init_event(z);
              h.push(z);
              if (h.length == 1) {
                setTimeout(D, 1);
              }
            }
          });
          o.bind("request", function (V) {
            var T;
            if (V instanceof Backbone.Collection) {
              (T = t)._loading = true;
              T._not_render = true;
              T.callEvent("onXLS", []);
            }
          });
          o.bind("sync", function (V) {
            if (V instanceof Backbone.Collection) {
              _(t);
            }
          });
          o.bind("error", function (V) {
            if (V instanceof Backbone.Collection) {
              _(t);
            }
          });
          t.attachEvent("onEventCreated", function (V) {
            var T = new o.model(t.getEvent(V));
            t._events[V] = T.toJSON();
            t._events[V].id = V;
            return true;
          });
          t.attachEvent("onEventAdded", function (V) {
            if (!o.get(V)) {
              var T = v(t.getEvent(V));
              var W = new o.model(T);
              var z = i(W);
              if (z != V) {
                this.changeEventId(V, z);
              }
              o.add(W);
              o.trigger("scheduler:add", W);
            }
            return true;
          });
          t.attachEvent("onEventChanged", function (V) {
            var T = o.get(V);
            var W = v(t.getEvent(V));
            T.set(W);
            o.trigger("scheduler:change", T);
            return true;
          });
          t.attachEvent("onEventDeleted", function (V) {
            var T = o.get(V);
            if (T) {
              o.trigger("scheduler:remove", T);
              o.remove(V);
            }
            return true;
          });
        };
      },
      outerdrag: function (t) {
        t.attachEvent("onTemplatesReady", function () {
          var j;
          var a = new dhtmlDragAndDropObject();
          var v = a.stopDrag;
          function _(i, o, c, h) {
            if (!t.checkEvent("onBeforeExternalDragIn") || t.callEvent("onBeforeExternalDragIn", [i, o, c, h, j])) {
              var D = t.attachEvent("onEventCreated", function (Z) {
                if (!t.callEvent("onExternalDragIn", [Z, i, j])) {
                  this._drag_mode = this._drag_id = null;
                  this.deleteEvent(Z);
                }
              });
              var V = t.getActionData(j);
              var T = {
                start_date: new Date(V.date)
              };
              if (t.matrix && t.matrix[t._mode]) {
                var W = t.matrix[t._mode];
                T[W.y_property] = V.section;
                var z = t._locate_cell_timeline(j);
                T.start_date = W._trace_x[z.x];
                T.end_date = t.date.add(T.start_date, W.x_step, W.x_unit);
              }
              if (t._props && t._props[t._mode]) {
                T[t._props[t._mode].map_to] = V.section;
              }
              t.addEventNow(T);
              t.detachEvent(D);
            }
          }
          a.stopDrag = function (i) {
            j = i;
            return v.apply(this, arguments);
          };
          a.addDragLanding(t._els.dhx_cal_data[0], {
            _drag: function (i, o, c, h) {
              _(i, o, c, h);
            },
            _dragIn: function (i, o) {
              return i;
            },
            _dragOut: function (i) {
              return this;
            }
          });
          if (dhtmlx.DragControl) {
            dhtmlx.DragControl.addDrop(t._els.dhx_cal_data[0], {
              onDrop: function (i, o, c, h) {
                var D = dhtmlx.DragControl.getMaster(i);
                j = h;
                _(i, D, o, h.target || h.srcElement);
              },
              onDragIn: function (i, o, c) {
                return o;
              }
            }, true);
          }
        });
      },
      pdf: function (t) {
        var j;
        var a;
        var v = new RegExp("<[^>]*>", "g");
        var _ = new RegExp("<br[^>]*>", "g");
        function i(Ne) {
          return Ne.replace(_, "\n").replace(v, "");
        }
        function o(Ne, Ve) {
          Ne = parseFloat(Ne);
          Ve = parseFloat(Ve);
          if (!isNaN(Ve)) {
            Ne -= Ve;
          }
          var Se = h(Ne);
          Ne = Ne - Se.width + Se.cols * j;
          if (isNaN(Ne)) {
            return "auto";
          } else {
            return Ne * 100 / j;
          }
        }
        function c(Ne, Ve, Se) {
          Ne = parseFloat(Ne);
          Ve = parseFloat(Ve);
          if (!isNaN(Ve) && Se) {
            Ne -= Ve;
          }
          var Fe = h(Ne);
          Ne = Ne - Fe.width + Fe.cols * j;
          if (isNaN(Ne)) {
            return "auto";
          } else {
            return Ne * 100 / (j - (isNaN(Ve) ? 0 : Ve));
          }
        }
        function h(Ne) {
          for (var Ve = 0, Se = t._els.dhx_cal_header[0].childNodes, Fe = Se[1] ? Se[1].childNodes : Se[0].childNodes, Oe = 0; Oe < Fe.length; Oe++) {
            var ht = parseFloat((Fe[Oe].style ? Fe[Oe] : Fe[Oe].parentNode).style.width);
            if (Ne <= ht) {
              break;
            }
            Ne -= ht + 1;
            Ve += ht + 1;
          }
          return {
            width: Ve,
            cols: Oe
          };
        }
        function D(Ne) {
          Ne = parseFloat(Ne);
          if (isNaN(Ne)) {
            return "auto";
          } else {
            return Ne * 100 / a;
          }
        }
        function V(Ne, Ve) {
          return (window.getComputedStyle ? window.getComputedStyle(Ne, null)[Ve] : Ne.currentStyle ? Ne.currentStyle[Ve] : null) || "";
        }
        function T(Ne, Ve) {
          for (var Se = parseInt(Ne.style.left, 10), Fe = 0; Fe < t._cols.length; Fe++) {
            if ((Se -= t._cols[Fe]) < 0) {
              return Fe;
            }
          }
          return Ve;
        }
        function W(Ne, Ve) {
          for (var Se = parseInt(Ne.style.top, 10), Fe = 0; Fe < t._colsS.heights.length; Fe++) {
            if (t._colsS.heights[Fe] > Se) {
              return Fe;
            }
          }
          return Ve;
        }
        function z(Ne) {
          if (Ne) {
            return "<" + Ne + ">";
          } else {
            return "";
          }
        }
        function Z(Ne) {
          if (Ne) {
            return "</" + Ne + ">";
          } else {
            return "";
          }
        }
        function re(Ne, Ve, Se, Fe) {
          var Oe = "<" + Ne + " profile='" + Ve + "'";
          if (Se) {
            Oe += " header='" + Se + "'";
          }
          if (Fe) {
            Oe += " footer='" + Fe + "'";
          }
          return Oe + ">";
        }
        function oe() {
          var Ne = "";
          var Ve = t._mode;
          if (t.matrix && t.matrix[t._mode]) {
            Ve = t.matrix[t._mode].render == "cell" ? "matrix" : "timeline";
          }
          Ne += "<scale mode='" + Ve + "' today='" + t._els.dhx_cal_date[0].innerHTML + "'>";
          if (t._mode == "week_agenda") {
            for (var Se = t._els.dhx_cal_data[0].getElementsByTagName("DIV"), Fe = 0; Fe < Se.length; Fe++) {
              if (Se[Fe].className == "dhx_wa_scale_bar") {
                Ne += "<column>" + i(Se[Fe].innerHTML) + "</column>";
              }
            }
          } else if (t._mode == "agenda" || t._mode == "map") {
            Ne += "<column>" + i((Se = t._els.dhx_cal_header[0].childNodes[0].childNodes)[0].innerHTML) + "</column><column>" + i(Se[1].innerHTML) + "</column>";
          } else if (t._mode == "year") {
            Se = t._els.dhx_cal_data[0].childNodes;
            Fe = 0;
            Se = t._els.dhx_cal_data[0].childNodes;
            Fe = 0;
            for (; Fe < Se.length; Fe++) {
              Ne += "<month label='" + i(Se[Fe].querySelector(".dhx_year_month").innerHTML) + "'>";
              Ne += he(Se[Fe].querySelector(".dhx_year_week").childNodes);
              Ne += _e(Se[Fe].querySelector(".dhx_year_body"));
              Ne += "</month>";
            }
          } else {
            Ne += "<x>";
            Ne += he(Se = t._els.dhx_cal_header[0].childNodes);
            Ne += "</x>";
            var Oe = t._els.dhx_cal_data[0];
            if (t.matrix && t.matrix[t._mode]) {
              Ne += "<y>";
              Fe = 0;
              for (; Fe < Oe.firstChild.rows.length; Fe++) {
                Ne += "<row><![CDATA[" + i(Oe.firstChild.rows[Fe].cells[0].innerHTML) + "]]></row>";
              }
              Ne += "</y>";
              a = Oe.firstChild.rows[0].cells[0].offsetHeight;
            } else if (Oe.firstChild.tagName == "TABLE") {
              Ne += _e(Oe);
            } else {
              for (Oe = Oe.childNodes[Oe.childNodes.length - 1]; Oe.className.indexOf("dhx_scale_holder") == -1;) {
                Oe = Oe.previousSibling;
              }
              Oe = Oe.childNodes;
              Ne += "<y>";
              Fe = 0;
              for (; Fe < Oe.length; Fe++) {
                Ne += "\n<row><![CDATA[" + i(Oe[Fe].innerHTML) + "]]></row>";
              }
              Ne += "</y>";
              a = Oe[0].offsetHeight;
            }
          }
          return Ne + "</scale>";
        }
        function _e(Ne) {
          for (var Ve = "", Se = Ne.querySelectorAll("tr"), Fe = 0; Fe < Se.length; Fe++) {
            for (var Oe = [], at = Se[Fe].querySelectorAll("td"), ht = 0; ht < at.length; ht++) {
              Oe.push(at[ht].querySelector(".dhx_month_head").innerHTML);
            }
            Ve += "\n<row height='" + at[0].offsetHeight + "'><![CDATA[" + i(Oe.join("|")) + "]]></row>";
            a = at[0].offsetHeight;
          }
          return Ve;
        }
        function he(Ne) {
          var Ve;
          var Se = "";
          if (t.matrix && t.matrix[t._mode]) {
            if (t.matrix[t._mode].second_scale) {
              Ve = Ne[1].childNodes;
            }
            Ne = Ne[0].childNodes;
          }
          for (var Fe = 0; Fe < Ne.length; Fe++) {
            Se += "\n<column><![CDATA[" + i(Ne[Fe].innerHTML) + "]]></column>";
          }
          j = Ne[0].offsetWidth;
          if (Ve) {
            var Oe = 0;
            var at = Ne[0].offsetWidth;
            var ht = 1;
            for (Fe = 0; Fe < Ve.length; Fe++) {
              Se += "\n<column second_scale='" + ht + "'><![CDATA[" + i(Ve[Fe].innerHTML) + "]]></column>";
              if ((Oe += Ve[Fe].offsetWidth) >= at) {
                at += Ne[ht] ? Ne[ht].offsetWidth : 0;
                ht++;
              }
              j = Ve[0].offsetWidth;
            }
          }
          return Se;
        }
        function be(Ne) {
          var Ve = "";
          var Se = t._rendered;
          var Fe = t.matrix && t.matrix[t._mode];
          if (t._mode == "agenda" || t._mode == "map") {
            for (var Oe = 0; Oe < Se.length; Oe++) {
              Ve += "<event><head><![CDATA[" + i(Se[Oe].childNodes[0].innerHTML) + "]]></head><body><![CDATA[" + i(Se[Oe].childNodes[2].innerHTML) + "]]></body></event>";
            }
          } else if (t._mode == "week_agenda") {
            for (Oe = 0; Oe < Se.length; Oe++) {
              Ve += "<event day='" + Se[Oe].parentNode.getAttribute("day") + "'><body>" + i(Se[Oe].innerHTML) + "</body></event>";
            }
          } else if (t._mode == "year") {
            Se = t.get_visible_events();
            Oe = 0;
            Se = t.get_visible_events();
            Oe = 0;
            for (; Oe < Se.length; Oe++) {
              var at = Se[Oe].start_date;
              for (at.valueOf() < t._min_date.valueOf() && (at = t._min_date); at < Se[Oe].end_date;) {
                var ht = at.getMonth() + (at.getFullYear() - t._min_date.getFullYear()) * 12 - t.week_starts._month;
                var lt = t.week_starts[ht] + at.getDate() - 1;
                var mt = Ne ? V(t._get_year_cell(at), "color") : "";
                var ft = Ne ? V(t._get_year_cell(at), "backgroundColor") : "";
                Ve += "<event day='" + lt % 7 + "' week='" + Math.floor(lt / 7) + "' month='" + ht + "' backgroundColor='" + ft + "' color='" + mt + "'></event>";
                if ((at = t.date.add(at, 1, "day")).valueOf() >= t._max_date.valueOf()) {
                  break;
                }
              }
            }
          } else if (Fe && Fe.render == "cell") {
            Se = t._els.dhx_cal_data[0].getElementsByTagName("TD");
            Oe = 0;
            Se = t._els.dhx_cal_data[0].getElementsByTagName("TD");
            Oe = 0;
            for (; Oe < Se.length; Oe++) {
              mt = Ne ? V(Se[Oe], "color") : "";
              Ve += "\n<event><body backgroundColor='" + (ft = Ne ? V(Se[Oe], "backgroundColor") : "") + "' color='" + mt + "'><![CDATA[" + i(Se[Oe].innerHTML) + "]]></body></event>";
            }
          } else {
            for (Oe = 0; Oe < Se.length; Oe++) {
              var yt;
              var xt;
              if (t.matrix && t.matrix[t._mode]) {
                yt = o(Se[Oe].style.left);
                xt = o(Se[Oe].offsetWidth) - 1;
              } else {
                var wt = t.config.use_select_menu_space ? 0 : 26;
                yt = c(Se[Oe].style.left, wt, true);
                xt = c(Se[Oe].style.width, wt) - 1;
              }
              if (!isNaN(xt * 1)) {
                var Dt = D(Se[Oe].style.top);
                var Rt = D(Se[Oe].style.height);
                var Pt = Se[Oe].className.split(" ")[0].replace("dhx_cal_", "");
                if (Pt !== "dhx_tooltip_line") {
                  var Ft = t.getEvent(Se[Oe].getAttribute(t.config.event_attribute));
                  if (Ft) {
                    lt = Ft._sday;
                    var Lt = Ft._sweek;
                    var Bt = Ft._length || 0;
                    if (t._mode == "month") {
                      Rt = parseInt(Se[Oe].offsetHeight, 10);
                      Dt = parseInt(Se[Oe].style.top, 10) - t.xy.month_head_height;
                      lt = T(Se[Oe], lt);
                      Lt = W(Se[Oe], Lt);
                    } else if (t.matrix && t.matrix[t._mode]) {
                      lt = 0;
                      Lt = Se[Oe].parentNode.parentNode.parentNode.rowIndex;
                      var Ut = a;
                      a = Se[Oe].parentNode.offsetHeight;
                      Dt = D(Se[Oe].style.top);
                      Dt -= Dt * 0.2;
                      a = Ut;
                    } else {
                      if (Se[Oe].parentNode == t._els.dhx_cal_data[0]) {
                        continue;
                      }
                      var zt = t._els.dhx_cal_data[0].childNodes[0];
                      var Ht = parseFloat(zt.className.indexOf("dhx_scale_holder") != -1 ? zt.style.left : 0);
                      yt += o(Se[Oe].parentNode.style.left, Ht);
                    }
                    Ve += "\n<event week='" + Lt + "' day='" + lt + "' type='" + Pt + "' x='" + yt + "' y='" + Dt + "' width='" + xt + "' height='" + Rt + "' len='" + Bt + "'>";
                    if (Pt == "event") {
                      Ve += "<header><![CDATA[" + i(Se[Oe].childNodes[1].innerHTML) + "]]></header>";
                      mt = Ne ? V(Se[Oe].childNodes[2], "color") : "";
                      Ve += "<body backgroundColor='" + (ft = Ne ? V(Se[Oe].childNodes[2], "backgroundColor") : "") + "' color='" + mt + "'><![CDATA[" + i(Se[Oe].childNodes[2].innerHTML) + "]]></body>";
                    } else {
                      mt = Ne ? V(Se[Oe], "color") : "";
                      Ve += "<body backgroundColor='" + (ft = Ne ? V(Se[Oe], "backgroundColor") : "") + "' color='" + mt + "'><![CDATA[" + i(Se[Oe].innerHTML) + "]]></body>";
                    }
                    Ve += "</event>";
                  }
                }
              }
            }
          }
          return Ve;
        }
        function Ae(Ne, Ve, Se, Fe, Oe, at) {
          var ht = false;
          if (Fe == "fullcolor") {
            ht = true;
            Fe = "color";
          }
          Fe = Fe || "color";
          var lt = "";
          if (Ne) {
            var mt = t._date;
            var ft = t._mode;
            Ve = t.date[Se + "_start"](Ve);
            Ve = t.date["get_" + Se + "_end"] ? t.date["get_" + Se + "_end"](Ve) : t.date.add(Ve, 1, Se);
            lt = re("pages", Fe, Oe, at);
            for (var yt = new Date(Ne); +yt < +Ve; yt = this.date.add(yt, 1, Se)) {
              this.setCurrentView(yt, Se);
              lt += z("page") + oe().replace("–", "-") + be(ht) + Z("page");
            }
            lt += Z("pages");
            this.setCurrentView(mt, ft);
          } else {
            lt = re("data", Fe, Oe, at) + oe().replace("–", "-") + be(ht) + Z("data");
          }
          return lt;
        }
        function He(Ne, Ve, Se, Fe, Oe, at, ht) {
          var lt;
          var mt;
          var ft;
          var yt;
          lt = Tt(Oe) == "object" ? function (lt) {
            for (var mt = "<data>", ft = 0; ft < lt.length; ft++) {
              mt += lt[ft].source.getPDFData(lt[ft].start, lt[ft].end, lt[ft].view, lt[ft].mode, lt[ft].header, lt[ft].footer);
            }
            return mt + "</data>";
          }(Oe) : Ae.apply(this, [Ne, Ve, Se, Oe, at, ht]);
          mt = Fe;
          ft = t.uid();
          (yt = document.createElement("div")).style.display = "none";
          document.body.appendChild(yt);
          yt.innerHTML = "<form id=\"" + ft + "\" method=\"post\" target=\"_blank\" action=\"" + mt + "\" accept-charset=\"utf-8\" enctype=\"application/x-www-form-urlencoded\"><input type=\"hidden\" name=\"mycoolxmlbody\"/> </form>";
          document.getElementById(ft).firstChild.value = encodeURIComponent(lt);
          document.getElementById(ft).submit();
          yt.parentNode.removeChild(yt);
        }
        t.getPDFData = Ae;
        t.toPDF = function (Ne, Ve, Se, Fe) {
          return He.apply(this, [null, null, null, Ne, Ve, Se, Fe]);
        };
        t.toPDFRange = function (Ne, Ve, Se, Fe, Oe, at, ht) {
          if (typeof Ne == "string") {
            Ne = t.templates.api_date(Ne);
            Ve = t.templates.api_date(Ve);
          }
          return He.apply(this, arguments);
        };
      },
      quick_info: function (t) {
        t.config.icons_select = ["icon_details", "icon_delete"];
        t.config.details_on_create = true;
        t.config.show_quick_info = true;
        t.xy.menu_width = 0;
        t.attachEvent("onClick", function (j) {
          if (t.config.show_quick_info) {
            t.showQuickInfo(j);
            return true;
          }
        });
        (function () {
          for (var j = ["onEmptyClick", "onViewChange", "onLightbox", "onBeforeEventDelete", "onBeforeDrag"], a = function () {
              t.hideQuickInfo(true);
              return true;
            }, v = 0; v < j.length; v++) {
            t.attachEvent(j[v], a);
          }
        })();
        t.templates.quick_info_title = function (j, a, v) {
          return v.text.substr(0, 50);
        };
        t.templates.quick_info_content = function (j, a, v) {
          return v.details || v.text;
        };
        t.templates.quick_info_date = function (j, a, v) {
          if (t.isOneDayEvent(v) && t.config.rtl) {
            return t.templates.day_date(j, a, v) + " " + t.templates.event_header(a, j, v);
          } else if (t.isOneDayEvent(v)) {
            return t.templates.day_date(j, a, v) + " " + t.templates.event_header(j, a, v);
          } else if (t.config.rtl) {
            return t.templates.week_date(a, j, v);
          } else {
            return t.templates.week_date(j, a, v);
          }
        };
        t.showQuickInfo = function (j) {
          if (j != this._quick_info_box_id && (this.hideQuickInfo(true), this.callEvent("onBeforeQuickInfo", [j]) !== false)) {
            var a = this._get_event_counter_part(j);
            if (a) {
              this._quick_info_box = this._init_quick_info(a);
              this._fill_quick_data(j);
              this._show_quick_info(a);
              this.callEvent("onQuickInfo", [j]);
            }
          }
        };
        (function () {
          function j(a) {
            a = a || "";
            var v;
            var _ = parseFloat(a);
            var i = a.match(/m?s/);
            i &&= i[0];
            switch (i) {
              case "s":
                v = _ * 1000;
                break;
              case "ms":
                v = _;
                break;
              default:
                v = 0;
            }
            return v;
          }
          t.hideQuickInfo = function (a) {
            var v = this._quick_info_box;
            var _ = this._quick_info_box_id;
            this._quick_info_box_id = 0;
            if (v && v.parentNode) {
              var i = v.offsetWidth;
              if (t.config.quick_info_detached) {
                this.callEvent("onAfterQuickInfo", [_]);
                return v.parentNode.removeChild(v);
              }
              if (v.style.right == "auto") {
                v.style.left = -i + "px";
              } else {
                v.style.right = -i + "px";
              }
              if (a) {
                v.parentNode.removeChild(v);
              } else {
                var o;
                if (window.getComputedStyle) {
                  o = window.getComputedStyle(v, null);
                } else if (v.currentStyle) {
                  o = v.currentStyle;
                }
                var c = j(o["transition-delay"]) + j(o["transition-duration"]);
                setTimeout(function () {
                  if (v.parentNode) {
                    v.parentNode.removeChild(v);
                  }
                }, c);
              }
              this.callEvent("onAfterQuickInfo", [_]);
            }
          };
        })();
        t.event(window, "keydown", function (j) {
          if (j.keyCode == 27) {
            t.hideQuickInfo();
          }
        });
        t._show_quick_info = function (j) {
          var a = t._quick_info_box;
          t._obj.appendChild(a);
          var v = a.offsetWidth;
          var _ = a.offsetHeight;
          if (t.config.quick_info_detached) {
            var i = j.left - j.dx * (v - j.width);
            if (i + v > window.innerWidth) {
              i = window.innerWidth - v;
            }
            i = Math.max(0, i);
            a.style.left = i + "px";
            a.style.top = j.top - (j.dy ? _ : -j.height) + "px";
          } else {
            a.style.top = this.xy.scale_height + this.xy.nav_height + 20 + "px";
            if (j.dx == 1) {
              a.style.right = "auto";
              a.style.left = -v + "px";
              setTimeout(function () {
                a.style.left = "-10px";
              }, 1);
            } else {
              a.style.left = "auto";
              a.style.right = -v + "px";
              setTimeout(function () {
                a.style.right = "-10px";
              }, 1);
            }
            a.className = a.className.replace(" dhx_qi_left", "").replace(" dhx_qi_right", "") + " dhx_qi_" + (j.dx == 1 ? "left" : "right");
          }
        };
        t.attachEvent("onTemplatesReady", function () {
          t.hideQuickInfo();
          if (this._quick_info_box) {
            var j = this._quick_info_box;
            if (j.parentNode) {
              j.parentNode.removeChild(j);
            }
            this._quick_info_box = null;
          }
        });
        t._quick_info_onscroll_handler = function (j) {
          t.hideQuickInfo();
        };
        t._init_quick_info = function () {
          if (!this._quick_info_box) {
            var j = t.xy;
            var a = this._quick_info_box = document.createElement("div");
            this._waiAria.quickInfoAttr(a);
            a.className = "dhx_cal_quick_info";
            if (t.$testmode) {
              a.className += " dhx_no_animate";
            }
            if (t.config.rtl) {
              a.className += " dhx_quick_info_rtl";
            }
            var v = this._waiAria.quickInfoHeaderAttrString();
            var _ = "<div class=\"dhx_cal_qi_title\" style=\"height:" + j.quick_info_title + "px\" " + v + "><div class=\"dhx_cal_qi_tcontent\"></div><div  class=\"dhx_cal_qi_tdate\"></div></div><div class=\"dhx_cal_qi_content\"></div>";
            _ += "<div class=\"dhx_cal_qi_controls\" style=\"height:" + j.quick_info_buttons + "px\">";
            for (var i = t.config.icons_select, o = 0; o < i.length; o++) {
              _ += "<div " + (v = this._waiAria.quickInfoButtonAttrString(this.locale.labels[i[o]])) + " class=\"dhx_qi_big_icon " + i[o] + "\" title=\"" + t.locale.labels[i[o]] + "\"><div class='dhx_menu_icon " + i[o] + "'></div><div>" + t.locale.labels[i[o]] + "</div></div>";
            }
            a.innerHTML = _ += "</div>";
            t.event(a, "click", function (c) {
              t._qi_button_click(c.target || c.srcElement);
            });
            if (t.config.quick_info_detached) {
              t._detachDomEvent(t._els.dhx_cal_data[0], "scroll", t._quick_info_onscroll_handler);
              t.event(t._els.dhx_cal_data[0], "scroll", t._quick_info_onscroll_handler);
            }
          }
          return this._quick_info_box;
        };
        t._qi_button_click = function (j) {
          if (j && j != t._quick_info_box) {
            var v = t._getClassName(j);
            if (v.indexOf("_icon") != -1) {
              var _ = t._quick_info_box_id;
              t._click.buttons[v.split(" ")[1].replace("icon_", "")](_);
            } else {
              t._qi_button_click(j.parentNode);
            }
          }
        };
        t._get_event_counter_part = function (j) {
          for (var a = t.getRenderedEvent(j), v = 0, _ = 0, i = a; i && i != t._obj;) {
            v += i.offsetLeft;
            _ += i.offsetTop - i.scrollTop;
            i = i.offsetParent;
          }
          if (i) {
            return {
              left: v,
              top: _,
              dx: v + a.offsetWidth / 2 > t._x / 2 ? 1 : 0,
              dy: _ + a.offsetHeight / 2 > t._y / 2 ? 1 : 0,
              width: a.offsetWidth,
              height: a.offsetHeight
            };
          } else {
            return 0;
          }
        };
        t._fill_quick_data = function (j) {
          var a = t.getEvent(j);
          var v = t._quick_info_box;
          t._quick_info_box_id = j;
          var _ = {
            content: t.templates.quick_info_title(a.start_date, a.end_date, a),
            date: t.templates.quick_info_date(a.start_date, a.end_date, a)
          };
          var i = v.firstChild.firstChild;
          i.innerHTML = _.content;
          i.nextSibling.innerHTML = _.date;
          t._waiAria.quickInfoHeader(v, [_.content, _.date].join(" "));
          v.firstChild.nextSibling.innerHTML = t.templates.quick_info_content(a.start_date, a.end_date, a);
        };
      },
      readonly: function (t) {
        t.attachEvent("onTemplatesReady", function () {
          var j;
          if (t.form_blocks.recurring) {
            j = t.form_blocks.recurring.set_value;
          }
          var a = t.config.buttons_left.slice();
          var v = t.config.buttons_right.slice();
          function _(h, D, V, T) {
            for (var W = D.getElementsByTagName(h), z = V.getElementsByTagName(h), Z = z.length - 1; Z >= 0; Z--) {
              V = z[Z];
              if (T) {
                var re = document.createElement("span");
                re.className = "dhx_text_disabled";
                re.innerHTML = T(W[Z]);
                V.parentNode.insertBefore(re, V);
                V.parentNode.removeChild(V);
              } else {
                V.disabled = true;
                if (D.checked) {
                  V.checked = true;
                }
              }
            }
          }
          t.attachEvent("onBeforeLightbox", function (h) {
            if (this.config.readonly_form || this.getEvent(h).readonly) {
              this.config.readonly_active = true;
            } else {
              this.config.readonly_active = false;
              t.config.buttons_left = a.slice();
              t.config.buttons_right = v.slice();
              if (t.form_blocks.recurring) {
                t.form_blocks.recurring.set_value = j;
              }
            }
            var D = this.config.lightbox.sections;
            if (this.config.readonly_active) {
              for (var V = 0; V < D.length; V++) {
                if (D[V].type == "recurring" && this.config.readonly_active && t.form_blocks.recurring) {
                  t.form_blocks.recurring.set_value = function (he, be, Ae) {
                    var He = t.$domHelpers.closest(he, ".dhx_wrap_section");
                    He.querySelector(".dhx_cal_lsection").display = "none";
                    He.querySelector(".dhx_form_repeat").display = "none";
                    He.style.display = "none";
                    t.setLightboxSize();
                  };
                }
              }
              var T = ["dhx_delete_btn", "dhx_save_btn"];
              var W = [t.config.buttons_left, t.config.buttons_right];
              for (V = 0; V < T.length; V++) {
                for (var z = T[V], Z = 0; Z < W.length; Z++) {
                  for (var re = W[Z], oe = -1, _e = 0; _e < re.length; _e++) {
                    if (re[_e] == z) {
                      oe = _e;
                      break;
                    }
                  }
                  if (oe != -1) {
                    re.splice(oe, 1);
                  }
                }
              }
            }
            this.resetLightbox();
            return true;
          });
          var i = t._fill_lightbox;
          t._fill_lightbox = function () {
            var h = this.getLightbox();
            if (this.config.readonly_active) {
              h.style.visibility = "hidden";
              h.style.display = "block";
            }
            var D = i.apply(this, arguments);
            if (this.config.readonly_active) {
              h.style.visibility = "";
              h.style.display = "none";
            }
            if (this.config.readonly_active) {
              var V = this.getLightbox();
              var T = this._lightbox_r = V.cloneNode(true);
              T.id = t.uid();
              T.className += " dhx_cal_light_readonly";
              _("textarea", V, T, function (W) {
                return W.value;
              });
              _("input", V, T, false);
              _("select", V, T, function (W) {
                if (W.options.length) {
                  return W.options[Math.max(W.selectedIndex || 0, 0)].text;
                } else {
                  return "";
                }
              });
              V.parentNode.insertBefore(T, V);
              o.call(this, T);
              if (t._lightbox) {
                t._lightbox.parentNode.removeChild(t._lightbox);
              }
              this._lightbox = T;
              if (t.config.drag_lightbox) {
                t.event(T.firstChild, "mousedown", t._ready_to_dnd);
              }
              t._init_lightbox_events();
              this.setLightboxSize();
            }
            return D;
          };
          var o = t.showCover;
          t.showCover = function () {
            if (!this.config.readonly_active) {
              o.apply(this, arguments);
            }
          };
          var c = t.hide_lightbox;
          t.hide_lightbox = function () {
            if (this._lightbox_r) {
              this._lightbox_r.parentNode.removeChild(this._lightbox_r);
              this._lightbox_r = this._lightbox = null;
            }
            return c.apply(this, arguments);
          };
        });
      },
      recurring: function (t) {
        function j() {
          var _ = t.formSection("recurring");
          _ ||= a("recurring");
          if (!_) {
            throw new Error(["Can't locate the Recurring form section.", "Make sure that you have the recurring control on the lightbox configuration https://docs.dhtmlx.com/scheduler/recurring_events.html#recurringlightbox ", "and that the recurring control has name \"recurring\":", "", "scheduler.config.lightbox.sections = [", "\t{name:\"recurring\", ... }", "];"].join("\n"));
          }
          return _;
        }
        function a(_) {
          for (var i = 0; i < t.config.lightbox.sections.length; i++) {
            var o = t.config.lightbox.sections[i];
            if (o.type === _) {
              return t.formSection(o.name);
            }
          }
          return null;
        }
        function v(_) {
          return new Date(_.getFullYear(), _.getMonth(), _.getDate(), _.getHours(), _.getMinutes(), _.getSeconds(), 0);
        }
        var _;
        t.config.occurrence_timestamp_in_utc = false;
        t.config.recurring_workdays = [1, 2, 3, 4, 5];
        t.form_blocks.recurring = {
          _get_node: function (_) {
            if (typeof _ == "string") {
              _ = document.getElementById(_);
            }
            if (_.style.display == "none") {
              _.style.display = "";
            }
            return _;
          },
          _outer_html: function (_) {
            return _.outerHTML || (i = _, (c = document.createElement("div")).appendChild(i.cloneNode(true)), o = c.innerHTML, c = null, o);
            var i;
            var o;
            var c;
          },
          render: function (_) {
            if (_.form) {
              var i = t.form_blocks.recurring;
              var o = i._get_node(_.form);
              var c = i._outer_html(o);
              o.style.display = "none";
              return c;
            }
            var h = t.locale.labels;
            return "<div class=\"dhx_form_repeat\"> <form> <div class=\"dhx_repeat_left\"> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"repeat\" value=\"day\" />" + h.repeat_radio_day + "</label><br /> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"repeat\" value=\"week\"/>" + h.repeat_radio_week + "</label><br /> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"repeat\" value=\"month\" checked />" + h.repeat_radio_month + "</label><br /> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"repeat\" value=\"year\" />" + h.repeat_radio_year + "</label> </div> <div class=\"dhx_repeat_divider\"></div> <div class=\"dhx_repeat_center\"> <div style=\"display:none;\" id=\"dhx_repeat_day\"> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"day_type\" value=\"d\"/>" + h.repeat_radio_day_type + "</label><label><input class=\"dhx_repeat_text\" type=\"text\" name=\"day_count\" value=\"1\" />" + h.repeat_text_day_count + "</label><br /> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"day_type\" checked value=\"w\"/>" + h.repeat_radio_day_type2 + "</label> </div> <div style=\"display:none;\" id=\"dhx_repeat_week\"><label>" + h.repeat_week + "<input class=\"dhx_repeat_text\" type=\"text\" name=\"week_count\" value=\"1\" /></label><span>" + h.repeat_text_week_count + "</span><br /> <table class=\"dhx_repeat_days\"> <tr> <td> <label><input class=\"dhx_repeat_checkbox\" type=\"checkbox\" name=\"week_day\" value=\"1\" />" + h.day_for_recurring[1] + "</label><br /> <label><input class=\"dhx_repeat_checkbox\" type=\"checkbox\" name=\"week_day\" value=\"4\" />" + h.day_for_recurring[4] + "</label> </td> <td> <label><input class=\"dhx_repeat_checkbox\" type=\"checkbox\" name=\"week_day\" value=\"2\" />" + h.day_for_recurring[2] + "</label><br /> <label><input class=\"dhx_repeat_checkbox\" type=\"checkbox\" name=\"week_day\" value=\"5\" />" + h.day_for_recurring[5] + "</label> </td> <td> <label><input class=\"dhx_repeat_checkbox\" type=\"checkbox\" name=\"week_day\" value=\"3\" />" + h.day_for_recurring[3] + "</label><br /> <label><input class=\"dhx_repeat_checkbox\" type=\"checkbox\" name=\"week_day\" value=\"6\" />" + h.day_for_recurring[6] + "</label> </td> <td> <label><input class=\"dhx_repeat_checkbox\" type=\"checkbox\" name=\"week_day\" value=\"0\" />" + h.day_for_recurring[0] + "</label><br /><br /> </td> </tr> </table> </div> <div id=\"dhx_repeat_month\"> <label class = \"dhx_repeat_month_label\"><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"month_type\" value=\"d\"/>" + h.repeat_radio_month_type + "</label><label><input class=\"dhx_repeat_text\" type=\"text\" name=\"month_day\" value=\"1\" />" + h.repeat_text_month_day + "</label><label><input class=\"dhx_repeat_text\" type=\"text\" name=\"month_count\" value=\"1\" />" + h.repeat_text_month_count + "</label><br /> <label class = \"dhx_repeat_month_label\"><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"month_type\" checked value=\"w\"/>" + h.repeat_radio_month_start + "</label><input class=\"dhx_repeat_text\" type=\"text\" name=\"month_week2\" value=\"1\" /><label><select name=\"month_day2\">\t<option value=\"1\" selected >" + t.locale.date.day_full[1] + "<option value=\"2\">" + t.locale.date.day_full[2] + "<option value=\"3\">" + t.locale.date.day_full[3] + "<option value=\"4\">" + t.locale.date.day_full[4] + "<option value=\"5\">" + t.locale.date.day_full[5] + "<option value=\"6\">" + t.locale.date.day_full[6] + "<option value=\"0\">" + t.locale.date.day_full[0] + "</select>" + h.repeat_text_month_count2_before + "</label><label><input class=\"dhx_repeat_text\" type=\"text\" name=\"month_count2\" value=\"1\" />" + h.repeat_text_month_count2_after + "</label><br /> </div> <div style=\"display:none;\" id=\"dhx_repeat_year\"> <label class = \"dhx_repeat_year_label\"><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"year_type\" value=\"d\"/>" + h.repeat_radio_day_type + "</label><label><input class=\"dhx_repeat_text\" type=\"text\" name=\"year_day\" value=\"1\" />" + h.repeat_text_year_day + "</label><label><select name=\"year_month\"><option value=\"0\" selected >" + h.month_for_recurring[0] + "<option value=\"1\">" + h.month_for_recurring[1] + "<option value=\"2\">" + h.month_for_recurring[2] + "<option value=\"3\">" + h.month_for_recurring[3] + "<option value=\"4\">" + h.month_for_recurring[4] + "<option value=\"5\">" + h.month_for_recurring[5] + "<option value=\"6\">" + h.month_for_recurring[6] + "<option value=\"7\">" + h.month_for_recurring[7] + "<option value=\"8\">" + h.month_for_recurring[8] + "<option value=\"9\">" + h.month_for_recurring[9] + "<option value=\"10\">" + h.month_for_recurring[10] + "<option value=\"11\">" + h.month_for_recurring[11] + "</select>" + h.select_year_month + "</label><br /> <label class = \"dhx_repeat_year_label\"><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"year_type\" checked value=\"w\"/>" + h.repeat_year_label + "</label><input class=\"dhx_repeat_text\" type=\"text\" name=\"year_week2\" value=\"1\" /><select name=\"year_day2\"><option value=\"1\" selected >" + t.locale.date.day_full[1] + "<option value=\"2\">" + t.locale.date.day_full[2] + "<option value=\"3\">" + t.locale.date.day_full[3] + "<option value=\"4\">" + t.locale.date.day_full[4] + "<option value=\"5\">" + t.locale.date.day_full[5] + "<option value=\"6\">" + t.locale.date.day_full[6] + "<option value=\"7\">" + t.locale.date.day_full[0] + "</select>" + h.select_year_day2 + "<select name=\"year_month2\"><option value=\"0\" selected >" + h.month_for_recurring[0] + "<option value=\"1\">" + h.month_for_recurring[1] + "<option value=\"2\">" + h.month_for_recurring[2] + "<option value=\"3\">" + h.month_for_recurring[3] + "<option value=\"4\">" + h.month_for_recurring[4] + "<option value=\"5\">" + h.month_for_recurring[5] + "<option value=\"6\">" + h.month_for_recurring[6] + "<option value=\"7\">" + h.month_for_recurring[7] + "<option value=\"8\">" + h.month_for_recurring[8] + "<option value=\"9\">" + h.month_for_recurring[9] + "<option value=\"10\">" + h.month_for_recurring[10] + "<option value=\"11\">" + h.month_for_recurring[11] + "</select><br /> </div> </div> <div class=\"dhx_repeat_divider\"></div> <div class=\"dhx_repeat_right\"> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"end\" checked/>" + h.repeat_radio_end + "</label><br /> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"end\" />" + h.repeat_radio_end2 + "</label><input class=\"dhx_repeat_text\" type=\"text\" name=\"occurences_count\" value=\"1\" />" + h.repeat_text_occurences_count + "<br /> <label><input class=\"dhx_repeat_radio\" type=\"radio\" name=\"end\" />" + h.repeat_radio_end3 + "</label><input class=\"dhx_repeat_date\" type=\"text\" name=\"date_of_end\" value=\"" + t.config.repeat_date_of_end + "\" /><br /> </div> </form> </div> <div style=\"clear:both\"> </div>";
          },
          _ds: {},
          _get_form_node: function (_, i, o) {
            var c = _[i];
            if (!c) {
              return null;
            }
            if (c.nodeName) {
              return c;
            }
            if (c.length) {
              for (var h = 0; h < c.length; h++) {
                if (c[h].value == o) {
                  return c[h];
                }
              }
            }
          },
          _get_node_value: function (_, i, o) {
            var c = _[i];
            if (!c) {
              return "";
            }
            if (c.length) {
              if (o) {
                for (var h = [], D = 0; D < c.length; D++) {
                  if (c[D].checked) {
                    h.push(c[D].value);
                  }
                }
                return h;
              }
              for (D = 0; D < c.length; D++) {
                if (c[D].checked) {
                  return c[D].value;
                }
              }
            }
            if (c.value) {
              if (o) {
                return [c.value];
              } else {
                return c.value;
              }
            } else {
              return undefined;
            }
          },
          _get_node_numeric_value: function (_, i) {
            return t.form_blocks.recurring._get_node_value(_, i) * 1 || 0;
          },
          _set_node_value: function (_, i, o) {
            var c = _[i];
            if (c) {
              if (c.name == i) {
                c.value = o;
              } else if (c.length) {
                for (var h = St(o) == "object", D = 0; D < c.length; D++) {
                  if (h || c[D].value == o) {
                    c[D].checked = h ? !!o[c[D].value] : !!o;
                  }
                }
              }
            }
          },
          _init_set_value: function (_, i, o) {
            var c = t.form_blocks.recurring;
            var h = c._get_node_value;
            var D = c._set_node_value;
            t.form_blocks.recurring._ds = {
              start: o.start_date,
              end: o._end_date
            };
            var V = t.date.str_to_date(t.config.repeat_date, false, true);
            var W = t.date.date_to_str(t.config.repeat_date);
            var z = _.getElementsByTagName("FORM")[0];
            var Z = {};
            function re(Se) {
              for (var Fe = 0; Fe < Se.length; Fe++) {
                var Oe = Se[Fe];
                if (Oe.name) {
                  if (Z[Oe.name]) {
                    if (Z[Oe.name].nodeType) {
                      Z[Oe.name] = [Z[Oe.name], Oe];
                    } else {
                      Z[Oe.name].push(Oe);
                    }
                  } else {
                    Z[Oe.name] = Oe;
                  }
                }
              }
            }
            re(z.getElementsByTagName("INPUT"));
            re(z.getElementsByTagName("SELECT"));
            if (!t.config.repeat_date_of_end) {
              var oe = t.date.date_to_str(t.config.repeat_date);
              t.config.repeat_date_of_end = oe(t.date.add(t._currentDate(), 30, "day"));
            }
            D(Z, "date_of_end", t.config.repeat_date_of_end);
            function _e(Se) {
              return document.getElementById(Se) || {
                style: {}
              };
            }
            function he() {
              _e("dhx_repeat_day").style.display = "none";
              _e("dhx_repeat_week").style.display = "none";
              _e("dhx_repeat_month").style.display = "none";
              _e("dhx_repeat_year").style.display = "none";
              _e("dhx_repeat_" + this.value).style.display = "block";
              t.setLightboxSize();
            }
            function be(Se, Fe) {
              var Oe = Se.end;
              if (Oe.length) {
                if (Oe[0].value && Oe[0].value != "on") {
                  for (var at = 0; at < Oe.length; at++) {
                    if (Oe[at].value == Fe) {
                      Oe[at].checked = true;
                    }
                  }
                } else {
                  var ht = 0;
                  switch (Fe) {
                    case "no":
                      ht = 0;
                      break;
                    case "date_of_end":
                      ht = 2;
                      break;
                    default:
                      ht = 1;
                  }
                  Oe[ht].checked = true;
                }
              } else {
                Oe.value = Fe;
              }
            }
            t.form_blocks.recurring._get_repeat_code = function (Se) {
              var Fe = [h(Z, "repeat")];
              for (Ae[Fe[0]](Fe, Se); Fe.length < 5;) {
                Fe.push("");
              }
              var Oe = "";
              var at = function (ht) {
                var lt = ht.end;
                if (lt.length) {
                  for (var mt = 0; mt < lt.length; mt++) {
                    if (lt[mt].checked) {
                      if (lt[mt].value && lt[mt].value != "on") {
                        return lt[mt].value;
                      } else if (mt) {
                        if (mt == 2) {
                          return "date_of_end";
                        } else {
                          return "occurences_count";
                        }
                      } else {
                        return "no";
                      }
                    }
                  }
                } else if (lt.value) {
                  return lt.value;
                }
                return "no";
              }(Z);
              if (at == "no") {
                Se.end = new Date(9999, 1, 1);
                Oe = "no";
              } else if (at == "date_of_end") {
                Se.end = function (Se) {
                  var Fe = V(Se);
                  if (t.config.include_end_by) {
                    Fe = t.date.add(Fe, 1, "day");
                  }
                  return Fe;
                }(h(Z, "date_of_end"));
              } else {
                t.transpose_type(Fe.join("_"));
                Oe = Math.max(1, h(Z, "occurences_count"));
                Se.end = t.date["add_" + Fe.join("_")](new Date(Se.start), Oe + 0, {
                  start_date: Se.start
                }) || Se.start;
              }
              return Fe.join("_") + "#" + Oe;
            };
            var Ae = {
              month: function (Se, Fe) {
                var Oe = t.form_blocks.recurring._get_node_value;
                var at = t.form_blocks.recurring._get_node_numeric_value;
                if (Oe(Z, "month_type") == "d") {
                  Se.push(Math.max(1, at(Z, "month_count")));
                  Fe.start.setDate(Oe(Z, "month_day"));
                } else {
                  Se.push(Math.max(1, at(Z, "month_count2")));
                  Se.push(Oe(Z, "month_day2"));
                  Se.push(Math.max(1, at(Z, "month_week2")));
                  if (!t.config.repeat_precise) {
                    Fe.start.setDate(1);
                  }
                }
                Fe._start = true;
              },
              week: function (Se, Fe) {
                var Oe = t.form_blocks.recurring._get_node_value;
                Se.push(Math.max(1, (0, t.form_blocks.recurring._get_node_numeric_value)(Z, "week_count")));
                Se.push("");
                Se.push("");
                for (var ht = [], lt = Oe(Z, "week_day", true), mt = Fe.start.getDay(), ft = false, yt = 0; yt < lt.length; yt++) {
                  ht.push(lt[yt]);
                  ft = ft || lt[yt] == mt;
                }
                if (!ht.length) {
                  ht.push(mt);
                  ft = true;
                }
                ht.sort();
                if (t.config.repeat_precise) {
                  if (!ft) {
                    t.transpose_day_week(Fe.start, ht, 1, 7);
                    Fe._start = true;
                  }
                } else {
                  Fe.start = t.date.week_start(Fe.start);
                  Fe._start = true;
                }
                Se.push(ht.join(","));
              },
              day: function (Se) {
                var Oe = t.form_blocks.recurring._get_node_numeric_value;
                if ((0, t.form_blocks.recurring._get_node_value)(Z, "day_type") == "d") {
                  Se.push(Math.max(1, Oe(Z, "day_count")));
                } else {
                  Se.push("week");
                  Se.push(1);
                  Se.push("");
                  Se.push("");
                  Se.push(t.config.recurring_workdays.join(","));
                  Se.splice(0, 1);
                }
              },
              year: function (Se, Fe) {
                var Oe = t.form_blocks.recurring._get_node_value;
                if (Oe(Z, "year_type") == "d") {
                  Se.push("1");
                  Fe.start.setMonth(0);
                  Fe.start.setDate(Oe(Z, "year_day"));
                  Fe.start.setMonth(Oe(Z, "year_month"));
                } else {
                  Se.push("1");
                  Se.push(Oe(Z, "year_day2"));
                  Se.push(Oe(Z, "year_week2"));
                  Fe.start.setDate(1);
                  Fe.start.setMonth(Oe(Z, "year_month2"));
                }
                Fe._start = true;
              }
            };
            var He = {
              week: function (Se, Fe) {
                var Oe = t.form_blocks.recurring._set_node_value;
                Oe(Z, "week_count", Se[1]);
                for (var at = Se[4].split(","), ht = {}, lt = 0; lt < at.length; lt++) {
                  ht[at[lt]] = true;
                }
                Oe(Z, "week_day", ht);
              },
              month: function (Se, Fe) {
                var Oe = t.form_blocks.recurring._set_node_value;
                if (Se[2] === "") {
                  Oe(Z, "month_type", "d");
                  Oe(Z, "month_count", Se[1]);
                  Oe(Z, "month_day", Fe.start.getDate());
                } else {
                  Oe(Z, "month_type", "w");
                  Oe(Z, "month_count2", Se[1]);
                  Oe(Z, "month_week2", Se[3]);
                  Oe(Z, "month_day2", Se[2]);
                }
              },
              day: function (Se, Fe) {
                var Oe = t.form_blocks.recurring._set_node_value;
                Oe(Z, "day_type", "d");
                Oe(Z, "day_count", Se[1]);
              },
              year: function (Se, Fe) {
                var Oe = t.form_blocks.recurring._set_node_value;
                if (Se[2] === "") {
                  Oe(Z, "year_type", "d");
                  Oe(Z, "year_day", Fe.start.getDate());
                  Oe(Z, "year_month", Fe.start.getMonth());
                } else {
                  Oe(Z, "year_type", "w");
                  Oe(Z, "year_week2", Se[3]);
                  Oe(Z, "year_day2", Se[2]);
                  Oe(Z, "year_month2", Fe.start.getMonth());
                }
              }
            };
            t.form_blocks.recurring._set_repeat_code = function (Se, Fe) {
              var Oe = t.form_blocks.recurring._set_node_value;
              var at = Se.split("#");
              Se = at[0].split("_");
              He[Se[0]](Se, Fe);
              switch (at[1]) {
                case "no":
                  be(Z, "no");
                  break;
                case "":
                  be(Z, "date_of_end");
                  var ht = Fe.end;
                  if (t.config.include_end_by) {
                    ht = t.date.add(ht, -1, "day");
                  }
                  Oe(Z, "date_of_end", W(ht));
                  break;
                default:
                  be(Z, "occurences_count");
                  Oe(Z, "occurences_count", at[1]);
              }
              Oe(Z, "repeat", Se[0]);
              var lt = t.form_blocks.recurring._get_form_node(Z, "repeat", Se[0]);
              if (lt.nodeName == "SELECT") {
                lt.dispatchEvent(new Event("change"));
                lt.dispatchEvent(new MouseEvent("click"));
              } else {
                lt.dispatchEvent(new MouseEvent("click"));
              }
            };
            for (var Ne = 0; Ne < z.elements.length; Ne++) {
              var Ve = z.elements[Ne];
              if (Ve.name === "repeat") {
                if (Ve.nodeName != "SELECT" || Ve.$_eventAttached) {
                  if (!Ve.$_eventAttached) {
                    Ve.$_eventAttached = true;
                    Ve.addEventListener("click", he);
                  }
                } else {
                  Ve.$_eventAttached = true;
                  Ve.addEventListener("change", he);
                }
              }
            }
            t._lightbox._rec_init_done = true;
          },
          set_value: function (_, i, o) {
            var c = t.form_blocks.recurring;
            if (!t._lightbox._rec_init_done) {
              c._init_set_value(_, i, o);
            }
            _.open = !o.rec_type;
            _.blocked = this._is_modified_occurence(o);
            var h = c._ds;
            h.start = o.start_date;
            h.end = o._end_date;
            c._toggle_block();
            if (i) {
              c._set_repeat_code(i, h);
            }
          },
          get_value: function (_, i) {
            if (_.open) {
              var o = t.form_blocks.recurring._ds;
              var c = {};
              (function () {
                var h = t.formSection("time");
                h ||= a("time");
                h ||= a("calendar_time");
                if (!h) {
                  throw new Error(["Can't calculate the recurring rule, the Recurring form block can't find the Time control. Make sure you have the time control in 'scheduler.config.lightbox.sections' config.", "You can use either the default time control https://docs.dhtmlx.com/scheduler/time.html, or the datepicker https://docs.dhtmlx.com/scheduler/minicalendar.html, or a custom control. ", "In the latter case, make sure the control is named \"time\":", "", "scheduler.config.lightbox.sections = [", "{name:\"time\", height:72, type:\"YOU CONTROL\", map_to:\"auto\" }];"].join("\n"));
                }
                return h;
              })().getValue(c);
              o.start = c.start_date;
              i.rec_type = t.form_blocks.recurring._get_repeat_code(o);
              if (o._start) {
                i.start_date = new Date(o.start);
                i._start_date = new Date(o.start);
                o._start = false;
              } else {
                i._start_date = null;
              }
              i._end_date = o.end;
              i.rec_pattern = i.rec_type.split("#")[0];
            } else {
              i.rec_type = i.rec_pattern = "";
              i._end_date = i.end_date;
            }
            return i.rec_type;
          },
          _get_button: function () {
            return j().header.firstChild.firstChild;
          },
          _get_form: function () {
            return j().node;
          },
          open: function () {
            var _ = t.form_blocks.recurring;
            if (!_._get_form().open) {
              _._toggle_block();
            }
          },
          close: function () {
            var _ = t.form_blocks.recurring;
            if (_._get_form().open) {
              _._toggle_block();
            }
          },
          _toggle_block: function () {
            var _ = t.form_blocks.recurring;
            var i = _._get_form();
            var o = _._get_button();
            if (i.open || i.blocked) {
              i.style.height = "0px";
              if (o) {
                o.style.backgroundPosition = "-5px 20px";
                o.nextSibling.innerHTML = t.locale.labels.button_recurring;
              }
            } else {
              i.style.height = "auto";
              if (o) {
                o.style.backgroundPosition = "-5px 0px";
                o.nextSibling.innerHTML = t.locale.labels.button_recurring_open;
              }
            }
            i.open = !i.open;
            t.setLightboxSize();
          },
          focus: function (_) {},
          button_click: function (_, i, o) {
            if (!t.form_blocks.recurring._get_form().blocked) {
              t.form_blocks.recurring._toggle_block();
            }
          }
        };
        t._rec_markers = {};
        t._rec_markers_pull = {};
        t._add_rec_marker = function (_, i) {
          _._pid_time = i;
          this._rec_markers[_.id] = _;
          this._rec_markers_pull[_.event_pid] ||= {};
          this._rec_markers_pull[_.event_pid][i] = _;
        };
        t._get_rec_marker = function (_, i) {
          var o = this._rec_markers_pull[i];
          if (o) {
            return o[_];
          } else {
            return null;
          }
        };
        t._get_rec_markers = function (_) {
          return this._rec_markers_pull[_] || [];
        };
        t._rec_temp = [];
        _ = t.addEvent;
        t.addEvent = function (i, o, c, h, D) {
          var V = _.apply(this, arguments);
          if (V && t.getEvent(V)) {
            var T = t.getEvent(V);
            T.start_date &&= v(T.start_date);
            T.end_date &&= v(T.end_date);
            if (this._is_modified_occurence(T)) {
              t._add_rec_marker(T, T.event_length * 1000);
            }
            if (T.rec_type) {
              T.rec_pattern = T.rec_type.split("#")[0];
            }
          }
          return V;
        };
        t.attachEvent("onEventIdChange", function (_, i) {
          if (!this._ignore_call) {
            this._ignore_call = true;
            if (t._rec_markers[_]) {
              t._rec_markers[i] = t._rec_markers[_];
              delete t._rec_markers[_];
            }
            if (t._rec_markers_pull[_]) {
              t._rec_markers_pull[i] = t._rec_markers_pull[_];
              delete t._rec_markers_pull[_];
            }
            for (var o = 0; o < this._rec_temp.length; o++) {
              if ((c = this._rec_temp[o]).event_pid == _) {
                c.event_pid = i;
                this.changeEventId(c.id, i + "#" + c.id.split("#")[1]);
              }
            }
            for (var o in this._rec_markers) {
              var c;
              if ((c = this._rec_markers[o]).event_pid == _) {
                c.event_pid = i;
                c._pid_changed = true;
              }
            }
            var h = t._rec_markers[i];
            if (h && h._pid_changed) {
              delete h._pid_changed;
              setTimeout(function () {
                t.callEvent("onEventChanged", [i, t.getEvent(i)]);
              }, 1);
            }
            delete this._ignore_call;
          }
        });
        t.attachEvent("onConfirmedBeforeEventDelete", function (_) {
          var i = this.getEvent(_);
          if (this._is_virtual_event(_) || this._is_modified_occurence(i) && i.rec_type && i.rec_type != "none") {
            _ = _.split("#");
            var o = this.uid();
            var c = _[1] ? _[1] : Math.round(i._pid_time / 1000);
            var h = this._copy_event(i);
            h.id = o;
            h.event_pid = i.event_pid || _[0];
            var D = c;
            h.event_length = D;
            h.rec_type = h.rec_pattern = "none";
            this.addEvent(h);
            this._add_rec_marker(h, D * 1000);
          } else {
            if (i.rec_type && this._lightbox_id) {
              this._roll_back_dates(i);
            }
            var V = this._get_rec_markers(_);
            for (var T in V) {
              if (V.hasOwnProperty(T) && this.getEvent(_ = V[T].id)) {
                this.deleteEvent(_, true);
              }
            }
          }
          return true;
        });
        t.attachEvent("onEventDeleted", function (_, i) {
          if (!this._is_virtual_event(_) && this._is_modified_occurence(i)) {
            if (!t._events[_]) {
              i.rec_type = i.rec_pattern = "none";
              this.setEvent(_, i);
            }
          }
        });
        t.attachEvent("onEventChanged", function (_, i) {
          if (this._loading) {
            return true;
          }
          var o = this.getEvent(_);
          if (this._is_virtual_event(_)) {
            _ = _.split("#");
            var c = this.uid();
            this._not_render = true;
            var h = this._copy_event(i);
            h.id = c;
            h.event_pid = _[0];
            var D = _[1];
            h.event_length = D;
            h.rec_type = h.rec_pattern = "";
            this._add_rec_marker(h, D * 1000);
            this.addEvent(h);
            this._not_render = false;
          } else {
            o.start_date &&= v(o.start_date);
            o.end_date &&= v(o.end_date);
            if (o.rec_type && this._lightbox_id) {
              this._roll_back_dates(o);
            }
            var V = this._get_rec_markers(_);
            for (var T in V) {
              if (V.hasOwnProperty(T)) {
                delete this._rec_markers[V[T].id];
                this.deleteEvent(V[T].id, true);
              }
            }
            delete this._rec_markers_pull[_];
            for (var W = false, z = 0; z < this._rendered.length; z++) {
              if (this._rendered[z].getAttribute(this.config.event_attribute) == _) {
                W = true;
              }
            }
            if (!W) {
              this._select_id = null;
            }
          }
          return true;
        });
        t.attachEvent("onEventAdded", function (_) {
          if (!this._loading) {
            var i = this.getEvent(_);
            if (i.rec_type && !i.event_length) {
              this._roll_back_dates(i);
            }
          }
          return true;
        });
        t.attachEvent("onEventSave", function (_, i, o) {
          if (!this.getEvent(_).rec_type && !!i.rec_type && !this._is_virtual_event(_)) {
            this._select_id = null;
          }
          return true;
        });
        t.attachEvent("onEventCreated", function (_) {
          var i = this.getEvent(_);
          i.rec_type ||= i.rec_pattern = i.event_length = i.event_pid = "";
          return true;
        });
        t.attachEvent("onEventCancel", function (_) {
          var i = this.getEvent(_);
          if (i.rec_type) {
            this._roll_back_dates(i);
            this.render_view_data();
          }
        });
        t._roll_back_dates = function (_) {
          _.start_date &&= v(_.start_date);
          _.end_date &&= v(_.end_date);
          _.event_length = Math.round((_.end_date.valueOf() - _.start_date.valueOf()) / 1000);
          _.end_date = _._end_date;
          if (_._start_date) {
            _.start_date.setMonth(0);
            _.start_date.setDate(_._start_date.getDate());
            _.start_date.setMonth(_._start_date.getMonth());
            _.start_date.setFullYear(_._start_date.getFullYear());
          }
        };
        t._is_virtual_event = function (_) {
          return _.toString().indexOf("#") != -1;
        };
        t._is_modified_occurence = function (_) {
          return _.event_pid && _.event_pid != "0";
        };
        t._validId = function (_) {
          return !this._is_virtual_event(_);
        };
        t.showLightbox_rec = t.showLightbox;
        t.showLightbox = function (_) {
          var i = this.locale;
          var o = t.config.lightbox_recurring;
          var c = this.getEvent(_);
          var h = c.event_pid;
          var D = this._is_virtual_event(_);
          if (D) {
            h = _.split("#")[0];
          }
          function V(W) {
            var z = t.getEvent(W);
            z._end_date = z.end_date;
            z.end_date = new Date(z.start_date.valueOf() + z.event_length * 1000);
            return t.showLightbox_rec(W);
          }
          if ((h || h * 1 == 0) && c.rec_type) {
            return V(_);
          }
          if (!h || h === "0" || !i.labels.confirm_recurring || o == "instance" || o == "series" && !D) {
            return this.showLightbox_rec(_);
          }
          if (o == "ask") {
            var T = this;
            t.modalbox({
              text: i.labels.confirm_recurring,
              title: i.labels.title_confirm_recurring,
              width: "500px",
              position: "middle",
              buttons: [i.labels.button_edit_series, i.labels.button_edit_occurrence, i.labels.icon_cancel],
              callback: function (W) {
                switch (+W) {
                  case 0:
                    return V(h);
                  case 1:
                    return T.showLightbox_rec(_);
                  case 2:
                    return;
                }
              }
            });
          } else {
            V(h);
          }
        };
        t.get_visible_events_rec = t.get_visible_events;
        t.get_visible_events = function (_) {
          for (var i = 0; i < this._rec_temp.length; i++) {
            delete this._events[this._rec_temp[i].id];
          }
          this._rec_temp = [];
          var o = this.get_visible_events_rec(_);
          var c = [];
          for (i = 0; i < o.length; i++) {
            if (o[i].rec_type) {
              if (o[i].rec_pattern != "none") {
                this.repeat_date(o[i], c);
              }
            } else {
              c.push(o[i]);
            }
          }
          return c;
        };
        (function () {
          var _ = t.isOneDayEvent;
          t.isOneDayEvent = function (o) {
            return !!o.rec_type || _.call(this, o);
          };
          var i = t.updateEvent;
          t.updateEvent = function (o) {
            var c = t.getEvent(o);
            if (c && c.rec_type) {
              c.rec_pattern = (c.rec_type || "").split("#")[0];
            }
            if (c && c.rec_type && !this._is_virtual_event(o)) {
              t.update_view();
            } else {
              i.call(this, o);
            }
          };
        })();
        t.transponse_size = {
          day: 1,
          week: 7,
          month: 1,
          year: 12
        };
        t.date.day_week = function (_, i, o) {
          _.setDate(1);
          var c = t.date.month_start(new Date(_));
          var h = i * 1 + (o = (o - 1) * 7) - _.getDay() + 1;
          _.setDate(h <= o ? h + 7 : h);
          var D = t.date.month_start(new Date(_));
          return c.valueOf() === D.valueOf();
        };
        t.transpose_day_week = function (_, i, o, c, h) {
          for (var D = (_.getDay() || (t.config.start_on_monday ? 7 : 0)) - o, V = 0; V < i.length; V++) {
            if (i[V] > D) {
              return _.setDate(_.getDate() + i[V] * 1 - D - (c ? o : h));
            }
          }
          this.transpose_day_week(_, i, o + c, null, o);
        };
        t.transpose_type = function (_) {
          var i = "transpose_" + _;
          if (!this.date[i]) {
            var o = _.split("_");
            var c = "add_" + _;
            var h = this.transponse_size[o[0]] * o[1];
            if (o[0] == "day" || o[0] == "week") {
              var D = null;
              if (o[4] && (D = o[4].split(","), t.config.start_on_monday)) {
                for (var V = 0; V < D.length; V++) {
                  D[V] = D[V] * 1 || 7;
                }
                D.sort();
              }
              this.date[i] = function (T, W) {
                var z = Math.floor((W.valueOf() - T.valueOf()) / (h * 86400000));
                if (z > 0) {
                  T.setDate(T.getDate() + z * h);
                }
                if (D) {
                  t.transpose_day_week(T, D, 1, h);
                }
                return T;
              };
              this.date[c] = function (T, W) {
                var z = new Date(T.valueOf());
                if (D) {
                  for (var Z = 0; Z < W; Z++) {
                    t.transpose_day_week(z, D, 0, h);
                  }
                } else {
                  z.setDate(z.getDate() + W * h);
                }
                return z;
              };
            } else if (o[0] == "month" || o[0] == "year") {
              this.date[i] = function (T, W, z) {
                var Z = Math.ceil((W.getFullYear() * 12 + W.getMonth() * 1 + 1 - (T.getFullYear() * 12 + T.getMonth() * 1 + 1)) / h - 1);
                if (Z >= 0) {
                  T.setDate(1);
                  T.setMonth(T.getMonth() + Z * h);
                }
                return t.date[c](T, 0, z);
              };
              this.date[c] = function (T, W, z, Z) {
                if (Z) {
                  Z++;
                } else {
                  Z = 1;
                }
                if (Z > 12) {
                  return null;
                }
                var re = new Date(T.valueOf());
                re.setDate(1);
                re.setMonth(re.getMonth() + W * h);
                var oe = re.getMonth();
                var _e = re.getFullYear();
                re.setDate(z.start_date.getDate());
                if (o[3]) {
                  t.date.day_week(re, o[2], o[3]);
                }
                var he = t.config.recurring_overflow_instances;
                if (re.getMonth() != oe && he != "none") {
                  re = he === "lastDay" ? new Date(_e, oe + 1, 0, re.getHours(), re.getMinutes(), re.getSeconds(), re.getMilliseconds()) : t.date[c](new Date(_e, oe + 1, 0), W || 1, z, Z);
                }
                return re;
              };
            }
          }
        };
        t.repeat_date = function (_, i, o, c, h, D) {
          c = c || this._min_date;
          h = h || this._max_date;
          var V = D || -1;
          var T = new Date(_.start_date.valueOf());
          var W = T.getHours();
          var z = 0;
          if (!_.rec_pattern && _.rec_type) {
            _.rec_pattern = _.rec_type.split("#")[0];
          }
          this.transpose_type(_.rec_pattern);
          T = t.date["transpose_" + _.rec_pattern](T, c, _);
          for (; T && (T < _.start_date || t._fix_daylight_saving_date(T, c, _, T, new Date(T.valueOf() + _.event_length * 1000)).valueOf() <= c.valueOf() || T.valueOf() + _.event_length * 1000 <= c.valueOf());) {
            T = this.date["add_" + _.rec_pattern](T, 1, _);
          }
          for (; T && T < h && T < _.end_date && (V < 0 || z < V);) {
            T.setHours(W);
            var Z = t.config.occurrence_timestamp_in_utc ? Date.UTC(T.getFullYear(), T.getMonth(), T.getDate(), T.getHours(), T.getMinutes(), T.getSeconds()) : T.valueOf();
            var re = this._get_rec_marker(Z, _.id);
            if (re) {
              if (o) {
                if (re.rec_type != "none") {
                  z++;
                }
                i.push(re);
              }
            } else {
              var oe = new Date(T.valueOf() + _.event_length * 1000);
              var _e = this._copy_event(_);
              _e.text = _.text;
              _e.start_date = T;
              _e.event_pid = _.id;
              _e.id = _.id + "#" + Math.round(Z / 1000);
              _e.end_date = oe;
              _e.end_date = t._fix_daylight_saving_date(_e.start_date, _e.end_date, _, T, _e.end_date);
              _e._timed = this.isOneDayEvent(_e);
              if (!_e._timed && !this._table_view && !this.config.multi_day) {
                return;
              }
              i.push(_e);
              if (!o) {
                this._events[_e.id] = _e;
                this._rec_temp.push(_e);
              }
              z++;
            }
            T = this.date["add_" + _.rec_pattern](T, 1, _);
          }
        };
        t._fix_daylight_saving_date = function (_, i, o, c, h) {
          var D = _.getTimezoneOffset() - i.getTimezoneOffset();
          if (D) {
            if (D > 0) {
              return new Date(c.valueOf() + o.event_length * 1000 - D * 60 * 1000);
            } else {
              return new Date(i.valueOf() - D * 60 * 1000);
            }
          } else {
            return new Date(h.valueOf());
          }
        };
        t.getRecDates = function (_, i) {
          var o = St(_) == "object" ? _ : t.getEvent(_);
          var c = [];
          if (!o.rec_type) {
            return [{
              start_date: o.start_date,
              end_date: o.end_date
            }];
          }
          if (o.rec_type == "none") {
            return [];
          }
          t.repeat_date(o, c, true, o.start_date, o.end_date, i = i || 100);
          for (var h = [], D = 0; D < c.length; D++) {
            if (c[D].rec_type != "none") {
              h.push({
                start_date: c[D].start_date,
                end_date: c[D].end_date
              });
            }
          }
          return h;
        };
        t.getEvents = function (_, i) {
          var o = [];
          for (var c in this._events) {
            var h = this._events[c];
            if (h && h.start_date < i && h.end_date > _) {
              if (h.rec_pattern) {
                if (h.rec_pattern == "none") {
                  continue;
                }
                var D = [];
                this.repeat_date(h, D, true, _, i);
                for (var V = 0; V < D.length; V++) {
                  if (!D[V].rec_pattern && D[V].start_date < i && D[V].end_date > _ && !this._rec_markers[D[V].id]) {
                    o.push(D[V]);
                  }
                }
              } else if (!this._is_virtual_event(h.id)) {
                o.push(h);
              }
            }
          }
          return o;
        };
        t.config.repeat_date = "%m.%d.%Y";
        t.config.lightbox.sections = [{
          name: "description",
          map_to: "text",
          type: "textarea",
          focus: true
        }, {
          name: "recurring",
          type: "recurring",
          map_to: "rec_type",
          button: "recurring"
        }, {
          name: "time",
          height: 72,
          type: "time",
          map_to: "auto"
        }];
        t._copy_dummy = function (_) {
          var i = new Date(this.start_date);
          var o = new Date(this.end_date);
          this.start_date = i;
          this.end_date = o;
          this.event_length = this.event_pid = this.rec_pattern = this.rec_type = null;
        };
        t.config.include_end_by = false;
        t.config.lightbox_recurring = "ask";
        t.attachEvent("onClearAll", function () {
          t._rec_markers = {};
          t._rec_markers_pull = {};
          t._rec_temp = [];
        });
      },
      serialize: function (t) {
        var j = Me()(t);
        t.data_attributes = function () {
          var a = [];
          var v = t._helpers.formatDate;
          var _ = j();
          for (var i in _) {
            var o = _[i];
            for (var c in o) {
              if (c.substr(0, 1) != "_") {
                a.push([c, c == "start_date" || c == "end_date" ? v : null]);
              }
            }
            break;
          }
          return a;
        };
        t.toXML = function (a) {
          var v = [];
          var _ = this.data_attributes();
          var i = j();
          for (var o in i) {
            var c = i[o];
            v.push("<event>");
            for (var h = 0; h < _.length; h++) {
              v.push("<" + _[h][0] + "><![CDATA[" + (_[h][1] ? _[h][1](c[_[h][0]]) : c[_[h][0]]) + "]]></" + _[h][0] + ">");
            }
            v.push("</event>");
          }
          return (a || "") + "<data>" + v.join("\n") + "</data>";
        };
        t._serialize_json_value = function (a) {
          if (a === null || typeof a == "boolean") {
            a = "" + a;
          } else {
            if (!a && a !== 0) {
              a = "";
            }
            a = "\"" + a.toString().replace(/\n/g, "").replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"";
          }
          return a;
        };
        t.toJSON = function () {
          return JSON.stringify(this.serialize());
        };
        t.toICal = function (a) {
          var v = t.date.date_to_str("%Y%m%dT%H%i%s");
          var _ = t.date.date_to_str("%Y%m%d");
          var i = [];
          var o = j();
          for (var c in o) {
            var h = o[c];
            i.push("BEGIN:VEVENT");
            if (h._timed && (h.start_date.getHours() || h.start_date.getMinutes())) {
              i.push("DTSTART:" + v(h.start_date));
            } else {
              i.push("DTSTART:" + _(h.start_date));
            }
            if (h._timed && (h.end_date.getHours() || h.end_date.getMinutes())) {
              i.push("DTEND:" + v(h.end_date));
            } else {
              i.push("DTEND:" + _(h.end_date));
            }
            i.push("SUMMARY:" + h.text);
            i.push("END:VEVENT");
          }
          return "BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//dhtmlXScheduler//NONSGML v2.2//EN\nDESCRIPTION:" + (a || "") + "\n" + i.join("\n") + "\nEND:VCALENDAR";
        };
      },
      timeline: function (t) {
        Te("Timeline", t.assert);
      },
      tooltip: function (t) {
        var j = t._createDomEventScope();
        var a = {};
        t.ext.tooltip = t.dhtmlXTooltip = t.tooltip = a;
        a.config = {
          className: "dhtmlXTooltip scheduler_tooltip tooltip",
          timeout_to_display: 50,
          timeout_to_hide: 50,
          delta_x: 15,
          delta_y: -20
        };
        a.tooltip = document.createElement("div");
        a.tooltip.className = a.config.className;
        t._waiAria.tooltipAttr(a.tooltip);
        a.show = function (v, _) {
          if (!this._mobile || t.config.touch_tooltip) {
            var i = a;
            var o = this.tooltip;
            var c = o.style;
            i.tooltip.className = i.config.className;
            var h = this.position(v);
            if (!this.isTooltip(v.target || v.srcElement)) {
              var V = h.x + (i.config.delta_x || 0);
              var T = h.y - (i.config.delta_y || 0);
              c.visibility = "hidden";
              c.right = "";
              c.bottom = "";
              c.left = "0";
              c.top = "0";
              if (t.config.rtl) {
                o.className += " dhtmlXTooltip_rtl";
              }
              this.tooltip.innerHTML = _;
              document.body.appendChild(this.tooltip);
              var z = this.tooltip.offsetHeight;
              if (document.documentElement.clientWidth - V - this.tooltip.offsetWidth < 0) {
                c.left = "";
                c.right = document.documentElement.clientWidth - V + (i.config.delta_x || 0) * 2 + "px";
              } else {
                c.left = V < 0 ? h.x + Math.abs(i.config.delta_x || 0) + "px" : V + "px";
              }
              if (document.documentElement.clientHeight - T - z < 0) {
                var Z = document.documentElement.clientHeight - T - (i.config.delta_y || 0) * 2;
                if (Z + z > document.documentElement.clientHeight) {
                  T -= Math.abs(document.documentElement.clientHeight - T - z);
                  T = Math.max(T, 0);
                  c.top = T + "px";
                } else {
                  c.bottom = Z + "px";
                  c.top = "";
                }
              } else {
                c.top = T < 0 ? h.y + Math.abs(i.config.delta_y || 0) + "px" : T + "px";
              }
              t._waiAria.tooltipVisibleAttr(this.tooltip);
              c.visibility = "visible";
              j.attach(this.tooltip, "mouseleave", function (re) {
                for (var oe = t.dhtmlXTooltip, _e = re.relatedTarget; _e != t._obj && _e;) {
                  _e = _e.parentNode;
                }
                if (_e != t._obj) {
                  oe.delay(oe.hide, oe, [], oe.config.timeout_to_hide);
                }
              });
              t.callEvent("onTooltipDisplayed", [this.tooltip, this.tooltip.event_id]);
            }
          }
        };
        a._clearTimeout = function () {
          if (this.tooltip._timeout_id) {
            clearTimeout(this.tooltip._timeout_id);
          }
        };
        a.hide = function () {
          if (this.tooltip.parentNode) {
            t._waiAria.tooltipHiddenAttr(this.tooltip);
            var v = this.tooltip.event_id;
            this.tooltip.event_id = null;
            j.detachAll();
            this.tooltip.parentNode.removeChild(this.tooltip);
            t.callEvent("onAfterTooltip", [v]);
          }
          this._clearTimeout();
        };
        a.delay = function (v, _, i, o) {
          this._clearTimeout();
          this.tooltip._timeout_id = setTimeout(function () {
            var c = v.apply(_, i);
            v = _ = i = null;
            return c;
          }, o || this.config.timeout_to_display);
        };
        a.isTooltip = function (v) {
          for (var _ = false; v && !_;) {
            _ = v.className == this.tooltip.className;
            v = v.parentNode;
          }
          return _;
        };
        a.position = function (v) {
          return {
            x: v.clientX,
            y: v.clientY
          };
        };
        t.attachEvent("onMouseMove", function (v, _) {
          var i = _.target || _.srcElement;
          var o = a;
          var c = o.isTooltip(i);
          var h = o.isTooltipTarget && o.isTooltipTarget(i);
          if (v && t.getState().editor_id != v || c || h) {
            var D;
            var V;
            if (v || o.tooltip.event_id) {
              var T = t.getEvent(v) || t.getEvent(o.tooltip.event_id);
              if (!T) {
                return;
              }
              o.tooltip.event_id = T.id;
              if (!(D = t.templates.tooltip_text(T.start_date, T.end_date, T))) {
                return o.hide();
              }
            }
            if (h) {
              D = "";
            }
            if (t.$env.isIE) {
              for (var W in V = {
                pageX: undefined,
                pageY: undefined,
                clientX: undefined,
                clientY: undefined,
                target: undefined,
                srcElement: undefined
              }) {
                V[W] = _[W];
              }
            }
            if (!t.callEvent("onBeforeTooltip", [v]) || !D) {
              return;
            }
            o.delay(o.show, o, [V || _, D]);
          } else {
            o.delay(o.hide, o, [], o.config.timeout_to_hide);
          }
        });
        t.attachEvent("onBeforeDrag", function () {
          a.hide();
          return true;
        });
        t.attachEvent("onEventDeleted", function () {
          a.hide();
          return true;
        });
        t.attachEvent("onDestroy", function () {
          a.hide();
        });
      },
      treetimeline: function (t) {
        Te("Tree Timeline", t.assert);
      },
      units: function (t) {
        Te("Units", t.assert);
      },
      url: function (t) {
        t._get_url_nav = function () {
          for (var j = {}, a = (document.location.hash || "").replace("#", "").split(","), v = 0; v < a.length; v++) {
            var _ = a[v].split("=");
            if (_.length == 2) {
              j[_[0]] = _[1];
            }
          }
          return j;
        };
        t.attachEvent("onTemplatesReady", function () {
          var j = true;
          var a = t.date.str_to_date("%Y-%m-%d");
          var v = t.date.date_to_str("%Y-%m-%d");
          var _ = t._get_url_nav().event || null;
          function i(o) {
            _ = o;
            if (t.getEvent(o)) {
              t.showEvent(o);
            }
          }
          t.attachEvent("onAfterEventDisplay", function (o) {
            _ = null;
            return true;
          });
          t.attachEvent("onBeforeViewChange", function (o, c, h, D) {
            if (j) {
              j = false;
              var V = t._get_url_nav();
              if (V.event) {
                try {
                  if (t.getEvent(V.event)) {
                    setTimeout(function () {
                      i(V.event);
                    });
                    return false;
                  }
                  var T = t.attachEvent("onXLE", function () {
                    setTimeout(function () {
                      i(V.event);
                    });
                    t.detachEvent(T);
                  });
                } catch {}
              }
              if (V.date || V.mode) {
                try {
                  this.setCurrentView(V.date ? a(V.date) : null, V.mode || null);
                } catch {
                  this.setCurrentView(V.date ? a(V.date) : null, h);
                }
                return false;
              }
            }
            var W = ["date=" + v(D || c), "mode=" + (h || o)];
            if (_) {
              W.push("event=" + _);
            }
            var z = "#" + W.join(",");
            document.location.hash = z;
            return true;
          });
        });
      },
      week_agenda: function (t) {
        Te("Week Agenda", t.assert);
      },
      wp: function (t) {
        t.attachEvent("onLightBox", function () {
          if (this._cover) {
            try {
              this._cover.style.height = this.expanded ? "100%" : (document.body.parentNode || document.body).scrollHeight + "px";
            } catch {}
          }
        });
        t.form_blocks.select.set_value = function (j, a, v) {
          if (a === undefined || a === "") {
            a = (j.firstChild.options[0] || {}).value;
          }
          j.firstChild.value = a || "";
        };
      },
      year_view: function (t) {
        t.config.year_x = 4;
        t.config.year_y = 3;
        t.xy.year_top = 0;
        t.templates.year_date = function (h) {
          return t.date.date_to_str(t.locale.labels.year_tab + " %Y")(h);
        };
        t.templates.year_month = t.date.date_to_str("%F");
        t.templates.year_scale_date = t.date.date_to_str("%D");
        t.templates.year_tooltip = function (h, D, V) {
          return V.text;
        };
        function j() {
          return t._mode == "year";
        }
        function a(h) {
          var D = t.$domHelpers.closest(h, "[data-cell-date]");
          if (D && D.hasAttribute("data-cell-date")) {
            return t.templates.parse_date(D.getAttribute("data-cell-date"));
          } else {
            return null;
          }
        }
        t.dblclick_dhx_month_head = function (h) {
          if (j()) {
            var D = h.target;
            if (t.$domHelpers.closest(D, ".dhx_before") || t.$domHelpers.closest(D, ".dhx_after")) {
              return false;
            }
            var V = a(D);
            if (V) {
              var T = V;
              var W = this.date.add(T, 1, "day");
              if (!this.config.readonly && this.config.dblclick_create) {
                this.addEventNow(T.valueOf(), W.valueOf(), h);
              }
            }
          }
        };
        var v = t.changeEventId;
        t.changeEventId = function () {
          v.apply(this, arguments);
          if (j()) {
            this.year_view(true);
          }
        };
        var _ = t.render_data;
        t.render_data = function (h) {
          if (!j()) {
            return _.apply(this, arguments);
          }
          for (var D = 0; D < h.length; D++) {
            this._year_render_event(h[D]);
          }
        };
        var i = t.clear_view;
        t.clear_view = function () {
          if (!j()) {
            return i.apply(this, arguments);
          }
          var h = t._year_marked_cells;
          var D = null;
          for (var V in h) {
            if (h.hasOwnProperty(V)) {
              (D = h[V]).className = "dhx_month_head";
              D.removeAttribute("date");
              D.removeAttribute("data-year-date");
            }
          }
          t._year_marked_cells = {};
        };
        t._hideToolTip = function () {
          if (this._tooltip) {
            this._tooltip.style.display = "none";
            this._tooltip.date = new Date(9999, 1, 1);
          }
        };
        t._showToolTip = function (h, D, V, T) {
          if (this._tooltip) {
            if (this._tooltip.date.valueOf() == h.valueOf()) {
              return;
            }
            this._tooltip.innerHTML = "";
          } else {
            var W = this._tooltip = document.createElement("div");
            W.className = "dhx_year_tooltip";
            if (this.config.rtl) {
              W.className += " dhx_tooltip_rtl";
            }
            document.body.appendChild(W);
            W.addEventListener("click", t._click.dhx_cal_data);
          }
          for (var z = this.getEvents(h, this.date.add(h, 1, "day")), Z = "", re = 0; re < z.length; re++) {
            var oe = z[re];
            if (this.filter_event(oe.id, oe)) {
              var _e = oe.color ? "background:" + oe.color + ";" : "";
              var he = oe.textColor ? "color:" + oe.textColor + ";" : "";
              Z += "<div class='dhx_tooltip_line' style='" + _e + he + "' event_id='" + z[re].id + "' " + this.config.event_attribute + "='" + z[re].id + "'>";
              Z += "<div class='dhx_tooltip_date' style='" + _e + he + "'>" + (z[re]._timed ? this.templates.event_date(z[re].start_date) : "") + "</div>";
              Z += "<div class='dhx_event_icon icon_details'>&nbsp;</div>";
              Z += this.templates.year_tooltip(z[re].start_date, z[re].end_date, z[re]) + "</div>";
            }
          }
          this._tooltip.style.display = "";
          this._tooltip.style.top = "0px";
          this._tooltip.style.left = document.body.offsetWidth - D.left - this._tooltip.offsetWidth < 0 ? D.left - this._tooltip.offsetWidth + "px" : D.left + T.offsetWidth + "px";
          this._tooltip.date = h;
          this._tooltip.innerHTML = Z;
          this._tooltip.style.top = document.body.offsetHeight - D.top - this._tooltip.offsetHeight < 0 ? D.top - this._tooltip.offsetHeight + T.offsetHeight + "px" : D.top + "px";
        };
        t._year_view_tooltip_handler = function (h) {
          if (j()) {
            var D = h.target || h.srcElement;
            if (D.tagName.toLowerCase() == "a") {
              D = D.parentNode;
            }
            if (t._getClassName(D).indexOf("dhx_year_event") != -1) {
              t._showToolTip(t.templates.parse_date(D.getAttribute("data-year-date")), t.$domHelpers.getOffset(D), h, D);
            } else {
              t._hideToolTip();
            }
          }
        };
        t._init_year_tooltip = function () {
          t._detachDomEvent(t._els.dhx_cal_data[0], "mouseover", t._year_view_tooltip_handler);
          t.event(t._els.dhx_cal_data[0], "mouseover", t._year_view_tooltip_handler);
        };
        t._get_year_cell = function (h) {
          for (var D = t.templates.format_date(h), V = this.$root.querySelectorAll(`.dhx_cal_data [data-cell-date="${D}"] .dhx_month_head`), T = 0; T < V.length; T++) {
            if (!t.$domHelpers.closest(V[T], ".dhx_after, .dhx_before")) {
              return V[T];
            }
          }
          return null;
        };
        t._year_marked_cells = {};
        t._mark_year_date = function (h, D) {
          var V = t.templates.format_date(h);
          var T = this._get_year_cell(h);
          if (T) {
            var W = this.templates.event_class(D.start_date, D.end_date, D);
            if (!t._year_marked_cells[V]) {
              T.classList.add("dhx_year_event");
              T.setAttribute("data-year-date", V);
              T.setAttribute("date", V);
              t._year_marked_cells[V] = T;
            }
            T.className += W ? " " + W : "";
          }
        };
        t._unmark_year_date = function (h) {
          var D = this._get_year_cell(h);
          if (D) {
            D.className = "dhx_month_head";
          }
        };
        t._year_render_event = function (h) {
          var D = h.start_date;
          for (D = D.valueOf() < this._min_date.valueOf() ? this._min_date : this.date.date_part(new Date(D)); D < h.end_date;) {
            this._mark_year_date(D, h);
            if ((D = this.date.add(D, 1, "day")).valueOf() >= this._max_date.valueOf()) {
              return;
            }
          }
        };
        t.year_view = function (h) {
          var D;
          if (h) {
            D = t.xy.scale_height;
            t.xy.scale_height = -1;
          }
          t._els.dhx_cal_header[0].style.display = h ? "none" : "";
          t.set_sizes();
          if (h) {
            t.xy.scale_height = D;
          }
          t._table_view = h;
          if (!this._load_mode || !this._load()) {
            if (h) {
              t._init_year_tooltip();
              t._reset_year_scale();
              if (t._load_mode && t._load()) {
                t._render_wait = true;
                return;
              }
              t.render_view_data();
            } else {
              t._hideToolTip();
            }
          }
        };
        t._reset_year_scale = function () {
          this._cols = [];
          this._colsS = {};
          var h = [];
          var D = this._els.dhx_cal_data[0];
          var V = this.config;
          D.scrollTop = 0;
          D.innerHTML = "";
          var T = Math.floor(parseInt(D.style.width) / V.year_x);
          var W = Math.floor((parseInt(D.style.height) - t.xy.year_top) / V.year_y);
          if (W < 190) {
            W = 190;
            T = Math.floor((parseInt(D.style.width) - t.xy.scroll_width) / V.year_x);
          }
          var z = T - 11;
          var Z = 0;
          var re = document.createElement("div");
          var oe = this.date.week_start(t._currentDate());
          this._process_ignores(oe, 7, "day", 1);
          for (var _e = 7 - (this._ignores_detected || 0), he = 0, be = 0; be < 7; be++) {
            if (!this._ignores || !this._ignores[be]) {
              this._cols[be] = Math.floor(z / (_e - he));
              this._render_x_header(be, Z, oe, re);
              z -= this._cols[be];
              Z += this._cols[be];
              he++;
            }
            oe = this.date.add(oe, 1, "day");
          }
          re.lastChild.className += " dhx_scale_bar_last";
          be = 0;
          for (; be < re.childNodes.length; be++) {
            this._waiAria.yearHeadCell(re.childNodes[be]);
          }
          var Ae = this.date[this._mode + "_start"](this.date.copy(this._date));
          var He = Ae;
          var Ne = null;
          for (be = 0; be < V.year_y; be++) {
            for (var Ve = 0; Ve < V.year_x; Ve++) {
              (Ne = document.createElement("div")).className = "dhx_year_box";
              Ne.style.cssText = "position:absolute;";
              Ne.setAttribute("date", this._helpers.formatDate(Ae));
              Ne.setAttribute("data-month-date", this._helpers.formatDate(Ae));
              Ne.innerHTML = "<div class='dhx_year_month'></div><div class='dhx_year_grid'><div class='dhx_year_week'>" + re.innerHTML + "</div><div class='dhx_year_body'></div></div>";
              var Se = Ne.querySelector(".dhx_year_month");
              var Fe = Ne.querySelector(".dhx_year_grid");
              var Oe = Ne.querySelector(".dhx_year_week");
              var at = Ne.querySelector(".dhx_year_body");
              var ht = t.uid();
              this._waiAria.yearHeader(Se, ht);
              this._waiAria.yearGrid(Fe, ht);
              Se.innerHTML = this.templates.year_month(Ae);
              var lt = this.date.week_start(Ae);
              this._reset_month_scale(at, Ae, lt, 6);
              for (var mt = at.querySelectorAll("td"), ft = 0; ft < mt.length; ft++) {
                this._waiAria.yearDayCell(mt[ft]);
              }
              D.appendChild(Ne);
              Oe.style.height = Oe.childNodes[0].offsetHeight + "px";
              var yt = Math.round((W - 190) / 2);
              Ne.style.marginTop = yt + "px";
              this.set_xy(Ne, T - 10, W - yt - 10, T * Ve + 5, W * be + 5 + t.xy.year_top);
              h[be * V.year_x + Ve] = (Ae.getDay() - (this.config.start_on_monday ? 1 : 0) + 7) % 7;
              Ae = this.date.add(Ae, 1, "month");
            }
          }
          var xt = this._getNavDateElement();
          if (xt) {
            xt.innerHTML = this.templates[this._mode + "_date"](He, Ae, this._mode);
          }
          this.week_starts = h;
          h._month = He.getMonth();
          this._min_date = He;
          this._max_date = Ae;
        };
        var o = t.getActionData;
        t.getActionData = function (h) {
          if (j()) {
            return {
              date: a(h.target),
              section: null
            };
          } else {
            return o.apply(t, arguments);
          }
        };
        var c = t._locate_event;
        t._locate_event = function (h) {
          var D = c.apply(t, arguments);
          if (!D) {
            var V = a(h);
            if (!V) {
              return null;
            }
            var T = t.getEvents(V, t.date.add(V, 1, "day"));
            if (!T.length) {
              return null;
            }
            D = T[0].id;
          }
          return D;
        };
        t.attachEvent("onDestroy", function () {
          t._hideToolTip();
        });
      }
    });
    var Ot = At.getSchedulerInstance();
    var Mt = {
      plugin: Ot.bind(At.plugin, At)
    };
    window.scheduler = Ot;
    window.Scheduler = Mt;
    X.default = Ot;
  }]);
});
(function () {
  function P(y, w) {
    for (var E in w) {
      y[E] ||= w[E];
    }
    return y;
  }
  function X(y, w) {
    var E = {};
    if ((y = w._els[y]) && y[0]) {
      E.x = y[0].scrollWidth;
      E.y = y[0].scrollHeight;
    } else {
      E.x = 0;
      E.y = 0;
    }
    return E;
  }
  function I(y) {
    function w() {
      var N = y.getState().mode;
      if (y.matrix && y.matrix[N]) {
        return y.matrix[N];
      } else {
        return null;
      }
    }
    y.exportToPDF = function (N) {
      (N = P(N || {}, {
        name: "calendar.pdf",
        format: "A4",
        orientation: "landscape",
        dpi: 96,
        zoom: 1,
        rtl: y.config.rtl
      })).html = this._export_html(N);
      N.mode = this.getState().mode;
      this._send_to_export(N, "pdf");
    };
    y.exportToPNG = function (N) {
      (N = P(N || {}, {
        name: "calendar.png",
        format: "A4",
        orientation: "landscape",
        dpi: 96,
        zoom: 1,
        rtl: y.config.rtl
      })).html = this._export_html(N);
      N.mode = this.getState().mode;
      this._send_to_export(N, "png");
    };
    y.exportToICal = function (N) {
      N = P(N || {}, {
        name: "calendar.ical",
        data: this._serialize_plain(null, N)
      });
      this._send_to_export(N, "ical");
    };
    y.exportToExcel = function (N) {
      N = P(N || {}, {
        name: "calendar.xlsx",
        title: "Events",
        data: this._serialize_plain(this.templates.xml_format, N),
        columns: this._serialize_columns()
      });
      this._send_to_export(N, "excel");
    };
    y._plain_export_copy = function (N, x) {
      var S = {};
      for (var s in N) {
        S[s] = N[s];
      }
      S.start_date = x(S.start_date);
      S.end_date = x(S.end_date);
      S.$text = this.templates.event_text(N.start_date, N.end_date, N);
      return S;
    };
    y._serialize_plain = function (N, x) {
      var S;
      N = N || y.date.date_to_str("%Y%m%dT%H%i%s", true);
      S = x && x.start && x.end ? y.getEvents(x.start, x.end) : y.getEvents();
      for (var s = [], u = 0; u < S.length; u++) {
        s[u] = this._plain_export_copy(S[u], N);
      }
      return s;
    };
    y._serialize_columns = function () {
      return [{
        id: "start_date",
        header: "Start Date",
        width: 30
      }, {
        id: "end_date",
        header: "End Date",
        width: 30
      }, {
        id: "$text",
        header: "Text",
        width: 100
      }];
    };
    y._send_to_export = function (N, x) {
      N.version ||= y.version;
      N.skin ||= y.skin;
      var S = this._create_hidden_form();
      S.firstChild.action = N.server || "https://export.dhtmlx.com/scheduler";
      S.firstChild.childNodes[0].value = JSON.stringify(N);
      S.firstChild.childNodes[1].value = x;
      S.firstChild.submit();
    };
    y._create_hidden_form = function () {
      if (!this._hidden_export_form) {
        var N = this._hidden_export_form = document.createElement("div");
        N.style.display = "none";
        N.innerHTML = "<form method='POST' target='_blank'><input type='text' name='data'><input type='hidden' name='type' value=''></form>";
        document.body.appendChild(N);
      }
      return this._hidden_export_form;
    };
    y._get_export_size = function (N, x, S, s, u, m, l) {
      s = parseInt(s) / 25.4 || 4;
      var M = {
        A5: {
          x: 148,
          y: 210
        },
        A4: {
          x: 210,
          y: 297
        },
        A3: {
          x: 297,
          y: 420
        },
        A2: {
          x: 420,
          y: 594
        },
        A1: {
          x: 594,
          y: 841
        },
        A0: {
          x: 841,
          y: 1189
        }
      };
      var O = X("dhx_cal_data", this).x;
      var B = {
        y: X("dhx_cal_data", this).y + X("dhx_cal_header", this).y + X("dhx_multi_day", this).y
      };
      B.x = N === "full" ? O : Math.floor((x === "landscape" ? M[N].y : M[N].x) * s);
      if (l) {
        B.x *= parseFloat(l.x) || 1;
        B.y *= parseFloat(l.y) || 1;
      }
      return B;
    };
    y._export_html = function (N) {
      var x = function E() {
        var N;
        var x;
        var S = w();
        if (S) {
          x = S.scrollable;
          N = S.smart_rendering;
        }
        return {
          nav_height: y.xy.nav_height,
          scroll_width: y.xy.scroll_width,
          style_width: y._obj.style.width,
          style_height: y._obj.style.height,
          timeline_scrollable: x,
          timeline_smart_rendering: N
        };
      }();
      var S = y._get_export_size(N.format, N.orientation, N.zoom, N.dpi, N.header, N.footer, N.scales);
      var s = "";
      try {
        (function R(N, x) {
          y._obj.style.width = N.x + "px";
          y._obj.style.height = N.y + "px";
          y.xy.nav_height = 0;
          y.xy.scroll_width = 0;
          var S = w();
          if (x.timeline_scrollable || x.timeline_smart_rendering) {
            S.scrollable = false;
            S.smart_rendering = false;
          }
        })(S, x);
        y.setCurrentView();
        s = y._obj.innerHTML;
      } catch (u) {
        console.error(u);
      } finally {
        (function C(N) {
          y.xy.scroll_width = N.scroll_width;
          y.xy.nav_height = N.nav_height;
          y._obj.style.width = N.style_width;
          y._obj.style.height = N.style_height;
          var x = w();
          if (N.timeline_scrollable || N.timeline_smart_rendering) {
            x.scrollable = N.timeline_scrollable;
            x.smart_rendering = N.timeline_smart_rendering;
          }
        })(x);
        y.setCurrentView();
      }
      return s;
    };
  }
  I(scheduler);
  scheduler.plugins({
    tooltip: true,
    year_view: true
  });
  scheduler.i18n.setLocale("fr");
  if (window.Scheduler && Scheduler.plugin) {
    Scheduler.plugin(I);
  }
})();
var webodf_version = "0.5.9";
function Runtime() {}
Runtime.prototype.getVariable = function (P) {};
Runtime.prototype.toJson = function (P) {};
Runtime.prototype.fromJson = function (P) {};
Runtime.prototype.byteArrayFromString = function (P, X) {};
Runtime.prototype.byteArrayToString = function (P, X) {};
Runtime.prototype.read = function (P, X, I, y) {};
Runtime.prototype.readFile = function (P, X, I) {};
Runtime.prototype.readFileSync = function (P, X) {};
Runtime.prototype.loadXML = function (P, X) {};
Runtime.prototype.writeFile = function (P, X, I) {};
Runtime.prototype.deleteFile = function (P, X) {};
Runtime.prototype.log = function (P, X) {};
Runtime.prototype.setTimeout = function (P, X) {};
Runtime.prototype.clearTimeout = function (P) {};
Runtime.prototype.libraryPaths = function () {};
Runtime.prototype.currentDirectory = function () {};
Runtime.prototype.setCurrentDirectory = function (P) {};
Runtime.prototype.type = function () {};
Runtime.prototype.getDOMImplementation = function () {};
Runtime.prototype.parseXML = function (P) {};
Runtime.prototype.exit = function (P) {};
Runtime.prototype.getWindow = function () {};
Runtime.prototype.requestAnimationFrame = function (P) {};
Runtime.prototype.cancelAnimationFrame = function (P) {};
Runtime.prototype.assert = function (P, X) {};
var IS_COMPILED_CODE = true;
function BrowserRuntime() {
  function P(N) {
    var S;
    var s;
    var x = N.length;
    var u = 0;
    for (S = 0; S < x; S += 1) {
      u += 1 + ((s = N.charCodeAt(S)) > 128) + (s > 2048);
      if (s > 55040 && s < 57344) {
        u += 1;
        S += 1;
      }
    }
    return u;
  }
  function X(N, x, S) {
    var u;
    var m;
    var s = N.length;
    x = new Uint8Array(new ArrayBuffer(x));
    if (S) {
      x[0] = 239;
      x[1] = 187;
      x[2] = 191;
      m = 3;
    } else {
      m = 0;
    }
    S = 0;
    for (; S < s; S += 1) {
      if ((u = N.charCodeAt(S)) < 128) {
        x[m] = u;
        m += 1;
      } else if (u < 2048) {
        x[m] = u >>> 6 | 192;
        x[m + 1] = u & 63 | 128;
        m += 2;
      } else if (u <= 55040 || u >= 57344) {
        x[m] = u >>> 12 & 15 | 224;
        x[m + 1] = u >>> 6 & 63 | 128;
        x[m + 2] = u & 63 | 128;
        m += 3;
      } else {
        u = 65536 + (u - 55296 << 10 | N.charCodeAt(S += 1) - 56320);
        x[m] = u >>> 18 & 7 | 240;
        x[m + 1] = u >>> 12 & 63 | 128;
        x[m + 2] = u >>> 6 & 63 | 128;
        x[m + 3] = u & 63 | 128;
        m += 4;
      }
    }
    return x;
  }
  function I(N) {
    var s;
    var x = N.length;
    var S = new Uint8Array(new ArrayBuffer(x));
    for (s = 0; s < x; s += 1) {
      S[s] = N.charCodeAt(s) & 255;
    }
    return S;
  }
  function y(N, x) {
    var S;
    if (x !== undefined) {
      S = N;
    } else {
      x = N;
    }
    console.log(x);
    if (C.enableAlerts && S === "alert") {
      alert(x);
    }
  }
  function w(N, x, S) {
    if (S.status !== 0 || S.responseText) {
      if (S.status === 200 || S.status === 0) {
        if (S.response && typeof S.response != "string") {
          if (x === "binary") {
            S = S.response;
            S = new Uint8Array(S);
          } else {
            S = String(S.response);
          }
        } else if (x === "binary") {
          if (S.responseBody !== null && String(typeof VBArray) !== "undefined") {
            var s = (S = new VBArray(S.responseBody).toArray()).length;
            x = new Uint8Array(new ArrayBuffer(s));
            N = 0;
            for (; N < s; N += 1) {
              x[N] = S[N];
            }
            S = x;
          } else {
            if (N = S.getResponseHeader("Content-Length")) {
              N = parseInt(N, 10);
            }
            if (N && N !== S.responseText.length) {
              e: {
                x = false;
                var u = P(s = S.responseText);
                if (typeof N == "number") {
                  if (N !== u && N !== u + 3) {
                    s = undefined;
                    break e;
                  }
                  x = u + 3 === N;
                  u = N;
                }
                s = X(s, u, x);
              }
            }
            if (s === undefined) {
              s = I(S.responseText);
            }
            S = s;
          }
        } else {
          S = S.responseText;
        }
        S = {
          err: null,
          data: S
        };
      } else {
        S = {
          err: S.responseText || S.statusText,
          data: null
        };
      }
    } else {
      S = {
        err: "File " + N + " is empty.",
        data: null
      };
    }
    return S;
  }
  function E(N, x, S) {
    var s = new XMLHttpRequest();
    s.open("GET", N, S);
    if (s.overrideMimeType) {
      s.overrideMimeType(x !== "binary" ? "text/plain; charset=" + x : "text/plain; charset=x-user-defined");
    }
    return s;
  }
  function R(N, x, S) {
    var s = E(N, x, true);
    s.onreadystatechange = function () {
      var u;
      if (s.readyState === 4) {
        u = w(N, x, s);
        S(u.err, u.data);
      }
    };
    try {
      s.send(null);
    } catch (u) {
      S(u.message, null);
    }
  }
  var C = this;
  this.byteArrayFromString = function (N, x) {
    var S;
    if (x === "utf8") {
      S = X(N, P(N), false);
    } else {
      if (x !== "binary") {
        C.log("unknown encoding: " + x);
      }
      S = I(N);
    }
    return S;
  };
  this.byteArrayToString = Runtime.byteArrayToString;
  this.getVariable = Runtime.getVariable;
  this.fromJson = Runtime.fromJson;
  this.toJson = Runtime.toJson;
  this.readFile = R;
  this.read = function (N, x, S, s) {
    R(N, "binary", function (u, m) {
      var l = null;
      if (m) {
        if (typeof m == "string") {
          throw "This should not happen.";
        }
        l = m.subarray(x, x + S);
      }
      s(u, l);
    });
  };
  this.readFileSync = function (N, x) {
    var s;
    var S = E(N, x, false);
    try {
      S.send(null);
      if ((s = w(N, x, S)).err) {
        throw s.err;
      }
      if (s.data === null) {
        throw "No data read from " + N + ".";
      }
    } catch (u) {
      throw u;
    }
    return s.data;
  };
  this.writeFile = function (N, x, S) {
    var u;
    var s = new XMLHttpRequest();
    s.open("PUT", N, true);
    s.onreadystatechange = function () {
      if (s.readyState === 4) {
        S(s.status !== 0 || s.responseText ? s.status >= 200 && s.status < 300 || s.status === 0 ? null : "Status " + String(s.status) + ": " + s.responseText || s.statusText : "File " + N + " is empty.");
      }
    };
    u = x.buffer && !s.sendAsBinary ? x.buffer : C.byteArrayToString(x, "binary");
    try {
      if (s.sendAsBinary) {
        s.sendAsBinary(u);
      } else {
        s.send(u);
      }
    } catch (m) {
      C.log("HUH? " + m + " " + x);
      S(m.message);
    }
  };
  this.deleteFile = function (N, x) {
    var S = new XMLHttpRequest();
    S.open("DELETE", N, true);
    S.onreadystatechange = function () {
      if (S.readyState === 4) {
        x(S.status < 200 && S.status >= 300 ? S.responseText : null);
      }
    };
    S.send(null);
  };
  this.loadXML = function (N, x) {
    var S = new XMLHttpRequest();
    S.open("GET", N, true);
    if (S.overrideMimeType) {
      S.overrideMimeType("text/xml");
    }
    S.onreadystatechange = function () {
      if (S.readyState === 4) {
        if (S.status !== 0 || S.responseText) {
          if (S.status === 200 || S.status === 0) {
            x(null, S.responseXML);
          } else {
            x(S.responseText, null);
          }
        } else {
          x("File " + N + " is empty.", null);
        }
      }
    };
    try {
      S.send(null);
    } catch (s) {
      x(s.message, null);
    }
  };
  this.log = y;
  this.enableAlerts = true;
  this.assert = Runtime.assert;
  this.setTimeout = function (N, x) {
    return setTimeout(function () {
      N();
    }, x);
  };
  this.clearTimeout = function (N) {
    clearTimeout(N);
  };
  this.libraryPaths = function () {
    return ["lib"];
  };
  this.setCurrentDirectory = function () {};
  this.currentDirectory = function () {
    return "";
  };
  this.type = function () {
    return "BrowserRuntime";
  };
  this.getDOMImplementation = function () {
    return window.document.implementation;
  };
  this.parseXML = function (N) {
    return new DOMParser().parseFromString(N, "text/xml");
  };
  this.exit = function (N) {
    y("Calling exit with code " + String(N) + ", but exit() is not implemented.");
  };
  this.getWindow = function () {
    return window;
  };
  this.requestAnimationFrame = function (N) {
    var x = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;
    if (x) {
      x.bind(window);
      return x(N);
    } else {
      return setTimeout(N, 15);
    }
  };
  this.cancelAnimationFrame = function (N) {
    var x = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame;
    if (x) {
      x.bind(window);
      x(N);
    } else {
      clearTimeout(N);
    }
  };
}
function NodeJSRuntime() {
  function P(N) {
    var S;
    var x = N.length;
    var s = new Uint8Array(new ArrayBuffer(x));
    for (S = 0; S < x; S += 1) {
      s[S] = N[S];
    }
    return s;
  }
  function X(N, x, S) {
    N = w.resolve(E, N);
    y.readFile(N, x !== "binary" ? x : null, function s(u, m) {
      if (u) {
        return S(u, null);
      } else if (m) {
        if (typeof m == "string") {
          return S(u, m);
        } else {
          S(u, P(m));
          return;
        }
      } else {
        return S("No data for " + N + ".", null);
      }
    });
  }
  var R;
  var C;
  var I = this;
  var y = require("fs");
  var w = require("path");
  var E = "";
  this.byteArrayFromString = function (N, x) {
    var s;
    var S = new Buffer(N, x);
    var u = S.length;
    var m = new Uint8Array(new ArrayBuffer(u));
    for (s = 0; s < u; s += 1) {
      m[s] = S[s];
    }
    return m;
  };
  this.byteArrayToString = Runtime.byteArrayToString;
  this.getVariable = Runtime.getVariable;
  this.fromJson = Runtime.fromJson;
  this.toJson = Runtime.toJson;
  this.readFile = X;
  this.loadXML = function (N, x) {
    X(N, "utf-8", function (S, s) {
      if (S) {
        return x(S, null);
      } else if (s) {
        x(null, I.parseXML(s));
        return;
      } else {
        return x("No data for " + N + ".", null);
      }
    });
  };
  this.writeFile = function (N, x, S) {
    x = new Buffer(x);
    N = w.resolve(E, N);
    y.writeFile(N, x, "binary", function (s) {
      S(s || null);
    });
  };
  this.deleteFile = function (N, x) {
    N = w.resolve(E, N);
    y.unlink(N, x);
  };
  this.read = function (N, x, S, s) {
    N = w.resolve(E, N);
    y.open(N, "r+", 666, function (u, m) {
      if (u) {
        s(u, null);
      } else {
        var l = new Buffer(S);
        y.read(m, l, 0, S, x, function (M) {
          y.close(m);
          s(M, P(l));
        });
      }
    });
  };
  this.readFileSync = function (N, x) {
    var S;
    if ((S = y.readFileSync(N, x === "binary" ? null : x)) === null) {
      throw "File " + N + " could not be read.";
    }
    if (x === "binary") {
      S = P(S);
    }
    return S;
  };
  this.log = function (N, x) {
    var S;
    if (x !== undefined) {
      S = N;
    } else {
      x = N;
    }
    if (S === "alert") {
      process.stderr.write("\n!!!!! ALERT !!!!!\n");
    }
    process.stderr.write(x + "\n");
    if (S === "alert") {
      process.stderr.write("!!!!! ALERT !!!!!\n");
    }
  };
  this.assert = Runtime.assert;
  this.setTimeout = function (N, x) {
    return setTimeout(function () {
      N();
    }, x);
  };
  this.clearTimeout = function (N) {
    clearTimeout(N);
  };
  this.libraryPaths = function () {
    return [__dirname];
  };
  this.setCurrentDirectory = function (N) {
    E = N;
  };
  this.currentDirectory = function () {
    return E;
  };
  this.type = function () {
    return "NodeJSRuntime";
  };
  this.getDOMImplementation = function () {
    return C;
  };
  this.parseXML = function (N) {
    return R.parseFromString(N, "text/xml");
  };
  this.exit = process.exit;
  this.getWindow = function () {
    return null;
  };
  this.requestAnimationFrame = function (N) {
    return setTimeout(N, 15);
  };
  this.cancelAnimationFrame = function (N) {
    clearTimeout(N);
  };
  R = new (require("xmldom").DOMParser)();
  C = I.parseXML("<a/>").implementation;
}
function RhinoRuntime() {
  var y;
  var w;
  var P = this;
  var X = {};
  var I = X.javax.xml.parsers.DocumentBuilderFactory.newInstance();
  var E = "";
  I.setValidating(false);
  I.setNamespaceAware(true);
  I.setExpandEntityReferences(false);
  I.setSchema(null);
  w = X.org.xml.sax.EntityResolver({
    resolveEntity: function (R, C) {
      var N = new X.java.io.FileReader(C);
      return new X.org.xml.sax.InputSource(N);
    }
  });
  (y = I.newDocumentBuilder()).setEntityResolver(w);
  this.byteArrayFromString = function (R, C) {
    var N;
    var x = R.length;
    var S = new Uint8Array(new ArrayBuffer(x));
    for (N = 0; N < x; N += 1) {
      S[N] = R.charCodeAt(N) & 255;
    }
    return S;
  };
  this.byteArrayToString = Runtime.byteArrayToString;
  this.getVariable = Runtime.getVariable;
  this.fromJson = Runtime.fromJson;
  this.toJson = Runtime.toJson;
  this.loadXML = function (R, C) {
    var N = new X.java.io.File(R);
    var x = null;
    try {
      x = y.parse(N);
    } catch (S) {
      print(S);
      return C(S, null);
    }
    C(null, x);
  };
  this.readFile = function (R, C, N) {
    if (E) {
      R = E + "/" + R;
    }
    var S = C === "binary" ? "latin1" : C;
    if (new X.java.io.File(R).isFile()) {
      if ((R = readFile(R, S)) && C === "binary") {
        R = P.byteArrayFromString(R, "binary");
      }
      N(null, R);
    } else {
      N(R + " is not a file.", null);
    }
  };
  this.writeFile = function (R, C, N) {
    if (E) {
      R = E + "/" + R;
    }
    R = new X.java.io.FileOutputStream(R);
    var x;
    var S = C.length;
    for (x = 0; x < S; x += 1) {
      R.write(C[x]);
    }
    R.close();
    N(null);
  };
  this.deleteFile = function (R, C) {
    if (E) {
      R = E + "/" + R;
    }
    var N = new X.java.io.File(R);
    var x = R + Math.random();
    x = new X.java.io.File(x);
    if (N.rename(x)) {
      x.deleteOnExit();
      C(null);
    } else {
      C("Could not delete " + R);
    }
  };
  this.read = function (R, C, N, x) {
    var S;
    if (E) {
      R = E + "/" + R;
    }
    var s = "binary";
    if (new X.java.io.File(S = R).isFile()) {
      if (s === "binary") {
        s = "latin1";
      }
      S = readFile(S, s);
    } else {
      S = null;
    }
    if (S) {
      x(null, this.byteArrayFromString(S.substring(C, C + N), "binary"));
    } else {
      x("Cannot read " + R, null);
    }
  };
  this.readFileSync = function (R, C) {
    if (!C) {
      return "";
    }
    var N = readFile(R, C);
    if (N === null) {
      throw "File could not be read.";
    }
    return N;
  };
  this.log = function (R, C) {
    var N;
    if (C !== undefined) {
      N = R;
    } else {
      C = R;
    }
    if (N === "alert") {
      print("\n!!!!! ALERT !!!!!");
    }
    print(C);
    if (N === "alert") {
      print("!!!!! ALERT !!!!!");
    }
  };
  this.assert = Runtime.assert;
  this.setTimeout = function (R) {
    R();
    return 0;
  };
  this.clearTimeout = function () {};
  this.libraryPaths = function () {
    return ["lib"];
  };
  this.setCurrentDirectory = function (R) {
    E = R;
  };
  this.currentDirectory = function () {
    return E;
  };
  this.type = function () {
    return "RhinoRuntime";
  };
  this.getDOMImplementation = function () {
    return y.getDOMImplementation();
  };
  this.parseXML = function (R) {
    R = new X.java.io.StringReader(R);
    R = new X.org.xml.sax.InputSource(R);
    return y.parse(R);
  };
  this.exit = quit;
  this.getWindow = function () {
    return null;
  };
  this.requestAnimationFrame = function (R) {
    R();
    return 0;
  };
  this.cancelAnimationFrame = function () {};
}
Runtime.byteArrayToString = function (P, X) {
  var w;
  if (X === "utf8") {
    w = function y(E) {
      var C;
      var S;
      var s;
      var u;
      var R = "";
      var N = E.length;
      var x = [];
      for (C = N >= 3 && E[0] === 239 && E[1] === 187 && E[2] === 191 ? 3 : 0; C < N; C += 1) {
        if ((S = E[C]) < 128) {
          x.push(S);
        } else {
          s = E[C += 1];
          if (S >= 194 && S < 224) {
            x.push((S & 31) << 6 | s & 63);
          } else {
            u = E[C += 1];
            if (S >= 224 && S < 240) {
              x.push((S & 15) << 12 | (s & 63) << 6 | u & 63);
            } else {
              C += 1;
              if (S >= 240 && S < 245) {
                S = (S & 7) << 18 | (s & 63) << 12 | (u & 63) << 6 | E[C] & 63;
                x.push(55296 + ((S -= 65536) >> 10), 56320 + (S & 1023));
              }
            }
          }
        }
        if (x.length >= 1000) {
          R += String.fromCharCode.apply(null, x);
          x.length = 0;
        }
      }
      return R + String.fromCharCode.apply(null, x);
    }(P);
  } else {
    if (X !== "binary") {
      this.log("Unsupported encoding: " + X);
    }
    w = function I(E) {
      var C;
      var R = "";
      var N = E.length;
      for (C = 0; C < N; C += 1) {
        R += String.fromCharCode(E[C] & 255);
      }
      return R;
    }(P);
  }
  return w;
};
Runtime.getVariable = function (g) {
  try {
    return eval(g);
  } catch (P) {}
};
Runtime.toJson = function (P) {
  return JSON.stringify(P);
};
Runtime.fromJson = function (P) {
  return JSON.parse(P);
};
Runtime.getFunctionName = function (P) {
  if (P.name === undefined) {
    return (P = /function\s+(\w+)/.exec(P)) && P[1];
  } else {
    return P.name;
  }
};
Runtime.assert = function (P, X) {
  if (!P) {
    this.log("alert", "ASSERTION FAILED:\n" + X);
    throw Error(X);
  }
};
Runtime.create = function () {
  if (String(typeof window) !== "undefined") {
    return new BrowserRuntime();
  } else if (String(typeof require) !== "undefined") {
    return new NodeJSRuntime();
  } else {
    return new RhinoRuntime();
  }
};
var runtime = Runtime.create();
var core = {};
var gui = {};
var xmldom = {};
var odf = {};
var ops = {};
var webodf = {};
function makeBase64() {
  function P(B) {
    var A;
    var H = B.length;
    var $ = new Uint8Array(new ArrayBuffer(H));
    for (A = 0; A < H; A += 1) {
      $[A] = B.charCodeAt(A) & 255;
    }
    return $;
  }
  function X(B) {
    var A;
    var $;
    var H = "";
    var J = B.length - 2;
    for ($ = 0; $ < J; $ += 3) {
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(A = B[$] << 16 | B[$ + 1] << 8 | B[$ + 2]) >>> 18];
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[A >>> 12 & 63];
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[A >>> 6 & 63];
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[A & 63];
    }
    if ($ === J + 1) {
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(A = B[$] << 4) >>> 6];
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[A & 63];
      H += "==";
    } else if ($ === J) {
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(A = B[$] << 10 | B[$ + 1] << 2) >>> 12];
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[A >>> 6 & 63];
      H += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[A & 63];
      H += "=";
    }
    return H;
  }
  function I(B) {
    var Q;
    var U;
    var A = (B = B.replace(/[^A-Za-z0-9+\/]+/g, "")).length;
    var H = new Uint8Array(new ArrayBuffer(A * 3));
    var $ = B.length % 4;
    var J = 0;
    for (Q = 0; Q < A; Q += 4) {
      U = (l[B.charAt(Q)] || 0) << 18 | (l[B.charAt(Q + 1)] || 0) << 12 | (l[B.charAt(Q + 2)] || 0) << 6 | (l[B.charAt(Q + 3)] || 0);
      H[J] = U >> 16;
      H[J + 1] = U >> 8 & 255;
      H[J + 2] = U & 255;
      J += 3;
    }
    return H.subarray(0, A = A * 3 - [0, 0, 2, 1][$]);
  }
  function y(B) {
    var A;
    var H;
    var $ = B.length;
    var J = 0;
    var Q = new Uint8Array(new ArrayBuffer($ * 3));
    for (A = 0; A < $; A += 1) {
      if ((H = B[A]) < 128) {
        Q[J++] = H;
      } else {
        if (H < 2048) {
          Q[J++] = H >>> 6 | 192;
        } else {
          Q[J++] = H >>> 12 & 15 | 224;
          Q[J++] = H >>> 6 & 63 | 128;
        }
        Q[J++] = H & 63 | 128;
      }
    }
    return Q.subarray(0, J);
  }
  function w(B) {
    var A;
    var H;
    var $;
    var Q = B.length;
    var U = new Uint8Array(new ArrayBuffer(Q));
    var K = 0;
    for (A = 0; A < Q; A += 1) {
      if ((H = B[A]) < 128) {
        U[K++] = H;
      } else {
        $ = B[A += 1];
        U[K++] = H < 224 ? (H & 31) << 6 | $ & 63 : (H & 15) << 12 | ($ & 63) << 6 | B[A += 1] & 63;
      }
    }
    return U.subarray(0, K);
  }
  function E(B) {
    return X(P(B));
  }
  function R(B) {
    return String.fromCharCode.apply(String, I(B));
  }
  function C(B) {
    return w(P(B));
  }
  function N(B) {
    B = w(B);
    for (var A = "", H = 0; H < B.length;) {
      A += String.fromCharCode.apply(String, B.subarray(H, H + 45000));
      H += 45000;
    }
    return A;
  }
  function x(B, A, H) {
    var $;
    var J;
    var Q;
    var U = "";
    for (Q = A; Q < H; Q += 1) {
      if ((A = B.charCodeAt(Q) & 255) < 128) {
        U += String.fromCharCode(A);
      } else {
        $ = B.charCodeAt(Q += 1) & 255;
        if (A < 224) {
          U += String.fromCharCode((A & 31) << 6 | $ & 63);
        } else {
          J = B.charCodeAt(Q += 1) & 255;
          U += String.fromCharCode((A & 15) << 12 | ($ & 63) << 6 | J & 63);
        }
      }
    }
    return U;
  }
  function S(B, A) {
    var $ = "";
    var J = 0;
    if (B.length < 100000) {
      A(x(B, 0, B.length), true);
    } else {
      if (typeof B != "string") {
        B = B.slice();
      }
      (function H() {
        var Q = J + 100000;
        if (Q > B.length) {
          Q = B.length;
        }
        $ += x(B, J, Q);
        if (A($, Q = (J = Q) === B.length) && !Q) {
          runtime.setTimeout(H, 0);
        }
      })();
    }
  }
  function s(B) {
    return y(P(B));
  }
  function u(B) {
    return String.fromCharCode.apply(String, y(B));
  }
  function m(B) {
    return String.fromCharCode.apply(String, y(P(B)));
  }
  var M;
  var O;
  var ee;
  var G;
  var l = function (B) {
    var H;
    var $;
    var A = {};
    H = 0;
    $ = B.length;
    for (; H < $; H += 1) {
      A[B.charAt(H)] = H;
    }
    return A;
  }("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
  var q = runtime.getWindow();
  if (q && q.btoa) {
    ee = q.btoa;
    M = function (B) {
      return ee(m(B));
    };
  } else {
    ee = E;
    M = function (B) {
      return X(s(B));
    };
  }
  if (q && q.atob) {
    G = q.atob;
    O = function (B) {
      return x(B = G(B), 0, B.length);
    };
  } else {
    G = R;
    O = function (B) {
      return N(I(B));
    };
  }
  core.Base64 = function () {
    this.convertByteArrayToBase64 = this.convertUTF8ArrayToBase64 = X;
    this.convertBase64ToByteArray = this.convertBase64ToUTF8Array = I;
    this.convertUTF16ArrayToByteArray = this.convertUTF16ArrayToUTF8Array = y;
    this.convertByteArrayToUTF16Array = this.convertUTF8ArrayToUTF16Array = w;
    this.convertUTF8StringToBase64 = E;
    this.convertBase64ToUTF8String = R;
    this.convertUTF8StringToUTF16Array = C;
    this.convertByteArrayToUTF16String = this.convertUTF8ArrayToUTF16String = N;
    this.convertUTF8StringToUTF16String = S;
    this.convertUTF16StringToByteArray = this.convertUTF16StringToUTF8Array = s;
    this.convertUTF16ArrayToUTF8String = u;
    this.convertUTF16StringToUTF8String = m;
    this.convertUTF16StringToBase64 = M;
    this.convertBase64ToUTF16String = O;
    this.fromBase64 = R;
    this.toBase64 = E;
    this.atob = G;
    this.btoa = ee;
    this.utob = m;
    this.btou = S;
    this.encode = M;
    this.encodeURI = function (B) {
      return M(B).replace(/[+\/]/g, function (A) {
        if (A === "+") {
          return "-";
        } else {
          return "_";
        }
      }).replace(/\\=+$/, "");
    };
    this.decode = function (B) {
      return O(B.replace(/[\-_]/g, function (A) {
        if (A === "-") {
          return "+";
        } else {
          return "/";
        }
      }));
    };
    return this;
  };
  return core.Base64;
}
function createXPathSingleton() {
  function P(S, s, u) {
    return S !== -1 && (S < s || s === -1) && (S < u || u === -1);
  }
  function X(S) {
    for (var l, s = [], u = 0, m = S.length; u < m;) {
      var M = S;
      var O = m;
      var q = s;
      var ee = "";
      var G = [];
      var B = M.indexOf("[", u);
      var A = M.indexOf("/", u);
      var H = M.indexOf("=", u);
      if (P(A, B, H)) {
        ee = M.substring(u, A);
        u = A + 1;
      } else if (P(B, A, H)) {
        ee = M.substring(u, B);
        u = x(M, B, G);
      } else if (P(H, A, B)) {
        ee = M.substring(u, H);
        u = H;
      } else {
        ee = M.substring(u, O);
        u = O;
      }
      q.push({
        location: ee,
        predicates: G
      });
      if (u < m && S[u] === "=") {
        if ((l = S.substring(u + 1, m)).length > 2 && (l[0] === "'" || l[0] === "\"")) {
          l = l.slice(1, l.length - 1);
        } else {
          try {
            l = parseInt(l, 10);
          } catch {}
        }
        u = m;
      }
    }
    return {
      steps: s,
      value: l
    };
  }
  function I() {
    var S = null;
    var s = false;
    this.setNode = function (u) {
      S = u;
    };
    this.reset = function () {
      s = false;
    };
    this.next = function () {
      var u = s ? null : S;
      s = true;
      return u;
    };
  }
  function y(S, s, u) {
    this.reset = function () {
      S.reset();
    };
    this.next = function () {
      for (var m = S.next(); m && (m.nodeType === Node.ELEMENT_NODE && (m = m.getAttributeNodeNS(s, u)), !m);) {
        m = S.next();
      }
      return m;
    };
  }
  function w(S, s) {
    var u = S.next();
    var m = null;
    this.reset = function () {
      S.reset();
      u = S.next();
      m = null;
    };
    this.next = function () {
      for (; u;) {
        if (m) {
          if (s && m.firstChild) {
            m = m.firstChild;
          } else {
            for (; !m.nextSibling && m !== u;) {
              m = m.parentNode;
            }
            if (m === u) {
              u = S.next();
            } else {
              m = m.nextSibling;
            }
          }
        } else {
          do {
            if (!(m = u.firstChild)) {
              u = S.next();
            }
          } while (u && !m);
        }
        if (m && m.nodeType === Node.ELEMENT_NODE) {
          return m;
        }
      }
      return null;
    };
  }
  function E(S, s) {
    this.reset = function () {
      S.reset();
    };
    this.next = function () {
      for (var u = S.next(); u && !s(u);) {
        u = S.next();
      }
      return u;
    };
  }
  function R(S, s, u) {
    var m = u((s = s.split(":", 2))[0]);
    var l = s[1];
    return new E(S, function (M) {
      return M.localName === l && M.namespaceURI === m;
    });
  }
  function C(S, s, u) {
    var m = new I();
    var l = N(m, s, u);
    var M = s.value;
    return new E(S, M === undefined ? function (O) {
      m.setNode(O);
      l.reset();
      return l.next() !== null;
    } : function (O) {
      m.setNode(O);
      l.reset();
      return !!(O = l.next()) && O.nodeValue === M;
    });
  }
  var N;
  var x;
  x = function (S, s, u) {
    for (var m = s, l = S.length, M = 0; m < l;) {
      if (S[m] === "]") {
        if (--M <= 0) {
          u.push(X(S.substring(s, m)));
        }
      } else if (S[m] === "[") {
        if (M <= 0) {
          s = m + 1;
        }
        M += 1;
      }
      m += 1;
    }
    return m;
  };
  N = function (S, s, u) {
    var m;
    var l;
    var M;
    var O;
    for (m = 0; m < s.steps.length; m += 1) {
      if ((l = (M = s.steps[m]).location) === "") {
        S = new w(S, false);
      } else if (l[0] === "@") {
        if (!(O = u((l = l.substr(1).split(":", 2))[0]))) {
          throw "No namespace associated with the prefix " + l[0];
        }
        S = new y(S, O, l[1]);
      } else if (l !== ".") {
        S = new w(S, false);
        if (l.indexOf(":") !== -1) {
          S = R(S, l, u);
        }
      }
      for (l = 0; l < M.predicates.length; l += 1) {
        S = C(S, O = M.predicates[l], u);
      }
    }
    return S;
  };
  return {
    getODFElementsWithXPath: function (S, s, u) {
      var m = S.ownerDocument;
      var l = [];
      var M = null;
      if (m && typeof m.evaluate == "function") {
        for (M = (u = m.evaluate(s, S, u, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null)).iterateNext(); M !== null;) {
          if (M.nodeType === Node.ELEMENT_NODE) {
            l.push(M);
          }
          M = u.iterateNext();
        }
      } else {
        (l = new I()).setNode(S);
        S = X(s);
        l = N(l, S, u);
        S = [];
        u = l.next();
        for (; u;) {
          S.push(u);
          u = l.next();
        }
        l = S;
      }
      return l;
    }
  };
}
function RootFilter(P, X, I) {
  var y = core.PositionFilter.FilterResult.FILTER_ACCEPT;
  var w = core.PositionFilter.FilterResult.FILTER_REJECT;
  this.acceptPosition = function (E) {
    var R;
    E = E.container();
    R = typeof P == "string" ? X[P].getNode() : P;
    if (I(E) === I(R)) {
      return y;
    } else {
      return w;
    }
  };
}
webodf.Version = String(typeof webodf_version) !== "undefined" ? webodf_version : "From Source";
(function () {
  function g(P, X, I) {
    var w;
    var E;
    var y = P + "/manifest.json";
    runtime.log("Loading manifest: " + y);
    try {
      w = runtime.readFileSync(y, "utf-8");
    } catch (R) {
      if (!I) {
        console.log(String(R));
        throw R;
      }
      runtime.log("No loadable manifest found.");
      return;
    }
    for (E in I = JSON.parse(w)) {
      if (I.hasOwnProperty(E)) {
        X[E] = {
          dir: P,
          deps: I[E]
        };
      }
    }
  }
  function k(P, X, I) {
    var w = [];
    var E = {};
    var R = {};
    P.forEach(function y(C) {
      if (!R[C] && !I(C)) {
        if (E[C]) {
          throw "Circular dependency detected for " + C + ".";
        }
        E[C] = true;
        if (!X[C]) {
          throw "Missing dependency information for class " + C + ".";
        }
        var S;
        var N = X[C];
        var x = N.deps;
        var s = x.length;
        for (S = 0; S < s; S += 1) {
          y(x[S]);
        }
        E[C] = false;
        R[C] = true;
        w.push(N.dir + "/" + C.replace(".", "/") + ".js");
      }
    });
    return w;
  }
  function d(P, X) {
    return X + "\n//# sourceURL=" + P;
  }
  function b(b) {
    var f;
    var e;
    for (f = 0; f < b.length; f += 1) {
      e = runtime.readFileSync(b[f], "utf-8");
      e = d(b[f], e);
      eval(e);
    }
  }
  function f(P) {
    P = P.split(".");
    var X;
    var I = p;
    var y = P.length;
    for (X = 0; X < y; X += 1) {
      if (!I.hasOwnProperty(P[X])) {
        return false;
      }
      I = I[P[X]];
    }
    return true;
  }
  var n;
  var p = {
    core,
    gui,
    xmldom,
    odf,
    ops
  };
  runtime.loadClasses = function (P, X) {
    if (IS_COMPILED_CODE || P.length === 0) {
      return X && X();
    }
    var I;
    if (!(I = n)) {
      I = [];
      var w;
      var y = runtime.libraryPaths();
      if (runtime.currentDirectory() && y.indexOf(runtime.currentDirectory()) === -1) {
        g(runtime.currentDirectory(), I, true);
      }
      w = 0;
      for (; w < y.length; w += 1) {
        g(y[w], I);
      }
    }
    if ((P = k(P, n = I, f)).length === 0) {
      return X && X();
    }
    if (runtime.type() === "BrowserRuntime" && X) {
      var E;
      var R;
      I = P;
      y = document.currentScript || document.documentElement.lastChild;
      w = document.createDocumentFragment();
      R = 0;
      for (; R < I.length; R += 1) {
        (E = document.createElement("script")).type = "text/javascript";
        E.charset = "utf-8";
        E.async = false;
        E.setAttribute("src", I[R]);
        w.appendChild(E);
      }
      if (X) {
        E.onload = X;
      }
      y.parentNode.insertBefore(w, y);
    } else {
      b(P);
      if (X) {
        X();
      }
    }
  };
  runtime.loadClass = function (P, X) {
    runtime.loadClasses([P], X);
  };
})();
(function () {
  function P(X) {
    return X;
  }
  runtime.getTranslator = function () {
    return P;
  };
  runtime.setTranslator = function (X) {
    P = X;
  };
  runtime.tr = function (X) {
    var I = P(X);
    if (I && String(typeof I) === "string") {
      return I;
    } else {
      return X;
    }
  };
})();
(function (g) {
  function k(d) {
    if (d.length) {
      var b = d[0];
      runtime.readFile(b, "utf8", function (f, n) {
        function g() {
          var b;
          if (b = eval(k)) {
            runtime.exit(b);
          }
        }
        var r = "";
        var r = b.lastIndexOf("/");
        var k = n;
        var r = r !== -1 ? b.substring(0, r) : ".";
        runtime.setCurrentDirectory(r);
        if (f) {
          runtime.log(f);
          runtime.exit(1);
        } else if (k === null) {
          runtime.log("No code found for " + b);
          runtime.exit(1);
        } else {
          g.apply(null, d);
        }
      });
    }
  }
  g = g ? Array.prototype.slice.call(g) : [];
  if (runtime.type() === "NodeJSRuntime") {
    k(process.argv.slice(2));
  } else if (runtime.type() === "RhinoRuntime") {
    k(g);
  } else {
    k(g.slice(1));
  }
})(String(typeof arguments) !== "undefined" && arguments);
core.Async = {
  forEach: function (P, X, I) {
    function y(C) {
      if (R !== E) {
        if (C) {
          R = E;
          I(C);
        } else if ((R += 1) === E) {
          I(null);
        }
      }
    }
    var w;
    var E = P.length;
    var R = 0;
    for (w = 0; w < E; w += 1) {
      X(P[w], y);
    }
  },
  destroyAll: function (P, X) {
    (function I(y, w) {
      if (w) {
        X(w);
      } else if (y < P.length) {
        P[y](function (E) {
          I(y + 1, E);
        });
      } else {
        X();
      }
    })(0, undefined);
  }
};
core.Base64 = makeBase64();
core.CSSUnits = function () {
  var P = this;
  var X = {
    in: 1,
    cm: 2.54,
    mm: 25.4,
    pt: 72,
    pc: 12,
    px: 96
  };
  this.convert = function (I, y, w) {
    return I * X[w] / X[y];
  };
  this.convertMeasure = function (I, y) {
    var w;
    var E;
    if (I && y) {
      w = parseFloat(I);
      E = I.replace(w.toString(), "");
      w = P.convert(w, E, y);
    }
    return w;
  };
  this.getUnits = function (I) {
    return I.substr(I.length - 2, I.length);
  };
};
(function () {
  function P() {
    var y;
    var w;
    var E;
    var R;
    var C;
    var N;
    var x;
    var S;
    var s;
    if (I === undefined) {
      N = (w = (y = runtime.getWindow()) && y.document).documentElement;
      x = w.body;
      I = {
        rangeBCRIgnoresElementBCR: false,
        unscaledRangeClientRects: false,
        elementBCRIgnoresBodyScroll: false
      };
      if (w) {
        (R = w.createElement("div")).style.position = "absolute";
        R.style.left = "-99999px";
        R.style.transform = "scale(2)";
        R.style["-webkit-transform"] = "scale(2)";
        C = w.createElement("div");
        R.appendChild(C);
        x.appendChild(R);
        (y = w.createRange()).selectNode(C);
        I.rangeBCRIgnoresElementBCR = y.getClientRects().length === 0;
        C.appendChild(w.createTextNode("Rect transform test"));
        w = C.getBoundingClientRect();
        E = y.getBoundingClientRect();
        I.unscaledRangeClientRects = Math.abs(w.height - E.height) > 2;
        R.style.transform = "";
        R.style["-webkit-transform"] = "";
        w = N.style.overflow;
        E = x.style.overflow;
        S = x.style.height;
        s = x.scrollTop;
        N.style.overflow = "visible";
        x.style.overflow = "visible";
        x.style.height = "200%";
        x.scrollTop = x.scrollHeight;
        I.elementBCRIgnoresBodyScroll = y.getBoundingClientRect().top !== C.getBoundingClientRect().top;
        x.scrollTop = s;
        x.style.height = S;
        x.style.overflow = E;
        N.style.overflow = w;
        y.detach();
        x.removeChild(R);
        y = Object.keys(I).map(function (u) {
          return u + ":" + String(I[u]);
        }).join(", ");
        runtime.log("Detected browser quirks - " + y);
      }
    }
    return I;
  }
  function X(y, w, E) {
    for (y = y ? y.firstElementChild : null; y;) {
      if (y.localName === E && y.namespaceURI === w) {
        return y;
      }
      y = y.nextElementSibling;
    }
    return null;
  }
  var I;
  core.DomUtilsImpl = function () {
    function y(m, l) {
      for (var O, M = 0; m.parentNode !== l;) {
        runtime.assert(m.parentNode !== null, "parent is null");
        m = m.parentNode;
      }
      for (O = l.firstChild; O !== m;) {
        M += 1;
        O = O.nextSibling;
      }
      return M;
    }
    function w(m, l) {
      return m.compareBoundaryPoints(Range.START_TO_START, l) <= 0 && m.compareBoundaryPoints(Range.END_TO_END, l) >= 0;
    }
    function E(m, l) {
      return m.compareBoundaryPoints(Range.END_TO_START, l) <= 0 && m.compareBoundaryPoints(Range.START_TO_END, l) >= 0;
    }
    function R(m, l) {
      var M = null;
      if (m.nodeType === Node.TEXT_NODE) {
        if (m.length === 0) {
          m.parentNode.removeChild(m);
          if (l.nodeType === Node.TEXT_NODE) {
            M = l;
          }
        } else {
          if (l.nodeType === Node.TEXT_NODE) {
            m.appendData(l.data);
            l.parentNode.removeChild(l);
          }
          M = m;
        }
      }
      return M;
    }
    function C(m) {
      for (var l = m.parentNode; m.firstChild;) {
        l.insertBefore(m.firstChild, m);
      }
      l.removeChild(m);
      return l;
    }
    function S(m, l) {
      if (P().unscaledRangeClientRects) {
        return m;
      } else {
        return m / l;
      }
    }
    var l;
    var M;
    var u = null;
    this.splitBoundaries = function (m) {
      var l;
      var O;
      var q;
      var ee;
      var M = [];
      if (m.startContainer.nodeType === Node.TEXT_NODE || m.endContainer.nodeType === Node.TEXT_NODE) {
        O = m.endContainer;
        q = m.endContainer.nodeType !== Node.TEXT_NODE && m.endOffset === m.endContainer.childNodes.length;
        if ((ee = m.endOffset) < (l = m.endContainer).childNodes.length) {
          l = l.childNodes.item(ee);
          ee = 0;
          l = l.childNodes.item(ee);
          ee = 0;
          for (; l.firstChild;) {
            l = l.firstChild;
          }
        } else {
          for (; l.lastChild;) {
            ee = (l = l.lastChild).nodeType === Node.TEXT_NODE ? l.textContent.length : l.childNodes.length;
          }
        }
        if (l === O) {
          O = null;
        }
        m.setEnd(l, ee);
        ee = m.endContainer;
        if (m.endOffset !== 0 && ee.nodeType === Node.TEXT_NODE && m.endOffset !== (l = ee).length) {
          M.push(l.splitText(m.endOffset));
          M.push(l);
        }
        ee = m.startContainer;
        if (m.startOffset !== 0 && ee.nodeType === Node.TEXT_NODE && m.startOffset !== (l = ee).length) {
          ee = l.splitText(m.startOffset);
          M.push(l);
          M.push(ee);
          m.setStart(ee, 0);
        }
        if (O !== null) {
          for (ee = m.endContainer; ee.parentNode && ee.parentNode !== O;) {
            ee = ee.parentNode;
          }
          q = q ? O.childNodes.length : y(ee, O);
          m.setEnd(O, q);
        }
      }
      return M;
    };
    this.containsRange = w;
    this.rangesIntersect = E;
    this.rangeIntersection = function (m, l) {
      var M;
      if (E(m, l)) {
        M = m.cloneRange();
        if (m.compareBoundaryPoints(Range.START_TO_START, l) === -1) {
          M.setStart(l.startContainer, l.startOffset);
        }
        if (m.compareBoundaryPoints(Range.END_TO_END, l) === 1) {
          M.setEnd(l.endContainer, l.endOffset);
        }
      }
      return M;
    };
    this.getNodesInRange = function (m, l, M) {
      var ee;
      var G;
      var O = [];
      var q = (q = m.commonAncestorContainer).nodeType === Node.TEXT_NODE ? q.parentNode : q;
      M = m.startContainer.ownerDocument.createTreeWalker(q, M, l, false);
      if (m.endContainer.childNodes[m.endOffset - 1]) {
        ee = m.endContainer.childNodes[m.endOffset - 1];
        G = Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINED_BY;
      } else {
        ee = m.endContainer;
        G = Node.DOCUMENT_POSITION_PRECEDING;
      }
      if (m.startContainer.childNodes[m.startOffset]) {
        M.currentNode = m = m.startContainer.childNodes[m.startOffset];
      } else {
        var B = m.startContainer;
        if (m.startOffset === (B.nodeType === Node.TEXT_NODE ? B.length : B.childNodes.length)) {
          M.currentNode = m = m.startContainer;
          M.lastChild();
          m = M.nextNode();
        } else {
          M.currentNode = m = m.startContainer;
        }
      }
      if (m) {
        if ((m = M.currentNode) !== q) {
          for (m = m.parentNode; m && m !== q;) {
            if (l(m) === NodeFilter.FILTER_REJECT) {
              M.currentNode = m;
            }
            m = m.parentNode;
          }
        }
        switch (l(m = M.currentNode)) {
          case NodeFilter.FILTER_REJECT:
            for (m = M.nextSibling(); !m && M.parentNode();) {
              m = M.nextSibling();
            }
            break;
          case NodeFilter.FILTER_SKIP:
            m = M.nextNode();
        }
        for (; m && ((l = ee.compareDocumentPosition(m)) === 0 || (l & G) != 0);) {
          O.push(m);
          m = M.nextNode();
        }
      }
      return O;
    };
    this.normalizeTextNodes = function (m) {
      if (m && m.nextSibling) {
        m = R(m, m.nextSibling);
      }
      if (m && m.previousSibling) {
        R(m.previousSibling, m);
      }
    };
    this.rangeContainsNode = function (m, l) {
      var q;
      var M = l.ownerDocument.createRange();
      var O = l.ownerDocument.createRange();
      M.setStart(m.startContainer, m.startOffset);
      M.setEnd(m.endContainer, m.endOffset);
      O.selectNodeContents(l);
      q = w(M, O);
      M.detach();
      O.detach();
      return q;
    };
    this.mergeIntoParent = C;
    this.removeUnwantedNodes = function N(m, l) {
      var ee;
      var M = m.parentNode;
      var O = m.firstChild;
      var q = l(m);
      if (q === NodeFilter.FILTER_SKIP) {
        return M;
      }
      for (; O;) {
        ee = O.nextSibling;
        N(O, l);
        O = ee;
      }
      if (M && q === NodeFilter.FILTER_REJECT) {
        C(m);
      }
      return M;
    };
    this.removeAllChildNodes = function (m) {
      for (; m.firstChild;) {
        m.removeChild(m.firstChild);
      }
    };
    this.getElementsByTagNameNS = function (m, l, M) {
      var O = [];
      m = m.getElementsByTagNameNS(l, M);
      O.length = M = m.length;
      l = 0;
      for (; l < M; l += 1) {
        O[l] = m.item(l);
      }
      return O;
    };
    this.getElementsByTagName = function (m, l) {
      var O;
      var q;
      var ee;
      var M = [];
      O = m.getElementsByTagName(l);
      M.length = ee = O.length;
      q = 0;
      for (; q < ee; q += 1) {
        M[q] = O.item(q);
      }
      return M;
    };
    this.containsNode = function (m, l) {
      return m === l || m.contains(l);
    };
    this.comparePoints = function (m, l, M, O) {
      if (m === M) {
        return O - l;
      }
      var q = m.compareDocumentPosition(M);
      return q = q === 2 ? -1 : q === 4 ? 1 : q === 10 ? (l = y(m, M)) < O ? 1 : -1 : (O = y(M, m)) < l ? -1 : 1;
    };
    this.adaptRangeDifferenceToZoomLevel = S;
    this.translateRect = function (m, l, M) {
      return {
        top: S(m.top - l.top, M),
        left: S(m.left - l.left, M),
        bottom: S(m.bottom - l.top, M),
        right: S(m.right - l.left, M),
        width: S(m.width, M),
        height: S(m.height, M)
      };
    };
    this.getBoundingClientRect = function (m) {
      var q;
      var l = m.ownerDocument;
      var M = P();
      var O = l.body;
      if (M.unscaledRangeClientRects !== false && !M.rangeBCRIgnoresElementBCR || m.nodeType !== Node.ELEMENT_NODE) {
        if (u) {
          q = u;
        } else {
          u = q = l.createRange();
        }
        (M = q).selectNode(m);
        return M.getBoundingClientRect();
      } else {
        m = m.getBoundingClientRect();
        if (M.elementBCRIgnoresBodyScroll) {
          return {
            left: m.left + O.scrollLeft,
            right: m.right + O.scrollLeft,
            top: m.top + O.scrollTop,
            bottom: m.bottom + O.scrollTop,
            width: m.width,
            height: m.height
          };
        } else {
          return m;
        }
      }
    };
    this.mapKeyValObjOntoNode = function (m, l, M) {
      Object.keys(l).forEach(function (O) {
        var q = (ee = O.split(":"))[1];
        var ee = M(ee[0]);
        var G = l[O];
        if (ee) {
          if (!(q = m.getElementsByTagNameNS(ee, q)[0])) {
            q = m.ownerDocument.createElementNS(ee, O);
            m.appendChild(q);
          }
          q.textContent = G;
        } else {
          runtime.log("Key ignored: " + O);
        }
      });
    };
    this.removeKeyElementsFromNode = function (m, l, M) {
      l.forEach(function (O) {
        var q = O.split(":");
        var ee = q[1];
        if (q = M(q[0])) {
          if (ee = m.getElementsByTagNameNS(q, ee)[0]) {
            ee.parentNode.removeChild(ee);
          } else {
            runtime.log("Element for " + O + " not found.");
          }
        } else {
          runtime.log("Property Name ignored: " + O);
        }
      });
    };
    this.getKeyValRepresentationOfNode = function (m, l) {
      for (var q, M = {}, O = m.firstElementChild; O;) {
        if (q = l(O.namespaceURI)) {
          M[q + ":" + O.localName] = O.textContent;
        }
        O = O.nextElementSibling;
      }
      return M;
    };
    this.mapObjOntoNode = function s(m, l, M) {
      Object.keys(l).forEach(function (O) {
        var G;
        var q = (G = O.split(":"))[1];
        var ee = M(G[0]);
        var B = typeof (G = l[O]);
        if (B === "object") {
          if (Object.keys(G).length) {
            O = ee ? m.getElementsByTagNameNS(ee, q)[0] || m.ownerDocument.createElementNS(ee, O) : m.getElementsByTagName(q)[0] || m.ownerDocument.createElement(O);
            m.appendChild(O);
            s(O, G, M);
          }
        } else if (ee) {
          runtime.assert(B === "number" || B === "string", "attempting to map unsupported type '" + B + "' (key: " + O + ")");
          m.setAttributeNS(ee, O, String(G));
        }
      });
    };
    this.cloneEvent = function (m) {
      var l = Object.create(null);
      Object.keys(m.constructor.prototype).forEach(function (M) {
        l[M] = m[M];
      });
      l.prototype = m.constructor.prototype;
      return l;
    };
    this.getDirectChild = X;
    if ((M = runtime.getWindow()) !== null && (l = M.navigator.appVersion.toLowerCase(), M = l.indexOf("chrome") === -1 && (l.indexOf("applewebkit") !== -1 || l.indexOf("safari") !== -1), l = l.indexOf("msie") !== -1 || l.indexOf("trident") !== -1, M || l)) {
      this.containsNode = function x(m, l) {
        return m === l || Boolean(m.compareDocumentPosition(l) & Node.DOCUMENT_POSITION_CONTAINED_BY);
      };
    }
  };
  core.DomUtils = new core.DomUtilsImpl();
})();
core.Cursor = function (P, X) {
  function I(s) {
    if (s.parentNode) {
      C.push(s.previousSibling);
      C.push(s.nextSibling);
      s.parentNode.removeChild(s);
    }
  }
  function y(s, u, m) {
    if (u.nodeType === Node.TEXT_NODE) {
      runtime.assert(Boolean(u), "putCursorIntoTextNode: invalid container");
      var l = u.parentNode;
      runtime.assert(Boolean(l), "putCursorIntoTextNode: container without parent");
      runtime.assert(m >= 0 && m <= u.length, "putCursorIntoTextNode: offset is out of bounds");
      if (m === 0) {
        l.insertBefore(s, u);
      } else {
        if (m !== u.length) {
          u.splitText(m);
        }
        l.insertBefore(s, u.nextSibling);
      }
    } else if (u.nodeType === Node.ELEMENT_NODE) {
      u.insertBefore(s, u.childNodes.item(m));
    }
    C.push(s.previousSibling);
    C.push(s.nextSibling);
  }
  var R;
  var x;
  var w = P.createElementNS("urn:webodf:names:cursor", "cursor");
  var E = P.createElementNS("urn:webodf:names:cursor", "anchor");
  var C = [];
  var N = P.createRange();
  var S = core.DomUtils;
  this.getNode = function () {
    return w;
  };
  this.getAnchorNode = function () {
    if (E.parentNode) {
      return E;
    } else {
      return w;
    }
  };
  this.getSelectedRange = function () {
    if (x) {
      N.setStartBefore(w);
      N.collapse(true);
    } else {
      N.setStartAfter(R ? E : w);
      N.setEndBefore(R ? w : E);
    }
    return N;
  };
  this.setSelectedRange = function (s, u) {
    if (N && N !== s) {
      N.detach();
    }
    N = s;
    R = u !== false;
    if (x = s.collapsed) {
      I(E);
      I(w);
      y(w, s.startContainer, s.startOffset);
    } else {
      I(E);
      I(w);
      y(R ? w : E, s.endContainer, s.endOffset);
      y(R ? E : w, s.startContainer, s.startOffset);
    }
    C.forEach(S.normalizeTextNodes);
    C.length = 0;
  };
  this.hasForwardSelection = function () {
    return R;
  };
  this.remove = function () {
    I(w);
    C.forEach(S.normalizeTextNodes);
    C.length = 0;
  };
  w.setAttributeNS("urn:webodf:names:cursor", "memberId", X);
  E.setAttributeNS("urn:webodf:names:cursor", "memberId", X);
};
core.Destroyable = function () {};
core.Destroyable.prototype.destroy = function (P) {};
core.EventSource = function () {};
core.EventSource.prototype.subscribe = function (P, X) {};
core.EventSource.prototype.unsubscribe = function (P, X) {};
core.EventNotifier = function (P) {
  function X(y) {
    runtime.assert(!I.hasOwnProperty(y), "Duplicated event ids: \"" + y + "\" registered more than once.");
    I[y] = [];
  }
  var I = {};
  this.emit = function (y, w) {
    var E;
    var R;
    runtime.assert(I.hasOwnProperty(y), "unknown event fired \"" + y + "\"");
    R = I[y];
    E = 0;
    for (; E < R.length; E += 1) {
      R[E](w);
    }
  };
  this.subscribe = function (y, w) {
    runtime.assert(I.hasOwnProperty(y), "tried to subscribe to unknown event \"" + y + "\"");
    I[y].push(w);
  };
  this.unsubscribe = function (y, w) {
    var E;
    runtime.assert(I.hasOwnProperty(y), "tried to unsubscribe from unknown event \"" + y + "\"");
    E = I[y].indexOf(w);
    runtime.assert(E !== -1, "tried to unsubscribe unknown callback from event \"" + y + "\"");
    if (E !== -1) {
      I[y].splice(E, 1);
    }
  };
  this.register = X;
  if (P) {
    P.forEach(X);
  }
};
core.ScheduledTask = function (P, X, I) {
  function y() {
    if (R) {
      I(E);
      R = false;
    }
  }
  function w() {
    y();
    P.apply(undefined, C);
    C = null;
  }
  var E;
  var R = false;
  var C = [];
  var N = false;
  this.trigger = function () {
    runtime.assert(N === false, "Can't trigger destroyed ScheduledTask instance");
    C = Array.prototype.slice.call(arguments);
    if (!R) {
      R = true;
      E = X(w);
    }
  };
  this.triggerImmediate = function () {
    runtime.assert(N === false, "Can't trigger destroyed ScheduledTask instance");
    C = Array.prototype.slice.call(arguments);
    w();
  };
  this.processRequests = function () {
    if (R) {
      w();
    }
  };
  this.cancel = y;
  this.restart = function () {
    runtime.assert(N === false, "Can't trigger destroyed ScheduledTask instance");
    y();
    R = true;
    E = X(w);
  };
  this.destroy = function (x) {
    y();
    N = true;
    x();
  };
};
(function () {
  var P;
  core.Task = {};
  core.Task.SUPPRESS_MANUAL_PROCESSING = false;
  core.Task.processTasks = function () {
    if (!core.Task.SUPPRESS_MANUAL_PROCESSING) {
      P.performRedraw();
    }
  };
  core.Task.createRedrawTask = function (X) {
    return new core.ScheduledTask(X, P.requestRedrawTask, P.cancelRedrawTask);
  };
  core.Task.createTimeoutTask = function (X, I) {
    return new core.ScheduledTask(X, function (y) {
      return runtime.setTimeout(y, I);
    }, runtime.clearTimeout);
  };
  P = new function () {
    var X = {};
    this.requestRedrawTask = function (I) {
      var y = runtime.requestAnimationFrame(function () {
        I();
        delete X[y];
      });
      X[y] = I;
      return y;
    };
    this.performRedraw = function () {
      Object.keys(X).forEach(function (I) {
        X[I]();
        runtime.cancelAnimationFrame(parseInt(I, 10));
      });
      X = {};
    };
    this.cancelRedrawTask = function (I) {
      runtime.cancelAnimationFrame(I);
      delete X[I];
    };
  }();
})();
core.EventSubscriptions = function () {
  function P(R, C, N) {
    R.subscribe(C, N);
    I.push({
      eventSource: R,
      eventid: C,
      callback: N
    });
  }
  function X() {
    var R = [];
    I.forEach(function (C) {
      C.eventSource.unsubscribe(C.eventid, C.callback);
    });
    I.length = 0;
    Object.keys(w).forEach(function (C) {
      w[C].forEach(function (N) {
        R.push(N.task.destroy);
      });
      delete w[C];
    });
    core.Async.destroyAll(R, function () {});
    y = new core.EventNotifier();
  }
  var I = [];
  var y = new core.EventNotifier();
  var w = {};
  var E = 0;
  this.addSubscription = P;
  this.addFrameSubscription = function (R, C, N) {
    var x;
    var S;
    var s;
    var u;
    if (!w.hasOwnProperty(C)) {
      w[C] = [];
    }
    s = w[C];
    u = 0;
    for (; u < s.length; u += 1) {
      if (s[u].eventSource === R) {
        x = s[u];
        break;
      }
    }
    if (!x) {
      S = "s" + E;
      E += 1;
      y.register(S);
      x = {
        frameEventId: S,
        eventSource: R,
        task: core.Task.createRedrawTask(function () {
          y.emit(S, undefined);
        })
      };
      s.push(x);
      P(R, C, x.task.trigger);
    }
    y.subscribe(x.frameEventId, N);
  };
  this.unsubscribeAll = X;
  this.destroy = function (R) {
    X();
    R();
  };
};
core.LazyProperty = function (P) {
  var X;
  var I = false;
  this.value = function () {
    if (!I) {
      X = P();
      I = true;
    }
    return X;
  };
  this.reset = function () {
    I = false;
  };
};
core.LoopWatchDog = function (P, X) {
  var I = Date.now();
  var y = 0;
  this.check = function () {
    if (P && Date.now() - I > P) {
      runtime.log("alert", "watchdog timeout");
      throw "timeout!";
    }
    if (X > 0 && (y += 1) > X) {
      runtime.log("alert", "watchdog loop overflow");
      throw "loop overflow";
    }
  };
};
core.NodeFilterChain = function (P) {
  var X = NodeFilter.FILTER_REJECT;
  var I = NodeFilter.FILTER_ACCEPT;
  this.acceptNode = function (y) {
    var w;
    for (w = 0; w < P.length; w += 1) {
      if (P[w].acceptNode(y) === X) {
        return X;
      }
    }
    return I;
  };
};
core.PositionIterator = function (P, X, I, y) {
  function R() {
    var q = S.currentNode;
    var ee = q.nodeType;
    s = ee === m ? q.length - 1 : ee === l ? 1 : 0;
  }
  function C() {
    if (S.previousSibling() === null) {
      if (!S.parentNode() || S.currentNode === P) {
        S.firstChild();
        return false;
      }
      s = 0;
    } else {
      R();
    }
    return true;
  }
  function N() {
    var ee;
    var q = S.currentNode;
    ee = u(q);
    if (q !== P) {
      for (q = q.parentNode; q && q !== P;) {
        if (u(q) === O) {
          S.currentNode = q;
          ee = O;
        }
        q = q.parentNode;
      }
    }
    if (ee === O) {
      s = S.currentNode.nodeType === m ? q.length : 1;
      q = x.nextPosition();
    } else {
      q = ee === M || x.nextPosition();
    }
    if (q) {
      runtime.assert(u(S.currentNode) === M, "moveToAcceptedNode did not result in walker being on an accepted node");
    }
    return q;
  }
  var S;
  var s;
  var u;
  var x = this;
  var m = Node.TEXT_NODE;
  var l = Node.ELEMENT_NODE;
  var M = NodeFilter.FILTER_ACCEPT;
  var O = NodeFilter.FILTER_REJECT;
  this.nextPosition = function () {
    var q = S.currentNode;
    var ee = q.nodeType;
    if (q === P) {
      return false;
    }
    if (s === 0 && ee === l) {
      if (S.firstChild() === null) {
        s = 1;
      }
    } else if (ee === m && s + 1 < q.length) {
      s += 1;
    } else if (S.nextSibling() !== null) {
      s = 0;
    } else {
      if (!S.parentNode()) {
        return false;
      }
      s = 1;
    }
    return true;
  };
  this.previousPosition = function () {
    var q = true;
    var ee = S.currentNode;
    if (s === 0) {
      q = C();
    } else if (ee.nodeType === m) {
      --s;
    } else if (S.lastChild() !== null) {
      R();
    } else if (ee === P) {
      q = false;
    } else {
      s = 0;
    }
    return q;
  };
  this.previousNode = C;
  this.container = function () {
    var q = S.currentNode;
    if (s === 0 && q.nodeType !== m) {
      q = q.parentNode;
    }
    return q;
  };
  this.rightNode = function () {
    var q = S.currentNode;
    var ee = q.nodeType;
    if (ee === m && s === q.length) {
      for (q = q.nextSibling; q && u(q) !== M;) {
        q = q.nextSibling;
      }
    } else if (ee === l && s === 1) {
      q = null;
    }
    return q;
  };
  this.leftNode = function () {
    var q = S.currentNode;
    if (s === 0) {
      for (q = q.previousSibling; q && u(q) !== M;) {
        q = q.previousSibling;
      }
    } else if (q.nodeType === l) {
      for (q = q.lastChild; q && u(q) !== M;) {
        q = q.previousSibling;
      }
    }
    return q;
  };
  this.getCurrentNode = function () {
    return S.currentNode;
  };
  this.unfilteredDomOffset = function () {
    if (S.currentNode.nodeType === m) {
      return s;
    }
    var q = 0;
    var ee = S.currentNode;
    for (ee = s === 1 ? ee.lastChild : ee.previousSibling; ee;) {
      q += 1;
      ee = ee.previousSibling;
    }
    return q;
  };
  this.getPreviousSibling = function () {
    var q = S.currentNode;
    var ee = S.previousSibling();
    S.currentNode = q;
    return ee;
  };
  this.getNextSibling = function () {
    var q = S.currentNode;
    var ee = S.nextSibling();
    S.currentNode = q;
    return ee;
  };
  this.setPositionBeforeElement = function (q) {
    runtime.assert(Boolean(q), "setPositionBeforeElement called without element");
    S.currentNode = q;
    s = 0;
    return N();
  };
  this.setUnfilteredPosition = function (q, ee) {
    runtime.assert(Boolean(q), "PositionIterator.setUnfilteredPosition called without container");
    S.currentNode = q;
    if (q.nodeType === m) {
      s = ee;
      runtime.assert(ee <= q.length, "Error in setPosition: " + ee + " > " + q.length);
      runtime.assert(ee >= 0, "Error in setPosition: " + ee + " < 0");
      if (ee === q.length) {
        if (S.nextSibling()) {
          s = 0;
        } else if (S.parentNode()) {
          s = 1;
        } else {
          runtime.assert(false, "Error in setUnfilteredPosition: position not valid.");
        }
      }
    } else if (ee < q.childNodes.length) {
      S.currentNode = q.childNodes.item(ee);
      s = 0;
    } else {
      s = 1;
    }
    return N();
  };
  this.moveToEnd = function () {
    S.currentNode = P;
    s = 1;
  };
  this.moveToEndOfNode = function (q) {
    if (q.nodeType === m) {
      x.setUnfilteredPosition(q, q.length);
    } else {
      S.currentNode = q;
      s = 1;
    }
  };
  this.isBeforeNode = function () {
    return s === 0;
  };
  this.getNodeFilter = function () {
    return u;
  };
  (u = (I ? new function E(q) {
    this.acceptNode = function (ee) {
      if (!ee || ee.nodeType === m && ee.length === 0) {
        return O;
      } else {
        return q.acceptNode(ee);
      }
    };
  }(I) : new function w() {
    this.acceptNode = function (q) {
      if (!q || q.nodeType === m && q.length === 0) {
        return O;
      } else {
        return M;
      }
    };
  }()).acceptNode).acceptNode = u;
  X = X || NodeFilter.SHOW_ALL;
  runtime.assert(P.nodeType !== Node.TEXT_NODE, "Internet Explorer doesn't allow tree walker roots to be text nodes");
  S = P.ownerDocument.createTreeWalker(P, X, u, y);
  s = 0;
  if (S.firstChild() === null) {
    s = 1;
  }
};
core.PositionFilter = function () {};
core.PositionFilter.FilterResult = {
  FILTER_ACCEPT: 1,
  FILTER_REJECT: 2,
  FILTER_SKIP: 3
};
core.PositionFilter.prototype.acceptPosition = function (P) {};
core.PositionFilterChain = function () {
  var P = [];
  var X = core.PositionFilter.FilterResult.FILTER_ACCEPT;
  var I = core.PositionFilter.FilterResult.FILTER_REJECT;
  this.acceptPosition = function (y) {
    var w;
    for (w = 0; w < P.length; w += 1) {
      if (P[w].acceptPosition(y) === I) {
        return I;
      }
    }
    return X;
  };
  this.addFilter = function (y) {
    P.push(y);
  };
};
core.StepDirection = {
  PREVIOUS: 1,
  NEXT: 2
};
core.StepIterator = function (P, X) {
  function I() {
    s = null;
    m = u = undefined;
  }
  function y() {
    if (m === undefined) {
      m = P.acceptPosition(X) === x;
    }
    return m;
  }
  function w(l, M) {
    I();
    return X.setUnfilteredPosition(l, M);
  }
  function E() {
    s ||= X.container();
    return s;
  }
  function R() {
    if (u === undefined) {
      u = X.unfilteredDomOffset();
    }
    return u;
  }
  function C() {
    for (I(); X.nextPosition();) {
      I();
      if (y()) {
        return true;
      }
    }
    return false;
  }
  function N() {
    for (I(); X.previousPosition();) {
      I();
      if (y()) {
        return true;
      }
    }
    return false;
  }
  var s;
  var u;
  var m;
  var x = core.PositionFilter.FilterResult.FILTER_ACCEPT;
  var S = core.StepDirection.NEXT;
  this.isStep = y;
  this.setPosition = w;
  this.container = E;
  this.offset = R;
  this.nextStep = C;
  this.previousStep = N;
  this.advanceStep = function (l) {
    if (l === S) {
      return C();
    } else {
      return N();
    }
  };
  this.roundToClosestStep = function () {
    var l;
    var M;
    var O = y();
    if (!O) {
      l = E();
      M = R();
      if (!(O = N())) {
        w(l, M);
        O = C();
      }
    }
    return O;
  };
  this.roundToPreviousStep = function () {
    var l = y();
    l ||= N();
    return l;
  };
  this.roundToNextStep = function () {
    var l = y();
    l ||= C();
    return l;
  };
  this.leftNode = function () {
    return X.leftNode();
  };
  this.snapshot = function () {
    return new core.StepIterator.StepSnapshot(E(), R());
  };
  this.restore = function (l) {
    w(l.container, l.offset);
  };
};
core.StepIterator.StepSnapshot = function (P, X) {
  this.container = P;
  this.offset = X;
};
core.Utils = function () {
  function P(X, I) {
    if (I && Array.isArray(I)) {
      X = X || [];
      if (!Array.isArray(X)) {
        throw "Destination is not an array.";
      }
      X = X.concat(I.map(function (y) {
        return P(null, y);
      }));
    } else if (I && typeof I == "object") {
      if (typeof (X = X || {}) != "object") {
        throw "Destination is not an object.";
      }
      Object.keys(I).forEach(function (y) {
        X[y] = P(X[y], I[y]);
      });
    } else {
      X = I;
    }
    return X;
  }
  this.hashString = function (X) {
    var y;
    var w;
    var I = 0;
    y = 0;
    w = X.length;
    for (; y < w; y += 1) {
      I = (I << 5) - I + X.charCodeAt(y);
      I |= 0;
    }
    return I;
  };
  this.mergeObjects = function (X, I) {
    Object.keys(I).forEach(function (y) {
      X[y] = P(X[y], I[y]);
    });
    return X;
  };
};
core.Zip = function (P, X) {
  function I(x, S) {
    var s = C.file(x);
    if (s) {
      S(null, s.asUint8Array());
    } else {
      S(x + " not found.", null);
    }
  }
  function y(x, S) {
    I(x, function (s, u) {
      if (s || u === null) {
        return S(s, null);
      }
      var m = runtime.byteArrayToString(u, "utf8");
      S(null, m);
    });
  }
  function w(x, S) {
    try {
      x(C.generate({
        type: "uint8array",
        compression: "STORE"
      }));
    } catch (s) {
      S(s.message);
    }
  }
  function E(x, S) {
    w(function (s) {
      runtime.writeFile(x, s, S);
    }, S);
  }
  var C;
  var R = this;
  var N = new core.Base64();
  this.load = I;
  this.save = function (x, S, s, u) {
    C.file(x, S, {
      date: u,
      compression: s ? "DEFLATE" : "STORE"
    });
  };
  this.remove = function (x) {
    var S = C.file(x) !== null;
    C.remove(x);
    return S;
  };
  this.write = function (x) {
    E(P, x);
  };
  this.writeAs = E;
  this.createByteArray = w;
  this.loadContentXmlAsFragments = function (x, S) {
    y(x, function (s, u) {
      if (s) {
        return S.rootElementReady(s);
      }
      S.rootElementReady(null, u, true);
    });
  };
  this.loadAsString = y;
  this.loadAsDOM = function (x, S) {
    y(x, function (s, u) {
      if (s || u === null) {
        S(s, null);
      } else {
        var m = new DOMParser().parseFromString(u, "text/xml");
        S(null, m);
      }
    });
  };
  this.loadAsDataURL = function (x, S, s) {
    I(x, function (u, m) {
      if (u || !m) {
        return s(u, null);
      }
      var M;
      var l = 0;
      S ||= m[1] === 80 && m[2] === 78 && m[3] === 71 ? "image/png" : m[0] === 255 && m[1] === 216 && m[2] === 255 ? "image/jpeg" : m[0] === 71 && m[1] === 73 && m[2] === 70 ? "image/gif" : "";
      M = "data:" + S + ";base64,";
      for (; l < m.length;) {
        M += N.convertUTF8ArrayToBase64(m.subarray(l, Math.min(l + 45000, m.length)));
        l += 45000;
      }
      s(null, M);
    });
  };
  this.getEntries = function () {
    return Object.keys(C.files).map(function (x) {
      return {
        filename: x,
        date: C.files[x].date
      };
    });
  };
  C = new externs.JSZip();
  if (X !== null) {
    runtime.readFile(P, "binary", function (x, S) {
      if (typeof S == "string") {
        x = "file was read as a string. Should be Uint8Array.";
      }
      if (x || !S || S.length === 0) {
        X("File '" + P + "' cannot be read. Err: " + (x || "[none]"), R);
      } else {
        try {
          C.load(S, {
            checkCRC32: false
          });
          X(null, R);
        } catch (s) {
          X(s.message, R);
        }
      }
    });
  }
};
core.SimpleClientRect = null;
gui.CommonConstraints = {
  EDIT: {
    ANNOTATIONS: {
      ONLY_DELETE_OWN: "onlyDeleteOwn"
    },
    REVIEW_MODE: "reviewMode"
  }
};
gui.SessionConstraints = function () {
  function P(y) {
    if (!X.hasOwnProperty(y)) {
      X[y] = false;
      I.register(y);
    }
  }
  var X = {};
  var I = new core.EventNotifier();
  this.registerConstraint = P;
  this.subscribe = function (y, w) {
    P(y);
    I.subscribe(y, w);
  };
  this.unsubscribe = function (y, w) {
    I.unsubscribe(y, w);
  };
  this.setState = function (y, w) {
    runtime.assert(X.hasOwnProperty(y) === true, "No such constraint");
    if (X[y] !== w) {
      X[y] = w;
      I.emit(y, w);
    }
  };
  this.getState = function (y) {
    runtime.assert(X.hasOwnProperty(y) === true, "No such constraint");
    return X[y];
  };
};
gui.BlacklistNamespaceNodeFilter = function (P) {
  var X = {};
  var I = NodeFilter.FILTER_REJECT;
  var y = NodeFilter.FILTER_ACCEPT;
  this.acceptNode = function (w) {
    if (!w || X.hasOwnProperty(w.namespaceURI)) {
      return I;
    } else {
      return y;
    }
  };
  P.forEach(function (w) {
    X[w] = true;
  });
};
odf.Namespaces = {
  namespaceMap: {
    config: "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
    db: "urn:oasis:names:tc:opendocument:xmlns:database:1.0",
    dc: "http://purl.org/dc/elements/1.1/",
    dr3d: "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
    draw: "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
    chart: "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
    fo: "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
    form: "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
    math: "http://www.w3.org/1998/Math/MathML",
    meta: "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
    number: "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
    office: "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
    presentation: "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
    style: "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
    svg: "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
    table: "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
    text: "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
    xforms: "http://www.w3.org/2002/xforms",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace"
  },
  prefixMap: {},
  configns: "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
  dbns: "urn:oasis:names:tc:opendocument:xmlns:database:1.0",
  dcns: "http://purl.org/dc/elements/1.1/",
  dr3dns: "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
  drawns: "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
  chartns: "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
  fons: "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
  formns: "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
  mathns: "http://www.w3.org/1998/Math/MathML",
  metans: "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
  numberns: "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
  officens: "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
  presentationns: "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
  stylens: "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
  svgns: "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
  tablens: "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
  textns: "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
  xformsns: "http://www.w3.org/2002/xforms",
  xlinkns: "http://www.w3.org/1999/xlink",
  xmlns: "http://www.w3.org/XML/1998/namespace"
};
(function () {
  var I;
  var P = odf.Namespaces.namespaceMap;
  var X = odf.Namespaces.prefixMap;
  for (I in P) {
    if (P.hasOwnProperty(I)) {
      X[P[I]] = I;
    }
  }
})();
odf.Namespaces.forEachPrefix = function (P) {
  var I;
  var X = odf.Namespaces.namespaceMap;
  for (I in X) {
    if (X.hasOwnProperty(I)) {
      P(I, X[I]);
    }
  }
};
odf.Namespaces.lookupNamespaceURI = function (P) {
  var X = null;
  if (odf.Namespaces.namespaceMap.hasOwnProperty(P)) {
    X = odf.Namespaces.namespaceMap[P];
  }
  return X;
};
odf.Namespaces.lookupPrefix = function (P) {
  var X = odf.Namespaces.prefixMap;
  if (X.hasOwnProperty(P)) {
    return X[P];
  } else {
    return null;
  }
};
odf.Namespaces.lookupNamespaceURI.lookupNamespaceURI = odf.Namespaces.lookupNamespaceURI;
odf.OdfSchemaImpl = function () {
  var P = [["config:config-item", "uncategorized"], ["form:item", "object"], ["form:option", "uncategorized"], ["math:math", "field"], ["meta:user-defined", "uncategorized"], ["number:currency-symbol", "uncategorized"], ["number:embedded-text", "uncategorized"], ["number:text", "uncategorized"], ["presentation:date-time-decl", "uncategorized"], ["presentation:footer-decl", "uncategorized"], ["presentation:header-decl", "uncategorized"], ["svg:desc", "text"], ["svg:title", "text"], ["table:desc", "uncategorized"], ["table:title", "uncategorized"], ["text:a", "text"], ["text:author-initials", "field"], ["text:author-name", "field"], ["text:bibliography-mark", "field"], ["text:bookmark-ref", "field"], ["text:chapter", "field"], ["text:character-count", "field"], ["text:conditional-text", "field"], ["text:creation-date", "field"], ["text:creation-time", "field"], ["text:creator", "field"], ["text:database-display", "field"], ["text:database-name", "field"], ["text:database-row-number", "field"], ["text:date", "field"], ["text:dde-connection", "field"], ["text:description", "field"], ["text:editing-cycles", "field"], ["text:editing-duration", "field"], ["text:execute-macro", "uncategorized"], ["text:expression", "uncategorized"], ["text:file-name", "field"], ["text:h", "text"], ["text:hidden-paragraph", "text"], ["text:hidden-text", "text"], ["text:image-count", "field"], ["text:index-entry-span", "uncategorized"], ["text:index-title-template", "uncategorized"], ["text:initial-creator", "field"], ["text:keywords", "field"], ["text:linenumbering-separator", "style"], ["text:measure", "uncategorized"], ["text:meta", "uncategorized"], ["text:meta-field", "uncategorized"], ["text:modification-date", "field"], ["text:modification-time", "field"], ["text:note-citation", "field"], ["text:note-continuation-notice-backward", "style"], ["text:note-continuation-notice-forward", "style"], ["text:note-ref", "field"], ["text:object-count", "field"], ["text:p", "text"], ["text:page-continuation", "uncategorized"], ["text:page-count", "field"], ["text:page-number", "field"], ["text:page-variable-get", "field"], ["text:page-variable-set", "field"], ["text:paragraph-count", "field"], ["text:placeholder", "field"], ["text:print-date", "field"], ["text:print-time", "field"], ["text:printed-by", "field"], ["text:reference-ref", "field"], ["text:ruby-base", "text"], ["text:ruby-text", "text"], ["text:script", "text"], ["text:sender-city", "field"], ["text:sender-company", "field"], ["text:sender-country", "field"], ["text:sender-email", "field"], ["text:sender-fax", "field"], ["text:sender-firstname", "field"], ["text:sender-initials", "field"], ["text:sender-lastname", "field"], ["text:sender-phone-private", "field"], ["text:sender-phone-work", "field"], ["text:sender-position", "field"], ["text:sender-postal-code", "field"], ["text:sender-state-or-province", "field"], ["text:sender-street", "field"], ["text:sender-title", "field"], ["text:sequence", "uncategorized"], ["text:sequence-ref", "uncategorized"], ["text:sheet-name", "uncategorized"], ["text:span", "text"], ["text:subject", "field"], ["text:table-count", "field"], ["text:table-formula", "deprecated"], ["text:template-name", "uncategorized"], ["text:text-input", "field"], ["text:time", "field"], ["text:title", "field"], ["text:user-defined", "field"], ["text:user-field-get", "field"], ["text:user-field-input", "field"], ["text:variable-get", "field"], ["text:variable-input", "field"], ["text:variable-set", "field"], ["text:word-count", "field"], ["xforms:model", "uncategorized"]];
  var X = {};
  this.isTextContainer = function (I, y) {
    return X[I + ":" + y] === "text";
  };
  this.isField = function (I, y) {
    return X[I + ":" + y] === "field";
  };
  this.getFields = function () {
    return P.filter(function (I) {
      return I[1] === "field";
    }).map(function (I) {
      return I[0];
    });
  };
  P.forEach(function (I) {
    var y = I[1];
    var w = I[0].split(":");
    I = w[0];
    w = w[1];
    var E = odf.Namespaces.lookupNamespaceURI(I);
    if (E) {
      X[E + ":" + w] = y;
    } else {
      runtime.log("DEBUG: OdfSchema - unknown prefix '" + I + "'");
    }
  });
};
odf.OdfSchema = new odf.OdfSchemaImpl();
odf.OdfUtilsImpl = function () {
  function P(ae) {
    return (ae && ae.localName) === "image" && ae.namespaceURI === le;
  }
  function X(ae) {
    return ae !== null && ae.nodeType === Node.ELEMENT_NODE && ae.localName === "frame" && ae.namespaceURI === le && ae.getAttributeNS(ne, "anchor-type") === "as-char";
  }
  function I(ae) {
    var fe;
    if (!(fe = (ae && ae.localName) === "annotation" && ae.namespaceURI === odf.Namespaces.officens)) {
      fe = (ae && ae.localName) === "div" && ae.className === "annotationWrapper";
    }
    return fe;
  }
  function y(ae) {
    return (ae && ae.localName) === "a" && ae.namespaceURI === ne;
  }
  function w(ae) {
    var fe = ae && ae.localName;
    return (fe === "p" || fe === "h") && ae.namespaceURI === ne;
  }
  function E(ae, fe) {
    for (ae && fe !== undefined && !w(ae) && ae.childNodes.item(fe) && (ae = ae.childNodes.item(fe)); ae && !w(ae);) {
      ae = ae.parentNode;
    }
    return ae;
  }
  function R(ae, fe) {
    for (; ae && ae !== fe;) {
      if (ae.namespaceURI === odf.Namespaces.officens && ae.localName === "annotation") {
        return ae;
      }
      ae = ae.parentNode;
    }
    return null;
  }
  function C(ae) {
    return /^[ \t\r\n]+$/.test(ae);
  }
  function N(ae) {
    if (ae === null || ae.nodeType !== Node.ELEMENT_NODE) {
      return false;
    }
    var fe = ae.localName;
    return Qe.isTextContainer(ae.namespaceURI, fe) || fe === "span" && ae.className === "webodf-annotationHighlight";
  }
  function x(ae) {
    return ae !== null && ae.nodeType === Node.ELEMENT_NODE && Qe.isField(ae.namespaceURI, ae.localName);
  }
  function S(ae) {
    var fe = ae && ae.localName;
    var Me = false;
    if (fe && (ae = ae.namespaceURI) === ne) {
      Me = fe === "s" || fe === "tab" || fe === "line-break";
    }
    return Me;
  }
  function s(ae) {
    return S(ae) || x(ae) || X(ae) || I(ae);
  }
  function u(ae) {
    var fe = ae && ae.localName;
    var Me = false;
    if (fe && (ae = ae.namespaceURI) === ne) {
      Me = fe === "s";
    }
    return Me;
  }
  function m(ae) {
    return Le.indexOf(ae.namespaceURI) !== -1;
  }
  function M(ae) {
    for (; ae.firstChild !== null && N(ae);) {
      ae = ae.firstChild;
    }
    return ae;
  }
  function O(ae) {
    for (; ae.lastChild !== null && N(ae);) {
      ae = ae.lastChild;
    }
    return ae;
  }
  function q(ae) {
    for (; !w(ae) && ae.previousSibling === null;) {
      ae = ae.parentNode;
    }
    if (w(ae)) {
      return null;
    } else {
      return O(ae.previousSibling);
    }
  }
  function ee(ae) {
    for (; !w(ae) && ae.nextSibling === null;) {
      ae = ae.parentNode;
    }
    if (w(ae)) {
      return null;
    } else {
      return M(ae.nextSibling);
    }
  }
  function G(ae) {
    for (var fe = false; ae;) {
      if (ae.nodeType === Node.TEXT_NODE) {
        if (ae.length !== 0) {
          return !C(ae.data.substr(ae.length - 1, 1));
        }
        ae = q(ae);
      } else if (s(ae)) {
        fe = u(ae) === false;
        ae = null;
      } else {
        ae = q(ae);
      }
    }
    return fe;
  }
  function B(ae) {
    var fe = false;
    for (ae = ae && M(ae); ae;) {
      if ((ae.nodeType === Node.TEXT_NODE ? ae.length : 0) > 0 && !C(ae.data)) {
        fe = true;
        break;
      }
      if (s(ae)) {
        fe = true;
        break;
      }
      ae = ee(ae);
    }
    return fe;
  }
  function A(ae, fe) {
    return !!C(ae.data.substr(fe)) && !B(ee(ae));
  }
  function H(ae, fe) {
    var je;
    var Me = ae.data;
    return !!C(Me[fe]) && !s(ae.parentNode) && !(fe > 0 ? C(Me[fe - 1]) || (je = true) : G(q(ae)) && (je = true), je !== true || A(ae, fe));
  }
  function $(ae) {
    if (ae = /(-?[0-9]*[0-9][0-9]*(\.[0-9]*)?|0+\.[0-9]*[1-9][0-9]*|\.[0-9]*[1-9][0-9]*)((cm)|(mm)|(in)|(pt)|(pc)|(px)|(%))/.exec(ae)) {
      return {
        value: parseFloat(ae[1]),
        unit: ae[3]
      };
    } else {
      return null;
    }
  }
  function J(ae) {
    if ((ae = $(ae)) && (ae.value < 0 || ae.unit === "%")) {
      return null;
    } else {
      return ae;
    }
  }
  function Q(ae) {
    if ((ae = $(ae)) && ae.unit !== "%") {
      return null;
    } else {
      return ae;
    }
  }
  function U(ae) {
    switch (ae.namespaceURI) {
      case odf.Namespaces.drawns:
      case odf.Namespaces.svgns:
      case odf.Namespaces.dr3dns:
        return false;
      case odf.Namespaces.textns:
        switch (ae.localName) {
          case "note-body":
          case "ruby-text":
            return false;
        }
        break;
      case odf.Namespaces.officens:
        switch (ae.localName) {
          case "annotation":
          case "binary-data":
          case "event-listeners":
            return false;
        }
        break;
      default:
        switch (ae.localName) {
          case "cursor":
          case "editinfo":
            return false;
        }
    }
    return true;
  }
  function K(ae) {
    return Boolean(E(ae) && (!C(ae.textContent) || H(ae, 0)));
  }
  function F(ae, fe) {
    for (; fe.length > 0 && !Ee.rangeContainsNode(ae, fe[0]);) {
      fe.shift();
    }
    for (; fe.length > 0 && !Ee.rangeContainsNode(ae, fe[fe.length - 1]);) {
      fe.pop();
    }
  }
  function L(ae, fe, Me) {
    var je;
    je = Ee.getNodesInRange(ae, function (ze) {
      var we = NodeFilter.FILTER_REJECT;
      if (S(ze.parentNode) || x(ze.parentNode) || I(ze)) {
        we = NodeFilter.FILTER_REJECT;
      } else if (ze.nodeType === Node.TEXT_NODE) {
        if (Me || K(ze)) {
          we = NodeFilter.FILTER_ACCEPT;
        }
      } else if (s(ze)) {
        we = NodeFilter.FILTER_ACCEPT;
      } else if (U(ze) || N(ze)) {
        we = NodeFilter.FILTER_SKIP;
      }
      return we;
    }, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT);
    if (!fe) {
      F(ae, je);
    }
    return je;
  }
  function ie(ae, fe, Me) {
    for (; ae;) {
      if (Me(ae)) {
        if (fe[0] !== ae) {
          fe.unshift(ae);
        }
        break;
      }
      if (I(ae)) {
        break;
      }
      ae = ae.parentNode;
    }
  }
  var ne = odf.Namespaces.textns;
  var le = odf.Namespaces.drawns;
  var ge = odf.Namespaces.xlinkns;
  var Ee = core.DomUtils;
  var Le = [odf.Namespaces.dbns, odf.Namespaces.dcns, odf.Namespaces.dr3dns, odf.Namespaces.drawns, odf.Namespaces.chartns, odf.Namespaces.formns, odf.Namespaces.numberns, odf.Namespaces.officens, odf.Namespaces.presentationns, odf.Namespaces.stylens, odf.Namespaces.svgns, odf.Namespaces.tablens, odf.Namespaces.textns];
  var Qe = odf.OdfSchema;
  this.isImage = P;
  this.isCharacterFrame = X;
  this.isInlineRoot = I;
  this.isTextSpan = function (ae) {
    return (ae && ae.localName) === "span" && ae.namespaceURI === ne;
  };
  this.isHyperlink = y;
  this.getHyperlinkTarget = function (ae) {
    return ae.getAttributeNS(ge, "href") || "";
  };
  this.isParagraph = w;
  this.getParagraphElement = E;
  this.getParentAnnotation = R;
  this.isWithinAnnotation = function (ae, fe) {
    return Boolean(R(ae, fe));
  };
  this.getAnnotationCreator = function (ae) {
    return ae.getElementsByTagNameNS(odf.Namespaces.dcns, "creator")[0].textContent;
  };
  this.isListItem = function (ae) {
    return (ae && ae.localName) === "list-item" && ae.namespaceURI === ne;
  };
  this.isLineBreak = function (ae) {
    return (ae && ae.localName) === "line-break" && ae.namespaceURI === ne;
  };
  this.isODFWhitespace = C;
  this.isGroupingElement = N;
  this.isFieldElement = x;
  this.isCharacterElement = S;
  this.isAnchoredAsCharacterElement = s;
  this.isSpaceElement = u;
  this.isODFNode = m;
  this.hasNoODFContent = function l(ae) {
    if (S(ae) || x(ae)) {
      return false;
    }
    if (N(ae.parentNode) && ae.nodeType === Node.TEXT_NODE) {
      return ae.textContent.length === 0;
    }
    for (ae = ae.firstChild; ae;) {
      if (m(ae) || !l(ae)) {
        return false;
      }
      ae = ae.nextSibling;
    }
    return true;
  };
  this.firstChild = M;
  this.lastChild = O;
  this.previousNode = q;
  this.nextNode = ee;
  this.scanLeftForNonSpace = G;
  this.lookLeftForCharacter = function (ae) {
    var fe;
    var Me = fe = 0;
    if (ae.nodeType === Node.TEXT_NODE) {
      Me = ae.length;
    }
    if (Me > 0) {
      fe = C((fe = ae.data).substr(Me - 1, 1)) ? Me === 1 ? G(q(ae)) ? 2 : 0 : C(fe.substr(Me - 2, 1)) ? 0 : 2 : 1;
    } else if (s(ae)) {
      fe = 1;
    }
    return fe;
  };
  this.lookRightForCharacter = function (ae) {
    var fe = false;
    var Me = 0;
    if (ae && ae.nodeType === Node.TEXT_NODE) {
      Me = ae.length;
    }
    if (Me > 0) {
      fe = !C(ae.data.substr(0, 1));
    } else if (s(ae)) {
      fe = true;
    }
    return fe;
  };
  this.scanLeftForAnyCharacter = function (ae) {
    var fe = false;
    for (ae = ae && O(ae); ae;) {
      if ((ae.nodeType === Node.TEXT_NODE ? ae.length : 0) > 0 && !C(ae.data)) {
        fe = true;
        break;
      }
      if (s(ae)) {
        fe = true;
        break;
      }
      ae = q(ae);
    }
    return fe;
  };
  this.scanRightForAnyCharacter = B;
  this.isTrailingWhitespace = A;
  this.isSignificantWhitespace = H;
  this.isDowngradableSpaceElement = function (ae) {
    return !!u(ae) && G(q(ae)) && B(ee(ae));
  };
  this.parseLength = $;
  this.parseNonNegativeLength = J;
  this.parseFoFontSize = function (ae) {
    var fe;
    return (fe = (fe = $(ae)) && (fe.value <= 0 || fe.unit === "%") ? null : fe) || Q(ae);
  };
  this.parseFoLineHeight = function (ae) {
    return J(ae) || Q(ae);
  };
  this.isTextContentContainingNode = U;
  this.getTextNodes = function (ae, fe) {
    var Me;
    Me = Ee.getNodesInRange(ae, function (je) {
      var ze = NodeFilter.FILTER_REJECT;
      if (je.nodeType === Node.TEXT_NODE) {
        if (K(je)) {
          ze = NodeFilter.FILTER_ACCEPT;
        }
      } else if (U(je)) {
        ze = NodeFilter.FILTER_SKIP;
      }
      return ze;
    }, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT);
    if (!fe) {
      F(ae, Me);
    }
    return Me;
  };
  this.getTextElements = L;
  this.getParagraphElements = function (ae) {
    var fe;
    fe = Ee.getNodesInRange(ae, function (Me) {
      var je = NodeFilter.FILTER_REJECT;
      if (w(Me)) {
        je = NodeFilter.FILTER_ACCEPT;
      } else if (U(Me) || N(Me)) {
        je = NodeFilter.FILTER_SKIP;
      }
      return je;
    }, NodeFilter.SHOW_ELEMENT);
    ie(ae.startContainer, fe, w);
    return fe;
  };
  this.getImageElements = function (ae) {
    var fe;
    fe = Ee.getNodesInRange(ae, function (Me) {
      var je = NodeFilter.FILTER_SKIP;
      if (P(Me)) {
        je = NodeFilter.FILTER_ACCEPT;
      }
      return je;
    }, NodeFilter.SHOW_ELEMENT);
    ie(ae.startContainer, fe, P);
    return fe;
  };
  this.getHyperlinkElements = function (ae) {
    var fe = [];
    var Me = ae.cloneRange();
    if (ae.collapsed && ae.endContainer.nodeType === Node.ELEMENT_NODE) {
      ae = function Y(ae, fe) {
        var Me = ae;
        if (fe < Me.childNodes.length - 1) {
          Me = Me.childNodes[fe + 1];
        } else {
          for (; !Me.nextSibling;) {
            Me = Me.parentNode;
          }
          Me = Me.nextSibling;
        }
        for (; Me.firstChild;) {
          Me = Me.firstChild;
        }
        return Me;
      }(ae.endContainer, ae.endOffset);
      if (ae.nodeType === Node.TEXT_NODE) {
        Me.setEnd(ae, 1);
      }
    }
    L(Me, true, false).forEach(function (je) {
      for (je = je.parentNode; !w(je);) {
        if (y(je) && fe.indexOf(je) === -1) {
          fe.push(je);
          break;
        }
        je = je.parentNode;
      }
    });
    Me.detach();
    return fe;
  };
  this.getNormalizedFontFamilyName = function (ae) {
    if (!/^(["'])(?:.|[\n\r])*?\1$/.test(ae)) {
      ae = ae.replace(/^[ \t\r\n\f]*((?:.|[\n\r])*?)[ \t\r\n\f]*$/, "$1");
      if (/[ \t\r\n\f]/.test(ae)) {
        ae = "'" + ae.replace(/[ \t\r\n\f]+/g, " ") + "'";
      }
    }
    return ae;
  };
};
odf.OdfUtils = new odf.OdfUtilsImpl();
gui.OdfTextBodyNodeFilter = function () {
  var P = odf.OdfUtils;
  var X = Node.TEXT_NODE;
  var I = NodeFilter.FILTER_REJECT;
  var y = NodeFilter.FILTER_ACCEPT;
  var w = odf.Namespaces.textns;
  this.acceptNode = function (E) {
    if (E.nodeType === X) {
      if (!P.isGroupingElement(E.parentNode)) {
        return I;
      }
    } else if (E.namespaceURI === w && E.localName === "tracked-changes") {
      return I;
    }
    return y;
  };
};
xmldom.LSSerializerFilter = function () {};
xmldom.LSSerializerFilter.prototype.acceptNode = function (P) {};
odf.OdfNodeFilter = function () {
  this.acceptNode = function (P) {
    if (P.namespaceURI === "http://www.w3.org/1999/xhtml") {
      return NodeFilter.FILTER_SKIP;
    } else if (P.namespaceURI && P.namespaceURI.match(/^urn:webodf:/)) {
      return NodeFilter.FILTER_REJECT;
    } else {
      return NodeFilter.FILTER_ACCEPT;
    }
  };
};
xmldom.XPathIterator = function () {};
xmldom.XPathIterator.prototype.next = function () {};
xmldom.XPathIterator.prototype.reset = function () {};
xmldom.XPath = createXPathSingleton();
odf.StyleInfo = function () {
  function P(U, K) {
    var F;
    var L;
    var ie;
    var Y;
    var ne;
    var le = 0;
    if ((F = J[U.localName]) && (ie = F[U.namespaceURI])) {
      le = ie.length;
    }
    F = 0;
    for (; F < le; F += 1) {
      if (L = U.getAttributeNS(Y = (L = ie[F]).ns, ne = L.localname)) {
        U.setAttributeNS(Y, H[Y] + ne, K + L);
      }
    }
    for (ie = U.firstElementChild; ie;) {
      P(ie, K);
      ie = ie.nextElementSibling;
    }
  }
  function X(U, K) {
    var F;
    var L;
    var ie;
    var Y;
    var ne;
    var le = 0;
    if ((F = J[U.localName]) && (ie = F[U.namespaceURI])) {
      le = ie.length;
    }
    F = 0;
    for (; F < le; F += 1) {
      if (L = U.getAttributeNS(Y = (L = ie[F]).ns, ne = L.localname)) {
        L = L.replace(K, "");
        U.setAttributeNS(Y, H[Y] + ne, L);
      }
    }
    for (ie = U.firstElementChild; ie;) {
      X(ie, K);
      ie = ie.nextElementSibling;
    }
  }
  function I(U, K) {
    var F;
    var L;
    var ie;
    var Y;
    var ne;
    var le = 0;
    if ((F = J[U.localName]) && (ie = F[U.namespaceURI])) {
      le = ie.length;
    }
    F = 0;
    for (; F < le; F += 1) {
      if (L = U.getAttributeNS(L = (Y = ie[F]).ns, ne = Y.localname)) {
        if ((K = K || {}).hasOwnProperty(Y = Y.keyname)) {
          K[Y][L] = 1;
        } else {
          (ne = {})[L] = 1;
          K[Y] = ne;
        }
      }
    }
    return K;
  }
  function y(U, K) {
    var F;
    I(U, K);
    F = U.firstChild;
    for (; F;) {
      if (F.nodeType === Node.ELEMENT_NODE) {
        y(F, K);
      }
      F = F.nextSibling;
    }
  }
  function w(U, K, F) {
    this.key = U;
    this.name = K;
    this.family = F;
    this.requires = {};
  }
  function E(U, K, F) {
    var L = U + "\"" + K;
    var ie = F[L];
    ie ||= F[L] = new w(L, U, K);
    return ie;
  }
  function R(U, K, F) {
    var L;
    var ie;
    var Y;
    var ne;
    var ge = 0;
    L = U.getAttributeNS(G, "name");
    ne = U.getAttributeNS(G, "family");
    if (L && ne) {
      K = E(L, ne, F);
    }
    if (K) {
      if ((L = J[U.localName]) && (Y = L[U.namespaceURI])) {
        ge = Y.length;
      }
      L = 0;
      if ((L = J[U.localName]) && (Y = L[U.namespaceURI])) {
        ge = Y.length;
      }
      L = 0;
      for (; L < ge; L += 1) {
        if (ie = U.getAttributeNS(ie = (ne = Y[L]).ns, ne.localname)) {
          ne = E(ie, ne = ne.keyname, F);
          K.requires[ne.key] = ne;
        }
      }
    }
    for (U = U.firstElementChild; U;) {
      R(U, K, F);
      U = U.nextElementSibling;
    }
    return F;
  }
  function C(U, K) {
    var F = K[U.family];
    F ||= K[U.family] = {};
    F[U.name] = 1;
    Object.keys(U.requires).forEach(function (L) {
      C(U.requires[L], K);
    });
  }
  function N(U, K) {
    var F = R(U, null, {});
    Object.keys(F).forEach(function (L) {
      var ie = K[(L = F[L]).family];
      if (ie && ie.hasOwnProperty(L.name)) {
        C(L, K);
      }
    });
  }
  var J;
  var s = odf.Namespaces.chartns;
  var u = odf.Namespaces.dbns;
  var m = odf.Namespaces.dr3dns;
  var l = odf.Namespaces.drawns;
  var M = odf.Namespaces.formns;
  var O = odf.Namespaces.numberns;
  var q = odf.Namespaces.officens;
  var ee = odf.Namespaces.presentationns;
  var G = odf.Namespaces.stylens;
  var B = odf.Namespaces.tablens;
  var A = odf.Namespaces.textns;
  var H = {
    "urn:oasis:names:tc:opendocument:xmlns:chart:1.0": "chart:",
    "urn:oasis:names:tc:opendocument:xmlns:database:1.0": "db:",
    "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0": "dr3d:",
    "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0": "draw:",
    "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0": "fo:",
    "urn:oasis:names:tc:opendocument:xmlns:form:1.0": "form:",
    "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0": "number:",
    "urn:oasis:names:tc:opendocument:xmlns:office:1.0": "office:",
    "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0": "presentation:",
    "urn:oasis:names:tc:opendocument:xmlns:style:1.0": "style:",
    "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0": "svg:",
    "urn:oasis:names:tc:opendocument:xmlns:table:1.0": "table:",
    "urn:oasis:names:tc:opendocument:xmlns:text:1.0": "chart:",
    "http://www.w3.org/XML/1998/namespace": "xml:"
  };
  var $ = {
    text: [{
      ens: G,
      en: "tab-stop",
      ans: G,
      a: "leader-text-style"
    }, {
      ens: G,
      en: "drop-cap",
      ans: G,
      a: "style-name"
    }, {
      ens: A,
      en: "notes-configuration",
      ans: A,
      a: "citation-body-style-name"
    }, {
      ens: A,
      en: "notes-configuration",
      ans: A,
      a: "citation-style-name"
    }, {
      ens: A,
      en: "a",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "alphabetical-index",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "linenumbering-configuration",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "list-level-style-number",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "ruby-text",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "span",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "a",
      ans: A,
      a: "visited-style-name"
    }, {
      ens: G,
      en: "text-properties",
      ans: G,
      a: "text-line-through-text-style"
    }, {
      ens: A,
      en: "alphabetical-index-source",
      ans: A,
      a: "main-entry-style-name"
    }, {
      ens: A,
      en: "index-entry-bibliography",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-entry-chapter",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-entry-link-end",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-entry-link-start",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-entry-page-number",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-entry-span",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-entry-tab-stop",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-entry-text",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-title-template",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "list-level-style-bullet",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "outline-level-style",
      ans: A,
      a: "style-name"
    }],
    paragraph: [{
      ens: l,
      en: "caption",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "circle",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "connector",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "control",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "custom-shape",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "ellipse",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "frame",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "line",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "measure",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "path",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "polygon",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "polyline",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "rect",
      ans: l,
      a: "text-style-name"
    }, {
      ens: l,
      en: "regular-polygon",
      ans: l,
      a: "text-style-name"
    }, {
      ens: q,
      en: "annotation",
      ans: l,
      a: "text-style-name"
    }, {
      ens: M,
      en: "column",
      ans: M,
      a: "text-style-name"
    }, {
      ens: G,
      en: "style",
      ans: G,
      a: "next-style-name"
    }, {
      ens: B,
      en: "body",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: B,
      en: "even-columns",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: B,
      en: "even-rows",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: B,
      en: "first-column",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: B,
      en: "first-row",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: B,
      en: "last-column",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: B,
      en: "last-row",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: B,
      en: "odd-columns",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: B,
      en: "odd-rows",
      ans: B,
      a: "paragraph-style-name"
    }, {
      ens: A,
      en: "notes-configuration",
      ans: A,
      a: "default-style-name"
    }, {
      ens: A,
      en: "alphabetical-index-entry-template",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "bibliography-entry-template",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "h",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "illustration-index-entry-template",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-source-style",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "object-index-entry-template",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "p",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "table-index-entry-template",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "table-of-content-entry-template",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "table-index-entry-template",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "user-index-entry-template",
      ans: A,
      a: "style-name"
    }, {
      ens: G,
      en: "page-layout-properties",
      ans: G,
      a: "register-truth-ref-style-name"
    }],
    chart: [{
      ens: s,
      en: "axis",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "chart",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "data-label",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "data-point",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "equation",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "error-indicator",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "floor",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "footer",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "grid",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "legend",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "mean-value",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "plot-area",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "regression-curve",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "series",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "stock-gain-marker",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "stock-loss-marker",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "stock-range-line",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "subtitle",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "title",
      ans: s,
      a: "style-name"
    }, {
      ens: s,
      en: "wall",
      ans: s,
      a: "style-name"
    }],
    section: [{
      ens: A,
      en: "alphabetical-index",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "bibliography",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "illustration-index",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "index-title",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "object-index",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "section",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "table-of-content",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "table-index",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "user-index",
      ans: A,
      a: "style-name"
    }],
    ruby: [{
      ens: A,
      en: "ruby",
      ans: A,
      a: "style-name"
    }],
    table: [{
      ens: u,
      en: "query",
      ans: u,
      a: "style-name"
    }, {
      ens: u,
      en: "table-representation",
      ans: u,
      a: "style-name"
    }, {
      ens: B,
      en: "background",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "table",
      ans: B,
      a: "style-name"
    }],
    "table-column": [{
      ens: u,
      en: "column",
      ans: u,
      a: "style-name"
    }, {
      ens: B,
      en: "table-column",
      ans: B,
      a: "style-name"
    }],
    "table-row": [{
      ens: u,
      en: "query",
      ans: u,
      a: "default-row-style-name"
    }, {
      ens: u,
      en: "table-representation",
      ans: u,
      a: "default-row-style-name"
    }, {
      ens: B,
      en: "table-row",
      ans: B,
      a: "style-name"
    }],
    "table-cell": [{
      ens: u,
      en: "column",
      ans: u,
      a: "default-cell-style-name"
    }, {
      ens: B,
      en: "table-column",
      ans: B,
      a: "default-cell-style-name"
    }, {
      ens: B,
      en: "table-row",
      ans: B,
      a: "default-cell-style-name"
    }, {
      ens: B,
      en: "body",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "covered-table-cell",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "even-columns",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "covered-table-cell",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "even-columns",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "even-rows",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "first-column",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "first-row",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "last-column",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "last-row",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "odd-columns",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "odd-rows",
      ans: B,
      a: "style-name"
    }, {
      ens: B,
      en: "table-cell",
      ans: B,
      a: "style-name"
    }],
    graphic: [{
      ens: m,
      en: "cube",
      ans: l,
      a: "style-name"
    }, {
      ens: m,
      en: "extrude",
      ans: l,
      a: "style-name"
    }, {
      ens: m,
      en: "rotate",
      ans: l,
      a: "style-name"
    }, {
      ens: m,
      en: "scene",
      ans: l,
      a: "style-name"
    }, {
      ens: m,
      en: "sphere",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "caption",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "circle",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "connector",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "control",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "custom-shape",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "ellipse",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "frame",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "g",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "line",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "measure",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "page-thumbnail",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "path",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "polygon",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "polyline",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "rect",
      ans: l,
      a: "style-name"
    }, {
      ens: l,
      en: "regular-polygon",
      ans: l,
      a: "style-name"
    }, {
      ens: q,
      en: "annotation",
      ans: l,
      a: "style-name"
    }],
    presentation: [{
      ens: m,
      en: "cube",
      ans: ee,
      a: "style-name"
    }, {
      ens: m,
      en: "extrude",
      ans: ee,
      a: "style-name"
    }, {
      ens: m,
      en: "rotate",
      ans: ee,
      a: "style-name"
    }, {
      ens: m,
      en: "scene",
      ans: ee,
      a: "style-name"
    }, {
      ens: m,
      en: "sphere",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "caption",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "circle",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "connector",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "control",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "custom-shape",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "ellipse",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "frame",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "g",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "line",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "measure",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "page-thumbnail",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "path",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "polygon",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "polyline",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "rect",
      ans: ee,
      a: "style-name"
    }, {
      ens: l,
      en: "regular-polygon",
      ans: ee,
      a: "style-name"
    }, {
      ens: q,
      en: "annotation",
      ans: ee,
      a: "style-name"
    }],
    "drawing-page": [{
      ens: l,
      en: "page",
      ans: l,
      a: "style-name"
    }, {
      ens: ee,
      en: "notes",
      ans: l,
      a: "style-name"
    }, {
      ens: G,
      en: "handout-master",
      ans: l,
      a: "style-name"
    }, {
      ens: G,
      en: "master-page",
      ans: l,
      a: "style-name"
    }],
    "list-style": [{
      ens: A,
      en: "list",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "numbered-paragraph",
      ans: A,
      a: "style-name"
    }, {
      ens: A,
      en: "list-item",
      ans: A,
      a: "style-override"
    }, {
      ens: G,
      en: "style",
      ans: G,
      a: "list-style-name"
    }],
    data: [{
      ens: G,
      en: "style",
      ans: G,
      a: "data-style-name"
    }, {
      ens: G,
      en: "style",
      ans: G,
      a: "percentage-data-style-name"
    }, {
      ens: ee,
      en: "date-time-decl",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "creation-date",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "creation-time",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "database-display",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "date",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "editing-duration",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "expression",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "meta-field",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "modification-date",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "modification-time",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "print-date",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "print-time",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "table-formula",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "time",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "user-defined",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "user-field-get",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "user-field-input",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "variable-get",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "variable-input",
      ans: G,
      a: "data-style-name"
    }, {
      ens: A,
      en: "variable-set",
      ans: G,
      a: "data-style-name"
    }],
    "page-layout": [{
      ens: ee,
      en: "notes",
      ans: G,
      a: "page-layout-name"
    }, {
      ens: G,
      en: "handout-master",
      ans: G,
      a: "page-layout-name"
    }, {
      ens: G,
      en: "master-page",
      ans: G,
      a: "page-layout-name"
    }]
  };
  var Q = xmldom.XPath;
  this.collectUsedFontFaces = function x(U, K) {
    function F(ne) {
      if (ne = Y.getAttributeNS(G, ne)) {
        U[ne] = true;
      }
    }
    var ie;
    var Y;
    var L = ["font-name", "font-name-asian", "font-name-complex"];
    for (ie = K && K.firstElementChild; ie;) {
      Y = ie;
      L.forEach(F);
      x(U, Y);
      ie = ie.nextElementSibling;
    }
  };
  this.changeFontFaceNames = function S(U, K) {
    function F(ne) {
      var le = Y.getAttributeNS(G, ne);
      if (le && K.hasOwnProperty(le)) {
        Y.setAttributeNS(G, "style:" + ne, K[le]);
      }
    }
    var ie;
    var Y;
    var L = ["font-name", "font-name-asian", "font-name-complex"];
    for (ie = U && U.firstElementChild; ie;) {
      Y = ie;
      L.forEach(F);
      S(Y, K);
      ie = ie.nextElementSibling;
    }
  };
  this.UsedStyleList = function (U, K) {
    var F = {};
    this.uses = function (L) {
      var ie = L.localName;
      var Y = L.getAttributeNS(l, "name") || L.getAttributeNS(G, "name");
      L = ie === "style" ? L.getAttributeNS(G, "family") : L.namespaceURI === O ? "data" : ie;
      return !!(L = F[L]) && L[Y] > 0;
    };
    y(U, F);
    if (K) {
      N(K, F);
    }
  };
  this.getStyleName = function (U, K) {
    var F;
    var L;
    var ie = J[K.localName];
    if (ie &&= ie[K.namespaceURI]) {
      for (L = 0; L < ie.length; L += 1) {
        if (ie[L].keyname === U && K.hasAttributeNS((ie = ie[L]).ns, ie.localname)) {
          F = K.getAttributeNS(ie.ns, ie.localname);
          break;
        }
      }
    }
    return F;
  };
  this.hasDerivedStyles = function (U, K, F) {
    var L = F.getAttributeNS(G, "name");
    F = F.getAttributeNS(G, "family");
    return !!Q.getODFElementsWithXPath(U, "//style:*[@style:parent-style-name=\"" + L + "\"][@style:family=\"" + F + "\"]", K).length;
  };
  this.prefixStyleNames = function (U, K, F) {
    var L;
    if (U) {
      for (L = U.firstChild; L;) {
        if (L.nodeType === Node.ELEMENT_NODE) {
          var ie = L;
          var Y = K;
          var ne = ie.getAttributeNS(l, "name");
          var le = undefined;
          if (ne) {
            le = l;
          } else if (ne = ie.getAttributeNS(G, "name")) {
            le = G;
          }
          if (le) {
            ie.setAttributeNS(le, H[le] + "name", Y + ne);
          }
        }
        L = L.nextSibling;
      }
      P(U, K);
      if (F) {
        P(F, K);
      }
    }
  };
  this.removePrefixFromStyleNames = function (U, K, F) {
    var L = new RegExp("^" + K);
    if (U) {
      for (K = U.firstChild; K;) {
        if (K.nodeType === Node.ELEMENT_NODE) {
          var ie = K;
          var Y = L;
          var ne = ie.getAttributeNS(l, "name");
          var le = undefined;
          if (ne) {
            le = l;
          } else if (ne = ie.getAttributeNS(G, "name")) {
            le = G;
          }
          if (le) {
            ne = ne.replace(Y, "");
            ie.setAttributeNS(le, H[le] + "name", ne);
          }
        }
        K = K.nextSibling;
      }
      X(U, L);
      if (F) {
        X(F, L);
      }
    }
  };
  this.determineStylesForNode = I;
  J = function () {
    var U;
    var K;
    var F;
    var L;
    var ie;
    var ne;
    var le;
    var ge;
    var Ee;
    var Y = {};
    for (F in $) {
      if ($.hasOwnProperty(F)) {
        K = (L = $[F]).length;
        U = 0;
        K = (L = $[F]).length;
        U = 0;
        for (; U < K; U += 1) {
          Ee = (ie = L[U]).ens;
          if (Y.hasOwnProperty(ge = ie.en)) {
            ne = Y[ge];
          } else {
            Y[ge] = ne = {};
          }
          if (ne.hasOwnProperty(Ee)) {
            le = ne[Ee];
          } else {
            ne[Ee] = le = [];
          }
          le.push({
            ns: ie.ans,
            localname: ie.a,
            keyname: F
          });
        }
      }
    }
    return Y;
  }();
};
if (typeof Object.create != "function") {
  Object.create = function (P) {
    function X() {}
    X.prototype = P;
    return new X();
  };
}
xmldom.LSSerializer = function () {
  function P(w) {
    var E = w || {};
    var R = function (S) {
      var u;
      var s = {};
      for (u in S) {
        if (S.hasOwnProperty(u)) {
          s[S[u]] = u;
        }
      }
      return s;
    }(w);
    var C = [E];
    var N = [R];
    var x = 0;
    this.push = function () {
      E = C[x += 1] = Object.create(E);
      R = N[x] = Object.create(R);
    };
    this.pop = function () {
      C.pop();
      N.pop();
      --x;
      E = C[x];
      R = N[x];
    };
    this.getLocalNamespaceDefinitions = function () {
      return R;
    };
    this.getQName = function (S) {
      var m;
      var s = S.namespaceURI;
      var u = 0;
      if (!s) {
        return S.localName;
      }
      if (m = R[s]) {
        return m + ":" + S.localName;
      }
      do {
        if (m || !S.prefix) {
          m = "ns" + u;
          u += 1;
        } else {
          m = S.prefix;
        }
        if (E[m] === s) {
          break;
        }
        if (!E[m]) {
          E[m] = s;
          R[s] = m;
          break;
        }
        m = null;
      } while (m === null);
      return m + ":" + S.localName;
    };
  }
  function X(w) {
    return w.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
  }
  function I(w, E) {
    var N;
    var R = "";
    var C = y.filter ? y.filter.acceptNode(E) : NodeFilter.FILTER_ACCEPT;
    if (C === NodeFilter.FILTER_ACCEPT && E.nodeType === Node.ELEMENT_NODE) {
      w.push();
      N = w.getQName(E);
      var x;
      var s;
      var u;
      var m;
      var S = E.attributes;
      var l = "";
      x = "<" + N;
      s = S.length;
      u = 0;
      for (; u < s; u += 1) {
        if ((m = S.item(u)).namespaceURI !== "http://www.w3.org/2000/xmlns/" && (y.filter ? y.filter.acceptNode(m) : NodeFilter.FILTER_ACCEPT) === NodeFilter.FILTER_ACCEPT) {
          l += " " + w.getQName(m) + "=\"" + (m = typeof m.value == "string" ? X(m.value) : m.value) + "\"";
        }
      }
      for (u in s = w.getLocalNamespaceDefinitions()) {
        if (s.hasOwnProperty(u)) {
          if (S = s[u]) {
            if (S !== "xmlns") {
              x += " xmlns:" + s[u] + "=\"" + u + "\"";
            }
          } else {
            x += " xmlns=\"" + u + "\"";
          }
        }
      }
      R += x + (l + ">");
    }
    if (C === NodeFilter.FILTER_ACCEPT || C === NodeFilter.FILTER_SKIP) {
      for (C = E.firstChild; C;) {
        R += I(w, C);
        C = C.nextSibling;
      }
      if (E.nodeValue) {
        R += X(E.nodeValue);
      }
    }
    if (N) {
      R += "</" + N + ">";
      w.pop();
    }
    return R;
  }
  var y = this;
  this.filter = null;
  this.writeToString = function (w, E) {
    if (w) {
      return I(new P(E), w);
    } else {
      return "";
    }
  };
};
(function () {
  function P(S) {
    var s;
    var u = C.length;
    for (s = 0; s < u; s += 1) {
      if (S.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:office:1.0" && S.localName === C[s]) {
        return s;
      }
    }
    return -1;
  }
  function X(S, s) {
    var u = new w.UsedStyleList(S, s);
    var m = new odf.OdfNodeFilter();
    this.acceptNode = function (l) {
      var M = m.acceptNode(l);
      if (M === NodeFilter.FILTER_ACCEPT && l.parentNode === s && l.nodeType === Node.ELEMENT_NODE) {
        M = u.uses(l) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
      }
      return M;
    };
  }
  function I(S, s) {
    var u = new X(S, s);
    this.acceptNode = function (m) {
      var l = u.acceptNode(m);
      if (l === NodeFilter.FILTER_ACCEPT && !!m.parentNode && m.parentNode.namespaceURI === odf.Namespaces.textns && (m.parentNode.localName === "s" || m.parentNode.localName === "tab")) {
        l = NodeFilter.FILTER_REJECT;
      }
      return l;
    };
  }
  function y(S, s) {
    if (s) {
      var m;
      var u = P(s);
      var l = S.firstChild;
      if (u !== -1) {
        for (; l && ((m = P(l)) === -1 || m <= u);) {
          l = l.nextSibling;
        }
        S.insertBefore(s, l);
      }
    }
  }
  var w = new odf.StyleInfo();
  var E = core.DomUtils;
  var R = odf.Namespaces.stylens;
  var C = "meta settings scripts font-face-decls styles automatic-styles master-styles body".split(" ");
  var N = Date.now() + "_webodf_";
  var x = new core.Base64();
  odf.ODFElement = function () {};
  odf.ODFDocumentElement = function () {};
  odf.ODFDocumentElement.prototype = new odf.ODFElement();
  odf.ODFDocumentElement.prototype.constructor = odf.ODFDocumentElement;
  odf.ODFDocumentElement.prototype.fontFaceDecls = null;
  odf.ODFDocumentElement.prototype.manifest = null;
  odf.ODFDocumentElement.prototype.settings = null;
  odf.ODFDocumentElement.namespaceURI = "urn:oasis:names:tc:opendocument:xmlns:office:1.0";
  odf.ODFDocumentElement.localName = "document";
  odf.AnnotationElement = function () {};
  odf.OdfPart = function (S, s, u, m) {
    var l = this;
    this.size = 0;
    this.type = null;
    this.name = S;
    this.container = u;
    this.url = null;
    this.mimetype = s;
    this.onstatereadychange = this.document = null;
    this.EMPTY = 0;
    this.LOADING = 1;
    this.DONE = 2;
    this.state = this.EMPTY;
    this.data = "";
    this.load = function () {
      if (m !== null) {
        this.mimetype = s;
        m.loadAsDataURL(S, s, function (M, O) {
          if (M) {
            runtime.log(M);
          }
          l.url = O;
          if (l.onchange) {
            l.onchange(l);
          }
          if (l.onstatereadychange) {
            l.onstatereadychange(l);
          }
        });
      }
    };
  };
  odf.OdfPart.prototype.load = function () {};
  odf.OdfPart.prototype.getUrl = function () {
    if (this.data) {
      return "data:;base64," + x.toBase64(this.data);
    } else {
      return null;
    }
  };
  odf.OdfContainer = function S(s, u) {
    function m(ue) {
      for (var pe, de = ue.firstChild; de;) {
        pe = de.nextSibling;
        if (de.nodeType === Node.ELEMENT_NODE) {
          m(de);
        } else if (de.nodeType === Node.PROCESSING_INSTRUCTION_NODE) {
          ue.removeChild(de);
        }
        de = pe;
      }
    }
    function l(ue) {
      var pe;
      var xe;
      var de = {};
      var Xe = ue.ownerDocument.createNodeIterator(ue, NodeFilter.SHOW_ELEMENT, null, false);
      for (ue = Xe.nextNode(); ue;) {
        if (ue.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:office:1.0") {
          if (ue.localName === "annotation") {
            if (pe = ue.getAttributeNS("urn:oasis:names:tc:opendocument:xmlns:office:1.0", "name")) {
              if (de.hasOwnProperty(pe)) {
                runtime.log("Warning: annotation name used more than once with <office:annotation/>: '" + pe + "'");
              } else {
                de[pe] = ue;
              }
            }
          } else if (ue.localName === "annotation-end") {
            if (pe = ue.getAttributeNS("urn:oasis:names:tc:opendocument:xmlns:office:1.0", "name")) {
              if (de.hasOwnProperty(pe)) {
                if ((xe = de[pe]).annotationEndElement) {
                  runtime.log("Warning: annotation name used more than once with <office:annotation-end/>: '" + pe + "'");
                } else {
                  xe.annotationEndElement = ue;
                }
              } else {
                runtime.log("Warning: annotation end without an annotation start, name: '" + pe + "'");
              }
            } else {
              runtime.log("Warning: annotation end without a name found");
            }
          }
        }
        ue = Xe.nextNode();
      }
    }
    function M(ue, de) {
      for (var pe = ue && ue.firstChild; pe;) {
        if (pe.nodeType === Node.ELEMENT_NODE) {
          pe.setAttributeNS("urn:webodf:names:scope", "scope", de);
        }
        pe = pe.nextSibling;
      }
    }
    function O(ue, de) {
      for (var pe = (pe = we.rootElement.meta) && pe.firstChild; pe && (pe.namespaceURI !== ue || pe.localName !== de);) {
        pe = pe.nextSibling;
      }
      for (pe = pe && pe.firstChild; pe && pe.nodeType !== Node.TEXT_NODE;) {
        pe = pe.nextSibling;
      }
      if (pe) {
        return pe.data;
      } else {
        return null;
      }
    }
    function q(ue) {
      var de = {};
      for (ue = ue.firstChild; ue;) {
        if (ue.nodeType === Node.ELEMENT_NODE && ue.namespaceURI === R && ue.localName === "font-face") {
          de[ue.getAttributeNS(R, "name")] = ue;
        }
        ue = ue.nextSibling;
      }
      return de;
    }
    function ee(ue, de) {
      var xe;
      var Xe;
      var rt;
      var pe = null;
      if (ue) {
        for (xe = (pe = ue.cloneNode(true)).firstElementChild; xe;) {
          Xe = xe.nextElementSibling;
          if ((rt = xe.getAttributeNS("urn:webodf:names:scope", "scope")) && rt !== de) {
            pe.removeChild(xe);
          }
          xe = Xe;
        }
      }
      return pe;
    }
    function G(ue, de) {
      var pe;
      var xe;
      var Xe;
      var rt = null;
      var tt = {};
      if (ue) {
        de.forEach(function (Re) {
          w.collectUsedFontFaces(tt, Re);
        });
        pe = (rt = ue.cloneNode(true)).firstElementChild;
        de.forEach(function (Re) {
          w.collectUsedFontFaces(tt, Re);
        });
        pe = (rt = ue.cloneNode(true)).firstElementChild;
        for (; pe;) {
          xe = pe.nextElementSibling;
          Xe = pe.getAttributeNS(R, "name");
          if (!tt[Xe]) {
            rt.removeChild(pe);
          }
          pe = xe;
        }
      }
      return rt;
    }
    function B(ue) {
      var pe;
      var de = we.rootElement.ownerDocument;
      if (ue) {
        m(ue.documentElement);
        try {
          pe = de.importNode(ue.documentElement, true);
        } catch {}
      }
      return pe;
    }
    function A(ue) {
      we.state = ue;
      if (we.onchange) {
        we.onchange(we);
      }
      if (we.onstatereadychange) {
        we.onstatereadychange(we);
      }
    }
    function H(ue) {
      $e = null;
      we.rootElement = ue;
      ue.fontFaceDecls = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "font-face-decls");
      ue.styles = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "styles");
      ue.automaticStyles = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "automatic-styles");
      ue.masterStyles = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "master-styles");
      ue.body = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "body");
      ue.meta = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "meta");
      ue.settings = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "settings");
      ue.scripts = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "scripts");
      l(ue);
    }
    function $(ue) {
      var xe;
      var de = B(ue);
      var pe = we.rootElement;
      if (de && de.localName === "document-styles" && de.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:office:1.0") {
        pe.fontFaceDecls = E.getDirectChild(de, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "font-face-decls");
        y(pe, pe.fontFaceDecls);
        xe = E.getDirectChild(de, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "styles");
        pe.styles = xe || ue.createElementNS("urn:oasis:names:tc:opendocument:xmlns:office:1.0", "styles");
        y(pe, pe.styles);
        xe = E.getDirectChild(de, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "automatic-styles");
        pe.automaticStyles = xe || ue.createElementNS("urn:oasis:names:tc:opendocument:xmlns:office:1.0", "automatic-styles");
        M(pe.automaticStyles, "document-styles");
        y(pe, pe.automaticStyles);
        de = E.getDirectChild(de, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "master-styles");
        pe.masterStyles = de || ue.createElementNS("urn:oasis:names:tc:opendocument:xmlns:office:1.0", "master-styles");
        y(pe, pe.masterStyles);
        w.prefixStyleNames(pe.automaticStyles, N, pe.masterStyles);
      } else {
        A(S.INVALID);
      }
    }
    function J(ue) {
      var de;
      var pe;
      var xe;
      var Xe;
      if ((ue = B(ue)) && ue.localName === "document-content" && ue.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:office:1.0") {
        de = we.rootElement;
        xe = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "font-face-decls");
        if (de.fontFaceDecls && xe) {
          var rt;
          var tt;
          var Re;
          var ot;
          var pt = {};
          pe = q(Xe = de.fontFaceDecls);
          ot = q(xe);
          xe = xe.firstElementChild;
          for (; xe;) {
            rt = xe.nextElementSibling;
            if (xe.namespaceURI === R && xe.localName === "font-face") {
              tt = xe.getAttributeNS(R, "name");
              if (pe.hasOwnProperty(tt)) {
                if (!xe.isEqualNode(pe[tt])) {
                  var ct = pe;
                  var st = ot;
                  var Ze = 0;
                  var it = undefined;
                  for (it = Re = (Re = tt).replace(/\d+$/, ""); ct.hasOwnProperty(it) || st.hasOwnProperty(it);) {
                    it = Re + (Ze += 1);
                  }
                  xe.setAttributeNS(R, "style:name", Re = it);
                  Xe.appendChild(xe);
                  pe[Re] = xe;
                  delete ot[tt];
                  pt[tt] = Re;
                }
              } else {
                Xe.appendChild(xe);
                pe[tt] = xe;
                delete ot[tt];
              }
            }
            xe = rt;
          }
          Xe = pt;
        } else if (xe) {
          de.fontFaceDecls = xe;
          y(de, xe);
        }
        M(pe = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "automatic-styles"), "document-content");
        if (Xe) {
          w.changeFontFaceNames(pe, Xe);
        }
        if (de.automaticStyles && pe) {
          for (Xe = pe.firstChild; Xe;) {
            de.automaticStyles.appendChild(Xe);
            Xe = pe.firstChild;
          }
        } else if (pe) {
          de.automaticStyles = pe;
          y(de, pe);
        }
        if ((ue = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "body")) === null) {
          throw "<office:body/> tag is mising.";
        }
        de.body = ue;
        y(de, de.body);
      } else {
        A(S.INVALID);
      }
    }
    function Q(ue) {
      var de;
      if ((ue = B(ue)) && ue.localName === "document-meta" && ue.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:office:1.0") {
        (de = we.rootElement).meta = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "meta");
        y(de, de.meta);
      }
    }
    function U(ue) {
      var de;
      if ((ue = B(ue)) && ue.localName === "document-settings" && ue.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:office:1.0") {
        (de = we.rootElement).settings = E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "settings");
        y(de, de.settings);
      }
    }
    function K(ue) {
      var de;
      if ((ue = B(ue)) && ue.localName === "manifest" && ue.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:manifest:1.0") {
        (de = we.rootElement).manifest = ue;
        ue = de.manifest.firstElementChild;
        (de = we.rootElement).manifest = ue;
        ue = de.manifest.firstElementChild;
        for (; ue;) {
          if (ue.localName === "file-entry" && ue.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:manifest:1.0") {
            ye[ue.getAttributeNS("urn:oasis:names:tc:opendocument:xmlns:manifest:1.0", "full-path")] = ue.getAttributeNS("urn:oasis:names:tc:opendocument:xmlns:manifest:1.0", "media-type");
          }
          ue = ue.nextElementSibling;
        }
      }
    }
    function F(ue, de, pe) {
      var xe;
      ue = E.getElementsByTagName(ue, de);
      xe = 0;
      for (; xe < ue.length; xe += 1) {
        if (!pe.hasOwnProperty((de = ue[xe]).namespaceURI)) {
          de.parentNode.removeChild(de);
        }
      }
    }
    function L(ue) {
      F(ue, "script", {
        "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0": true,
        "urn:oasis:names:tc:opendocument:xmlns:office:1.0": true,
        "urn:oasis:names:tc:opendocument:xmlns:table:1.0": true,
        "urn:oasis:names:tc:opendocument:xmlns:text:1.0": true,
        "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0": true
      });
      F(ue, "style", {
        "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0": true,
        "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0": true,
        "urn:oasis:names:tc:opendocument:xmlns:style:1.0": true
      });
    }
    function ie(ue) {
      var xe;
      var Xe;
      var rt;
      var de = ue.firstElementChild;
      var pe = [];
      var tt = ue.attributes;
      var Re = tt.length;
      for (xe = 0; xe < Re; xe += 1) {
        Xe = (rt = tt.item(xe)).localName.substr(0, 2).toLowerCase();
        if (rt.namespaceURI === null && Xe === "on") {
          pe.push(rt);
        }
      }
      Re = pe.length;
      xe = 0;
      for (; xe < Re; xe += 1) {
        ue.removeAttributeNode(pe[xe]);
      }
      for (; de;) {
        ie(de);
        de = de.nextElementSibling;
      }
    }
    function Y(ue) {
      var de = ue.shift();
      if (de) {
        Ce.loadAsDOM(de.path, function (pe, xe) {
          if (xe) {
            L(xe);
            ie(xe.documentElement);
          }
          de.handler(xe);
          if (we.state === S.INVALID) {
            runtime.log(pe ? "ERROR: Unable to load " + de.path + " - " + pe : "ERROR: Unable to load " + de.path);
          } else {
            if (pe) {
              runtime.log("DEBUG: Unable to load " + de.path + " - " + pe);
            }
            Y(ue);
          }
        });
      } else {
        l(we.rootElement);
        A(S.DONE);
      }
    }
    function ne(ue) {
      var de = "";
      odf.Namespaces.forEachPrefix(function (pe, xe) {
        de += " xmlns:" + pe + "=\"" + xe + "\"";
      });
      return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><office:" + ue + " " + de + " office:version=\"1.2\">";
    }
    function ge(ue, de) {
      var pe = document.createElementNS("urn:oasis:names:tc:opendocument:xmlns:manifest:1.0", "manifest:file-entry");
      pe.setAttributeNS("urn:oasis:names:tc:opendocument:xmlns:manifest:1.0", "manifest:full-path", ue);
      pe.setAttributeNS("urn:oasis:names:tc:opendocument:xmlns:manifest:1.0", "manifest:media-type", de);
      return pe;
    }
    function fe(ue, de) {
      var pe;
      var xe = (pe = we.rootElement).meta;
      if (!xe) {
        pe.meta = xe = document.createElementNS("urn:oasis:names:tc:opendocument:xmlns:office:1.0", "meta");
        y(pe, xe);
      }
      pe = xe;
      if (ue) {
        E.mapKeyValObjOntoNode(pe, ue, odf.Namespaces.lookupNamespaceURI);
      }
      if (de) {
        E.removeKeyElementsFromNode(pe, de, odf.Namespaces.lookupNamespaceURI);
      }
    }
    function Me(ue, de) {
      function pe(ot, pt) {
        var ct;
        pt ||= ot;
        ct = document.createElementNS("urn:oasis:names:tc:opendocument:xmlns:office:1.0", pt);
        tt[ot] = ct;
        tt.appendChild(ct);
      }
      var xe = new core.Zip("", null);
      var Xe = "application/vnd.oasis.opendocument." + ue + (de === true ? "-template" : "");
      var rt = runtime.byteArrayFromString(Xe, "utf8");
      var tt = we.rootElement;
      var Re = document.createElementNS("urn:oasis:names:tc:opendocument:xmlns:office:1.0", ue);
      xe.save("mimetype", rt, false, new Date());
      pe("meta");
      pe("settings");
      pe("scripts");
      pe("fontFaceDecls", "font-face-decls");
      pe("styles");
      pe("automaticStyles", "automatic-styles");
      pe("masterStyles", "master-styles");
      pe("body");
      tt.body.appendChild(Re);
      ye["/"] = Xe;
      ye["settings.xml"] = "text/xml";
      ye["meta.xml"] = "text/xml";
      ye["styles.xml"] = "text/xml";
      ye["content.xml"] = "text/xml";
      A(S.DONE);
      return xe;
    }
    function je() {
      var ue;
      var de = new Date();
      var pe = "";
      if (we.rootElement.settings && we.rootElement.settings.firstElementChild) {
        ue = new xmldom.LSSerializer();
        pe = ne("document-settings");
        ue.filter = new odf.OdfNodeFilter();
        pe += ue.writeToString(we.rootElement.settings, odf.Namespaces.namespaceMap);
        pe += "</office:document-settings>";
      }
      if (ue = pe) {
        ue = runtime.byteArrayFromString(ue, "utf8");
        Ce.save("settings.xml", ue, true, de);
      } else {
        Ce.remove("settings.xml");
      }
      pe = runtime.getWindow();
      ue = "WebODF/" + webodf.Version;
      if (pe) {
        ue = ue + " " + pe.navigator.userAgent;
      }
      fe({
        "meta:generator": ue
      }, null);
      ue = runtime.byteArrayFromString(function le() {
        var ue = new xmldom.LSSerializer();
        var de = ne("document-meta");
        ue.filter = new odf.OdfNodeFilter();
        return (de += ue.writeToString(we.rootElement.meta, odf.Namespaces.namespaceMap)) + "</office:document-meta>";
      }(), "utf8");
      Ce.save("meta.xml", ue, true, de);
      ue = runtime.byteArrayFromString(function Le() {
        var ue;
        var de;
        var pe;
        var xe = odf.Namespaces.namespaceMap;
        var Xe = new xmldom.LSSerializer();
        var rt = ne("document-styles");
        de = ee(we.rootElement.automaticStyles, "document-styles");
        pe = we.rootElement.masterStyles.cloneNode(true);
        ue = G(we.rootElement.fontFaceDecls, [pe, we.rootElement.styles, de]);
        w.removePrefixFromStyleNames(de, N, pe);
        Xe.filter = new X(pe, de);
        rt += Xe.writeToString(ue, xe);
        rt += Xe.writeToString(we.rootElement.styles, xe);
        rt += Xe.writeToString(de, xe);
        return (rt += Xe.writeToString(pe, xe)) + "</office:document-styles>";
      }(), "utf8");
      Ce.save("styles.xml", ue, true, de);
      ue = runtime.byteArrayFromString(function Qe() {
        var ue;
        var de;
        var pe = odf.Namespaces.namespaceMap;
        var xe = new xmldom.LSSerializer();
        var Xe = ne("document-content");
        de = ee(we.rootElement.automaticStyles, "document-content");
        ue = G(we.rootElement.fontFaceDecls, [de]);
        xe.filter = new I(we.rootElement.body, de);
        Xe += xe.writeToString(ue, pe);
        Xe += xe.writeToString(de, pe);
        return (Xe += xe.writeToString(we.rootElement.body, pe)) + "</office:document-content>";
      }(), "utf8");
      Ce.save("content.xml", ue, true, de);
      ue = runtime.byteArrayFromString(function Ee() {
        var xe;
        var ue = runtime.parseXML("<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\" manifest:version=\"1.2\"></manifest:manifest>");
        var de = ue.documentElement;
        var pe = new xmldom.LSSerializer();
        for (xe in ye) {
          if (ye.hasOwnProperty(xe)) {
            de.appendChild(ge(xe, ye[xe]));
          }
        }
        pe.filter = new odf.OdfNodeFilter();
        return "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" + pe.writeToString(ue, odf.Namespaces.namespaceMap);
      }(), "utf8");
      Ce.save("META-INF/manifest.xml", ue, true, de);
    }
    function ze(ue, de) {
      je();
      Ce.writeAs(ue, function (pe) {
        de(pe);
      });
    }
    var Ce;
    var $e;
    var we = this;
    var ye = {};
    var qe = "";
    this.onstatereadychange = u;
    this.state = this.onchange = null;
    this.getMetadata = O;
    this.setRootElement = H;
    this.getContentElement = function () {
      var ue;
      $e ||= E.getDirectChild(ue = we.rootElement.body, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "text") || E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "presentation") || E.getDirectChild(ue, "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "spreadsheet");
      if (!$e) {
        throw "Could not find content element in <office:body/>.";
      }
      return $e;
    };
    this.getDocumentType = function () {
      var ue = we.getContentElement();
      return ue && ue.localName;
    };
    this.isTemplate = function () {
      return ye["/"].substr(-9) === "-template";
    };
    this.setIsTemplate = function (ue) {
      var de = ye["/"];
      if (ue !== (de.substr(-9) === "-template")) {
        de = ue ? de + "-template" : de.substr(0, de.length - 9);
        ye["/"] = de;
        ue = runtime.byteArrayFromString(de, "utf8");
        Ce.save("mimetype", ue, false, new Date());
      }
    };
    this.getPart = function (ue) {
      return new odf.OdfPart(ue, ye[ue], we, Ce);
    };
    this.getPartData = function (ue, de) {
      Ce.load(ue, de);
    };
    this.setMetadata = fe;
    this.incrementEditingCycles = function () {
      var ue = (ue = O(odf.Namespaces.metans, "editing-cycles")) ? parseInt(ue, 10) : 0;
      if (isNaN(ue)) {
        ue = 0;
      }
      fe({
        "meta:editing-cycles": ue + 1
      }, null);
      return ue + 1;
    };
    this.createByteArray = function (ue, de) {
      je();
      Ce.createByteArray(ue, de);
    };
    this.saveAs = ze;
    this.save = function (ue) {
      ze(qe, ue);
    };
    this.getUrl = function () {
      return qe;
    };
    this.setBlob = function (ue, de, pe) {
      pe = x.convertBase64ToByteArray(pe);
      Ce.save(ue, pe, false, new Date());
      if (ye.hasOwnProperty(ue)) {
        runtime.log(ue + " has been overwritten.");
      }
      ye[ue] = de;
    };
    this.removeBlob = function (ue) {
      var de = Ce.remove(ue);
      runtime.assert(de, "file is not found: " + ue);
      delete ye[ue];
    };
    this.state = S.LOADING;
    this.rootElement = function (ue) {
      var pe;
      var de = document.createElementNS(ue.namespaceURI, ue.localName);
      for (pe in ue = new ue.Type()) {
        if (ue.hasOwnProperty(pe)) {
          de[pe] = ue[pe];
        }
      }
      return de;
    }({
      Type: odf.ODFDocumentElement,
      namespaceURI: odf.ODFDocumentElement.namespaceURI,
      localName: odf.ODFDocumentElement.localName
    });
    Ce = s === odf.OdfContainer.DocumentType.TEXT ? Me("text") : s === odf.OdfContainer.DocumentType.TEXT_TEMPLATE ? Me("text", true) : s === odf.OdfContainer.DocumentType.PRESENTATION ? Me("presentation") : s === odf.OdfContainer.DocumentType.PRESENTATION_TEMPLATE ? Me("presentation", true) : s === odf.OdfContainer.DocumentType.SPREADSHEET ? Me("spreadsheet") : s === odf.OdfContainer.DocumentType.SPREADSHEET_TEMPLATE ? Me("spreadsheet", true) : new core.Zip(qe = s, function (ue, de) {
      Ce = de;
      if (ue) {
        (function ae(ue, de) {
          runtime.loadXML(ue, function (pe, xe) {
            if (pe) {
              de(pe);
            } else if (xe) {
              L(xe);
              ie(xe.documentElement);
              var Xe = B(xe);
              if (Xe && Xe.localName === "document" && Xe.namespaceURI === "urn:oasis:names:tc:opendocument:xmlns:office:1.0") {
                H(Xe);
                A(S.DONE);
              } else {
                A(S.INVALID);
              }
            } else {
              de("No DOM was loaded.");
            }
          });
        })(qe, function (pe) {
          if (ue) {
            Ce.error = ue + "\n" + pe;
            A(S.INVALID);
          }
        });
      } else {
        Y([{
          path: "styles.xml",
          handler: $
        }, {
          path: "content.xml",
          handler: J
        }, {
          path: "meta.xml",
          handler: Q
        }, {
          path: "settings.xml",
          handler: U
        }, {
          path: "META-INF/manifest.xml",
          handler: K
        }]);
      }
    });
  };
  odf.OdfContainer.EMPTY = 0;
  odf.OdfContainer.LOADING = 1;
  odf.OdfContainer.DONE = 2;
  odf.OdfContainer.INVALID = 3;
  odf.OdfContainer.SAVING = 4;
  odf.OdfContainer.MODIFIED = 5;
  odf.OdfContainer.getContainer = function (S) {
    return new odf.OdfContainer(S, null);
  };
})();
odf.OdfContainer.DocumentType = {
  TEXT: 1,
  TEXT_TEMPLATE: 2,
  PRESENTATION: 3,
  PRESENTATION_TEMPLATE: 4,
  SPREADSHEET: 5,
  SPREADSHEET_TEMPLATE: 6
};
gui.AnnotatableCanvas = function () {};
gui.AnnotatableCanvas.prototype.refreshSize = function () {};
gui.AnnotatableCanvas.prototype.getZoomLevel = function () {};
gui.AnnotatableCanvas.prototype.getSizer = function () {};
gui.AnnotationViewManager = function (P, X, I, y) {
  function w(m) {
    var l = m.annotationEndElement;
    var M = S.createRange();
    var O = m.getAttributeNS(odf.Namespaces.officens, "name");
    if (l) {
      M.setStart(m, m.childNodes.length);
      M.setEnd(l, 0);
      (m = s.getTextNodes(M, false)).forEach(function (q) {
        var ee;
        e: {
          for (ee = q.parentNode; ee.namespaceURI !== odf.Namespaces.officens || ee.localName !== "body";) {
            if (ee.namespaceURI === "http://www.w3.org/1999/xhtml" && ee.className === "webodf-annotationHighlight" && ee.getAttribute("annotation") === O) {
              ee = true;
              break e;
            }
            ee = ee.parentNode;
          }
          ee = false;
        }
        if (!ee) {
          (ee = S.createElement("span")).className = "webodf-annotationHighlight";
          ee.setAttribute("annotation", O);
          q.parentNode.replaceChild(ee, q);
          ee.appendChild(q);
        }
      });
    }
    M.detach();
  }
  function E(m) {
    var l = P.getSizer();
    if (m) {
      I.style.display = "inline-block";
      l.style.paddingRight = u.getComputedStyle(I).width;
    } else {
      I.style.display = "none";
      l.style.paddingRight = 0;
    }
    P.refreshSize();
  }
  function C() {
    var m;
    for (m = 0; m < x.length; m += 1) {
      var l = (O = x[m]).parentNode;
      var M = (q = l.nextElementSibling).nextElementSibling;
      var $ = l.parentNode;
      var ee = 0;
      var G = void (ee = x[x.indexOf(O) - 1]);
      var O = P.getZoomLevel();
      l.style.left = (I.getBoundingClientRect().left - $.getBoundingClientRect().left) / O + "px";
      l.style.width = I.getBoundingClientRect().width / O + "px";
      q.style.width = parseFloat(l.style.left) - 30 + "px";
      if (ee) {
        G = ee.parentNode.getBoundingClientRect();
        l.style.top = ($.getBoundingClientRect().top - G.bottom) / O <= 20 ? Math.abs($.getBoundingClientRect().top - G.bottom) / O + 20 + "px" : "0px";
      } else {
        l.style.top = "0px";
      }
      M.style.left = q.getBoundingClientRect().width / O + "px";
      var q = M.style;
      $ = M.getBoundingClientRect().left / O;
      ee = M.getBoundingClientRect().top / O;
      var A = 0;
      var H = 0;
      A = (A = (G = l.getBoundingClientRect().left / O) - $) * A;
      H = (H = l.getBoundingClientRect().top / O - ee) * H;
      $ = Math.sqrt(A + H);
      q.width = $ + "px";
      ee = Math.asin((l.getBoundingClientRect().top - M.getBoundingClientRect().top) / (O * parseFloat(M.style.width)));
      M.style.transform = "rotate(" + ee + "rad)";
      M.style.MozTransform = "rotate(" + ee + "rad)";
      M.style.WebkitTransform = "rotate(" + ee + "rad)";
      M.style.msTransform = "rotate(" + ee + "rad)";
    }
  }
  function N(m) {
    var l = x.indexOf(m);
    if ((M = m.parentNode.parentNode).localName === "div") {
      M.parentNode.insertBefore(m, M);
      M.parentNode.removeChild(M);
    }
    m = m.getAttributeNS(odf.Namespaces.officens, "name");
    m = S.querySelectorAll("span.webodf-annotationHighlight[annotation=\"" + m + "\"]");
    for (var O, M = 0; M < m.length; M += 1) {
      for (O = m.item(M); O.firstChild;) {
        O.parentNode.insertBefore(O.firstChild, O);
      }
      O.parentNode.removeChild(O);
    }
    if (l !== -1) {
      x.splice(l, 1);
    }
    if (x.length === 0) {
      E(false);
    }
  }
  var x = [];
  var S = X.ownerDocument;
  var s = odf.OdfUtils;
  var u = runtime.getWindow();
  runtime.assert(Boolean(u), "Expected to be run in an environment which has a global window, like a browser.");
  this.rerenderAnnotations = C;
  this.rehighlightAnnotations = function () {
    x.forEach(function (m) {
      w(m);
    });
  };
  this.getMinimumHeightForAnnotationPane = function () {
    if (I.style.display !== "none" && x.length > 0) {
      return (x[x.length - 1].parentNode.getBoundingClientRect().bottom - I.getBoundingClientRect().top) / P.getZoomLevel() + "px";
    } else {
      return null;
    }
  };
  this.addAnnotations = function (m) {
    if (m.length !== 0) {
      E(true);
      m.forEach(function (l) {
        x.push(l);
        var G;
        var M = S.createElement("div");
        var O = S.createElement("div");
        var q = S.createElement("div");
        var ee = S.createElement("div");
        M.className = "annotationWrapper";
        M.setAttribute("creator", s.getAnnotationCreator(l));
        l.parentNode.insertBefore(M, l);
        O.className = "annotationNote";
        O.appendChild(l);
        if (y) {
          (G = S.createElement("div")).className = "annotationRemoveButton";
          O.appendChild(G);
        }
        q.className = "annotationConnector horizontal";
        ee.className = "annotationConnector angular";
        M.appendChild(O);
        M.appendChild(q);
        M.appendChild(ee);
        if (l.annotationEndElement) {
          w(l);
        }
      });
      (function R() {
        x.sort(function (m, l) {
          if ((m.compareDocumentPosition(l) & Node.DOCUMENT_POSITION_FOLLOWING) != 0) {
            return -1;
          } else {
            return 1;
          }
        });
      })();
      C();
    }
  };
  this.forgetAnnotation = N;
  this.forgetAnnotations = function () {
    for (; x.length;) {
      N(x[0]);
    }
  };
};
gui.Viewport = function () {};
gui.Viewport.prototype.scrollIntoView = function (P, X) {};
gui.SingleScrollViewport = function (P) {
  this.scrollIntoView = function (X, I) {
    var y;
    var w;
    var E;
    var R;
    R = P.offsetHeight - P.clientHeight;
    E = P.offsetWidth - P.clientWidth;
    var C = P.getBoundingClientRect();
    if (X && C) {
      y = C.left + 5;
      w = C.top + 5;
      E = C.right - (E + 5);
      R = C.bottom - (R + 5);
      if (I || X.top < w) {
        P.scrollTop -= w - X.top;
      } else if (X.top > R || X.bottom > R) {
        P.scrollTop = X.bottom - X.top <= R - w ? P.scrollTop + (X.bottom - R) : P.scrollTop + (X.top - w);
      }
      if (X.left < y) {
        P.scrollLeft -= y - X.left;
      } else if (X.right > E) {
        P.scrollLeft = X.right - X.left <= E - y ? P.scrollLeft + (X.right - E) : P.scrollLeft - (y - X.left);
      }
    }
  };
};
(function () {
  function P(w, E, R, C, N) {
    var x;
    var s;
    var S = 0;
    for (s in w) {
      if (w.hasOwnProperty(s)) {
        if (S === R) {
          x = s;
          break;
        }
        S += 1;
      }
    }
    if (x) {
      E.getPartData(w[x].href, function (u, m) {
        if (u) {
          runtime.log(u);
        } else if (m) {
          var l = "@font-face { font-family: " + (w[x].family || x) + "; src: url(data:application/x-font-ttf;charset=binary;base64," + y.convertUTF8ArrayToBase64(m) + ") format(\"truetype\"); }";
          try {
            C.insertRule(l, C.cssRules.length);
          } catch (M) {
            runtime.log("Problem inserting rule in CSS: " + runtime.toJson(M) + "\nRule: " + l);
          }
        } else {
          runtime.log("missing font data for " + w[x].href);
        }
        P(w, E, R + 1, C, N);
      });
    } else if (N) {
      N();
    }
  }
  var X = xmldom.XPath;
  var I = odf.OdfUtils;
  var y = new core.Base64();
  odf.FontLoader = function () {
    this.loadFonts = function (w, E) {
      for (var R = w.rootElement.fontFaceDecls; E.cssRules.length;) {
        E.deleteRule(E.cssRules.length - 1);
      }
      if (R) {
        var N;
        var x;
        var S;
        var s;
        var C = {};
        if (R) {
          R = X.getODFElementsWithXPath(R, "style:font-face[svg:font-face-src]", odf.Namespaces.lookupNamespaceURI);
          N = 0;
          R = X.getODFElementsWithXPath(R, "style:font-face[svg:font-face-src]", odf.Namespaces.lookupNamespaceURI);
          N = 0;
          for (; N < R.length; N += 1) {
            S = (x = R[N]).getAttributeNS(odf.Namespaces.stylens, "name");
            s = I.getNormalizedFontFamilyName(x.getAttributeNS(odf.Namespaces.svgns, "font-family"));
            if ((x = X.getODFElementsWithXPath(x, "svg:font-face-src/svg:font-face-uri", odf.Namespaces.lookupNamespaceURI)).length > 0) {
              x = x[0].getAttributeNS(odf.Namespaces.xlinkns, "href");
              C[S] = {
                href: x,
                family: s
              };
            }
          }
        }
        P(C, w, 0, E);
      }
    };
  };
})();
odf.Formatting = function () {
  function P($) {
    if ($ = H[$]) {
      return B.mergeObjects({}, $);
    } else {
      return {};
    }
  }
  function X() {
    for (var J, Q, $ = {}, U = (U = s.rootElement.fontFaceDecls) && U.firstElementChild; U;) {
      if ((J = U.getAttributeNS(l, "name")) && ((Q = U.getAttributeNS(m, "font-family")) || U.getElementsByTagNameNS(m, "font-face-uri").length > 0)) {
        $[J] = Q;
      }
      U = U.nextElementSibling;
    }
    return $;
  }
  function I($) {
    for (var J = s.rootElement.styles.firstElementChild; J;) {
      if (J.namespaceURI === l && J.localName === "default-style" && J.getAttributeNS(l, "family") === $) {
        return J;
      }
      J = J.nextElementSibling;
    }
    return null;
  }
  function y($, J, Q) {
    var U;
    var K;
    var F;
    Q = Q || [s.rootElement.automaticStyles, s.rootElement.styles];
    F = 0;
    for (; F < Q.length; F += 1) {
      for (U = (U = Q[F]).firstElementChild; U;) {
        K = U.getAttributeNS(l, "name");
        if (U.namespaceURI === l && U.localName === "style" && U.getAttributeNS(l, "family") === J && K === $ || J === "list-style" && U.namespaceURI === M && U.localName === "list-style" && K === $ || J === "data" && U.namespaceURI === O && K === $) {
          return U;
        }
        U = U.nextElementSibling;
      }
    }
    return null;
  }
  function w($) {
    for (var J, Q, U, K, F = {}, L = $.firstElementChild; L;) {
      if (L.namespaceURI === l) {
        U = F[L.nodeName] = {};
        Q = L.attributes;
        J = 0;
        U = F[L.nodeName] = {};
        Q = L.attributes;
        J = 0;
        for (; J < Q.length; J += 1) {
          U[(K = Q.item(J)).name] = K.value;
        }
      }
      L = L.nextElementSibling;
    }
    Q = $.attributes;
    J = 0;
    for (; J < Q.length; J += 1) {
      F[(K = Q.item(J)).name] = K.value;
    }
    return F;
  }
  function E($, J) {
    for (var U, Q = s.rootElement.styles, K = {}, F = $.getAttributeNS(l, "family"), L = $; L;) {
      U = w(L);
      K = B.mergeObjects(U, K);
      L = (U = L.getAttributeNS(l, "parent-style-name")) ? y(U, F, [Q]) : null;
    }
    if (L = I(F)) {
      U = w(L);
      K = B.mergeObjects(U, K);
    }
    if (J !== false) {
      U = P(F);
      K = B.mergeObjects(U, K);
    }
    return K;
  }
  function N($, J) {
    var Q = {};
    var U = [];
    J ||= {};
    $.forEach(function (K) {
      (function R($, J) {
        for (var K, U = $.nodeType === Node.TEXT_NODE ? $.parentNode : $, F = [], L = "", ie = false; U && !ee.isInlineRoot(U) && U.parentNode !== s.rootElement;) {
          if (!ie && ee.isGroupingElement(U)) {
            ie = true;
          }
          if (K = u.determineStylesForNode(U)) {
            F.push(K);
          }
          U = U.parentNode;
        }
        if (ie) {
          F.forEach(function Q(Y) {
            Object.keys(Y).forEach(function (ne) {
              Object.keys(Y[ne]).forEach(function (le) {
                L += "|" + ne + ":" + le + "|";
              });
            });
          });
          if (J) {
            J[L] = F;
          }
        }
      })(K, Q);
    });
    Object.keys(Q).forEach(function (K) {
      J[K] ||= function C($) {
        var J = {
          orderedStyles: [],
          styleProperties: {}
        };
        $.forEach(function (Q) {
          Object.keys(Q).forEach(function (U) {
            var L;
            var K = Object.keys(Q[U])[0];
            var F = {
              name: K,
              family: U,
              displayName: undefined,
              isCommonStyle: false
            };
            if (L = y(K, U)) {
              U = E(L);
              J.styleProperties = B.mergeObjects(U, J.styleProperties);
              F.displayName = L.getAttributeNS(l, "display-name") || undefined;
              F.isCommonStyle = L.parentNode === s.rootElement.styles;
            } else {
              runtime.log("No style element found for '" + K + "' of family '" + U + "'");
            }
            J.orderedStyles.push(F);
          });
        });
        return J;
      }(Q[K]);
      U.push(J[K]);
    });
    return U;
  }
  function x($) {
    for (var J = s.rootElement.masterStyles.firstElementChild; J && (J.namespaceURI !== l || J.localName !== "master-page" || J.getAttributeNS(l, "name") !== $);) {
      J = J.nextElementSibling;
    }
    return J;
  }
  function S($, J) {
    var Q;
    if ($) {
      Q = A.convertMeasure($, "px");
    }
    if (Q === undefined && J) {
      Q = A.convertMeasure(J, "px");
    }
    return Q;
  }
  var s;
  var u = new odf.StyleInfo();
  var m = odf.Namespaces.svgns;
  var l = odf.Namespaces.stylens;
  var M = odf.Namespaces.textns;
  var O = odf.Namespaces.numberns;
  var q = odf.Namespaces.fons;
  var ee = odf.OdfUtils;
  var G = core.DomUtils;
  var B = new core.Utils();
  var A = new core.CSSUnits();
  var H = {
    paragraph: {
      "style:paragraph-properties": {
        "fo:text-align": "left"
      }
    }
  };
  this.getSystemDefaultStyleAttributes = P;
  this.setOdfContainer = function ($) {
    s = $;
  };
  this.getFontMap = X;
  this.getAvailableParagraphStyles = function () {
    for (var $, J, Q = [], U = (U = s.rootElement.styles) && U.firstElementChild; U;) {
      if (U.localName === "style" && U.namespaceURI === l && ($ = U.getAttributeNS(l, "family")) === "paragraph") {
        $ = U.getAttributeNS(l, "name");
        J = U.getAttributeNS(l, "display-name") || $;
        if ($ && J) {
          Q.push({
            name: $,
            displayName: J
          });
        }
      }
      U = U.nextElementSibling;
    }
    return Q;
  };
  this.isStyleUsed = function ($) {
    var J;
    var Q = s.rootElement;
    J = u.hasDerivedStyles(Q, odf.Namespaces.lookupNamespaceURI, $);
    $ = new u.UsedStyleList(Q.styles).uses($) || new u.UsedStyleList(Q.automaticStyles).uses($) || new u.UsedStyleList(Q.body).uses($);
    return J || $;
  };
  this.getDefaultStyleElement = I;
  this.getStyleElement = y;
  this.getStyleAttributes = w;
  this.getInheritedStyleAttributes = E;
  this.getFirstCommonParentStyleNameOrSelf = function ($) {
    var Q;
    var J = s.rootElement.styles;
    if ((Q = y($, "paragraph", [s.rootElement.automaticStyles])) && !($ = Q.getAttributeNS(l, "parent-style-name"))) {
      return null;
    } else if (Q = y($, "paragraph", [J])) {
      return $;
    } else {
      return null;
    }
  };
  this.hasParagraphStyle = function ($) {
    return Boolean(y($, "paragraph"));
  };
  this.getAppliedStyles = N;
  this.getAppliedStylesForElement = function ($, J) {
    return N([$], J)[0];
  };
  this.updateStyle = function ($, J) {
    var Q;
    var U;
    G.mapObjOntoNode($, J, odf.Namespaces.lookupNamespaceURI);
    if ((Q = (Q = J["style:text-properties"]) && Q["style:font-name"]) && !X().hasOwnProperty(Q)) {
      (U = $.ownerDocument.createElementNS(l, "style:font-face")).setAttributeNS(l, "style:name", Q);
      U.setAttributeNS(m, "svg:font-family", Q);
      s.rootElement.fontFaceDecls.appendChild(U);
    }
  };
  this.createDerivedStyleObject = function ($, J, Q) {
    var U = y($, J);
    runtime.assert(Boolean(U), "No style element found for '" + $ + "' of family '" + J + "'");
    ($ = U.parentNode === s.rootElement.styles ? {
      "style:parent-style-name": $
    } : w(U))["style:family"] = J;
    B.mergeObjects($, Q);
    return $;
  };
  this.getDefaultTabStopDistance = function () {
    for (var J, $ = ($ = I("paragraph")) && $.firstElementChild; $;) {
      if ($.namespaceURI === l && $.localName === "paragraph-properties") {
        J = $.getAttributeNS(l, "tab-stop-distance");
      }
      $ = $.nextElementSibling;
    }
    J ||= "1.25cm";
    return ee.parseNonNegativeLength(J);
  };
  this.getMasterPageElement = x;
  this.getContentSize = function ($, J) {
    var Q;
    var U;
    var K;
    var F;
    var L;
    var ie;
    var Y;
    var ne;
    var le;
    var ge;
    e: {
      U = y($, J);
      runtime.assert(J === "paragraph" || J === "table", "styleFamily must be either paragraph or table");
      if (U && ((U = U.getAttributeNS(l, "master-page-name")) && ((Q = x(U)) || runtime.log("WARN: No master page definition found for " + U)), Q ||= x("Standard"), (Q ||= s.rootElement.masterStyles.getElementsByTagNameNS(l, "master-page")[0]) || runtime.log("WARN: Document has no master pages defined"), Q)) {
        U = Q.getAttributeNS(l, "page-layout-name");
        K = s.rootElement.automaticStyles.getElementsByTagNameNS(l, "page-layout");
        F = 0;
        U = Q.getAttributeNS(l, "page-layout-name");
        K = s.rootElement.automaticStyles.getElementsByTagNameNS(l, "page-layout");
        F = 0;
        for (; F < K.length; F += 1) {
          if ((Q = K.item(F)).getAttributeNS(l, "name") === U) {
            break e;
          }
        }
      }
      Q = null;
    }
    Q ||= G.getDirectChild(s.rootElement.styles, l, "default-page-layout");
    if (Q = G.getDirectChild(Q, l, "page-layout-properties")) {
      if (Q.getAttributeNS(l, "print-orientation") === "landscape") {
        U = "29.7cm";
        K = "21.001cm";
      } else {
        U = "21.001cm";
        K = "29.7cm";
      }
      U = S(Q.getAttributeNS(q, "page-width"), U);
      K = S(Q.getAttributeNS(q, "page-height"), K);
      if ((F = S(Q.getAttributeNS(q, "margin"))) === undefined) {
        F = S(Q.getAttributeNS(q, "margin-left"), "2cm");
        L = S(Q.getAttributeNS(q, "margin-right"), "2cm");
        ie = S(Q.getAttributeNS(q, "margin-top"), "2cm");
        Y = S(Q.getAttributeNS(q, "margin-bottom"), "2cm");
      } else {
        F = L = ie = Y = F;
      }
      if ((ne = S(Q.getAttributeNS(q, "padding"))) === undefined) {
        ne = S(Q.getAttributeNS(q, "padding-left"), "0cm");
        le = S(Q.getAttributeNS(q, "padding-right"), "0cm");
        ge = S(Q.getAttributeNS(q, "padding-top"), "0cm");
        Q = S(Q.getAttributeNS(q, "padding-bottom"), "0cm");
      } else {
        ne = le = ge = Q = ne;
      }
    } else {
      U = S("21.001cm");
      K = S("29.7cm");
      F = L = ie = Y = F = S("2cm");
      ne = le = ge = Q = ne = S("0cm");
    }
    return {
      width: U - F - L - ne - le,
      height: K - ie - Y - ge - Q
    };
  };
};
(function () {
  var P = odf.Namespaces.stylens;
  var X = odf.Namespaces.textns;
  var I = {
    graphic: "draw",
    "drawing-page": "draw",
    paragraph: "text",
    presentation: "presentation",
    ruby: "text",
    section: "text",
    table: "table",
    "table-cell": "table",
    "table-column": "table",
    "table-row": "table",
    text: "text",
    list: "text",
    page: "office"
  };
  odf.StyleTreeNode = function (y) {
    this.derivedStyles = {};
    this.element = y;
  };
  odf.StyleTree = function (y, w) {
    function E(S) {
      var s;
      var u;
      var m;
      var l = {};
      if (!S) {
        return l;
      }
      for (S = S.firstElementChild; S;) {
        if (u = S.namespaceURI !== P || S.localName !== "style" && S.localName !== "default-style" ? S.namespaceURI === X && S.localName === "list-style" ? "list" : S.namespaceURI !== P || S.localName !== "page-layout" && S.localName !== "default-page-layout" ? undefined : "page" : S.getAttributeNS(P, "family")) {
          if (!(s = S.getAttributeNS(P, "name"))) {
            s = "";
          }
          if (l.hasOwnProperty(u)) {
            m = l[u];
          } else {
            l[u] = m = {};
          }
          m[s] = S;
        }
        S = S.nextElementSibling;
      }
      return l;
    }
    function R(S, s) {
      if (S.hasOwnProperty(s)) {
        return S[s];
      }
      var l;
      var u = null;
      var m = Object.keys(S);
      for (l = 0; l < m.length && !(u = R(S[m[l]].derivedStyles, s)); l += 1);
      return u;
    }
    function C(S, s, u) {
      var m;
      var l;
      var M;
      if (s.hasOwnProperty(S)) {
        M = null;
        if (l = (m = new odf.StyleTreeNode(s[S])).element.getAttributeNS(P, "parent-style-name")) {
          M = R(u, l) || C(l, s, u);
        }
        if (M) {
          M.derivedStyles[S] = m;
        } else {
          u[S] = m;
        }
        delete s[S];
        return m;
      } else {
        return null;
      }
    }
    function N(S, s) {
      if (S) {
        Object.keys(S).forEach(function (u) {
          C(u, S, s);
        });
      }
    }
    var S;
    var s;
    var u;
    var x = {};
    this.getStyleTree = function () {
      return x;
    };
    s = E(y);
    u = E(w);
    Object.keys(I).forEach(function (m) {
      S = x[m] = {};
      N(s[m], S);
      N(u[m], S);
    });
  };
})();
(function () {
  function P(N, x) {
    try {
      N.insertRule(x, N.cssRules.length);
    } catch (S) {
      runtime.log("cannot load rule: " + x + " - " + S);
    }
  }
  function X(N, x) {
    this.listCounterCount = 0;
    this.contentRules = N;
    this.counterIdStack = [];
    this.continuedCounterIdStack = x;
  }
  function I(N) {
    function x(m, l, M, O) {
      var ee = l.namespaceURI === E && l.localName === "list-item";
      if ((q = l.namespaceURI === E && l.localName === "list") || ee) {
        if (q) {
          var G;
          var B;
          var A;
          var q = M += 1;
          O.listCounterCount += 1;
          l.setAttributeNS("urn:webodf:names:helper", "counter-id", ee = m + "-level" + q + "-" + O.listCounterCount);
          if (!(G = O.continuedCounterIdStack.shift())) {
            s += ee + " 1 ";
            B = "text|list[webodfhelper|counter-id=\"" + ee + "\"] > text|list-item:first-child > :not(text|list):first-child:before";
            B += "{";
            B += "counter-increment: " + (G = ee) + " 0;";
            P(N, B += "}");
          }
          for (; O.counterIdStack.length >= q;) {
            O.counterIdStack.pop();
          }
          O.counterIdStack.push(G);
          A = O.contentRules[q.toString()] || "";
          B = 1;
          for (; B <= q; B += 1) {
            A = A.replace(B + "webodf-listLevel", O.counterIdStack[B - 1]);
          }
          B = "text|list[webodfhelper|counter-id=\"" + ee + "\"] > text|list-item > :not(text|list):first-child:before";
          B += "{";
          B += A;
          B += "counter-increment: " + G + ";";
          P(N, B += "}");
        }
        for (l = l.firstElementChild; l;) {
          x(m, l, M, O);
          l = l.nextElementSibling;
        }
      } else {
        O.continuedCounterIdStack = [];
      }
    }
    var S = 0;
    var s = "";
    var u = {};
    this.createCounterRules = function (m, l, M) {
      var O = l.getAttributeNS(R, "id");
      var q = [];
      if (M) {
        M = M.getAttributeNS("urn:webodf:names:helper", "counter-id");
        q = u[M].slice(0);
      }
      m = new X(m, q);
      x(O = O ? "Y" + O : "X" + (S += 1), l, 0, m);
      u[O + "-level1-1"] = m.counterIdStack;
    };
    this.initialiseCreatedCounters = function () {
      var m;
      m = "office|document{counter-reset: " + s + ";";
      P(N, m += "}");
    };
  }
  var y = odf.Namespaces.fons;
  var w = odf.Namespaces.stylens;
  var E = odf.Namespaces.textns;
  var R = odf.Namespaces.xmlns;
  var C = {
    1: "decimal",
    a: "lower-latin",
    A: "upper-latin",
    i: "lower-roman",
    I: "upper-roman"
  };
  odf.ListStyleToCss = function () {
    function N(l) {
      var M = m.parseLength(l);
      if (M) {
        return u.convert(M.value, M.unit, "px");
      } else {
        runtime.log("Could not parse value '" + l + "'.");
        return 0;
      }
    }
    function x(l) {
      return l.replace(/\\/g, "\\\\").replace(/"/g, "\\\"");
    }
    function S(l, M) {
      var O;
      if (l) {
        O = l.getAttributeNS(E, "style-name");
      }
      return O === M;
    }
    var u = new core.CSSUnits();
    var m = odf.OdfUtils;
    this.applyListStyles = function (l, M, O) {
      var q;
      if (q = M.list) {
        Object.keys(q).forEach(function (G) {
          for (var B = q[G].element.firstElementChild; B;) {
            if (B.namespaceURI === E) {
              var A = l;
              var H = B;
              var $ = "text|list[text|style-name=\"" + G + "\"]";
              var J = H.getAttributeNS(E, "level");
              var le = undefined;
              var Q = undefined;
              var Y = Q = undefined;
              var ne = undefined;
              var U = undefined;
              var K = le = undefined;
              var F = undefined;
              var L = undefined;
              var ie = undefined;
              ne = undefined;
              Y = (Q = H.getElementsByTagNameNS(w, "list-level-properties")[0]) && Q.getAttributeNS(E, "list-level-position-and-space-mode");
              ne = Q && Q.getElementsByTagNameNS(w, "list-level-label-alignment")[0];
              le = J = J && parseInt(J, 10);
              for (; le > 1;) {
                $ += " > text|list-item > text|list";
                --le;
              }
              switch (le = Q && Q.getAttributeNS(y, "text-align") || "left") {
                case "end":
                  le = "right";
                  break;
                case "start":
                  le = "left";
              }
              if (Y === "label-alignment") {
                U = ne && ne.getAttributeNS(y, "margin-left") || "0px";
                L = ne && ne.getAttributeNS(y, "text-indent") || "0px";
                ie = ne && ne.getAttributeNS(E, "label-followed-by");
                ne = N(U);
              } else {
                U = Q && Q.getAttributeNS(E, "space-before") || "0px";
                K = Q && Q.getAttributeNS(E, "min-label-width") || "0px";
                F = Q && Q.getAttributeNS(E, "min-label-distance") || "0px";
                ne = N(U) + N(K);
              }
              Q = $ + " > text|list-item";
              Q += "{";
              Q += "margin-left: " + ne + "px;";
              P(A, Q += "}");
              Q = $ + " > text|list-item > text|list";
              Q += "{";
              Q += "margin-left: " + -ne + "px;";
              P(A, Q += "}");
              Q = $ + " > text|list-item > :not(text|list):first-child:before";
              Q += "{";
              Q += "text-align: " + le + ";";
              Q += "display: inline-block;";
              if (Y === "label-alignment") {
                Q += "margin-left: " + L + ";";
                if (ie === "listtab") {
                  Q += "padding-right: 0.2cm;";
                }
              } else {
                Q += "min-width: " + K + ";";
                Q += "margin-left: " + (parseFloat(K) === 0 ? "" : "-") + K + ";";
                Q += "padding-right: " + F + ";";
              }
              P(A, Q += "}");
            }
            B = B.nextElementSibling;
          }
        });
      }
      (function s(l, M, O) {
        M = M.getElementsByTagNameNS(E, "list");
        l = new I(l);
        var q;
        var ee;
        var G;
        var B;
        var A;
        var H;
        var J;
        var $ = {};
        for (J = 0; J < M.length; J += 1) {
          if (H = (q = M.item(J)).getAttributeNS(E, "style-name")) {
            G = q.getAttributeNS(E, "continue-numbering");
            B = q.getAttributeNS(E, "continue-list");
            if (A = q.getAttributeNS(R, "id")) {
              $[A] = q;
            }
            A = O[H].element.firstElementChild;
            for (var Q = undefined, U = {}; A;) {
              Q = (Q = A.getAttributeNS(E, "level")) && parseInt(Q, 10);
              var K = A;
              var F = "";
              var L = undefined;
              var ie = undefined;
              var Y = L = undefined;
              if (K.localName === "list-level-style-number") {
                F = (ge = K).getAttributeNS(w, "num-format");
                L = ge.getAttributeNS(w, "num-suffix") || "";
                ie = ge.getAttributeNS(w, "num-prefix") || "";
                var ne = "";
                var le = ge.getAttributeNS(E, "level");
                var ge = ge.getAttributeNS(E, "display-levels");
                if (ie) {
                  ne += "\"" + x(ie) + "\"\n";
                }
                if (C.hasOwnProperty(F)) {
                  le = le ? parseInt(le, 10) : 1;
                  ge = ge ? parseInt(ge, 10) : 1;
                  le = le ? parseInt(le, 10) : 1;
                  ge = ge ? parseInt(ge, 10) : 1;
                  for (; ge > 0;) {
                    ne += " counter(" + (le - ge + 1) + "webodf-listLevel," + C[F] + ")";
                    if (ge > 1) {
                      ne += "\".\"";
                    }
                    --ge;
                  }
                } else {
                  ne = F ? ne + " \"" + F + "\"" : ne + " \"\"";
                }
                F = "content:" + ne + " \"" + x(L) + "\"";
              } else if (K.localName === "list-level-style-image") {
                F = "content: none";
              } else if (K.localName === "list-level-style-bullet") {
                F = "content: \"" + x(F = K.getAttributeNS(E, "bullet-char")) + "\"";
              }
              if ((L = K.getElementsByTagNameNS(w, "list-level-properties")[0]) && (ie = L.getAttributeNS(E, "list-level-position-and-space-mode")) === "label-alignment") {
                if (L = L.getElementsByTagNameNS(w, "list-level-label-alignment")[0]) {
                  Y = L.getAttributeNS(E, "label-followed-by");
                }
                if (Y === "space") {
                  F += " \"\\a0\"";
                }
              }
              U[Q] = "\n" + F + ";\n";
              A = A.nextElementSibling;
            }
            A = U;
            if (G && !B && S(ee, H)) {
              l.createCounterRules(A, q, ee);
            } else if (B && S($[B], H)) {
              l.createCounterRules(A, q, $[B]);
            } else {
              l.createCounterRules(A, q);
            }
            ee = q;
          }
        }
        l.initialiseCreatedCounters();
      })(l, O, q);
    };
  };
})();
odf.LazyStyleProperties = function (P, X) {
  var I = {};
  this.value = function (y) {
    var w;
    if (I.hasOwnProperty(y)) {
      w = I[y];
    } else {
      if ((w = X[y]()) === undefined && P) {
        w = P.value(y);
      }
      I[y] = w;
    }
    return w;
  };
  this.reset = function (y) {
    P = y;
    I = {};
  };
};
odf.StyleParseUtils = function () {
  function P(I) {
    var y;
    var w;
    if ((w = (I = (I = /(-?[0-9]*[0-9][0-9]*(\.[0-9]*)?|0+\.[0-9]*[1-9][0-9]*|\.[0-9]*[1-9][0-9]*)((cm)|(mm)|(in)|(pt)|(pc)|(px))/.exec(I)) ? {
      value: parseFloat(I[1]),
      unit: I[3]
    } : null) && I.unit) === "px") {
      y = I.value;
    } else if (w === "cm") {
      y = I.value / 2.54 * 96;
    } else if (w === "mm") {
      y = I.value / 25.4 * 96;
    } else if (w === "in") {
      y = I.value * 96;
    } else if (w === "pt") {
      y = I.value / 0.75;
    } else if (w === "pc") {
      y = I.value * 16;
    }
    return y;
  }
  var X = odf.Namespaces.stylens;
  this.parseLength = P;
  this.parsePositiveLengthOrPercent = function (I, y, w) {
    var E;
    var R;
    if (I) {
      E = parseFloat(I.substr(0, I.indexOf("%")));
      if (isNaN(E)) {
        E = undefined;
      }
    }
    if (E !== undefined) {
      if (w) {
        R = w.value(y);
      }
      E = R === undefined ? undefined : R / 100 * E;
    } else {
      E = P(I);
    }
    return E;
  };
  this.getPropertiesElement = function (I, y, w) {
    for (y = w ? w.nextElementSibling : y.firstElementChild; y !== null && (y.localName !== I || y.namespaceURI !== X);) {
      y = y.nextElementSibling;
    }
    return y;
  };
  this.parseAttributeList = function (I) {
    I &&= I.replace(/^\s*(.*?)\s*$/g, "$1");
    if (I && I.length > 0) {
      return I.split(/\s+/);
    } else {
      return [];
    }
  };
};
odf.Style2CSS = function () {
  function P(ae, fe, Me) {
    var je = [];
    Me = Me.derivedStyles;
    var ze;
    var Ce;
    var we = q[ae];
    if (we === undefined) {
      fe = null;
    } else {
      Ce = fe ? "[" + we + "|style-name=\"" + fe + "\"]" : "";
      if (we === "presentation") {
        we = "draw";
        Ce = fe ? "[presentation|style-name=\"" + fe + "\"]" : "";
      }
      fe = we + "|" + ee[ae].join(Ce + "," + we + "|") + Ce;
    }
    if (fe !== null) {
      je.push(fe);
    }
    for (ze in Me) {
      if (Me.hasOwnProperty(ze)) {
        fe = P(ae, ze, Me[ze]);
        je = je.concat(fe);
      }
    }
    return je;
  }
  function X(ae) {
    var Me = "";
    var fe = "";
    Me = null;
    if (ae.localName === "default-style") {
      return null;
    } else {
      Me = ae.getAttributeNS(S, "parent-style-name");
      fe = ae.getAttributeNS(S, "family");
      return Me = Le.getODFElementsWithXPath(ge, Me ? "//style:*[@style:name='" + Me + "'][@style:family='" + fe + "']" : "//style:default-style[@style:family='" + fe + "']", odf.Namespaces.lookupNamespaceURI)[0];
    }
  }
  function I(ae, fe) {
    var je;
    var ze;
    var we;
    var Me = "";
    for (je = 0; je < fe.length; je += 1) {
      if (we = ae.getAttributeNS((ze = fe[je])[0], ze[1])) {
        we = we.trim();
        if (L.hasOwnProperty(ze[1])) {
          var Ce = we;
          var $e = undefined;
          we = undefined;
          if ((ye = Ce.indexOf(" ")) !== -1) {
            $e = Ce.substring(0, ye);
            we = Ce.substring(ye);
          } else {
            $e = Ce;
            we = "";
          }
          if (($e = ne.parseLength($e)) && $e.unit === "pt" && $e.value < 0.75) {
            Ce = "0.75pt" + we;
          }
          we = Ce;
        } else if (ie.hasOwnProperty(ze[1])) {
          Ce = ae;
          var ye = ze[0];
          $e = ze[1];
          var qe = ne.parseLength(we);
          var ue = undefined;
          var de = undefined;
          var xe = undefined;
          var pe = undefined;
          xe = undefined;
          if (qe && qe.unit === "%") {
            ue = qe.value / 100;
            de = X(Ce.parentNode);
            pe = "0";
            for (; de;) {
              if ((xe = M.getDirectChild(de, S, "paragraph-properties")) && (xe = ne.parseLength(xe.getAttributeNS(ye, $e)))) {
                if (xe.unit !== "%") {
                  pe = xe.value * ue + xe.unit;
                  break;
                }
                ue *= xe.value / 100;
              }
              de = X(de);
            }
            we = pe;
          }
        }
        if (ze[2]) {
          Me += ze[2] + ":" + we + ";";
        }
      }
    }
    return Me;
  }
  function y(ae, fe, Me, je) {
    return fe + fe + Me + Me + je + je;
  }
  function w(ae, fe) {
    var Me = [ae];
    var je = fe.derivedStyles;
    Object.keys(je).forEach(function (ze) {
      ze = w(ze, je[ze]);
      Me = Me.concat(ze);
    });
    return Me;
  }
  function E(ae, fe, Me, je) {
    function ze($e, qe) {
      var de;
      var ue = [];
      $e.forEach(function (pe) {
        we.forEach(function (xe) {
          ue.push("draw|page[webodfhelper|page-style-name=\"" + xe + "\"] draw|frame[presentation|class=\"" + pe + "\"]");
        });
      });
      if (ue.length > 0) {
        de = ue.join(",") + "{visibility:" + qe + ";}";
        ae.insertRule(de, ae.cssRules.length);
      }
    }
    var we = w(fe, je);
    var Ce = [];
    var ye = [];
    ["page-number", "date-time", "header", "footer"].forEach(function ($e) {
      var qe;
      if ((qe = Me.getAttributeNS(l, "display-" + $e)) === "true") {
        Ce.push($e);
      } else if (qe === "false") {
        ye.push($e);
      }
    });
    ze(Ce, "visible");
    ze(ye, "hidden");
  }
  function R(ae, fe, Me, je) {
    var ze;
    var we;
    if (fe === "page") {
      var $e;
      var qe;
      var ue;
      var Ce = je.element;
      var ye = "";
      qe = $e = "";
      if (Me = M.getDirectChild(Ce, S, "page-layout-properties")) {
        ue = Ce.getAttributeNS(S, "name");
        ye += I(Me, K);
        if (($e = M.getDirectChild(Me, S, "background-image")) && (qe = $e.getAttributeNS(m, "href"))) {
          ye = ye + "background-image: url('odfkit:" + qe + "');" + I($e, B);
        }
        if (le === "presentation") {
          for (Ce = (Ce = M.getDirectChild(Ce.parentNode.parentNode, x, "master-styles")) && Ce.firstElementChild; Ce;) {
            if (Ce.namespaceURI === S && Ce.localName === "master-page" && Ce.getAttributeNS(S, "page-layout-name") === ue) {
              $e = "draw|page[draw|master-page-name=\"" + (qe = Ce.getAttributeNS(S, "name")) + "\"] {" + ye + "}";
              qe = "office|body, draw|page[draw|master-page-name=\"" + qe + "\"] {" + I(Me, F) + " }";
              ae.insertRule($e, ae.cssRules.length);
              ae.insertRule(qe, ae.cssRules.length);
            }
            Ce = Ce.nextElementSibling;
          }
        } else if (le === "text") {
          $e = "office|text {" + ye + "}";
          qe = "office|body {width: " + Me.getAttributeNS(N, "page-width") + ";}";
          ae.insertRule($e, ae.cssRules.length);
          ae.insertRule(qe, ae.cssRules.length);
        }
      }
    } else {
      ye = P(fe, Me, je).join(",");
      ue = "";
      if (Ce = M.getDirectChild(je.element, S, "text-properties")) {
        var de = Ce;
        var pe = we = "";
        $e = "";
        qe = 1;
        Ce = "" + I(de, G);
        if ((ze = de.getAttributeNS(S, "text-underline-style")) === "solid") {
          we += " underline";
        }
        if ((ze = de.getAttributeNS(S, "text-line-through-style")) === "solid") {
          we += " line-through";
        }
        if (we.length) {
          Ce = Ce + "text-decoration:" + we + ";\ntext-decoration-line:" + we + ";\n";
          Ce += "-moz-text-decoration-line:" + we + ";\n";
        }
        switch (ze = de.getAttributeNS(S, "text-line-through-type")) {
          case "double":
            pe += " double";
            break;
          case "single":
            pe += " single";
        }
        if (pe) {
          Ce += "text-decoration-style:" + pe + ";\n";
          Ce += "-moz-text-decoration-style:" + pe + ";\n";
        }
        if (we = de.getAttributeNS(S, "font-name") || de.getAttributeNS(N, "font-family")) {
          Ce += "font-family: " + ((ze = Y[we]) || we) + ";";
        }
        if (ze = de.getAttributeNS(S, "text-position")) {
          Ce += "vertical-align: " + (ze = (we = O.parseAttributeList(ze))[0]) + "\n; ";
          if (we = we[1]) {
            qe = parseFloat(we) / 100;
          }
        }
        if (de.hasAttributeNS(N, "font-size") || qe !== 1) {
          for (de = de.parentNode; de;) {
            if (ze = (ze = M.getDirectChild(de, S, "text-properties")) ? ne.parseFoFontSize(ze.getAttributeNS(N, "font-size")) : null) {
              if (ze.unit !== "%") {
                $e = "font-size: " + ze.value * qe + ze.unit + ";";
                break;
              }
              qe *= ze.value / 100;
            }
            de = X(de);
          }
          $e ||= "font-size: " + parseFloat(Ee) * qe + Qe.getUnits(Ee) + ";";
        }
        ue += Ce += $e;
      }
      if (Ce = M.getDirectChild(je.element, S, "paragraph-properties")) {
        Ce = "" + I($e = Ce, A);
        if ((qe = M.getDirectChild($e, S, "background-image")) && (de = qe.getAttributeNS(m, "href"))) {
          Ce = Ce + "background-image: url('odfkit:" + de + "');" + I(qe, B);
        }
        if (($e = $e.getAttributeNS(N, "line-height")) && $e !== "normal") {
          Ce = ($e = ne.parseFoLineHeight($e)).unit !== "%" ? Ce + "line-height: " + $e.value + $e.unit + ";" : Ce + "line-height: " + $e.value / 100 + ";";
        }
        ue += Ce;
      }
      if (Ce = M.getDirectChild(je.element, S, "graphic-properties")) {
        Ce = "" + I(de = Ce, H);
        $e = de.getAttributeNS(C, "opacity");
        qe = de.getAttributeNS(C, "fill");
        de = de.getAttributeNS(C, "fill-color");
        if (qe === "solid" || qe === "hatch") {
          if (de && de !== "none") {
            $e = isNaN(parseFloat($e)) ? 1 : parseFloat($e) / 100;
            qe = de.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, y);
            if (de = (qe = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(qe)) ? {
              r: parseInt(qe[1], 16),
              g: parseInt(qe[2], 16),
              b: parseInt(qe[3], 16)
            } : null) {
              Ce += "background-color: rgba(" + de.r + "," + de.g + "," + de.b + "," + $e + ");";
            }
          } else {
            Ce += "background: none;";
          }
        } else if (qe === "none") {
          Ce += "background: none;";
        }
        ue += Ce;
      }
      if (Ce = M.getDirectChild(je.element, S, "drawing-page-properties")) {
        qe = "" + I($e = Ce, H);
        if ($e.getAttributeNS(l, "background-visible") === "true") {
          qe += "background: none;";
        }
        ue += qe;
        E(ae, Me, Ce, je);
      }
      if (Ce = M.getDirectChild(je.element, S, "table-cell-properties")) {
        ue = (Me = ue) + (ue = "" + I(Ce, $));
      }
      if (Ce = M.getDirectChild(je.element, S, "table-row-properties")) {
        ue = (Me = ue) + (ue = "" + I(Ce, Q));
      }
      if (Ce = M.getDirectChild(je.element, S, "table-column-properties")) {
        ue = (Me = ue) + (ue = "" + I(Ce, J));
      }
      if (Ce = M.getDirectChild(je.element, S, "table-properties")) {
        Me = ue;
        ue = "" + I(Ce, U);
        if ((Ce = Ce.getAttributeNS(u, "border-model")) === "collapsing") {
          ue += "border-collapse:collapse;";
        } else if (Ce === "separating") {
          ue += "border-collapse:separate;";
        }
        ue = Me + ue;
      }
      if (ue.length !== 0) {
        ae.insertRule(ye + "{" + ue + "}", ae.cssRules.length);
      }
    }
    for (var xe in je.derivedStyles) {
      if (je.derivedStyles.hasOwnProperty(xe)) {
        R(ae, fe, xe, je.derivedStyles[xe]);
      }
    }
  }
  var le;
  var ge;
  var Ee;
  var C = odf.Namespaces.drawns;
  var N = odf.Namespaces.fons;
  var x = odf.Namespaces.officens;
  var S = odf.Namespaces.stylens;
  var s = odf.Namespaces.svgns;
  var u = odf.Namespaces.tablens;
  var m = odf.Namespaces.xlinkns;
  var l = odf.Namespaces.presentationns;
  var M = core.DomUtils;
  var O = new odf.StyleParseUtils();
  var q = {
    graphic: "draw",
    "drawing-page": "draw",
    paragraph: "text",
    presentation: "presentation",
    ruby: "text",
    section: "text",
    table: "table",
    "table-cell": "table",
    "table-column": "table",
    "table-row": "table",
    text: "text",
    list: "text",
    page: "office"
  };
  var ee = {
    graphic: "circle connected control custom-shape ellipse frame g line measure page page-thumbnail path polygon polyline rect regular-polygon".split(" "),
    paragraph: "alphabetical-index-entry-template h illustration-index-entry-template index-source-style object-index-entry-template p table-index-entry-template table-of-content-entry-template user-index-entry-template".split(" "),
    presentation: "caption circle connector control custom-shape ellipse frame g line measure page-thumbnail path polygon polyline rect regular-polygon".split(" "),
    "drawing-page": "caption circle connector control page custom-shape ellipse frame g line measure page-thumbnail path polygon polyline rect regular-polygon".split(" "),
    ruby: ["ruby", "ruby-text"],
    section: "alphabetical-index bibliography illustration-index index-title object-index section table-of-content table-index user-index".split(" "),
    table: ["background", "table"],
    "table-cell": "body covered-table-cell even-columns even-rows first-column first-row last-column last-row odd-columns odd-rows table-cell".split(" "),
    "table-column": ["table-column"],
    "table-row": ["table-row"],
    text: "a index-entry-chapter index-entry-link-end index-entry-link-start index-entry-page-number index-entry-span index-entry-tab-stop index-entry-text index-title-template linenumbering-configuration list-level-style-number list-level-style-bullet outline-level-style span".split(" "),
    list: ["list-item"]
  };
  var G = [[N, "color", "color"], [N, "background-color", "background-color"], [N, "font-weight", "font-weight"], [N, "font-style", "font-style"]];
  var B = [[S, "repeat", "background-repeat"]];
  var A = [[N, "background-color", "background-color"], [N, "text-align", "text-align"], [N, "text-indent", "text-indent"], [N, "padding", "padding"], [N, "padding-left", "padding-left"], [N, "padding-right", "padding-right"], [N, "padding-top", "padding-top"], [N, "padding-bottom", "padding-bottom"], [N, "border-left", "border-left"], [N, "border-right", "border-right"], [N, "border-top", "border-top"], [N, "border-bottom", "border-bottom"], [N, "margin", "margin"], [N, "margin-left", "margin-left"], [N, "margin-right", "margin-right"], [N, "margin-top", "margin-top"], [N, "margin-bottom", "margin-bottom"], [N, "border", "border"]];
  var H = [[N, "background-color", "background-color"], [N, "min-height", "min-height"], [C, "stroke", "border"], [s, "stroke-color", "border-color"], [s, "stroke-width", "border-width"], [N, "border", "border"], [N, "border-left", "border-left"], [N, "border-right", "border-right"], [N, "border-top", "border-top"], [N, "border-bottom", "border-bottom"]];
  var $ = [[N, "background-color", "background-color"], [N, "border-left", "border-left"], [N, "border-right", "border-right"], [N, "border-top", "border-top"], [N, "border-bottom", "border-bottom"], [N, "border", "border"]];
  var J = [[S, "column-width", "width"]];
  var Q = [[S, "row-height", "height"], [N, "keep-together", null]];
  var U = [[S, "width", "width"], [N, "margin-left", "margin-left"], [N, "margin-right", "margin-right"], [N, "margin-top", "margin-top"], [N, "margin-bottom", "margin-bottom"]];
  var K = [[N, "background-color", "background-color"], [N, "padding", "padding"], [N, "padding-left", "padding-left"], [N, "padding-right", "padding-right"], [N, "padding-top", "padding-top"], [N, "padding-bottom", "padding-bottom"], [N, "border", "border"], [N, "border-left", "border-left"], [N, "border-right", "border-right"], [N, "border-top", "border-top"], [N, "border-bottom", "border-bottom"], [N, "margin", "margin"], [N, "margin-left", "margin-left"], [N, "margin-right", "margin-right"], [N, "margin-top", "margin-top"], [N, "margin-bottom", "margin-bottom"]];
  var F = [[N, "page-width", "width"], [N, "page-height", "height"]];
  var L = {
    border: true,
    "border-left": true,
    "border-right": true,
    "border-top": true,
    "border-bottom": true,
    "stroke-width": true
  };
  var ie = {
    margin: true,
    "margin-left": true,
    "margin-right": true,
    "margin-top": true,
    "margin-bottom": true
  };
  var Y = {};
  var ne = odf.OdfUtils;
  var Le = xmldom.XPath;
  var Qe = new core.CSSUnits();
  this.style2css = function (ae, fe, Me, je, ze) {
    function we(qe, ue) {
      Ce = "@namespace " + qe + " url(" + ue + ");";
      try {
        Me.insertRule(Ce, Me.cssRules.length);
      } catch {}
    }
    var Ce;
    var ye;
    var $e;
    for (ge = fe; Me.cssRules.length;) {
      Me.deleteRule(Me.cssRules.length - 1);
    }
    odf.Namespaces.forEachPrefix(we);
    we("webodfhelper", "urn:webodf:names:helper");
    Y = je;
    le = ae;
    Ee = runtime.getWindow().getComputedStyle(document.body, null).getPropertyValue("font-size") || "12pt";
    for ($e in q) {
      if (q.hasOwnProperty($e)) {
        for (ye in ae = ze[$e]) {
          if (ae.hasOwnProperty(ye)) {
            R(Me, $e, ye, ae[ye]);
          }
        }
      }
    }
  };
};
(function () {
  function P(X, I) {
    var y = this;
    this.getDistance = function (w) {
      var E = y.x - w.x;
      w = y.y - w.y;
      return Math.sqrt(E * E + w * w);
    };
    this.getCenter = function (w) {
      return new P((y.x + w.x) / 2, (y.y + w.y) / 2);
    };
    y.x = X;
    y.y = I;
  }
  gui.ZoomHelper = function () {
    function X(Q, U, K, F) {
      u.style.WebkitTransform = Q = F ? "translate3d(" + Q + "px, " + U + "px, 0) scale3d(" + K + ", " + K + ", 1)" : "translate(" + Q + "px, " + U + "px) scale(" + K + ")";
      u.style.MozTransform = Q;
      u.style.msTransform = Q;
      u.style.OTransform = Q;
      u.style.transform = Q;
    }
    function I(Q) {
      if (Q) {
        X(-m.x, -m.y, O, true);
      } else {
        X(0, 0, O, true);
        X(0, 0, O, false);
      }
    }
    function y(Q) {
      if (ee && $) {
        var U = ee.style.overflow;
        var K = ee.classList.contains("webodf-customScrollbars");
        if ((!Q || !K) && (!!Q || !!K)) {
          if (Q) {
            ee.classList.add("webodf-customScrollbars");
            ee.style.overflow = "hidden";
            runtime.requestAnimationFrame(function () {
              ee.style.overflow = U;
            });
          } else {
            ee.classList.remove("webodf-customScrollbars");
          }
        }
      }
    }
    function w() {
      X(-m.x, -m.y, O, true);
      ee.scrollLeft = 0;
      ee.scrollTop = 0;
      J = G.style.overflow;
      G.style.overflow = "visible";
      y(false);
    }
    function E() {
      X(0, 0, O, true);
      ee.scrollLeft = m.x;
      ee.scrollTop = m.y;
      G.style.overflow = J || "";
      y(true);
    }
    function R(Q) {
      return new P(Q.pageX - u.offsetLeft, Q.pageY - u.offsetTop);
    }
    function C(Q) {
      if (l) {
        m.x -= Q.x - l.x;
        m.y -= Q.y - l.y;
        var U = m;
        m = new P(Math.min(Math.max(U.x, u.offsetLeft), (u.offsetLeft + u.offsetWidth) * O - ee.clientWidth), Math.min(Math.max(U.y, u.offsetTop), (u.offsetTop + u.offsetHeight) * O - ee.clientHeight));
      }
      l = Q;
    }
    function N(Q) {
      var U = Q.touches.length;
      var K = U > 0 ? R(Q.touches[0]) : null;
      Q = U > 1 ? R(Q.touches[1]) : null;
      if (K && Q) {
        M = K.getDistance(Q);
        q = O;
        l = K.getCenter(Q);
        w();
        H = A.PINCH;
      } else if (K) {
        l = K;
        H = A.SCROLL;
      }
    }
    function x(Q) {
      var U = (K = Q.touches.length) > 0 ? R(Q.touches[0]) : null;
      var K = K > 1 ? R(Q.touches[1]) : null;
      if (U && K) {
        Q.preventDefault();
        if (H === A.SCROLL) {
          H = A.PINCH;
          w();
          M = U.getDistance(K);
        } else {
          Q = U.getCenter(K);
          U = U.getDistance(K) / M;
          C(Q);
          K = O;
          var F = Math.min(4, u.offsetParent.clientWidth / u.offsetWidth);
          O = q * U;
          O = Math.min(Math.max(O, F), 4);
          m.x += ((U = O / K) - 1) * (Q.x + m.x);
          m.y += (U - 1) * (Q.y + m.y);
          I(true);
        }
      } else if (U) {
        if (H === A.PINCH) {
          H = A.SCROLL;
          E();
        } else {
          C(U);
        }
      }
    }
    function S() {
      if (H === A.PINCH) {
        B.emit(gui.ZoomHelper.signalZoomChanged, O);
        E();
        I(false);
      }
      H = A.NONE;
    }
    function s() {
      if (ee) {
        ee.removeEventListener("touchstart", N, false);
        ee.removeEventListener("touchmove", x, false);
        ee.removeEventListener("touchend", S, false);
      }
    }
    var u;
    var m;
    var l;
    var M;
    var O;
    var q;
    var ee;
    var G;
    var B = new core.EventNotifier([gui.ZoomHelper.signalZoomChanged]);
    var A = {
      NONE: 0,
      SCROLL: 1,
      PINCH: 2
    };
    var H = A.NONE;
    var $ = runtime.getWindow().hasOwnProperty("ontouchstart");
    var J = "";
    this.subscribe = function (Q, U) {
      B.subscribe(Q, U);
    };
    this.unsubscribe = function (Q, U) {
      B.unsubscribe(Q, U);
    };
    this.getZoomLevel = function () {
      return O;
    };
    this.setZoomLevel = function (Q) {
      if (u) {
        O = Q;
        I(false);
        B.emit(gui.ZoomHelper.signalZoomChanged, O);
      }
    };
    this.destroy = function (Q) {
      s();
      y(false);
      Q();
    };
    this.setZoomableElement = function (Q) {
      s();
      ee = (u = Q).offsetParent;
      G = u.parentNode;
      I(false);
      if (ee) {
        ee.addEventListener("touchstart", N, false);
        ee.addEventListener("touchmove", x, false);
        ee.addEventListener("touchend", S, false);
      }
      y(true);
    };
    q = O = 1;
    m = new P(0, 0);
  };
  gui.ZoomHelper.signalZoomChanged = "zoomChanged";
})();
ops.Canvas = function () {};
ops.Canvas.prototype.getZoomLevel = function () {};
ops.Canvas.prototype.getElement = function () {};
ops.Canvas.prototype.getSizer = function () {};
ops.Canvas.prototype.getZoomHelper = function () {};
(function () {
  function P() {
    function F(Y) {
      ie = true;
      runtime.setTimeout(function () {
        try {
          Y();
        } catch (ne) {
          runtime.log(String(ne) + "\n" + ne.stack);
        }
        ie = false;
        if (L.length > 0) {
          F(L.pop());
        }
      }, 10);
    }
    var L = [];
    var ie = false;
    this.clearQueue = function () {
      L.length = 0;
    };
    this.addToQueue = function (Y) {
      if (L.length === 0 && !ie) {
        return F(Y);
      }
      L.push(Y);
    };
  }
  function X(F) {
    function L() {
      for (; ie.cssRules.length > 0;) {
        ie.deleteRule(0);
      }
      ie.insertRule("#shadowContent draw|page {display:none;}", 0);
      ie.insertRule("office|presentation draw|page {display:none;}", 1);
      ie.insertRule("#shadowContent draw|page:nth-of-type(" + Y + ") {display:block;}", 2);
      ie.insertRule("office|presentation draw|page:nth-of-type(" + Y + ") {display:block;}", 3);
    }
    var ie = F.sheet;
    var Y = 1;
    this.showFirstPage = function () {
      Y = 1;
      L();
    };
    this.showNextPage = function () {
      Y += 1;
      L();
    };
    this.showPreviousPage = function () {
      if (Y > 1) {
        --Y;
        L();
      }
    };
    this.showPage = function (ne) {
      if (ne > 0) {
        Y = ne;
        L();
      }
    };
    this.css = F;
    this.destroy = function (ne) {
      F.parentNode.removeChild(F);
      ne();
    };
  }
  function I(F) {
    for (var L = (F = F.sheet).cssRules; L.length;) {
      F.deleteRule(L.length - 1);
    }
  }
  function y(F, L, ie) {
    var Y = new odf.Style2CSS();
    var ne = new odf.ListStyleToCss();
    ie = ie.sheet;
    var le = new odf.StyleTree(F.rootElement.styles, F.rootElement.automaticStyles).getStyleTree();
    Y.style2css(F.getDocumentType(), F.rootElement, ie, L.getFontMap(), le);
    ne.applyListStyles(ie, le, F.rootElement.body);
  }
  function E(F, L, ie) {
    var ne;
    var Y = null;
    F = F.rootElement.body.getElementsByTagNameNS(Q, ie + "-decl");
    if ((ie = L.getAttributeNS(Q, "use-" + ie + "-name")) && F.length > 0) {
      for (L = 0; L < F.length; L += 1) {
        if ((ne = F[L]).getAttributeNS(Q, "name") === ie) {
          Y = ne.textContent;
          break;
        }
      }
    }
    return Y;
  }
  function R(F, L, ie, Y) {
    var ne = F.ownerDocument;
    L = K.getElementsByTagNameNS(F, L, ie);
    F = 0;
    for (; F < L.length; F += 1) {
      K.removeAllChildNodes(L[F]);
      if (Y) {
        (ie = L[F]).appendChild(ne.createTextNode(Y));
      }
    }
  }
  function C(F, L, ie) {
    L.setAttributeNS("urn:webodf:names:helper", "styleid", F);
    var Y;
    var ne = L.getAttributeNS($, "anchor-type");
    var le = L.getAttributeNS(A, "x");
    var ge = L.getAttributeNS(A, "y");
    var Ee = L.getAttributeNS(A, "width");
    var Le = L.getAttributeNS(A, "height");
    var Qe = L.getAttributeNS(ee, "min-height");
    var ae = L.getAttributeNS(ee, "min-width");
    if (ne === "as-char") {
      Y = "display: inline-block;";
    } else if (ne || le || ge) {
      Y = "position: absolute;";
    } else if (Ee || Le || Qe || ae) {
      Y = "display: block;";
    }
    if (le) {
      Y += "left: " + le + ";";
    }
    if (ge) {
      Y += "top: " + ge + ";";
    }
    if (Ee) {
      Y += "width: " + Ee + ";";
    }
    if (Le) {
      Y += "height: " + Le + ";";
    }
    if (Qe) {
      Y += "min-height: " + Qe + ";";
    }
    if (ae) {
      Y += "min-width: " + ae + ";";
    }
    if (Y) {
      ie.insertRule(Y = "draw|" + L.localName + "[webodfhelper|styleid=\"" + F + "\"] {" + Y + "}", ie.cssRules.length);
    }
  }
  function N(F) {
    for (F = F.firstChild; F;) {
      if (F.namespaceURI === G && F.localName === "binary-data") {
        return "data:image/png;base64," + F.textContent.replace(/[\r\n\s]/g, "");
      }
      F = F.nextSibling;
    }
    return "";
  }
  function x(F, L, ie, Y) {
    function ne(Le) {
      if (Le) {
        Y.insertRule(Le = "draw|image[webodfhelper|styleid=\"" + F + "\"] {background-image: url(" + Le + ");}", Y.cssRules.length);
      }
    }
    ie.setAttributeNS("urn:webodf:names:helper", "styleid", F);
    var Ee;
    var ge = ie.getAttributeNS(J, "href");
    if (ge) {
      try {
        (Ee = L.getPart(ge)).onchange = function le(Le) {
          ne(Le.url);
        };
        Ee.load();
      } catch (Le) {
        runtime.log("slight problem: " + String(Le));
      }
    } else {
      ne(ge = N(ie));
    }
  }
  function O(F) {
    var L = F.getElementsByTagName("head")[0];
    var ie = F.createElementNS(L.namespaceURI, "style");
    var Y = "";
    ie.setAttribute("type", "text/css");
    ie.setAttribute("media", "screen, print, handheld, projection");
    odf.Namespaces.forEachPrefix(function (ne, le) {
      Y += "@namespace " + ne + " url(" + le + ");\n";
    });
    ie.appendChild(F.createTextNode(Y += "@namespace webodfhelper url(urn:webodf:names:helper);\n"));
    L.appendChild(ie);
    return ie;
  }
  var q = odf.Namespaces.drawns;
  var ee = odf.Namespaces.fons;
  var G = odf.Namespaces.officens;
  var B = odf.Namespaces.stylens;
  var A = odf.Namespaces.svgns;
  var H = odf.Namespaces.tablens;
  var $ = odf.Namespaces.textns;
  var J = odf.Namespaces.xlinkns;
  var Q = odf.Namespaces.presentationns;
  var U = xmldom.XPath;
  var K = core.DomUtils;
  odf.OdfCanvas = function (F, L) {
    function ne() {
      var Ze;
      Ze = ze.firstChild;
      var it = ct.getZoomLevel();
      if (Ze) {
        ze.style.WebkitTransformOrigin = "0% 0%";
        ze.style.MozTransformOrigin = "0% 0%";
        ze.style.msTransformOrigin = "0% 0%";
        ze.style.OTransformOrigin = "0% 0%";
        ze.style.transformOrigin = "0% 0%";
        if ($e) {
          if (Ze = $e.getMinimumHeightForAnnotationPane()) {
            ze.style.minHeight = Ze;
          } else {
            ze.style.removeProperty("min-height");
          }
        }
        F.style.width = Math.round(it * ze.offsetWidth) + "px";
        F.style.height = Math.round(it * ze.offsetHeight) + "px";
        F.style.display = "inline-block";
      }
    }
    function le(Ze, it) {
      var vt = pe.sheet;
      K.removeAllChildNodes(F);
      (ze = ae.createElementNS(F.namespaceURI, "div")).style.display = "inline-block";
      ze.style.background = "white";
      ze.style.setProperty("float", "left", "important");
      ze.appendChild(it);
      F.appendChild(ze);
      (we = ae.createElementNS(F.namespaceURI, "div")).id = "annotationsPane";
      (xe = ae.createElementNS(F.namespaceURI, "div")).id = "shadowContent";
      xe.style.position = "absolute";
      xe.style.top = 0;
      xe.style.left = 0;
      Ze.getContentElement().appendChild(xe);
      var gt;
      var et;
      var nt = it.body;
      var Ye = [];
      for (gt = nt.firstElementChild; gt && gt !== nt;) {
        if (gt.namespaceURI === q) {
          Ye[Ye.length] = gt;
        }
        if (gt.firstElementChild) {
          gt = gt.firstElementChild;
        } else {
          for (; gt && gt !== nt && !gt.nextElementSibling;) {
            gt = gt.parentNode;
          }
          if (gt && gt.nextElementSibling) {
            gt = gt.nextElementSibling;
          }
        }
      }
      for (et = 0; et < Ye.length; et += 1) {
        gt = Ye[et];
        C("frame" + String(et), gt, vt);
      }
      Ye = U.getODFElementsWithXPath(nt, ".//*[*[@text:anchor-type='paragraph']]", odf.Namespaces.lookupNamespaceURI);
      gt = 0;
      for (; gt < Ye.length; gt += 1) {
        if ((nt = Ye[gt]).setAttributeNS) {
          nt.setAttributeNS("urn:webodf:names:helper", "containsparagraphanchor", true);
        }
      }
      nt = Me;
      gt = xe;
      var Et;
      var Ct;
      var Nt;
      var Ie;
      var Be;
      var me = 0;
      et = Ze.rootElement.ownerDocument;
      if ((Ye = it.body.firstElementChild) && Ye.namespaceURI === G && (Ye.localName === "presentation" || Ye.localName === "drawing")) {
        for (Ye = Ye.firstElementChild; Ye;) {
          if (Et = (Et = Ye.getAttributeNS(q, "master-page-name")) ? nt.getMasterPageElement(Et) : null) {
            Ct = Ye.getAttributeNS("urn:webodf:names:helper", "styleid");
            Nt = et.createElementNS(q, "draw:page");
            Be = Et.firstElementChild;
            me = 0;
            for (; Be;) {
              if (Be.getAttributeNS(Q, "placeholder") !== "true") {
                Ie = Be.cloneNode(true);
                Nt.appendChild(Ie);
              }
              Be = Be.nextElementSibling;
              me += 1;
            }
            Be = Ie = me = undefined;
            var se = K.getElementsByTagNameNS(Nt, q, "frame");
            for (me = 0; me < se.length; me += 1) {
              if ((Be = (Ie = se[me]).getAttributeNS(Q, "class")) && !/^(date-time|footer|header|page-number)$/.test(Be)) {
                Ie.parentNode.removeChild(Ie);
              }
            }
            Ie = K.getElementsByTagNameNS(Nt, q, "*");
            me = 0;
            for (; me < Ie.length; me += 1) {
              C(Ct + "_" + me, Ie[me], vt);
            }
            gt.appendChild(Nt);
            me = String(gt.getElementsByTagNameNS(q, "page").length);
            R(Nt, $, "page-number", me);
            R(Nt, Q, "header", E(Ze, Ye, "header"));
            R(Nt, Q, "footer", E(Ze, Ye, "footer"));
            C(Ct, Nt, vt);
            Nt.setAttributeNS("urn:webodf:names:helper", "page-style-name", Ye.getAttributeNS(q, "style-name"));
            Nt.setAttributeNS(q, "draw:master-page-name", Et.getAttributeNS(B, "name"));
          }
          Ye = Ye.nextElementSibling;
        }
      }
      nt = F.namespaceURI;
      Ye = K.getElementsByTagNameNS(it.body, H, "table-cell");
      gt = 0;
      for (; gt < Ye.length; gt += 1) {
        if ((et = Ye[gt]).hasAttributeNS(H, "number-columns-spanned")) {
          et.setAttributeNS(nt, "colspan", et.getAttributeNS(H, "number-columns-spanned"));
        }
        if (et.hasAttributeNS(H, "number-rows-spanned")) {
          et.setAttributeNS(nt, "rowspan", et.getAttributeNS(H, "number-rows-spanned"));
        }
      }
      (function S(F) {
        var L = F.ownerDocument;
        K.getElementsByTagNameNS(F, $, "line-break").forEach(function (ie) {
          if (!ie.hasChildNodes()) {
            ie.appendChild(L.createElement("br"));
          }
        });
      })(it.body);
      (function s(F) {
        var L = F.ownerDocument;
        K.getElementsByTagNameNS(F, $, "s").forEach(function (ie) {
          var Y;
          var ne;
          K.removeAllChildNodes(ie);
          ie.appendChild(L.createTextNode(" "));
          if ((ne = parseInt(ie.getAttributeNS($, "c"), 10)) > 1) {
            ie.removeAttributeNS($, "c");
            Y = 1;
            ie.removeAttributeNS($, "c");
            Y = 1;
            for (; Y < ne; Y += 1) {
              ie.parentNode.insertBefore(ie.cloneNode(true), ie);
            }
          }
        });
      })(it.body);
      (function u(F) {
        K.getElementsByTagNameNS(F, $, "tab").forEach(function (L) {
          L.textContent = "\t";
        });
      })(it.body);
      (function ie(Ze, it, vt) {
        function nt(et, Et, Ct, Nt) {
          pt.addToQueue(function () {
            x(et, Et, Ct, Nt);
          });
        }
        var gt;
        var Ye;
        gt = it.getElementsByTagNameNS(q, "image");
        it = 0;
        for (; it < gt.length; it += 1) {
          Ye = gt.item(it);
          nt("image" + String(it), Ze, Ye, vt);
        }
      })(Ze, it.body, vt);
      (function Y(Ze, it) {
        function vt(et, Et) {
          pt.addToQueue(function () {
            (function m(F, L) {
              function ie(Qe, ae) {
                var fe = Ee.documentElement.namespaceURI;
                if (ae.substr(0, 6) === "video/") {
                  (ne = Ee.createElementNS(fe, "video")).setAttribute("controls", "controls");
                  le = Ee.createElementNS(fe, "source");
                  if (Qe) {
                    le.setAttribute("src", Qe);
                  }
                  le.setAttribute("type", ae);
                  ne.appendChild(le);
                  L.parentNode.appendChild(ne);
                } else {
                  L.innerHtml = "Unrecognised Plugin";
                }
              }
              var ne;
              var le;
              var ge;
              var Le;
              var Ee = L.ownerDocument;
              if (ge = L.getAttributeNS(J, "href")) {
                try {
                  (Le = F.getPart(ge)).onchange = function Y(Qe) {
                    ie(Qe.url, Qe.mimetype);
                  };
                  Le.load();
                } catch (Qe) {
                  runtime.log("slight problem: " + String(Qe));
                }
              } else {
                runtime.log("using MP4 data fallback");
                ie(ge = N(L), "video/mp4");
              }
            })(et, Et);
          });
        }
        var nt;
        var gt;
        gt = it.getElementsByTagNameNS(q, "plugin");
        nt = 0;
        for (; nt < gt.length; nt += 1) {
          vt(Ze, gt.item(nt));
        }
      })(Ze, it.body);
      ze.insertBefore(xe, ze.firstChild);
      ct.setZoomableElement(ze);
    }
    function ge(Ze) {
      if (Ce) {
        if (!we.parentNode) {
          ze.appendChild(we);
        }
        if ($e) {
          $e.forgetAnnotations();
        }
        $e = new gui.AnnotationViewManager(Qe, Ze.body, we, ye);
        Ze = K.getElementsByTagNameNS(Ze.body, G, "annotation");
        $e.addAnnotations(Ze);
        ne();
      } else if (we.parentNode) {
        ze.removeChild(we);
        $e.forgetAnnotations();
        ne();
      }
    }
    function Ee(Ze) {
      function it() {
        I(ue);
        I(de);
        I(pe);
        K.removeAllChildNodes(F);
        F.style.display = "inline-block";
        var vt = fe.rootElement;
        F.ownerDocument.importNode(vt, true);
        Me.setOdfContainer(fe);
        (function w(F, L) {
          new odf.FontLoader().loadFonts(F, L.sheet);
        })(fe, ue);
        y(fe, Me, de);
        le(fe, vt);
        ge(vt);
        if (!Ze) {
          pt.addToQueue(function () {
            var nt = [fe];
            if (Xe.hasOwnProperty("statereadychange")) {
              var Ye;
              var gt = Xe.statereadychange;
              for (Ye = 0; Ye < gt.length; Ye += 1) {
                gt[Ye].apply(null, nt);
              }
            }
          });
        }
      }
      if (fe.state === odf.OdfContainer.DONE) {
        it();
      } else {
        runtime.log("WARNING: refreshOdf called but ODF was not DONE.");
        rt = runtime.setTimeout(function vt() {
          if (fe.state === odf.OdfContainer.DONE) {
            it();
          } else {
            runtime.log("will be back later...");
            rt = runtime.setTimeout(vt, 500);
          }
        }, 100);
      }
    }
    runtime.assert(F != null, "odf.OdfCanvas constructor needs DOM element");
    runtime.assert(F.ownerDocument != null, "odf.OdfCanvas constructor needs DOM");
    var fe;
    var je;
    var qe;
    var ue;
    var de;
    var pe;
    var xe;
    var rt;
    var tt;
    var Qe = this;
    var ae = F.ownerDocument;
    var Me = new odf.Formatting();
    var ze = null;
    var we = null;
    var Ce = false;
    var ye = false;
    var $e = null;
    var Xe = {};
    var Re = false;
    var ot = false;
    var pt = new P();
    var ct = new gui.ZoomHelper();
    var st = L || new gui.SingleScrollViewport(F.parentNode);
    this.refreshCSS = function () {
      Re = true;
      tt.trigger();
    };
    this.refreshSize = function () {
      tt.trigger();
    };
    this.odfContainer = function () {
      return fe;
    };
    this.setOdfContainer = function (Ze, it) {
      fe = Ze;
      Ee(it === true);
    };
    this.load = this.load = function Le(Ze) {
      pt.clearQueue();
      K.removeAllChildNodes(F);
      F.appendChild(F.ownerDocument.createTextNode(runtime.tr("Loading") + Ze + "..."));
      F.removeAttribute("style");
      fe = new odf.OdfContainer(Ze, function (it) {
        fe = it;
        Ee(false);
      });
    };
    this.save = function (Ze) {
      fe.save(Ze);
    };
    this.addListener = function (Ze, it) {
      if (Ze === "click") {
        var vt = Ze;
        if (F.addEventListener) {
          F.addEventListener(vt, it, false);
        } else if (F.attachEvent) {
          F.attachEvent("on" + vt, it);
        } else {
          F["on" + vt] = it;
        }
      } else {
        vt = Xe.hasOwnProperty(Ze) ? Xe[Ze] : Xe[Ze] = [];
        if (it && vt.indexOf(it) === -1) {
          vt.push(it);
        }
      }
    };
    this.getFormatting = function () {
      return Me;
    };
    this.getAnnotationViewManager = function () {
      return $e;
    };
    this.refreshAnnotations = function () {
      ge(fe.rootElement);
    };
    this.rerenderAnnotations = function () {
      if ($e) {
        ot = true;
        tt.trigger();
      }
    };
    this.getSizer = function () {
      return ze;
    };
    this.enableAnnotations = function (Ze, it) {
      if (Ze !== Ce) {
        Ce = Ze;
        ye = it;
        if (fe) {
          ge(fe.rootElement);
        }
      }
    };
    this.addAnnotation = function (Ze) {
      if ($e) {
        $e.addAnnotations([Ze]);
        ne();
      }
    };
    this.forgetAnnotation = function (Ze) {
      if ($e) {
        $e.forgetAnnotation(Ze);
        ne();
      }
    };
    this.getZoomHelper = function () {
      return ct;
    };
    this.setZoomLevel = function (Ze) {
      ct.setZoomLevel(Ze);
    };
    this.getZoomLevel = function () {
      return ct.getZoomLevel();
    };
    this.fitToContainingElement = function (Ze, it) {
      var nt = ct.getZoomLevel();
      var vt = F.offsetHeight / nt;
      if (it / vt < (nt = Ze / (F.offsetWidth / nt))) {
        nt = it / vt;
      }
      ct.setZoomLevel(nt);
    };
    this.fitToWidth = function (Ze) {
      var it = F.offsetWidth / ct.getZoomLevel();
      ct.setZoomLevel(Ze / it);
    };
    this.fitSmart = function (Ze, it) {
      var vt;
      var nt;
      nt = ct.getZoomLevel();
      vt = F.offsetWidth / nt;
      nt = F.offsetHeight / nt;
      vt = Ze / vt;
      if (it !== undefined && it / nt < vt) {
        vt = it / nt;
      }
      ct.setZoomLevel(Math.min(1, vt));
    };
    this.fitToHeight = function (Ze) {
      var it = F.offsetHeight / ct.getZoomLevel();
      ct.setZoomLevel(Ze / it);
    };
    this.showFirstPage = function () {
      je.showFirstPage();
    };
    this.showNextPage = function () {
      je.showNextPage();
    };
    this.showPreviousPage = function () {
      je.showPreviousPage();
    };
    this.showPage = function (Ze) {
      je.showPage(Ze);
      ne();
    };
    this.getElement = function () {
      return F;
    };
    this.getViewport = function () {
      return st;
    };
    this.addCssForFrameWithImage = function (Ze) {
      var it = Ze.getAttributeNS(q, "name");
      var vt = Ze.firstElementChild;
      C(it, Ze, pe.sheet);
      if (vt) {
        x(it + "img", fe, vt, pe.sheet);
      }
    };
    this.destroy = function (Ze) {
      var it = ae.getElementsByTagName("head")[0];
      var vt = [je.destroy, tt.destroy];
      runtime.clearTimeout(rt);
      if (we && we.parentNode) {
        we.parentNode.removeChild(we);
      }
      ct.destroy(function () {
        if (ze) {
          F.removeChild(ze);
          ze = null;
        }
      });
      (function M(F) {
        var L = parseInt(F.getAttribute("webodfcss"), 10);
        if (L === 1) {
          F.parentNode.removeChild(F);
        } else {
          F.setAttribute("count", L - 1);
        }
      })(qe);
      it.removeChild(ue);
      it.removeChild(de);
      it.removeChild(pe);
      core.Async.destroyAll(vt, Ze);
    };
    qe = function l(F) {
      var ie;
      var Y;
      var L = F.getElementsByTagName("head")[0];
      ie = F.styleSheets.length;
      Y = L.firstElementChild;
      for (; Y && (Y.localName !== "style" || !Y.hasAttribute("webodfcss"));) {
        Y = Y.nextElementSibling;
      }
      if (Y) {
        ie = parseInt(Y.getAttribute("webodfcss"), 10);
        Y.setAttribute("webodfcss", ie + 1);
        return Y;
      } else {
        if (String(typeof webodf_css) === "string") {
          ie = webodf_css;
        } else {
          Y = "webodf.css";
          if (runtime.currentDirectory) {
            if ((Y = runtime.currentDirectory()).length > 0 && Y.substr(-1) !== "/") {
              Y += "/";
            }
            Y += "../webodf.css";
          }
          ie = runtime.readFileSync(Y, "utf-8");
        }
        (Y = F.createElementNS(L.namespaceURI, "style")).setAttribute("media", "screen, print, handheld, projection");
        Y.setAttribute("type", "text/css");
        Y.setAttribute("webodfcss", "1");
        Y.appendChild(F.createTextNode(ie));
        L.appendChild(Y);
        return Y;
      }
    }(ae);
    je = new X(O(ae));
    ue = O(ae);
    de = O(ae);
    pe = O(ae);
    tt = core.Task.createRedrawTask(function () {
      if (Re) {
        y(fe, Me, de);
        Re = false;
      }
      if (ot) {
        if ($e) {
          $e.rerenderAnnotations();
        }
        ot = false;
      }
      ne();
    });
    ct.subscribe(gui.ZoomHelper.signalZoomChanged, ne);
  };
})();
odf.StepUtils = function () {
  this.getContentBounds = function (P) {
    var I;
    var y;
    var X = P.container();
    runtime.assert(P.isStep(), "Step iterator must be on a step");
    if (X.nodeType === Node.TEXT_NODE && P.offset() > 0) {
      I = P.offset();
    } else if ((X = P.leftNode()) && X.nodeType === Node.TEXT_NODE) {
      I = X.length;
    }
    if (X) {
      if (X.nodeType === Node.TEXT_NODE) {
        runtime.assert(I > 0, "Empty text node found");
        y = {
          container: X,
          startOffset: I - 1,
          endOffset: I
        };
      } else {
        y = {
          container: X,
          startOffset: 0,
          endOffset: X.childNodes.length
        };
      }
    }
    return y;
  };
};
ops.MemberProperties = function () {};
ops.Member = function (P, X) {
  var I = new ops.MemberProperties();
  this.getMemberId = function () {
    return P;
  };
  this.getProperties = function () {
    return I;
  };
  this.setProperties = function (y) {
    Object.keys(y).forEach(function (w) {
      I[w] = y[w];
    });
  };
  this.removeProperties = function (y) {
    Object.keys(y).forEach(function (w) {
      if (w !== "fullName" && w !== "color" && w !== "imageUrl" && I.hasOwnProperty(w)) {
        delete I[w];
      }
    });
  };
  runtime.assert(Boolean(P), "No memberId was supplied!");
  X.fullName ||= runtime.tr("Unknown Author");
  X.color ||= "black";
  X.imageUrl ||= "avatar-joe.png";
  I = X;
};
ops.Document = function () {};
ops.Document.prototype.getMemberIds = function () {};
ops.Document.prototype.removeCursor = function (P) {};
ops.Document.prototype.getDocumentElement = function () {};
ops.Document.prototype.getRootNode = function () {};
ops.Document.prototype.getDOMDocument = function () {};
ops.Document.prototype.cloneDocumentElement = function () {};
ops.Document.prototype.setDocumentElement = function (P) {};
ops.Document.prototype.subscribe = function (P, X) {};
ops.Document.prototype.unsubscribe = function (P, X) {};
ops.Document.prototype.getCanvas = function () {};
ops.Document.prototype.createRootFilter = function (P) {};
ops.Document.prototype.createPositionIterator = function (P) {};
ops.Document.prototype.hasCursor = function (P) {};
ops.Document.signalCursorAdded = "cursor/added";
ops.Document.signalCursorRemoved = "cursor/removed";
ops.Document.signalCursorMoved = "cursor/moved";
ops.Document.signalMemberAdded = "member/added";
ops.Document.signalMemberUpdated = "member/updated";
ops.Document.signalMemberRemoved = "member/removed";
ops.OdtCursor = function (P, X) {
  var w;
  var E;
  var I = this;
  var y = {};
  var R = new core.EventNotifier([ops.OdtCursor.signalCursorUpdated]);
  this.removeFromDocument = function () {
    E.remove();
  };
  this.subscribe = function (C, N) {
    R.subscribe(C, N);
  };
  this.unsubscribe = function (C, N) {
    R.unsubscribe(C, N);
  };
  this.getMemberId = function () {
    return P;
  };
  this.getNode = function () {
    return E.getNode();
  };
  this.getAnchorNode = function () {
    return E.getAnchorNode();
  };
  this.getSelectedRange = function () {
    return E.getSelectedRange();
  };
  this.setSelectedRange = function (C, N) {
    E.setSelectedRange(C, N);
    R.emit(ops.OdtCursor.signalCursorUpdated, I);
  };
  this.hasForwardSelection = function () {
    return E.hasForwardSelection();
  };
  this.getDocument = function () {
    return X;
  };
  this.getSelectionType = function () {
    return w;
  };
  this.setSelectionType = function (C) {
    if (y.hasOwnProperty(C)) {
      w = C;
    } else {
      runtime.log("Invalid selection type: " + C);
    }
  };
  this.resetSelectionType = function () {
    I.setSelectionType(ops.OdtCursor.RangeSelection);
  };
  E = new core.Cursor(X.getDOMDocument(), P);
  y[ops.OdtCursor.RangeSelection] = true;
  y[ops.OdtCursor.RegionSelection] = true;
  I.resetSelectionType();
};
ops.OdtCursor.RangeSelection = "Range";
ops.OdtCursor.RegionSelection = "Region";
ops.OdtCursor.signalCursorUpdated = "cursorUpdated";
(function () {
  var P = 0;
  ops.StepsCache = function (X, I, y) {
    function w(B, A) {
      var H = this;
      this.nodeId = B;
      this.steps = -1;
      this.node = A;
      this.previousBookmark = this.nextBookmark = null;
      this.setIteratorPosition = function ($) {
        $.setPositionBeforeElement(A);
        y(H.steps, $);
      };
    }
    function R(B, A) {
      var H = "[" + B.nodeId;
      if (A) {
        H += " => " + A.nodeId;
      }
      return H + "]";
    }
    function C() {
      if (ops.StepsCache.ENABLE_CACHE_VERIFICATION === true) {
        for (var A, H, $, B = O, J = new core.LoopWatchDog(0, 100000), Q = {}; B;) {
          J.check();
          if (A = B.previousBookmark) {
            runtime.assert(A.nextBookmark === B, "Broken bookmark link to previous @" + R(A, B));
          } else {
            runtime.assert(B === O, "Broken bookmark link @" + R(B));
            runtime.assert(q === undefined || O == O || O.steps <= q, "Base point is damaged @" + R(B));
          }
          if (H = B.nextBookmark) {
            runtime.assert(H.previousBookmark === B, "Broken bookmark link to next @" + R(B, H));
          }
          if (q === undefined || B === O || B.steps <= q) {
            runtime.assert(M.containsNode(X, B.node), "Disconnected node is being reported as undamaged @" + R(B));
            if (A) {
              $ = B.node.compareDocumentPosition(A.node);
              runtime.assert($ === 0 || ($ & G) != 0, "Bookmark order with previous does not reflect DOM order @" + R(A, B));
            }
            if (H && M.containsNode(X, H.node)) {
              $ = B.node.compareDocumentPosition(H.node);
              runtime.assert($ === 0 || ($ & ee) != 0, "Bookmark order with next does not reflect DOM order @" + R(B, H));
            }
          }
          B = B.nextBookmark;
        }
        Object.keys(m).forEach(function (U) {
          var K = m[U];
          if (q === undefined || U <= q) {
            runtime.assert(K.steps <= U, "Bookmark step of " + K.steps + " exceeds cached step lookup for " + U + " @" + R(K));
          }
          runtime.assert(Q.hasOwnProperty(K.nodeId) === false, "Bookmark " + R(K) + " appears twice in cached step lookup at steps " + Q[K.nodeId] + " and " + U);
          Q[K.nodeId] = U;
        });
      }
    }
    function N(B) {
      var A = "";
      if (B.nodeType === Node.ELEMENT_NODE) {
        A = B.getAttributeNS("urn:webodf:names:steps", "nodeId") || "";
      }
      return A;
    }
    function x(B) {
      var A = P.toString();
      B.setAttributeNS("urn:webodf:names:steps", "nodeId", A);
      P += 1;
      return A;
    }
    function S(B) {
      var A;
      var H;
      var $ = new core.LoopWatchDog(0, 10000);
      if (q !== undefined && B > q) {
        B = q;
      }
      A = Math.floor(B / I) * I;
      for (; !H && A >= 0;) {
        H = m[A];
        A -= I;
      }
      for (H = H || O; H.nextBookmark && H.nextBookmark.steps <= B;) {
        $.check();
        H = H.nextBookmark;
      }
      runtime.assert(B === -1 || H.steps <= B, "Bookmark @" + R(H) + " at step " + H.steps + " exceeds requested step of " + B);
      return H;
    }
    function s(B) {
      if (B.previousBookmark) {
        B.previousBookmark.nextBookmark = B.nextBookmark;
      }
      if (B.nextBookmark) {
        B.nextBookmark.previousBookmark = B.previousBookmark;
      }
    }
    function u(B) {
      for (var A, H = null; !H && B && B !== X;) {
        if ((A = N(B)) && (H = l[A]) && H.node !== B) {
          runtime.log("Cloned node detected. Creating new bookmark");
          H = null;
          B.removeAttributeNS("urn:webodf:names:steps", "nodeId");
        }
        B = B.parentNode;
      }
      return H;
    }
    var O;
    var q;
    var B;
    var m = {};
    var l = {};
    var M = core.DomUtils;
    var ee = Node.DOCUMENT_POSITION_FOLLOWING;
    var G = Node.DOCUMENT_POSITION_PRECEDING;
    this.updateBookmark = function (B, A) {
      var H;
      var J;
      var Q;
      var U;
      var $ = Math.ceil(B / I) * I;
      if (q !== undefined && q < B) {
        for (Q = (J = S(q)).nextBookmark; Q && Q.steps <= B;) {
          H = Q.nextBookmark;
          U = Math.ceil(Q.steps / I) * I;
          if (m[U] === Q) {
            delete m[U];
          }
          if (M.containsNode(X, Q.node)) {
            Q.steps = B + 1;
          } else {
            s(Q);
            delete l[Q.nodeId];
          }
          Q = H;
        }
        q = B;
      } else {
        J = S(B);
      }
      Q = N(A) || x(A);
      if (H = l[Q]) {
        if (H.node !== A) {
          runtime.log("Cloned node detected. Creating new bookmark");
          Q = x(A);
          H = l[Q] = new w(Q, A);
        }
      } else {
        H = l[Q] = new w(Q, A);
      }
      if ((Q = H).steps !== B) {
        if ((H = Math.ceil(Q.steps / I) * I) !== $ && m[H] === Q) {
          delete m[H];
        }
        Q.steps = B;
      }
      if (J !== Q && J.nextBookmark !== Q) {
        if (J.steps === Q.steps) {
          for (; (Q.node.compareDocumentPosition(J.node) & ee) != 0 && J !== O;) {
            J = J.previousBookmark;
          }
        }
        if (J !== Q && J.nextBookmark !== Q) {
          s(Q);
          H = J.nextBookmark;
          Q.nextBookmark = J.nextBookmark;
          Q.previousBookmark = J;
          J.nextBookmark = Q;
          if (H) {
            H.previousBookmark = Q;
          }
        }
      }
      if (!(J = m[$]) || Q.steps > J.steps) {
        m[$] = Q;
      }
      C();
    };
    this.setToClosestStep = function (B, A) {
      var H;
      C();
      (H = S(B)).setIteratorPosition(A);
      return H.steps;
    };
    this.setToClosestDomPoint = function (B, A, H) {
      var $;
      var J;
      C();
      if (B === X && A === 0) {
        $ = O;
      } else if (B === X && A === X.childNodes.length) {
        $ = O;
        for (J in m) {
          if (m.hasOwnProperty(J) && (B = m[J]).steps > $.steps) {
            $ = B;
          }
        }
      } else if (!($ = u(B.childNodes.item(A) || B))) {
        for (H.setUnfilteredPosition(B, A); !$ && H.previousNode();) {
          $ = u(H.getCurrentNode());
        }
      }
      $ = $ || O;
      if (q !== undefined && $.steps > q) {
        $ = S(q);
      }
      $.setIteratorPosition(H);
      return $.steps;
    };
    this.damageCacheAfterStep = function (B) {
      if (B < 0) {
        B = -1;
      }
      if (q === undefined || B < q) {
        q = B;
      }
      C();
    };
    B = N(X) || x(X);
    O = new function E(B, A, H) {
      var $ = this;
      this.nodeId = B;
      this.steps = A;
      this.node = H;
      this.previousBookmark = this.nextBookmark = null;
      this.setIteratorPosition = function (J) {
        J.setUnfilteredPosition(H, 0);
        y($.steps, J);
      };
    }(B, 0, X);
  };
  ops.StepsCache.ENABLE_CACHE_VERIFICATION = false;
  ops.StepsCache.Bookmark = function () {};
  ops.StepsCache.Bookmark.prototype.setIteratorPosition = function (X) {};
})();
ops.OdtStepsTranslator = function (P, X, I, y) {
  function w(u, m, l) {
    var M = m.getCurrentNode();
    if (m.isBeforeNode() && C.isParagraph(M)) {
      if (!l) {
        u += 1;
      }
      R.updateBookmark(u, M);
    }
  }
  var R;
  var C = odf.OdfUtils;
  var N = core.DomUtils;
  var x = core.PositionFilter.FilterResult.FILTER_ACCEPT;
  var S = core.StepDirection.PREVIOUS;
  var s = core.StepDirection.NEXT;
  this.convertStepsToDomPoint = function (u) {
    var m;
    var l;
    if (isNaN(u)) {
      throw new TypeError("Requested steps is not numeric (" + u + ")");
    }
    if (u < 0) {
      throw new RangeError("Requested steps is negative (" + u + ")");
    }
    for (m = R.setToClosestStep(u, X); m < u && X.nextPosition();) {
      if (l = I.acceptPosition(X) === x) {
        m += 1;
      }
      w(m, X, l);
    }
    if (m !== u) {
      throw new RangeError("Requested steps (" + u + ") exceeds available steps (" + m + ")");
    }
    return {
      node: X.container(),
      offset: X.unfilteredDomOffset()
    };
  };
  this.convertDomPointToSteps = function (u, m, l) {
    var M;
    if (!N.containsNode(P, u)) {
      m = N.comparePoints(P, 0, u, m) < 0;
      u = P;
      m = m ? 0 : P.childNodes.length;
    }
    X.setUnfilteredPosition(u, m);
    if (!function E(u, m) {
      if (!m || I.acceptPosition(u) === x) {
        return true;
      }
      for (; u.previousPosition();) {
        if (I.acceptPosition(u) === x) {
          if (m(S, u.container(), u.unfilteredDomOffset())) {
            return true;
          }
          break;
        }
      }
      for (; u.nextPosition();) {
        if (I.acceptPosition(u) === x) {
          if (m(s, u.container(), u.unfilteredDomOffset())) {
            return true;
          }
          break;
        }
      }
      return false;
    }(X, l)) {
      X.setUnfilteredPosition(u, m);
    }
    l = X.container();
    m = X.unfilteredDomOffset();
    u = R.setToClosestDomPoint(l, m, X);
    if (N.comparePoints(X.container(), X.unfilteredDomOffset(), l, m) < 0) {
      if (u > 0) {
        return u - 1;
      } else {
        return u;
      }
    }
    for (; (X.container() !== l || X.unfilteredDomOffset() !== m) && X.nextPosition();) {
      if (M = I.acceptPosition(X) === x) {
        u += 1;
      }
      w(u, X, M);
    }
    return u + 0;
  };
  this.prime = function () {
    var u;
    var m;
    for (u = R.setToClosestStep(0, X); X.nextPosition();) {
      if (m = I.acceptPosition(X) === x) {
        u += 1;
      }
      w(u, X, m);
    }
  };
  this.handleStepsInserted = function (u) {
    R.damageCacheAfterStep(u.position);
  };
  this.handleStepsRemoved = function (u) {
    R.damageCacheAfterStep(u.position - 1);
  };
  R = new ops.StepsCache(P, y, function (u, m) {
    do {
      if (I.acceptPosition(m) === x) {
        w(u, m, true);
        break;
      }
      w(u - 1, m, false);
    } while (m.nextPosition());
  });
};
ops.Operation = function () {};
ops.Operation.prototype.init = function (P) {};
ops.Operation.prototype.execute = function (P) {};
ops.Operation.prototype.spec = function () {};
ops.TextPositionFilter = function () {
  function X(C, N, x, S) {
    var s;
    if (N) {
      if (I.isInlineRoot(N) && I.isGroupingElement(x)) {
        return R;
      }
      if ((S = I.lookLeftForCharacter(N)) === 1 || S === 2 && (I.scanRightForAnyCharacter(x) || I.scanRightForAnyCharacter(I.nextNode(C)))) {
        return E;
      }
    } else if (I.isGroupingElement(C) && I.isInlineRoot(function P(C, N) {
      for (; C && N(C) !== E;) {
        C = C.previousSibling;
      }
      return C;
    }(C.previousSibling, S))) {
      return E;
    }
    S = N === null && I.isParagraph(C);
    s = I.lookRightForCharacter(x);
    if (S) {
      if (s) {
        return E;
      } else if (I.scanRightForAnyCharacter(x)) {
        return R;
      } else {
        return E;
      }
    } else if (s) {
      N = N || I.previousNode(C);
      if (I.scanLeftForAnyCharacter(N)) {
        return R;
      } else {
        return E;
      }
    } else {
      return R;
    }
  }
  var I = odf.OdfUtils;
  var y = Node.ELEMENT_NODE;
  var w = Node.TEXT_NODE;
  var E = core.PositionFilter.FilterResult.FILTER_ACCEPT;
  var R = core.PositionFilter.FilterResult.FILTER_REJECT;
  this.acceptPosition = function (C) {
    var S;
    var s;
    var u;
    var N = C.container();
    var x = N.nodeType;
    if (x !== y && x !== w) {
      return R;
    }
    if (x === w) {
      x = C.unfilteredDomOffset();
      runtime.assert(x !== (S = N.data).length, "Unexpected offset.");
      if (x > 0) {
        if (!I.isODFWhitespace(C = S[x - 1])) {
          return E;
        }
        if (x > 1) {
          if (I.isODFWhitespace(C = S[x - 2])) {
            if (!I.isODFWhitespace(S.substr(0, x))) {
              return R;
            }
          } else {
            u = E;
          }
        } else {
          s = I.previousNode(N);
          if (I.scanLeftForNonSpace(s)) {
            u = E;
          }
        }
        if (u === E) {
          if (I.isTrailingWhitespace(N, x)) {
            return R;
          } else {
            return E;
          }
        } else if (I.isODFWhitespace(C = S[x]) || I.scanLeftForAnyCharacter(I.previousNode(N))) {
          return R;
        } else {
          return E;
        }
      }
      s = C.leftNode();
      u = N;
      u = X(N = N.parentNode, s, u, C.getNodeFilter());
    } else {
      u = I.isGroupingElement(N) ? X(N, s = C.leftNode(), u = C.rightNode(), C.getNodeFilter()) : R;
    }
    return u;
  };
};
ops.OdtDocument = function (P) {
  function X(U) {
    return new core.PositionIterator(U, H, Q, false);
  }
  function I() {
    var U = P.odfContainer().getContentElement();
    var K = U && U.localName;
    runtime.assert(K === "text", "Unsupported content element type '" + K + "' for OdtDocument");
    return U;
  }
  function y() {
    return s.getDocumentElement().ownerDocument;
  }
  function w(U) {
    for (; U && (U.namespaceURI !== odf.Namespaces.officens || U.localName !== "text") && (U.namespaceURI !== odf.Namespaces.officens || U.localName !== "annotation");) {
      U = U.parentNode;
    }
    return U;
  }
  function E(U, K, F, L) {
    var ie;
    L = X(L);
    if (F.length === 1) {
      ie = F[0];
    } else {
      ie = new core.PositionFilterChain();
      F.forEach(ie.addFilter);
    }
    (F = new core.StepIterator(ie, L)).setPosition(U, K);
    return F;
  }
  function R(U) {
    var K = X(I());
    U = B.convertStepsToDomPoint(U);
    K.setUnfilteredPosition(U.node, U.offset);
    return K;
  }
  function C(U) {
    return U === ee;
  }
  function x(U) {
    var K;
    var L;
    var F = [];
    var ie = 2;
    runtime.assert(U.isStep(), "positionIterator is not at a step");
    do {
      if ((K = u.getContentBounds(U)) && m.isDowngradableSpaceElement(K = K.container)) {
        for (L = K.lastChild; K.firstChild;) {
          F.push(K.firstChild);
          K.parentNode.insertBefore(K.firstChild, K);
        }
        K.parentNode.removeChild(K);
        U.setPosition(L, L.nodeType === Node.TEXT_NODE ? L.length : L.childNodes.length);
        U.roundToPreviousStep();
      }
      --ie;
    } while (ie > 0 && U.nextStep());
    F.forEach(l.normalizeTextNodes);
  }
  function S(U, K, F) {
    U = U.childNodes.item(K) || U;
    if ((U = m.getParagraphElement(U)) && l.containsNode(F, U)) {
      return U;
    } else {
      return F;
    }
  }
  var u;
  var G;
  var B;
  var A;
  var U;
  var s = this;
  var m = odf.OdfUtils;
  var l = core.DomUtils;
  var M = {};
  var O = {};
  var q = new core.EventNotifier([ops.Document.signalMemberAdded, ops.Document.signalMemberUpdated, ops.Document.signalMemberRemoved, ops.Document.signalCursorAdded, ops.Document.signalCursorRemoved, ops.Document.signalCursorMoved, ops.OdtDocument.signalParagraphChanged, ops.OdtDocument.signalParagraphStyleModified, ops.OdtDocument.signalCommonStyleCreated, ops.OdtDocument.signalCommonStyleDeleted, ops.OdtDocument.signalTableAdded, ops.OdtDocument.signalOperationStart, ops.OdtDocument.signalOperationEnd, ops.OdtDocument.signalProcessingBatchStart, ops.OdtDocument.signalProcessingBatchEnd, ops.OdtDocument.signalUndoStackChanged, ops.OdtDocument.signalStepsInserted, ops.OdtDocument.signalStepsRemoved, ops.OdtDocument.signalMetadataUpdated, ops.OdtDocument.signalAnnotationAdded]);
  var ee = core.StepDirection.NEXT;
  var H = NodeFilter.SHOW_ALL;
  var $ = new gui.BlacklistNamespaceNodeFilter(["urn:webodf:names:cursor", "urn:webodf:names:editinfo"]);
  var J = new gui.OdfTextBodyNodeFilter();
  var Q = new core.NodeFilterChain([$, J]);
  this.createPositionIterator = X;
  this.getDocumentElement = function () {
    return P.odfContainer().rootElement;
  };
  this.cloneDocumentElement = function () {
    var U = s.getDocumentElement();
    var K = P.getAnnotationViewManager();
    if (K) {
      K.forgetAnnotations();
    }
    U = U.cloneNode(true);
    P.refreshAnnotations();
    s.fixCursorPositions();
    return U;
  };
  this.setDocumentElement = function (U) {
    var K = P.odfContainer();
    q.unsubscribe(ops.OdtDocument.signalStepsInserted, B.handleStepsInserted);
    q.unsubscribe(ops.OdtDocument.signalStepsRemoved, B.handleStepsRemoved);
    K.setRootElement(U);
    P.setOdfContainer(K, true);
    P.refreshCSS();
    U = I();
    B = new ops.OdtStepsTranslator(U, X(U), G, 500);
    q.subscribe(ops.OdtDocument.signalStepsInserted, B.handleStepsInserted);
    q.subscribe(ops.OdtDocument.signalStepsRemoved, B.handleStepsRemoved);
  };
  this.getDOMDocument = y;
  this.getRootElement = w;
  this.createStepIterator = E;
  this.getIteratorAtPosition = R;
  this.convertCursorStepToDomPoint = function (U) {
    return B.convertStepsToDomPoint(U);
  };
  this.convertDomPointToCursorStep = function (U, K, F) {
    var L;
    if (F === ee) {
      L = C;
    }
    return B.convertDomPointToSteps(U, K, L);
  };
  this.convertDomToCursorRange = function (U) {
    var K;
    return {
      position: K = B.convertDomPointToSteps(U.anchorNode, U.anchorOffset),
      length: (U = U.anchorNode === U.focusNode && U.anchorOffset === U.focusOffset ? K : B.convertDomPointToSteps(U.focusNode, U.focusOffset)) - K
    };
  };
  this.convertCursorToDomRange = function (U, K) {
    var L;
    var ie;
    var F = y().createRange();
    L = B.convertStepsToDomPoint(U);
    if (K) {
      ie = B.convertStepsToDomPoint(U + K);
      if (K > 0) {
        F.setStart(L.node, L.offset);
        F.setEnd(ie.node, ie.offset);
      } else {
        F.setStart(ie.node, ie.offset);
        F.setEnd(L.node, L.offset);
      }
    } else {
      F.setStart(L.node, L.offset);
    }
    return F;
  };
  this.upgradeWhitespacesAtPosition = function (U) {
    var F;
    var K = R(U);
    K = new core.StepIterator(G, K);
    var L = 2;
    runtime.assert(K.isStep(), "positionIterator is not at a step (requested step: " + U + ")");
    do {
      if ((F = u.getContentBounds(K)) && (U = F.container, F = F.startOffset, U.nodeType === Node.TEXT_NODE && m.isSignificantWhitespace(U, F))) {
        runtime.assert(U.data[F] === " ", "upgradeWhitespaceToElement: textNode.data[offset] should be a literal space");
        var ie = U.ownerDocument.createElementNS(odf.Namespaces.textns, "text:s");
        var Y = U.parentNode;
        var ne = U;
        ie.appendChild(U.ownerDocument.createTextNode(" "));
        if (U.length === 1) {
          Y.replaceChild(ie, U);
        } else {
          U.deleteData(F, 1);
          if (F > 0) {
            if (F < U.length) {
              U.splitText(F);
            }
            ne = U.nextSibling;
          }
          Y.insertBefore(ie, ne);
        }
        K.setPosition(U = ie, U.childNodes.length);
        K.roundToPreviousStep();
      }
      --L;
    } while (L > 0 && K.nextStep());
  };
  this.downgradeWhitespaces = x;
  this.downgradeWhitespacesAtPosition = function (U) {
    U = R(U);
    x(U = new core.StepIterator(G, U));
  };
  this.getTextNodeAtStep = function (U, K) {
    var ie;
    var F = R(U);
    var L = F.container();
    var Y = 0;
    var ne = null;
    if (L.nodeType === Node.TEXT_NODE) {
      ie = L;
      Y = F.unfilteredDomOffset();
      if (ie.length > 0) {
        if (Y > 0) {
          ie = ie.splitText(Y);
        }
        ie.parentNode.insertBefore(y().createTextNode(""), ie);
        ie = ie.previousSibling;
        Y = 0;
      }
    } else {
      ie = y().createTextNode("");
      Y = 0;
      L.insertBefore(ie, F.rightNode());
    }
    if (K) {
      if (M[K] && s.getCursorPosition(K) === U) {
        for (ne = M[K].getNode(); ne.nextSibling && ne.nextSibling.localName === "cursor";) {
          ne.parentNode.insertBefore(ne.nextSibling, ne);
        }
        if (ie.length > 0 && ie.nextSibling !== ne) {
          ie = y().createTextNode("");
          Y = 0;
        }
        ne.parentNode.insertBefore(ie, ne);
      }
    } else {
      for (; ie.nextSibling && ie.nextSibling.localName === "cursor";) {
        ie.parentNode.insertBefore(ie.nextSibling, ie);
      }
    }
    for (; ie.previousSibling && ie.previousSibling.nodeType === Node.TEXT_NODE;) {
      (F = ie.previousSibling).appendData(ie.data);
      Y = F.length;
      (ie = F).parentNode.removeChild(ie.nextSibling);
    }
    for (; ie.nextSibling && ie.nextSibling.nodeType === Node.TEXT_NODE;) {
      ie.appendData((F = ie.nextSibling).data);
      ie.parentNode.removeChild(F);
    }
    return {
      textNode: ie,
      offset: Y
    };
  };
  this.fixCursorPositions = function () {
    Object.keys(M).forEach(function (U) {
      var ie;
      var Y;
      var ne;
      var K = M[U];
      var F = w(K.getNode());
      var L = s.createRootFilter(F);
      var le = false;
      ie = S((ne = K.getSelectedRange()).startContainer, ne.startOffset, F);
      Y = E(ne.startContainer, ne.startOffset, [G, L], ie);
      if (ne.collapsed) {
        F = Y;
      } else {
        ie = S(ne.endContainer, ne.endOffset, F);
        F = E(ne.endContainer, ne.endOffset, [G, L], ie);
      }
      if (Y.isStep() && F.isStep()) {
        if (Y.container() === F.container() && Y.offset() === F.offset() && (!ne.collapsed || K.getAnchorNode() !== K.getNode())) {
          le = true;
          ne.setStart(Y.container(), Y.offset());
          ne.collapse(true);
        }
      } else {
        le = true;
        runtime.assert(Y.roundToClosestStep(), "No walkable step found for cursor owned by " + U);
        ne.setStart(Y.container(), Y.offset());
        runtime.assert(F.roundToClosestStep(), "No walkable step found for cursor owned by " + U);
        ne.setEnd(F.container(), F.offset());
      }
      if (le) {
        K.setSelectedRange(ne, K.hasForwardSelection());
        s.emit(ops.Document.signalCursorMoved, K);
      }
    });
  };
  this.getCursorPosition = function (U) {
    if (U = M[U]) {
      return B.convertDomPointToSteps(U.getNode(), 0);
    } else {
      return 0;
    }
  };
  this.getCursorSelection = function (U) {
    var K = 0;
    var F = 0;
    if (U = M[U]) {
      K = B.convertDomPointToSteps(U.getNode(), 0);
      F = B.convertDomPointToSteps(U.getAnchorNode(), 0);
    }
    return {
      position: F,
      length: K - F
    };
  };
  this.getPositionFilter = function () {
    return G;
  };
  this.getOdfCanvas = function () {
    return P;
  };
  this.getCanvas = function () {
    return P;
  };
  this.getRootNode = I;
  this.addMember = function (U) {
    runtime.assert(O[U.getMemberId()] === undefined, "This member already exists");
    O[U.getMemberId()] = U;
  };
  this.getMember = function (U) {
    if (O.hasOwnProperty(U)) {
      return O[U];
    } else {
      return null;
    }
  };
  this.removeMember = function (U) {
    delete O[U];
  };
  this.getCursor = function (U) {
    return M[U];
  };
  this.hasCursor = function (U) {
    return M.hasOwnProperty(U);
  };
  this.getMemberIds = function () {
    return Object.keys(O);
  };
  this.addCursor = function (U) {
    runtime.assert(Boolean(U), "OdtDocument::addCursor without cursor");
    var K = U.getMemberId();
    var F = s.convertCursorToDomRange(0, 0);
    runtime.assert(typeof K == "string", "OdtDocument::addCursor has cursor without memberid");
    runtime.assert(!M[K], "OdtDocument::addCursor is adding a duplicate cursor with memberid " + K);
    U.setSelectedRange(F, true);
    M[K] = U;
  };
  this.removeCursor = function (U) {
    var K = M[U];
    return !!K && (K.removeFromDocument(), delete M[U], s.emit(ops.Document.signalCursorRemoved, U), true);
  };
  this.moveCursor = function (U, K, F, L) {
    U = M[U];
    K = s.convertCursorToDomRange(K, F);
    if (U) {
      U.setSelectedRange(K, F >= 0);
      U.setSelectionType(L || ops.OdtCursor.RangeSelection);
    }
  };
  this.getFormatting = function () {
    return P.getFormatting();
  };
  this.emit = function (U, K) {
    q.emit(U, K);
  };
  this.subscribe = function (U, K) {
    q.subscribe(U, K);
  };
  this.unsubscribe = function (U, K) {
    q.unsubscribe(U, K);
  };
  this.createRootFilter = function (U) {
    return new RootFilter(U, M, w);
  };
  this.close = function (U) {
    U();
  };
  this.destroy = function (U) {
    U();
  };
  U = I();
  G = new ops.TextPositionFilter();
  u = new odf.StepUtils();
  B = new ops.OdtStepsTranslator(U, X(U), G, 500);
  q.subscribe(ops.OdtDocument.signalStepsInserted, B.handleStepsInserted);
  q.subscribe(ops.OdtDocument.signalStepsRemoved, B.handleStepsRemoved);
  q.subscribe(ops.OdtDocument.signalOperationEnd, function N(U) {
    var K = (L = U.spec()).memberid;
    var F = new Date(L.timestamp).toISOString();
    var L = P.odfContainer();
    if (U.isEdit) {
      K = s.getMember(K).getProperties().fullName;
      L.setMetadata({
        "dc:creator": K,
        "dc:date": F
      }, null);
      K = {
        setProperties: {
          "dc:creator": K,
          "dc:date": F
        },
        removedProperties: []
      };
      if (!A) {
        K.setProperties["meta:editing-cycles"] = L.incrementEditingCycles();
        L.setMetadata(null, ["meta:editing-duration", "meta:document-statistic"]);
      }
      A = U;
      s.emit(ops.OdtDocument.signalMetadataUpdated, K);
    }
  });
  q.subscribe(ops.OdtDocument.signalProcessingBatchEnd, core.Task.processTasks);
};
ops.OdtDocument.signalParagraphChanged = "paragraph/changed";
ops.OdtDocument.signalTableAdded = "table/added";
ops.OdtDocument.signalCommonStyleCreated = "style/created";
ops.OdtDocument.signalCommonStyleDeleted = "style/deleted";
ops.OdtDocument.signalParagraphStyleModified = "paragraphstyle/modified";
ops.OdtDocument.signalOperationStart = "operation/start";
ops.OdtDocument.signalOperationEnd = "operation/end";
ops.OdtDocument.signalProcessingBatchStart = "router/batchstart";
ops.OdtDocument.signalProcessingBatchEnd = "router/batchend";
ops.OdtDocument.signalUndoStackChanged = "undo/changed";
ops.OdtDocument.signalStepsInserted = "steps/inserted";
ops.OdtDocument.signalStepsRemoved = "steps/removed";
ops.OdtDocument.signalMetadataUpdated = "metadata/updated";
ops.OdtDocument.signalAnnotationAdded = "annotation/added";
ops.OpAddAnnotation = function () {
  function P(C, N, x) {
    var S = C.getTextNodeAtStep(x, X);
    if (S) {
      x = (C = S.textNode).parentNode;
      if (S.offset !== C.length) {
        C.splitText(S.offset);
      }
      x.insertBefore(N, C.nextSibling);
      if (C.length === 0) {
        x.removeChild(C);
      }
    }
  }
  var X;
  var I;
  var y;
  var w;
  var E;
  var R;
  this.init = function (C) {
    X = C.memberid;
    I = parseInt(C.timestamp, 10);
    y = parseInt(C.position, 10);
    w = C.length !== undefined ? parseInt(C.length, 10) || 0 : undefined;
    E = C.name;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (C) {
    var x;
    var S;
    var N = C.getCursor(X);
    R = C.getDOMDocument();
    var u;
    var m;
    var l;
    var s = new Date(I);
    (u = R.createElementNS(odf.Namespaces.officens, "office:annotation")).setAttributeNS(odf.Namespaces.officens, "office:name", E);
    (x = R.createElementNS(odf.Namespaces.dcns, "dc:creator")).setAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid", X);
    x.textContent = C.getMember(X).getProperties().fullName;
    (S = R.createElementNS(odf.Namespaces.dcns, "dc:date")).appendChild(R.createTextNode(s.toISOString()));
    s = R.createElementNS(odf.Namespaces.textns, "text:list");
    m = R.createElementNS(odf.Namespaces.textns, "text:list-item");
    l = R.createElementNS(odf.Namespaces.textns, "text:p");
    m.appendChild(l);
    s.appendChild(m);
    u.appendChild(x);
    u.appendChild(S);
    u.appendChild(s);
    if (w !== undefined) {
      (x = R.createElementNS(odf.Namespaces.officens, "office:annotation-end")).setAttributeNS(odf.Namespaces.officens, "office:name", E);
      u.annotationEndElement = x;
      P(C, x, y + w);
    }
    P(C, u, y);
    C.emit(ops.OdtDocument.signalStepsInserted, {
      position: y
    });
    if (N) {
      x = R.createRange();
      S = u.getElementsByTagNameNS(odf.Namespaces.textns, "p")[0];
      x.selectNodeContents(S);
      N.setSelectedRange(x, false);
      N.setSelectionType(ops.OdtCursor.RangeSelection);
      C.emit(ops.Document.signalCursorMoved, N);
    }
    C.getOdfCanvas().addAnnotation(u);
    C.fixCursorPositions();
    C.emit(ops.OdtDocument.signalAnnotationAdded, {
      memberId: X,
      annotation: u
    });
    return true;
  };
  this.spec = function () {
    return {
      optype: "AddAnnotation",
      memberid: X,
      timestamp: I,
      position: y,
      length: w,
      name: E
    };
  };
};
ops.OpAddCursor = function () {
  var P;
  var X;
  this.init = function (I) {
    P = I.memberid;
    X = I.timestamp;
  };
  this.isEdit = false;
  this.group = undefined;
  this.execute = function (I) {
    var y = I.getCursor(P);
    return !y && (y = new ops.OdtCursor(P, I), I.addCursor(y), I.emit(ops.Document.signalCursorAdded, y), true);
  };
  this.spec = function () {
    return {
      optype: "AddCursor",
      memberid: P,
      timestamp: X
    };
  };
};
ops.OpAddMember = function () {
  var P;
  var X;
  var I;
  this.init = function (y) {
    P = y.memberid;
    X = parseInt(y.timestamp, 10);
    I = y.setProperties;
  };
  this.isEdit = false;
  this.group = undefined;
  this.execute = function (y) {
    var w;
    return !y.getMember(P) && (w = new ops.Member(P, I), y.addMember(w), y.emit(ops.Document.signalMemberAdded, w), true);
  };
  this.spec = function () {
    return {
      optype: "AddMember",
      memberid: P,
      timestamp: X,
      setProperties: I
    };
  };
};
ops.OpAddStyle = function () {
  var P;
  var X;
  var I;
  var y;
  var w;
  var E;
  var R = odf.Namespaces.stylens;
  this.init = function (C) {
    P = C.memberid;
    X = C.timestamp;
    I = C.styleName;
    y = C.styleFamily;
    w = C.isAutomaticStyle === "true" || C.isAutomaticStyle === true;
    E = C.setProperties;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (C) {
    var N = C.getOdfCanvas().odfContainer();
    var x = C.getFormatting();
    var S = C.getDOMDocument().createElementNS(R, "style:style");
    return !!S && (E && x.updateStyle(S, E), S.setAttributeNS(R, "style:family", y), S.setAttributeNS(R, "style:name", I), w ? N.rootElement.automaticStyles.appendChild(S) : N.rootElement.styles.appendChild(S), C.getOdfCanvas().refreshCSS(), w || C.emit(ops.OdtDocument.signalCommonStyleCreated, {
      name: I,
      family: y
    }), true);
  };
  this.spec = function () {
    return {
      optype: "AddStyle",
      memberid: P,
      timestamp: X,
      styleName: I,
      styleFamily: y,
      isAutomaticStyle: w,
      setProperties: E
    };
  };
};
odf.ObjectNameGenerator = function (P, X) {
  function I(m, l) {
    var M = {};
    this.generateName = function () {
      var ee;
      var O = l();
      var q = 0;
      do {
        ee = m + q;
        q += 1;
      } while (M[ee] || O[ee]);
      M[ee] = true;
      return ee;
    };
  }
  var w = odf.Namespaces.stylens;
  var E = odf.Namespaces.drawns;
  var R = odf.Namespaces.xlinkns;
  var C = new core.Utils().hashString(X);
  var N = null;
  var x = null;
  var S = null;
  var s = {};
  var u = {};
  this.generateStyleName = function () {
    if (N === null) {
      N = new I("auto" + C + "_", function () {
        return function y() {
          var m = {};
          [P.rootElement.automaticStyles, P.rootElement.styles].forEach(function (l) {
            for (l = l.firstElementChild; l;) {
              if (l.namespaceURI === w && l.localName === "style") {
                m[l.getAttributeNS(w, "name")] = true;
              }
              l = l.nextElementSibling;
            }
          });
          return m;
        }();
      });
    }
    return N.generateName();
  };
  this.generateFrameName = function () {
    var m;
    var l;
    var M;
    if (x === null) {
      l = P.rootElement.body.getElementsByTagNameNS(E, "frame");
      m = 0;
      for (; m < l.length; m += 1) {
        M = l.item(m);
        s[M.getAttributeNS(E, "name")] = true;
      }
      x = new I("fr" + C + "_", function () {
        return s;
      });
    }
    return x.generateName();
  };
  this.generateImageName = function () {
    var m;
    var l;
    var M;
    if (S === null) {
      M = P.rootElement.body.getElementsByTagNameNS(E, "image");
      m = 0;
      for (; m < M.length; m += 1) {
        l = (l = (l = M.item(m)).getAttributeNS(R, "href")).substring(9, l.lastIndexOf("."));
        u[l] = true;
      }
      S = new I("img" + C + "_", function () {
        return u;
      });
    }
    return S.generateName();
  };
};
odf.TextStyleApplicator = function (P, X, I) {
  function y(x) {
    function S(u, m) {
      if (typeof u == "object" && typeof m == "object") {
        return Object.keys(u).every(function (l) {
          return S(u[l], m[l]);
        });
      } else {
        return u === m;
      }
    }
    var s = {};
    this.isStyleApplied = function (u) {
      u = X.getAppliedStylesForElement(u, s).styleProperties;
      return S(x, u);
    };
  }
  function w(x) {
    var S = {};
    this.applyStyleToContainer = function (s) {
      var u;
      u = s.getAttributeNS(C, "style-name");
      var m = s.ownerDocument;
      if (!S.hasOwnProperty(u = u || "")) {
        var M;
        var l = u;
        M = u ? X.createDerivedStyleObject(u, "text", x) : x;
        m = m.createElementNS(N, "style:style");
        X.updateStyle(m, M);
        m.setAttributeNS(N, "style:name", P.generateStyleName());
        m.setAttributeNS(N, "style:family", "text");
        m.setAttributeNS("urn:webodf:names:scope", "scope", "document-content");
        I.appendChild(m);
        S[l] = m;
      }
      u = S[u].getAttributeNS(N, "name");
      s.setAttributeNS(C, "text:style-name", u);
    };
  }
  var R = core.DomUtils;
  var C = odf.Namespaces.textns;
  var N = odf.Namespaces.stylens;
  this.applyStyle = function (x, S, s) {
    var l;
    var M;
    var O;
    var u = {};
    runtime.assert(s && s.hasOwnProperty("style:text-properties"), "applyStyle without any text properties");
    u["style:text-properties"] = s["style:text-properties"];
    M = new w(u);
    O = new y(u);
    x.forEach(function (q) {
      if (O.isStyleApplied(q) === false) {
        l = function E(x, S) {
          var m;
          var l;
          var M;
          var s = x.ownerDocument;
          var u = x.parentNode;
          var O = new core.LoopWatchDog(10000);
          (l = []).push(x);
          M = x.nextSibling;
          for (; M && R.rangeContainsNode(S, M);) {
            O.check();
            l.push(M);
            M = M.nextSibling;
          }
          if (u.localName !== "span" || u.namespaceURI !== C) {
            m = s.createElementNS(C, "text:span");
            u.insertBefore(m, x);
            s = false;
          } else {
            if (x.previousSibling && !R.rangeContainsNode(S, u.firstChild)) {
              m = u.cloneNode(false);
              u.parentNode.insertBefore(m, u.nextSibling);
            } else {
              m = u;
            }
            s = true;
          }
          l.forEach(function (q) {
            if (q.parentNode !== m) {
              m.appendChild(q);
            }
          });
          if (M && s) {
            l = m.cloneNode(false);
            m.parentNode.insertBefore(l, m.nextSibling);
            l = m.cloneNode(false);
            m.parentNode.insertBefore(l, m.nextSibling);
            for (; M;) {
              O.check();
              s = M.nextSibling;
              l.appendChild(M);
              M = s;
            }
          }
          return m;
        }(q, S);
        M.applyStyleToContainer(l);
      }
    });
  };
};
ops.OpApplyDirectStyling = function () {
  var X;
  var I;
  var y;
  var w;
  var E;
  var R = odf.OdfUtils;
  var C = core.DomUtils;
  this.init = function (N) {
    X = N.memberid;
    I = N.timestamp;
    y = parseInt(N.position, 10);
    w = parseInt(N.length, 10);
    E = N.setProperties;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (N) {
    var x = N.convertCursorToDomRange(y, w);
    var S = R.getParagraphElements(x);
    (function P(N, x, S) {
      var s = N.getOdfCanvas().odfContainer();
      var u = C.splitBoundaries(x);
      var m = R.getTextNodes(x, false);
      new odf.TextStyleApplicator(new odf.ObjectNameGenerator(s, X), N.getFormatting(), s.rootElement.automaticStyles).applyStyle(m, x, S);
      u.forEach(C.normalizeTextNodes);
    })(N, x, E);
    x.detach();
    N.getOdfCanvas().refreshCSS();
    N.fixCursorPositions();
    S.forEach(function (s) {
      N.emit(ops.OdtDocument.signalParagraphChanged, {
        paragraphElement: s,
        memberId: X,
        timeStamp: I
      });
    });
    N.getOdfCanvas().rerenderAnnotations();
    return true;
  };
  this.spec = function () {
    return {
      optype: "ApplyDirectStyling",
      memberid: X,
      timestamp: I,
      position: y,
      length: w,
      setProperties: E
    };
  };
};
ops.OpApplyHyperlink = function () {
  var X;
  var I;
  var y;
  var w;
  var E;
  var R = core.DomUtils;
  var C = odf.OdfUtils;
  this.init = function (N) {
    X = N.memberid;
    I = N.timestamp;
    y = N.position;
    w = N.length;
    E = N.hyperlink;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (N) {
    var x = N.getDOMDocument();
    var S = N.convertCursorToDomRange(y, w);
    var s = R.splitBoundaries(S);
    var u = [];
    var m = C.getTextNodes(S, false);
    return m.length !== 0 && (m.forEach(function (l) {
      var M = C.getParagraphElement(l);
      runtime.assert(function P(N) {
        for (; N;) {
          if (C.isHyperlink(N)) {
            return true;
          }
          N = N.parentNode;
        }
        return false;
      }(l) === false, "The given range should not contain any link.");
      var O = E;
      var q = x.createElementNS(odf.Namespaces.textns, "text:a");
      q.setAttributeNS(odf.Namespaces.xlinkns, "xlink:type", "simple");
      q.setAttributeNS(odf.Namespaces.xlinkns, "xlink:href", O);
      l.parentNode.insertBefore(q, l);
      q.appendChild(l);
      if (u.indexOf(M) === -1) {
        u.push(M);
      }
    }), s.forEach(R.normalizeTextNodes), S.detach(), N.fixCursorPositions(), N.getOdfCanvas().refreshSize(), N.getOdfCanvas().rerenderAnnotations(), u.forEach(function (l) {
      N.emit(ops.OdtDocument.signalParagraphChanged, {
        paragraphElement: l,
        memberId: X,
        timeStamp: I
      });
    }), true);
  };
  this.spec = function () {
    return {
      optype: "ApplyHyperlink",
      memberid: X,
      timestamp: I,
      position: y,
      length: w,
      hyperlink: E
    };
  };
};
ops.OpInsertImage = function () {
  var P;
  var X;
  var I;
  var y;
  var w;
  var E;
  var R;
  var C;
  var N = odf.Namespaces.drawns;
  var x = odf.Namespaces.svgns;
  var S = odf.Namespaces.textns;
  var s = odf.Namespaces.xlinkns;
  var u = odf.OdfUtils;
  this.init = function (m) {
    P = m.memberid;
    X = m.timestamp;
    I = m.position;
    y = m.filename;
    w = m.frameWidth;
    E = m.frameHeight;
    R = m.frameStyleName;
    C = m.frameName;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (m) {
    var M;
    var O;
    var l = m.getOdfCanvas();
    if (!(q = m.getTextNodeAtStep(I, P))) {
      return false;
    }
    O = u.getParagraphElement(M = q.textNode);
    var q = q.offset !== M.length ? M.splitText(q.offset) : M.nextSibling;
    var ee = (G = m.getDOMDocument()).createElementNS(N, "draw:image");
    var G = G.createElementNS(N, "draw:frame");
    ee.setAttributeNS(s, "xlink:href", y);
    ee.setAttributeNS(s, "xlink:type", "simple");
    ee.setAttributeNS(s, "xlink:show", "embed");
    ee.setAttributeNS(s, "xlink:actuate", "onLoad");
    G.setAttributeNS(N, "draw:style-name", R);
    G.setAttributeNS(N, "draw:name", C);
    G.setAttributeNS(S, "text:anchor-type", "as-char");
    G.setAttributeNS(x, "svg:width", w);
    G.setAttributeNS(x, "svg:height", E);
    G.appendChild(ee);
    M.parentNode.insertBefore(G, q);
    m.emit(ops.OdtDocument.signalStepsInserted, {
      position: I
    });
    if (M.length === 0) {
      M.parentNode.removeChild(M);
    }
    l.addCssForFrameWithImage(G);
    l.refreshCSS();
    m.emit(ops.OdtDocument.signalParagraphChanged, {
      paragraphElement: O,
      memberId: P,
      timeStamp: X
    });
    l.rerenderAnnotations();
    return true;
  };
  this.spec = function () {
    return {
      optype: "InsertImage",
      memberid: P,
      timestamp: X,
      filename: y,
      position: I,
      frameWidth: w,
      frameHeight: E,
      frameStyleName: R,
      frameName: C
    };
  };
};
ops.OpInsertTable = function () {
  function P(s, u) {
    var m;
    if (x.length === 1) {
      m = x[0];
    } else if (x.length === 3) {
      switch (s) {
        case 0:
          m = x[0];
          break;
        case y - 1:
          m = x[2];
          break;
        default:
          m = x[1];
      }
    } else {
      m = x[s];
    }
    if (m.length === 1) {
      return m[0];
    }
    if (m.length === 3) {
      switch (u) {
        case 0:
          return m[0];
        case w - 1:
          return m[2];
        default:
          return m[1];
      }
    }
    return m[u];
  }
  var X;
  var I;
  var y;
  var w;
  var E;
  var R;
  var C;
  var N;
  var x;
  var S = odf.OdfUtils;
  this.init = function (s) {
    X = s.memberid;
    I = s.timestamp;
    E = s.position;
    y = s.initialRows;
    w = s.initialColumns;
    R = s.tableName;
    C = s.tableStyleName;
    N = s.tableColumnStyleName;
    x = s.tableCellStyleMatrix;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (s) {
    var u = s.getTextNodeAtStep(E);
    var m = s.getRootNode();
    if (u) {
      var q;
      var ee;
      var G;
      var B;
      var l = s.getDOMDocument();
      var M = l.createElementNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:table");
      var O = l.createElementNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:table-column");
      if (C) {
        M.setAttributeNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:style-name", C);
      }
      if (R) {
        M.setAttributeNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:name", R);
      }
      O.setAttributeNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:number-columns-repeated", w);
      if (N) {
        O.setAttributeNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:style-name", N);
      }
      M.appendChild(O);
      G = 0;
      for (; G < y; G += 1) {
        O = l.createElementNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:table-row");
        B = 0;
        for (; B < w; B += 1) {
          q = l.createElementNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:table-cell");
          if (ee = P(G, B)) {
            q.setAttributeNS("urn:oasis:names:tc:opendocument:xmlns:table:1.0", "table:style-name", ee);
          }
          ee = l.createElementNS("urn:oasis:names:tc:opendocument:xmlns:text:1.0", "text:p");
          q.appendChild(ee);
          O.appendChild(q);
        }
        M.appendChild(O);
      }
      u = S.getParagraphElement(u.textNode);
      m.insertBefore(M, u.nextSibling);
      s.emit(ops.OdtDocument.signalStepsInserted, {
        position: E
      });
      s.getOdfCanvas().refreshSize();
      s.emit(ops.OdtDocument.signalTableAdded, {
        tableElement: M,
        memberId: X,
        timeStamp: I
      });
      s.getOdfCanvas().rerenderAnnotations();
      return true;
    }
    return false;
  };
  this.spec = function () {
    return {
      optype: "InsertTable",
      memberid: X,
      timestamp: I,
      position: E,
      initialRows: y,
      initialColumns: w,
      tableName: R,
      tableStyleName: C,
      tableColumnStyleName: N,
      tableCellStyleMatrix: x
    };
  };
};
ops.OpInsertText = function () {
  function P(C) {
    return C !== "\t" && R.isODFWhitespace(C);
  }
  var X;
  var I;
  var y;
  var w;
  var E;
  var R = odf.OdfUtils;
  this.init = function (C) {
    X = C.memberid;
    I = C.timestamp;
    y = C.position;
    E = C.text;
    w = C.moveCursor === "true" || C.moveCursor === true;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (C) {
    var N;
    var x;
    var S;
    var m;
    var M;
    var q;
    var s = null;
    var u = C.getDOMDocument();
    var l = 0;
    var O = C.getCursor(X);
    C.upgradeWhitespacesAtPosition(y);
    if (N = C.getTextNodeAtStep(y)) {
      s = (x = N.textNode).nextSibling;
      S = x.parentNode;
      m = R.getParagraphElement(x);
      q = 0;
      for (; q < E.length; q += 1) {
        if (!(M = E[q] === "\t")) {
          var ee = q;
          M = P((M = E)[ee]) && (ee === 0 || ee === M.length - 1 || P(M[ee - 1]));
        }
        if (M) {
          if (l === 0) {
            if (N.offset !== x.length) {
              s = x.splitText(N.offset);
            }
            if (q > 0) {
              x.appendData(E.substring(0, q));
            }
          } else if (l < q) {
            l = E.substring(l, q);
            S.insertBefore(u.createTextNode(l), s);
          }
          l = q + 1;
          if (E[q] === "\t") {
            (M = u.createElementNS("urn:oasis:names:tc:opendocument:xmlns:text:1.0", "text:tab")).appendChild(u.createTextNode("\t"));
          } else {
            if (E[q] !== " ") {
              runtime.log("WARN: InsertText operation contains non-tab, non-space whitespace character (character code " + E.charCodeAt(q) + ")");
            }
            (M = u.createElementNS("urn:oasis:names:tc:opendocument:xmlns:text:1.0", "text:s")).appendChild(u.createTextNode(" "));
          }
          S.insertBefore(M, s);
        }
      }
      if (l === 0) {
        x.insertData(N.offset, E);
      } else if (l < E.length) {
        N = E.substring(l);
        S.insertBefore(u.createTextNode(N), s);
      }
      s = x.nextSibling;
      (S = x.parentNode).removeChild(x);
      S.insertBefore(x, s);
      if (x.length === 0) {
        x.parentNode.removeChild(x);
      }
      C.emit(ops.OdtDocument.signalStepsInserted, {
        position: y
      });
      if (O && w) {
        C.moveCursor(X, y + E.length, 0);
        C.emit(ops.Document.signalCursorMoved, O);
      }
      C.downgradeWhitespacesAtPosition(y);
      C.downgradeWhitespacesAtPosition(y + E.length);
      C.getOdfCanvas().refreshSize();
      C.emit(ops.OdtDocument.signalParagraphChanged, {
        paragraphElement: m,
        memberId: X,
        timeStamp: I
      });
      C.getOdfCanvas().rerenderAnnotations();
      return true;
    }
    return false;
  };
  this.spec = function () {
    return {
      optype: "InsertText",
      memberid: X,
      timestamp: I,
      position: y,
      text: E,
      moveCursor: w
    };
  };
};
odf.CollapsingRules = function (P) {
  function X(E) {
    if (y.isODFNode(E) || E.localName === "br" && y.isLineBreak(E.parentNode) || E.nodeType === Node.TEXT_NODE && y.isODFNode(E.parentNode)) {
      return NodeFilter.FILTER_REJECT;
    } else {
      return NodeFilter.FILTER_ACCEPT;
    }
  }
  var y = odf.OdfUtils;
  var w = core.DomUtils;
  this.mergeChildrenIntoParent = function I(E) {
    var R;
    if (E.nodeType === Node.TEXT_NODE) {
      (R = E.parentNode).removeChild(E);
    } else {
      R = w.removeUnwantedNodes(E, X);
    }
    if (E = R) {
      E = !y.isParagraph(E = R) && E !== P && y.hasNoODFContent(E);
    }
    if (E) {
      return I(R);
    } else {
      return R;
    }
  };
};
ops.OpMergeParagraph = function () {
  function P(m) {
    if (odf.OdfUtils.isInlineRoot(m)) {
      return NodeFilter.FILTER_SKIP;
    } else if (S.isGroupingElement(m) && S.hasNoODFContent(m)) {
      return NodeFilter.FILTER_REJECT;
    } else {
      return NodeFilter.FILTER_ACCEPT;
    }
  }
  function X(m) {
    if (m.nodeType === Node.TEXT_NODE) {
      if (m.length === 0) {
        runtime.log("WARN: Empty text node found during merge operation");
        return true;
      }
      if (S.isODFWhitespace(m.data) && S.isSignificantWhitespace(m, 0) === false) {
        return true;
      }
      m = "#text";
    } else {
      m = (m.prefix ? m.prefix + ":" : "") + m.localName;
    }
    runtime.log("WARN: Unexpected text element found near paragraph boundary [" + m + "]");
    return false;
  }
  function I(m) {
    if (!m.collapsed) {
      s.splitBoundaries(m);
      (m = S.getTextElements(m, false, true).filter(X)).forEach(function (l) {
        l.parentNode.removeChild(l);
      });
    }
  }
  function y(m, l, M) {
    m = m.convertCursorStepToDomPoint(l);
    var O = S.getParagraphElement(m.node, m.offset);
    runtime.assert(Boolean(O), "Paragraph not found at step " + l);
    if (M) {
      M.setPosition(m.node, m.offset);
    }
    return O;
  }
  var w;
  var E;
  var R;
  var C;
  var N;
  var x;
  var S = odf.OdfUtils;
  var s = core.DomUtils;
  var u = odf.Namespaces.textns;
  this.init = function (m) {
    w = m.memberid;
    E = m.timestamp;
    R = m.moveCursor;
    C = m.paragraphStyleName;
    N = parseInt(m.sourceStartPosition, 10);
    x = parseInt(m.destinationStartPosition, 10);
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (m) {
    var l;
    var M;
    var O = m.getCursor(w);
    l = m.getRootNode();
    var G;
    var q = new odf.CollapsingRules(l);
    var ee = m.createStepIterator(l, 0, [m.getPositionFilter()], l);
    runtime.assert(x < N, "Destination paragraph (" + x + ") must be before source paragraph (" + N + ")");
    M = y(m, x);
    l = y(m, N, ee);
    ee.previousStep();
    runtime.assert(s.containsNode(M, ee.container()), "Destination paragraph must be adjacent to the source paragraph");
    G = M.ownerDocument.createRange();
    ee.setPosition(M, M.childNodes.length);
    ee.roundToPreviousStep();
    G.setStart(ee.container(), ee.offset());
    G.setEnd(M, M.childNodes.length);
    I(G);
    G = M.childNodes.length;
    var B = l.ownerDocument.createRange();
    ee.setPosition(l, 0);
    ee.roundToNextStep();
    B.setStart(l, 0);
    B.setEnd(ee.container(), ee.offset());
    I(B);
    B = l.firstChild;
    for (; B;) {
      if (B.localName === "editinfo") {
        l.removeChild(B);
      } else {
        M.appendChild(B);
        s.removeUnwantedNodes(B, P);
      }
      B = l.firstChild;
    }
    runtime.assert(l.childNodes.length === 0, "Source paragraph should be empty before it is removed");
    q.mergeChildrenIntoParent(l);
    m.emit(ops.OdtDocument.signalStepsRemoved, {
      position: N - 1
    });
    ee.setPosition(M, G);
    ee.roundToClosestStep();
    if (!ee.previousStep()) {
      ee.roundToNextStep();
    }
    m.downgradeWhitespaces(ee);
    if (C) {
      M.setAttributeNS(u, "text:style-name", C);
    } else {
      M.removeAttributeNS(u, "style-name");
    }
    if (O && R) {
      m.moveCursor(w, N - 1, 0);
      m.emit(ops.Document.signalCursorMoved, O);
    }
    m.fixCursorPositions();
    m.getOdfCanvas().refreshSize();
    m.emit(ops.OdtDocument.signalParagraphChanged, {
      paragraphElement: M,
      memberId: w,
      timeStamp: E
    });
    m.getOdfCanvas().rerenderAnnotations();
    return true;
  };
  this.spec = function () {
    return {
      optype: "MergeParagraph",
      memberid: w,
      timestamp: E,
      moveCursor: R,
      paragraphStyleName: C,
      sourceStartPosition: N,
      destinationStartPosition: x
    };
  };
};
ops.OpMoveCursor = function () {
  var P;
  var X;
  var I;
  var y;
  var w;
  this.init = function (E) {
    P = E.memberid;
    X = E.timestamp;
    I = E.position;
    y = E.length || 0;
    w = E.selectionType || ops.OdtCursor.RangeSelection;
  };
  this.isEdit = false;
  this.group = undefined;
  this.execute = function (E) {
    var C;
    var R = E.getCursor(P);
    return !!R && (C = E.convertCursorToDomRange(I, y), R.setSelectedRange(C, y >= 0), R.setSelectionType(w), E.emit(ops.Document.signalCursorMoved, R), true);
  };
  this.spec = function () {
    return {
      optype: "MoveCursor",
      memberid: P,
      timestamp: X,
      position: I,
      length: y,
      selectionType: w
    };
  };
};
ops.OpRemoveAnnotation = function () {
  var P;
  var X;
  var I;
  var y;
  var w = core.DomUtils;
  this.init = function (E) {
    P = E.memberid;
    X = E.timestamp;
    I = parseInt(E.position, 10);
    y = parseInt(E.length, 10);
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (E) {
    function R(x) {
      N.parentNode.insertBefore(x, N);
    }
    for (var N, C = E.getIteratorAtPosition(I).container(); C.namespaceURI !== odf.Namespaces.officens || C.localName !== "annotation";) {
      C = C.parentNode;
    }
    return C !== null && (C = (N = C).annotationEndElement, E.getOdfCanvas().forgetAnnotation(N), w.getElementsByTagNameNS(N, "urn:webodf:names:cursor", "cursor").forEach(R), w.getElementsByTagNameNS(N, "urn:webodf:names:cursor", "anchor").forEach(R), N.parentNode.removeChild(N), C && C.parentNode.removeChild(C), E.emit(ops.OdtDocument.signalStepsRemoved, {
      position: I > 0 ? I - 1 : I
    }), E.getOdfCanvas().rerenderAnnotations(), E.fixCursorPositions(), true);
  };
  this.spec = function () {
    return {
      optype: "RemoveAnnotation",
      memberid: P,
      timestamp: X,
      position: I,
      length: y
    };
  };
};
ops.OpRemoveBlob = function () {
  var P;
  var X;
  var I;
  this.init = function (y) {
    P = y.memberid;
    X = y.timestamp;
    I = y.filename;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (y) {
    y.getOdfCanvas().odfContainer().removeBlob(I);
    return true;
  };
  this.spec = function () {
    return {
      optype: "RemoveBlob",
      memberid: P,
      timestamp: X,
      filename: I
    };
  };
};
ops.OpRemoveCursor = function () {
  var P;
  var X;
  this.init = function (I) {
    P = I.memberid;
    X = I.timestamp;
  };
  this.isEdit = false;
  this.group = undefined;
  this.execute = function (I) {
    return !!I.removeCursor(P);
  };
  this.spec = function () {
    return {
      optype: "RemoveCursor",
      memberid: P,
      timestamp: X
    };
  };
};
ops.OpRemoveHyperlink = function () {
  var P;
  var X;
  var I;
  var y;
  var w = core.DomUtils;
  var E = odf.OdfUtils;
  this.init = function (R) {
    P = R.memberid;
    X = R.timestamp;
    I = R.position;
    y = R.length;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (R) {
    var C = R.convertCursorToDomRange(I, y);
    var N = E.getHyperlinkElements(C);
    runtime.assert(N.length === 1, "The given range should only contain a single link.");
    N = w.mergeIntoParent(N[0]);
    C.detach();
    R.fixCursorPositions();
    R.getOdfCanvas().refreshSize();
    R.getOdfCanvas().rerenderAnnotations();
    R.emit(ops.OdtDocument.signalParagraphChanged, {
      paragraphElement: E.getParagraphElement(N),
      memberId: P,
      timeStamp: X
    });
    return true;
  };
  this.spec = function () {
    return {
      optype: "RemoveHyperlink",
      memberid: P,
      timestamp: X,
      position: I,
      length: y
    };
  };
};
ops.OpRemoveMember = function () {
  var P;
  var X;
  this.init = function (I) {
    P = I.memberid;
    X = parseInt(I.timestamp, 10);
  };
  this.isEdit = false;
  this.group = undefined;
  this.execute = function (I) {
    return !!I.getMember(P) && (I.removeMember(P), I.emit(ops.Document.signalMemberRemoved, P), true);
  };
  this.spec = function () {
    return {
      optype: "RemoveMember",
      memberid: P,
      timestamp: X
    };
  };
};
ops.OpRemoveStyle = function () {
  var P;
  var X;
  var I;
  var y;
  this.init = function (w) {
    P = w.memberid;
    X = w.timestamp;
    I = w.styleName;
    y = w.styleFamily;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (w) {
    var E = w.getFormatting().getStyleElement(I, y);
    return !!E && (E.parentNode.removeChild(E), w.getOdfCanvas().refreshCSS(), w.emit(ops.OdtDocument.signalCommonStyleDeleted, {
      name: I,
      family: y
    }), true);
  };
  this.spec = function () {
    return {
      optype: "RemoveStyle",
      memberid: P,
      timestamp: X,
      styleName: I,
      styleFamily: y
    };
  };
};
ops.OpRemoveText = function () {
  var P;
  var X;
  var I;
  var y;
  var w = odf.OdfUtils;
  var E = core.DomUtils;
  this.init = function (R) {
    runtime.assert(R.length >= 0, "OpRemoveText only supports positive lengths");
    P = R.memberid;
    X = R.timestamp;
    I = parseInt(R.position, 10);
    y = parseInt(R.length, 10);
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (R) {
    var C;
    var N;
    var x;
    var S = R.getCursor(P);
    var s = new odf.CollapsingRules(R.getRootNode());
    R.upgradeWhitespacesAtPosition(I);
    R.upgradeWhitespacesAtPosition(I + y);
    C = R.convertCursorToDomRange(I, y);
    E.splitBoundaries(C);
    N = w.getTextElements(C, false, true);
    x = w.getParagraphElement(C.startContainer, C.startOffset);
    runtime.assert(x !== undefined, "Attempting to remove text outside a paragraph element");
    C.detach();
    N.forEach(function (u) {
      if (u.parentNode) {
        runtime.assert(E.containsNode(x, u), "RemoveText only supports removing elements within the same paragraph");
        s.mergeChildrenIntoParent(u);
      } else {
        runtime.log("WARN: text element has already been removed from it's container");
      }
    });
    R.emit(ops.OdtDocument.signalStepsRemoved, {
      position: I
    });
    R.downgradeWhitespacesAtPosition(I);
    R.fixCursorPositions();
    R.getOdfCanvas().refreshSize();
    R.emit(ops.OdtDocument.signalParagraphChanged, {
      paragraphElement: x,
      memberId: P,
      timeStamp: X
    });
    if (S) {
      S.resetSelectionType();
      R.emit(ops.Document.signalCursorMoved, S);
    }
    R.getOdfCanvas().rerenderAnnotations();
    return true;
  };
  this.spec = function () {
    return {
      optype: "RemoveText",
      memberid: P,
      timestamp: X,
      position: I,
      length: y
    };
  };
};
ops.OpSetBlob = function () {
  var P;
  var X;
  var I;
  var y;
  var w;
  this.init = function (E) {
    P = E.memberid;
    X = E.timestamp;
    I = E.filename;
    y = E.mimetype;
    w = E.content;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (E) {
    E.getOdfCanvas().odfContainer().setBlob(I, y, w);
    return true;
  };
  this.spec = function () {
    return {
      optype: "SetBlob",
      memberid: P,
      timestamp: X,
      filename: I,
      mimetype: y,
      content: w
    };
  };
};
ops.OpSetParagraphStyle = function () {
  var X;
  var I;
  var y;
  var w;
  var E = odf.OdfUtils;
  this.init = function (R) {
    X = R.memberid;
    I = R.timestamp;
    y = R.position;
    w = R.styleName;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (R) {
    var C;
    var N;
    C = R.getIteratorAtPosition(y);
    return !!(N = E.getParagraphElement(C.container())) && (runtime.assert(function P(R, C, N) {
      var x = [R.getPositionFilter()];
      var S = N.container();
      N = N.unfilteredDomOffset();
      return R.createStepIterator(S, N, x, C).previousStep() === false;
    }(R, N, C), "SetParagraphStyle position should be the first position in the paragraph"), w ? N.setAttributeNS("urn:oasis:names:tc:opendocument:xmlns:text:1.0", "text:style-name", w) : N.removeAttributeNS("urn:oasis:names:tc:opendocument:xmlns:text:1.0", "style-name"), R.getOdfCanvas().refreshSize(), R.emit(ops.OdtDocument.signalParagraphChanged, {
      paragraphElement: N,
      timeStamp: I,
      memberId: X
    }), R.getOdfCanvas().rerenderAnnotations(), true);
  };
  this.spec = function () {
    return {
      optype: "SetParagraphStyle",
      memberid: X,
      timestamp: I,
      position: y,
      styleName: w
    };
  };
};
ops.OpSplitParagraph = function () {
  var P;
  var X;
  var I;
  var y;
  var w;
  var E;
  var R = odf.OdfUtils;
  var C = odf.Namespaces.textns;
  this.init = function (N) {
    P = N.memberid;
    X = N.timestamp;
    y = N.position;
    I = N.sourceParagraphPosition;
    E = N.paragraphStyleName;
    w = N.moveCursor === "true" || N.moveCursor === true;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (N) {
    var x;
    var S;
    var s;
    var u;
    var m;
    var l;
    var M;
    var O = N.getCursor(P);
    N.upgradeWhitespacesAtPosition(y);
    if (!(x = N.getTextNodeAtStep(y)) || !(S = R.getParagraphElement(x.textNode))) {
      return false;
    }
    s = R.isListItem(S.parentNode) ? S.parentNode : S;
    if (x.offset === 0) {
      M = x.textNode.previousSibling;
      l = null;
    } else {
      M = x.textNode;
      l = x.offset >= x.textNode.length ? null : x.textNode.splitText(x.offset);
    }
    u = x.textNode;
    for (; u !== s;) {
      m = (u = u.parentNode).cloneNode(false);
      if (l) {
        m.appendChild(l);
      }
      if (M) {
        for (; M && M.nextSibling;) {
          m.appendChild(M.nextSibling);
        }
      } else {
        for (; u.firstChild;) {
          m.appendChild(u.firstChild);
        }
      }
      u.parentNode.insertBefore(m, u.nextSibling);
      M = u;
      l = m;
    }
    if (R.isListItem(l)) {
      l = l.childNodes.item(0);
    }
    if (E) {
      l.setAttributeNS(C, "text:style-name", E);
    } else {
      l.removeAttributeNS(C, "style-name");
    }
    if (x.textNode.length === 0) {
      x.textNode.parentNode.removeChild(x.textNode);
    }
    N.emit(ops.OdtDocument.signalStepsInserted, {
      position: y
    });
    if (O && w) {
      N.moveCursor(P, y + 1, 0);
      N.emit(ops.Document.signalCursorMoved, O);
    }
    N.fixCursorPositions();
    N.getOdfCanvas().refreshSize();
    N.emit(ops.OdtDocument.signalParagraphChanged, {
      paragraphElement: S,
      memberId: P,
      timeStamp: X
    });
    N.emit(ops.OdtDocument.signalParagraphChanged, {
      paragraphElement: l,
      memberId: P,
      timeStamp: X
    });
    N.getOdfCanvas().rerenderAnnotations();
    return true;
  };
  this.spec = function () {
    return {
      optype: "SplitParagraph",
      memberid: P,
      timestamp: X,
      position: y,
      sourceParagraphPosition: I,
      paragraphStyleName: E,
      moveCursor: w
    };
  };
};
ops.OpUpdateMember = function () {
  var X;
  var I;
  var y;
  var w;
  this.init = function (E) {
    X = E.memberid;
    I = parseInt(E.timestamp, 10);
    y = E.setProperties;
    w = E.removedProperties;
  };
  this.isEdit = false;
  this.group = undefined;
  this.execute = function (E) {
    var R = E.getMember(X);
    return !!R && (w && R.removeProperties(w), y && (R.setProperties(y), y.fullName && function P(E) {
      var R = "//dc:creator[@editinfo:memberid='" + X + "']";
      E = xmldom.XPath.getODFElementsWithXPath(E.getRootNode(), R, function (C) {
        if (C === "editinfo") {
          return "urn:webodf:names:editinfo";
        } else {
          return odf.Namespaces.lookupNamespaceURI(C);
        }
      });
      R = 0;
      for (; R < E.length; R += 1) {
        E[R].textContent = y.fullName;
      }
    }(E)), E.emit(ops.Document.signalMemberUpdated, R), true);
  };
  this.spec = function () {
    return {
      optype: "UpdateMember",
      memberid: X,
      timestamp: I,
      setProperties: y,
      removedProperties: w
    };
  };
};
ops.OpUpdateMetadata = function () {
  var P;
  var X;
  var I;
  var y;
  this.init = function (w) {
    P = w.memberid;
    X = parseInt(w.timestamp, 10);
    I = w.setProperties;
    y = w.removedProperties;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (w) {
    var E = w.getOdfCanvas().odfContainer();
    var R = null;
    if (y) {
      R = y.attributes.split(",");
    }
    E.setMetadata(I, R);
    w.emit(ops.OdtDocument.signalMetadataUpdated, {
      setProperties: I !== null ? I : {},
      removedProperties: R !== null ? R : []
    });
    return true;
  };
  this.spec = function () {
    return {
      optype: "UpdateMetadata",
      memberid: P,
      timestamp: X,
      setProperties: I,
      removedProperties: y
    };
  };
};
ops.OpUpdateParagraphStyle = function () {
  function P(C, N) {
    var x;
    var S;
    var s = N ? N.split(",") : [];
    for (x = 0; x < s.length; x += 1) {
      S = s[x].split(":");
      C.removeAttributeNS(odf.Namespaces.lookupNamespaceURI(S[0]), S[1]);
    }
  }
  var X;
  var I;
  var y;
  var w;
  var E;
  var R = odf.Namespaces.stylens;
  this.init = function (C) {
    X = C.memberid;
    I = C.timestamp;
    y = C.styleName;
    w = C.setProperties;
    E = C.removedProperties;
  };
  this.isEdit = true;
  this.group = undefined;
  this.execute = function (C) {
    var x;
    var S;
    var s;
    var N = C.getFormatting();
    return !!(x = y !== "" ? N.getStyleElement(y, "paragraph") : N.getDefaultStyleElement("paragraph")) && (S = x.getElementsByTagNameNS(R, "paragraph-properties").item(0), s = x.getElementsByTagNameNS(R, "text-properties").item(0), w && N.updateStyle(x, w), E && (N = E["style:paragraph-properties"], S && N && (P(S, N.attributes), S.attributes.length === 0 && x.removeChild(S)), N = E["style:text-properties"], s && N && (P(s, N.attributes), s.attributes.length === 0 && x.removeChild(s)), P(x, E.attributes)), C.getOdfCanvas().refreshCSS(), C.emit(ops.OdtDocument.signalParagraphStyleModified, y), C.getOdfCanvas().rerenderAnnotations(), true);
  };
  this.spec = function () {
    return {
      optype: "UpdateParagraphStyle",
      memberid: X,
      timestamp: I,
      styleName: y,
      setProperties: w,
      removedProperties: E
    };
  };
};
ops.OperationFactory = function () {
  function P(I) {
    return function (y) {
      return new I();
    };
  }
  var X;
  this.register = function (I, y) {
    X[I] = y;
  };
  this.create = function (I) {
    var y = null;
    var w = X[I.optype];
    if (w) {
      (y = w(I)).init(I);
    }
    return y;
  };
  X = {
    AddMember: P(ops.OpAddMember),
    UpdateMember: P(ops.OpUpdateMember),
    RemoveMember: P(ops.OpRemoveMember),
    AddCursor: P(ops.OpAddCursor),
    ApplyDirectStyling: P(ops.OpApplyDirectStyling),
    SetBlob: P(ops.OpSetBlob),
    RemoveBlob: P(ops.OpRemoveBlob),
    InsertImage: P(ops.OpInsertImage),
    InsertTable: P(ops.OpInsertTable),
    InsertText: P(ops.OpInsertText),
    RemoveText: P(ops.OpRemoveText),
    MergeParagraph: P(ops.OpMergeParagraph),
    SplitParagraph: P(ops.OpSplitParagraph),
    SetParagraphStyle: P(ops.OpSetParagraphStyle),
    UpdateParagraphStyle: P(ops.OpUpdateParagraphStyle),
    AddStyle: P(ops.OpAddStyle),
    RemoveStyle: P(ops.OpRemoveStyle),
    MoveCursor: P(ops.OpMoveCursor),
    RemoveCursor: P(ops.OpRemoveCursor),
    AddAnnotation: P(ops.OpAddAnnotation),
    RemoveAnnotation: P(ops.OpRemoveAnnotation),
    UpdateMetadata: P(ops.OpUpdateMetadata),
    ApplyHyperlink: P(ops.OpApplyHyperlink),
    RemoveHyperlink: P(ops.OpRemoveHyperlink)
  };
};
ops.OperationRouter = function () {};
ops.OperationRouter.prototype.setOperationFactory = function (P) {};
ops.OperationRouter.prototype.setPlaybackFunction = function (P) {};
ops.OperationRouter.prototype.push = function (P) {};
ops.OperationRouter.prototype.close = function (P) {};
ops.OperationRouter.prototype.subscribe = function (P, X) {};
ops.OperationRouter.prototype.unsubscribe = function (P, X) {};
ops.OperationRouter.prototype.hasLocalUnsyncedOps = function () {};
ops.OperationRouter.prototype.hasSessionHostConnection = function () {};
ops.OperationRouter.signalProcessingBatchStart = "router/batchstart";
ops.OperationRouter.signalProcessingBatchEnd = "router/batchend";
ops.TrivialOperationRouter = function () {
  var X;
  var I;
  var P = new core.EventNotifier([ops.OperationRouter.signalProcessingBatchStart, ops.OperationRouter.signalProcessingBatchEnd]);
  var y = 0;
  this.setOperationFactory = function (w) {
    X = w;
  };
  this.setPlaybackFunction = function (w) {
    I = w;
  };
  this.push = function (w) {
    y += 1;
    P.emit(ops.OperationRouter.signalProcessingBatchStart, {});
    w.forEach(function (E) {
      (E = E.spec()).timestamp = Date.now();
      (E = X.create(E)).group = "g" + y;
      I(E);
    });
    P.emit(ops.OperationRouter.signalProcessingBatchEnd, {});
  };
  this.close = function (w) {
    w();
  };
  this.subscribe = function (w, E) {
    P.subscribe(w, E);
  };
  this.unsubscribe = function (w, E) {
    P.unsubscribe(w, E);
  };
  this.hasLocalUnsyncedOps = function () {
    return false;
  };
  this.hasSessionHostConnection = function () {
    return true;
  };
};
ops.Session = function (P) {
  function X(R) {
    w.emit(ops.OdtDocument.signalProcessingBatchStart, R);
  }
  function I(R) {
    w.emit(ops.OdtDocument.signalProcessingBatchEnd, R);
  }
  var y = new ops.OperationFactory();
  var w = new ops.OdtDocument(P);
  var E = null;
  this.setOperationFactory = function (R) {
    y = R;
    if (E) {
      E.setOperationFactory(y);
    }
  };
  this.setOperationRouter = function (R) {
    if (E) {
      E.unsubscribe(ops.OperationRouter.signalProcessingBatchStart, X);
      E.unsubscribe(ops.OperationRouter.signalProcessingBatchEnd, I);
    }
    (E = R).subscribe(ops.OperationRouter.signalProcessingBatchStart, X);
    E.subscribe(ops.OperationRouter.signalProcessingBatchEnd, I);
    R.setPlaybackFunction(function (C) {
      w.emit(ops.OdtDocument.signalOperationStart, C);
      return !!C.execute(w) && (w.emit(ops.OdtDocument.signalOperationEnd, C), true);
    });
    R.setOperationFactory(y);
  };
  this.getOperationFactory = function () {
    return y;
  };
  this.getOdtDocument = function () {
    return w;
  };
  this.enqueue = function (R) {
    E.push(R);
  };
  this.close = function (R) {
    E.close(function (C) {
      if (C) {
        R(C);
      } else {
        w.close(R);
      }
    });
  };
  this.destroy = function (R) {
    w.destroy(R);
  };
  this.setOperationRouter(new ops.TrivialOperationRouter());
};
gui.AnnotationController = function (P, X, I) {
  function y() {
    var u;
    var m = false;
    if (u = (u = C.getCursor(I)) && u.getNode()) {
      m = !S.isWithinAnnotation(u, C.getRootNode());
    }
    if (m !== N) {
      x.emit(gui.AnnotationController.annotatableChanged, N = m);
    }
  }
  function w(u) {
    if (u.getMemberId() === I) {
      y();
    }
  }
  function E(u) {
    if (u === I) {
      y();
    }
  }
  function R(u) {
    if (u.getMemberId() === I) {
      y();
    }
  }
  var C = P.getOdtDocument();
  var N = false;
  var x = new core.EventNotifier([gui.AnnotationController.annotatableChanged]);
  var S = odf.OdfUtils;
  var s = core.StepDirection.NEXT;
  this.isAnnotatable = function () {
    return N;
  };
  this.addAnnotation = function () {
    var u = new ops.OpAddAnnotation();
    var m = (l = C.getCursorSelection(I)).length;
    var l = l.position;
    if (N) {
      if (m === 0) {
        m = undefined;
      } else {
        l = m >= 0 ? l : l + m;
        m = Math.abs(m);
      }
      u.init({
        memberid: I,
        position: l,
        length: m,
        name: I + Date.now()
      });
      P.enqueue([u]);
    }
  };
  this.removeAnnotation = function (u) {
    var m;
    var l;
    m = C.getMember(I).getProperties().fullName;
    if (X.getState(gui.CommonConstraints.EDIT.ANNOTATIONS.ONLY_DELETE_OWN) !== true || m === S.getAnnotationCreator(u)) {
      m = C.convertDomPointToCursorStep(u, 0, s);
      l = C.convertDomPointToCursorStep(u, u.childNodes.length);
      (u = new ops.OpRemoveAnnotation()).init({
        memberid: I,
        position: m,
        length: l - m
      });
      (l = new ops.OpMoveCursor()).init({
        memberid: I,
        position: m > 0 ? m - 1 : m,
        length: 0
      });
      P.enqueue([u, l]);
    }
  };
  this.subscribe = function (u, m) {
    x.subscribe(u, m);
  };
  this.unsubscribe = function (u, m) {
    x.unsubscribe(u, m);
  };
  this.destroy = function (u) {
    C.unsubscribe(ops.Document.signalCursorAdded, w);
    C.unsubscribe(ops.Document.signalCursorRemoved, E);
    C.unsubscribe(ops.Document.signalCursorMoved, R);
    u();
  };
  X.registerConstraint(gui.CommonConstraints.EDIT.ANNOTATIONS.ONLY_DELETE_OWN);
  C.subscribe(ops.Document.signalCursorAdded, w);
  C.subscribe(ops.Document.signalCursorRemoved, E);
  C.subscribe(ops.Document.signalCursorMoved, R);
  y();
};
gui.AnnotationController.annotatableChanged = "annotatable/changed";
gui.Avatar = function (P, X) {
  var y;
  var w;
  var E;
  var R;
  var I = this;
  this.setColor = function (R) {
    w.style.borderColor = R;
  };
  this.setImageUrl = function (R) {
    if (I.isVisible()) {
      w.src = R;
    } else {
      E = R;
    }
  };
  this.isVisible = function () {
    return y.style.display === "block";
  };
  this.show = function () {
    if (E) {
      w.src = E;
      E = undefined;
    }
    y.style.display = "block";
  };
  this.hide = function () {
    y.style.display = "none";
  };
  this.markAsFocussed = function (R) {
    if (R) {
      y.classList.add("active");
    } else {
      y.classList.remove("active");
    }
  };
  this.destroy = function (R) {
    P.removeChild(y);
    R();
  };
  y = (R = P.ownerDocument).createElement("div");
  w = R.createElement("img");
  y.appendChild(w);
  y.style.display = X ? "block" : "none";
  y.className = "handle";
  P.appendChild(y);
};
gui.StepInfo = function () {};
gui.StepInfo.VisualDirection = {
  LEFT_TO_RIGHT: 0,
  RIGHT_TO_LEFT: 1
};
gui.StepInfo.prototype.container = function () {};
gui.StepInfo.prototype.offset = function () {};
gui.VisualStepScanner = function () {};
gui.VisualStepScanner.prototype.process = function (P, X, I) {};
gui.GuiStepUtils = function () {
  function P(C) {
    var N;
    var x = null;
    if (C = I.getContentBounds(C)) {
      if (C.container.nodeType === Node.TEXT_NODE) {
        (N = C.container.ownerDocument.createRange()).setStart(C.container, C.startOffset);
        N.setEnd(C.container, C.endOffset);
        if ((x = N.getClientRects().length > 0 ? N.getBoundingClientRect() : null) && C.container.data.substring(C.startOffset, C.endOffset) === " " && x.width <= 1) {
          x = null;
        }
        N.detach();
      } else if (X.isCharacterElement(C.container) || X.isCharacterFrame(C.container)) {
        x = y.getBoundingClientRect(C.container);
      }
    }
    return x;
  }
  var X = odf.OdfUtils;
  var I = new odf.StepUtils();
  var y = core.DomUtils;
  var w = core.StepDirection.NEXT;
  var E = gui.StepInfo.VisualDirection.LEFT_TO_RIGHT;
  var R = gui.StepInfo.VisualDirection.RIGHT_TO_LEFT;
  this.getContentRect = P;
  this.moveToFilteredStep = function (C, N, x) {
    function S(G, B) {
      if (B.process(ee, l, M)) {
        G = true;
        if (!O && B.token) {
          O = B.token;
        }
      }
      return G;
    }
    var u;
    var m;
    var l;
    var M;
    var O;
    var ee;
    var s = N === w;
    var q = C.snapshot();
    u = false;
    do {
      u = P(C);
      ee = {
        token: C.snapshot(),
        container: C.container,
        offset: C.offset,
        direction: N,
        visualDirection: N === w ? E : R
      };
      m = C.nextStep() ? P(C) : null;
      C.restore(ee.token);
      if (s) {
        l = u;
        M = m;
      } else {
        l = m;
        M = u;
      }
      u = x.reduce(S, false);
    } while (!u && C.advanceStep(N));
    if (!u) {
      x.forEach(function (G) {
        if (!O && G.token) {
          O = G.token;
        }
      });
    }
    C.restore(O || q);
    return Boolean(O);
  };
};
gui.Caret = function (P, X, I, y) {
  function E() {
    M.selectNodeContents(l);
    return M.getBoundingClientRect();
  }
  function R(K) {
    return U[K] !== Q[K];
  }
  function x(K) {
    S.parentNode.removeChild(S);
    l.parentNode.removeChild(l);
    K();
  }
  var S;
  var s;
  var u;
  var m;
  var l;
  var M;
  var G;
  var B;
  var A;
  var K;
  var F;
  var L;
  var O = P.getDocument().getCanvas();
  var q = core.DomUtils;
  var ee = new gui.GuiStepUtils();
  var H = false;
  var $ = false;
  var J = false;
  var Q = {
    isFocused: false,
    isShown: true,
    visibility: "hidden"
  };
  var U = {
    isFocused: !Q.isFocused,
    isShown: !Q.isShown,
    visibility: "hidden"
  };
  this.handleUpdate = function () {
    J = true;
    B.trigger();
  };
  this.refreshCursorBlinking = function () {
    H = true;
    B.trigger();
  };
  this.setFocus = function () {
    Q.isFocused = true;
    B.trigger();
  };
  this.removeFocus = function () {
    Q.isFocused = false;
    B.trigger();
  };
  this.show = function () {
    Q.isShown = true;
    B.trigger();
  };
  this.hide = function () {
    Q.isShown = false;
    B.trigger();
  };
  this.setAvatarImageUrl = function (K) {
    u.setImageUrl(K);
  };
  this.setColor = function (K) {
    s.style.borderColor = K;
    u.setColor(K);
  };
  this.getCursor = function () {
    return P;
  };
  this.getFocusElement = function () {
    return s;
  };
  this.toggleHandleVisibility = function () {
    if (u.isVisible()) {
      u.hide();
    } else {
      u.show();
    }
  };
  this.showHandle = function () {
    u.show();
  };
  this.hideHandle = function () {
    u.hide();
  };
  this.setOverlayElement = function (K) {
    m = K;
    S.appendChild(K);
    J = true;
    B.trigger();
  };
  this.ensureVisible = function () {
    $ = true;
    B.trigger();
  };
  this.getBoundingClientRect = function () {
    return q.getBoundingClientRect(S);
  };
  this.destroy = function (K) {
    core.Async.destroyAll([B.destroy, A.destroy, u.destroy, x], K);
  };
  F = [(K = P.getDocument()).createRootFilter(P.getMemberId()), K.getPositionFilter()];
  L = K.getDOMDocument();
  M = L.createRange();
  (l = L.createElement("span")).className = "webodf-caretSizer";
  l.textContent = "|";
  P.getNode().appendChild(l);
  (S = L.createElement("div")).setAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid", P.getMemberId());
  S.className = "webodf-caretOverlay";
  (s = L.createElement("div")).className = "caret";
  S.appendChild(s);
  u = new gui.Avatar(S, I);
  O.getSizer().appendChild(S);
  G = K.createStepIterator(P.getNode(), 0, F, K.getRootNode());
  B = core.Task.createRedrawTask(function N() {
    if (Q.isShown === false || P.getSelectionType() !== ops.OdtCursor.RangeSelection || !y && !P.getSelectedRange().collapsed) {
      Q.visibility = "hidden";
      s.style.visibility = "hidden";
      A.cancel();
    } else {
      Q.visibility = "visible";
      s.style.visibility = "visible";
      if (Q.isFocused === false) {
        s.style.opacity = "1";
        A.cancel();
      } else {
        if (H || R("visibility")) {
          s.style.opacity = "1";
          A.cancel();
        }
        A.trigger();
      }
    }
    if (J || $) {
      var K;
      K = P.getNode();
      var F;
      var L;
      var ie = q.getBoundingClientRect(O.getSizer());
      var Y = false;
      var ne = 0;
      K.removeAttributeNS("urn:webodf:names:cursor", "caret-sizer-active");
      if (K.getClientRects().length > 0) {
        ne = (L = E()).left - q.getBoundingClientRect(K).left;
        Y = true;
      } else {
        G.setPosition(K, 0);
        if (!(L = ee.getContentRect(G)) && G.nextStep() && (F = ee.getContentRect(G))) {
          L = F;
          Y = true;
        }
        if (!L) {
          K.setAttributeNS("urn:webodf:names:cursor", "caret-sizer-active", "true");
          L = E();
          Y = true;
        }
        if (!L) {
          for (runtime.log("WARN: No suitable client rectangle found for visual caret for " + P.getMemberId()); K;) {
            if (K.getClientRects().length > 0) {
              L = q.getBoundingClientRect(K);
              Y = true;
              break;
            }
            K = K.parentNode;
          }
        }
      }
      if ((K = {
        top: (L = q.translateRect(L, ie, O.getZoomLevel())).top,
        height: L.height,
        right: Y ? L.left : L.right,
        width: q.adaptRangeDifferenceToZoomLevel(ne, O.getZoomLevel())
      }).height < 8) {
        K = {
          top: K.top - (8 - K.height) / 2,
          height: 8,
          right: K.right
        };
      }
      S.style.height = K.height + "px";
      S.style.top = K.top + "px";
      S.style.left = K.right - K.width + "px";
      S.style.width = K.width ? K.width + "px" : "";
      if (m) {
        if ((K = runtime.getWindow().getComputedStyle(P.getNode(), null)).font) {
          m.style.font = K.font;
        } else {
          m.style.fontStyle = K.fontStyle;
          m.style.fontVariant = K.fontVariant;
          m.style.fontWeight = K.fontWeight;
          m.style.fontSize = K.fontSize;
          m.style.lineHeight = K.lineHeight;
          m.style.fontFamily = K.fontFamily;
        }
      }
    }
    if (Q.isShown && $) {
      X.scrollIntoView(s.getBoundingClientRect());
    }
    if (R("isFocused")) {
      u.markAsFocussed(Q.isFocused);
    }
    (function C() {
      Object.keys(Q).forEach(function (K) {
        U[K] = Q[K];
      });
    })();
    J = $ = H = false;
  });
  A = core.Task.createTimeoutTask(function w() {
    s.style.opacity = s.style.opacity === "0" ? "1" : "0";
    A.trigger();
  }, 500);
  B.triggerImmediate();
};
odf.TextSerializer = function () {
  function P(y) {
    var C;
    var w = "";
    var E = X.filter ? X.filter.acceptNode(y) : NodeFilter.FILTER_ACCEPT;
    var R = y.nodeType;
    if ((E === NodeFilter.FILTER_ACCEPT || E === NodeFilter.FILTER_SKIP) && I.isTextContentContainingNode(y)) {
      for (C = y.firstChild; C;) {
        w += P(C);
        C = C.nextSibling;
      }
    }
    if (E === NodeFilter.FILTER_ACCEPT) {
      if (R === Node.ELEMENT_NODE && I.isParagraph(y)) {
        w += "\n";
      } else if (R === Node.TEXT_NODE && y.textContent) {
        w += y.textContent;
      }
    }
    return w;
  }
  var X = this;
  var I = odf.OdfUtils;
  this.filter = null;
  this.writeToString = function (y) {
    if (y) {
      if ((y = P(y))[y.length - 1] === "\n") {
        y = y.substr(0, y.length - 1);
      }
      return y;
    } else {
      return "";
    }
  };
};
gui.MimeDataExporter = function () {
  var P;
  this.exportRangeToDataTransfer = function (X, I) {
    var y;
    (y = I.startContainer.ownerDocument.createElement("span")).appendChild(I.cloneContents());
    y = P.writeToString(y);
    try {
      X.setData("text/plain", y);
    } catch {
      X.setData("Text", y);
    }
  };
  (P = new odf.TextSerializer()).filter = new odf.OdfNodeFilter();
};
gui.Clipboard = function (P) {
  this.setDataFromRange = function (X, I) {
    var y;
    var w = X.clipboardData;
    y = runtime.getWindow();
    if (!w && y) {
      w = y.clipboardData;
    }
    if (w) {
      y = true;
      P.exportRangeToDataTransfer(w, I);
      X.preventDefault();
    } else {
      y = false;
    }
    return y;
  };
};
gui.SessionContext = function (P, X) {
  var I = P.getOdtDocument();
  var y = odf.OdfUtils;
  this.isLocalCursorWithinOwnAnnotation = function () {
    var E;
    var w = I.getCursor(X);
    return !!w && !(E = w && w.getNode(), w = I.getMember(X).getProperties().fullName, !(E = y.getParentAnnotation(E, I.getRootNode())) || y.getAnnotationCreator(E) !== w);
  };
};
gui.StyleSummary = function (P) {
  function X(E, R) {
    var N;
    var C = E + "|" + R;
    if (!w.hasOwnProperty(C)) {
      N = [];
      P.forEach(function (x) {
        x = (x = x.styleProperties[E]) && x[R];
        if (N.indexOf(x) === -1) {
          N.push(x);
        }
      });
      w[C] = N;
    }
    return w[C];
  }
  function I(E, R, C) {
    return function () {
      var N = X(E, R);
      return C.length >= N.length && N.every(function (x) {
        return C.indexOf(x) !== -1;
      });
    };
  }
  function y(E, R) {
    var C = X(E, R);
    if (C.length === 1) {
      return C[0];
    } else {
      return undefined;
    }
  }
  var w = {};
  this.getPropertyValues = X;
  this.getCommonValue = y;
  this.isBold = I("style:text-properties", "fo:font-weight", ["bold"]);
  this.isItalic = I("style:text-properties", "fo:font-style", ["italic"]);
  this.hasUnderline = I("style:text-properties", "style:text-underline-style", ["solid"]);
  this.hasStrikeThrough = I("style:text-properties", "style:text-line-through-style", ["solid"]);
  this.fontSize = function () {
    var E = y("style:text-properties", "fo:font-size");
    return E && parseFloat(E);
  };
  this.fontName = function () {
    return y("style:text-properties", "style:font-name");
  };
  this.isAlignedLeft = I("style:paragraph-properties", "fo:text-align", ["left", "start"]);
  this.isAlignedCenter = I("style:paragraph-properties", "fo:text-align", ["center"]);
  this.isAlignedRight = I("style:paragraph-properties", "fo:text-align", ["right", "end"]);
  this.isAlignedJustified = I("style:paragraph-properties", "fo:text-align", ["justify"]);
  this.text = {
    isBold: this.isBold,
    isItalic: this.isItalic,
    hasUnderline: this.hasUnderline,
    hasStrikeThrough: this.hasStrikeThrough,
    fontSize: this.fontSize,
    fontName: this.fontName
  };
  this.paragraph = {
    isAlignedLeft: this.isAlignedLeft,
    isAlignedCenter: this.isAlignedCenter,
    isAlignedRight: this.isAlignedRight,
    isAlignedJustified: this.isAlignedJustified
  };
};
gui.DirectFormattingController = function (P, X, I, y, w, E, R) {
  function C() {
    return ze.value().styleSummary;
  }
  function N() {
    return ze.value().enabledFeatures;
  }
  function x(we) {
    var Ce;
    if (we.collapsed) {
      if ((Ce = we.startContainer).hasChildNodes() && we.startOffset < Ce.childNodes.length) {
        Ce = Ce.childNodes.item(we.startOffset);
      }
      we = [Ce];
    } else {
      we = Le.getTextElements(we, true, false);
    }
    return we;
  }
  function s(we, Ce) {
    var ye = {};
    Object.keys(we).forEach(function ($e) {
      var qe = we[$e]();
      var ue = Ce[$e]();
      if (qe !== ue) {
        ye[$e] = ue;
      }
    });
    return ye;
  }
  function u() {
    var we;
    var Ce;
    Ce = je.styleSummary;
    var ye = ze.value();
    var $e = ye.styleSummary;
    var qe = je.enabledFeatures;
    var ue = ye.enabledFeatures;
    we = s(Ce.text, $e.text);
    Ce = s(Ce.paragraph, $e.paragraph);
    je = ye;
    if (qe = ue.directTextStyling !== qe.directTextStyling || ue.directParagraphStyling !== qe.directParagraphStyling) {
      Qe.emit(gui.DirectFormattingController.enabledChanged, ue);
    }
    if (Object.keys(we).length > 0) {
      Qe.emit(gui.DirectFormattingController.textStylingChanged, we);
    }
    if (Object.keys(Ce).length > 0) {
      Qe.emit(gui.DirectFormattingController.paragraphStylingChanged, Ce);
    }
  }
  function m() {
    ze.reset();
    u();
  }
  function l(we) {
    if ((typeof we == "string" ? we : we.getMemberId()) === y) {
      ze.reset();
    }
  }
  function M() {
    ze.reset();
  }
  function O(we) {
    var Ce = ge.getCursor(y);
    we = we.paragraphElement;
    if (Ce && Le.getParagraphElement(Ce.getNode()) === we) {
      ze.reset();
    }
  }
  function q(we, Ce) {
    Ce(!we());
    return true;
  }
  function ee(we) {
    if (N().directTextStyling) {
      var Ce = ge.getCursorSelection(y);
      var ye = {
        "style:text-properties": we
      };
      if (Ce.length !== 0) {
        (we = new ops.OpApplyDirectStyling()).init({
          memberid: y,
          position: Ce.position,
          length: Ce.length,
          setProperties: ye
        });
        P.enqueue([we]);
      } else {
        Me = Ee.mergeObjects(Me || {}, ye);
        ze.reset();
      }
    }
  }
  function G(we, Ce) {
    var ye = {
      [we]: Ce
    };
    ee(ye);
  }
  function B(we) {
    we = we.spec();
    if (Me && we.memberid === y && we.optype !== "SplitParagraph") {
      Me = null;
      ze.reset();
    }
  }
  function A(we) {
    G("fo:font-weight", we ? "bold" : "normal");
  }
  function H(we) {
    G("fo:font-style", we ? "italic" : "normal");
  }
  function $(we) {
    G("style:text-underline-style", we ? "solid" : "none");
  }
  function J(we) {
    G("style:text-line-through-style", we ? "solid" : "none");
  }
  function Q(we) {
    if (N().directParagraphStyling) {
      var ue;
      var Ce = ge.getCursor(y).getSelectedRange();
      Ce = Le.getParagraphElements(Ce);
      var ye = ge.getFormatting();
      var $e = [];
      var qe = {};
      Ce.forEach(function (de) {
        var Xe;
        var pe = ge.convertDomPointToCursorStep(de, 0, fe);
        var xe = de.getAttributeNS(odf.Namespaces.textns, "style-name");
        if (!(de = xe ? qe.hasOwnProperty(xe) ? qe[xe] : undefined : ue)) {
          de = w.generateStyleName();
          if (xe) {
            qe[xe] = de;
            Xe = ye.createDerivedStyleObject(xe, "paragraph", {});
          } else {
            ue = de;
            Xe = {};
          }
          Xe = we(Xe);
          (xe = new ops.OpAddStyle()).init({
            memberid: y,
            styleName: de.toString(),
            styleFamily: "paragraph",
            isAutomaticStyle: true,
            setProperties: Xe
          });
          $e.push(xe);
        }
        (xe = new ops.OpSetParagraphStyle()).init({
          memberid: y,
          styleName: de.toString(),
          position: pe
        });
        $e.push(xe);
      });
      P.enqueue($e);
    }
  }
  function K(we) {
    (function U(we) {
      Q(function (Ce) {
        return Ee.mergeObjects(Ce, we);
      });
    })({
      "style:paragraph-properties": {
        "fo:text-align": we
      }
    });
  }
  function F(we, Ce) {
    var qe;
    var ye = ge.getFormatting().getDefaultTabStopDistance();
    var $e = Ce["style:paragraph-properties"];
    if ($e) {
      qe = Le.parseLength($e = $e["fo:margin-left"]);
    }
    return Ee.mergeObjects(Ce, {
      "style:paragraph-properties": {
        "fo:margin-left": qe && qe.unit === ye.unit ? qe.value + we * ye.value + qe.unit : we * ye.value + ye.unit
      }
    });
  }
  function ie() {}
  function Y() {
    return false;
  }
  function ne() {
    return false;
  }
  var je;
  var ze;
  var le = this;
  var ge = P.getOdtDocument();
  var Ee = new core.Utils();
  var Le = odf.OdfUtils;
  var Qe = new core.EventNotifier([gui.DirectFormattingController.enabledChanged, gui.DirectFormattingController.textStylingChanged, gui.DirectFormattingController.paragraphStylingChanged]);
  var ae = odf.Namespaces.textns;
  var fe = core.StepDirection.NEXT;
  var Me = null;
  this.enabledFeatures = N;
  this.formatTextSelection = ee;
  this.createCursorStyleOp = function (we, Ce, ye) {
    var $e = null;
    var qe = Me;
    if (ye) {
      qe = (ye = ze.value().appliedStyles[0]) && ye.styleProperties;
    }
    if (qe && qe["style:text-properties"]) {
      ($e = new ops.OpApplyDirectStyling()).init({
        memberid: y,
        position: we,
        length: Ce,
        setProperties: {
          "style:text-properties": qe["style:text-properties"]
        }
      });
      Me = null;
      ze.reset();
    }
    return $e;
  };
  this.setBold = A;
  this.setItalic = H;
  this.setHasUnderline = $;
  this.setHasStrikethrough = J;
  this.setFontSize = function (we) {
    G("fo:font-size", we + "pt");
  };
  this.setFontName = function (we) {
    G("style:font-name", we);
  };
  this.getAppliedStyles = function () {
    return ze.value().appliedStyles;
  };
  this.toggleBold = q.bind(le, function () {
    return C().isBold();
  }, A);
  this.toggleItalic = q.bind(le, function () {
    return C().isItalic();
  }, H);
  this.toggleUnderline = q.bind(le, function () {
    return C().hasUnderline();
  }, $);
  this.toggleStrikethrough = q.bind(le, function () {
    return C().hasStrikeThrough();
  }, J);
  this.isBold = function () {
    return C().isBold();
  };
  this.isItalic = function () {
    return C().isItalic();
  };
  this.hasUnderline = function () {
    return C().hasUnderline();
  };
  this.hasStrikeThrough = function () {
    return C().hasStrikeThrough();
  };
  this.fontSize = function () {
    return C().fontSize();
  };
  this.fontName = function () {
    return C().fontName();
  };
  this.isAlignedLeft = function () {
    return C().isAlignedLeft();
  };
  this.isAlignedCenter = function () {
    return C().isAlignedCenter();
  };
  this.isAlignedRight = function () {
    return C().isAlignedRight();
  };
  this.isAlignedJustified = function () {
    return C().isAlignedJustified();
  };
  this.alignParagraphLeft = function () {
    K("left");
    return true;
  };
  this.alignParagraphCenter = function () {
    K("center");
    return true;
  };
  this.alignParagraphRight = function () {
    K("right");
    return true;
  };
  this.alignParagraphJustified = function () {
    K("justify");
    return true;
  };
  this.indent = function () {
    Q(F.bind(null, 1));
    return true;
  };
  this.outdent = function () {
    Q(F.bind(null, -1));
    return true;
  };
  this.createParagraphStyleOps = function (we) {
    if (!N().directParagraphStyling) {
      return [];
    }
    var qe;
    var ue;
    var Ce = ge.getCursor(y);
    var ye = Ce.getSelectedRange();
    var $e = [];
    if (Ce.hasForwardSelection()) {
      qe = Ce.getAnchorNode();
      ue = Ce.getNode();
    } else {
      qe = Ce.getNode();
      ue = Ce.getAnchorNode();
    }
    Ce = Le.getParagraphElement(ue);
    runtime.assert(Boolean(Ce), "DirectFormattingController: Cursor outside paragraph");
    var de = Ce;
    var pe = [ge.getPositionFilter(), ge.createRootFilter(y)];
    if (ge.createStepIterator(ye.endContainer, ye.endOffset, pe, de).nextStep() === false && !(ue !== qe && (Ce = Le.getParagraphElement(qe)), !Me && !function L(we, Ce) {
      var ye = (ye = x(we)).length === 0 ? [we.startContainer] : ye;
      var $e = (ye = ge.getFormatting().getAppliedStyles(ye)).length > 0 ? ye[0].styleProperties : undefined;
      var qe = ge.getFormatting().getAppliedStylesForElement(Ce).styleProperties;
      return !!$e && $e["style:family"] === "text" && !!$e["style:text-properties"] && (!qe || !qe["style:text-properties"] || !($e = $e["style:text-properties"], qe = qe["style:text-properties"], Object.keys($e).every(function (ue) {
        return $e[ue] === qe[ue];
      })));
    }(ye, Ce)) && !!(ye = (ye = ze.value().appliedStyles[0]) && ye.styleProperties)) {
      if (Ce = Ce.getAttributeNS(ae, "style-name")) {
        ye = {
          "style:text-properties": ye["style:text-properties"]
        };
        ye = ge.getFormatting().createDerivedStyleObject(Ce, "paragraph", ye);
      }
      qe = w.generateStyleName();
      (Ce = new ops.OpAddStyle()).init({
        memberid: y,
        styleName: qe,
        styleFamily: "paragraph",
        isAutomaticStyle: true,
        setProperties: ye
      });
      $e.push(Ce);
      (Ce = new ops.OpSetParagraphStyle()).init({
        memberid: y,
        styleName: qe,
        position: we
      });
      $e.push(Ce);
    }
    return $e;
  };
  this.subscribe = function (we, Ce) {
    Qe.subscribe(we, Ce);
  };
  this.unsubscribe = function (we, Ce) {
    Qe.unsubscribe(we, Ce);
  };
  this.destroy = function (we) {
    ge.unsubscribe(ops.Document.signalCursorAdded, l);
    ge.unsubscribe(ops.Document.signalCursorRemoved, l);
    ge.unsubscribe(ops.Document.signalCursorMoved, l);
    ge.unsubscribe(ops.OdtDocument.signalParagraphStyleModified, M);
    ge.unsubscribe(ops.OdtDocument.signalParagraphChanged, O);
    ge.unsubscribe(ops.OdtDocument.signalOperationEnd, B);
    ge.unsubscribe(ops.OdtDocument.signalProcessingBatchEnd, u);
    X.unsubscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, m);
    we();
  };
  ge.subscribe(ops.Document.signalCursorAdded, l);
  ge.subscribe(ops.Document.signalCursorRemoved, l);
  ge.subscribe(ops.Document.signalCursorMoved, l);
  ge.subscribe(ops.OdtDocument.signalParagraphStyleModified, M);
  ge.subscribe(ops.OdtDocument.signalParagraphChanged, O);
  ge.subscribe(ops.OdtDocument.signalOperationEnd, B);
  ge.subscribe(ops.OdtDocument.signalProcessingBatchEnd, u);
  X.subscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, m);
  ze = new core.LazyProperty(function S() {
    var we = ge.getCursor(y);
    var Ce = we && we.getSelectedRange();
    var ye = [];
    ye = [];
    var $e = true;
    var qe = {
      directTextStyling: true,
      directParagraphStyling: true
    };
    if (Ce) {
      if ((ye = x(Ce)).length === 0) {
        ye = [Ce.startContainer, Ce.endContainer];
        $e = false;
      }
      ye = ge.getFormatting().getAppliedStyles(ye);
    }
    if (ye[0] !== undefined && Me) {
      ye[0].styleProperties = Ee.mergeObjects(ye[0].styleProperties, Me);
    }
    if (X.getState(gui.CommonConstraints.EDIT.REVIEW_MODE) === true) {
      qe.directTextStyling = qe.directParagraphStyling = I.isLocalCursorWithinOwnAnnotation();
    }
    qe.directTextStyling &&= $e && we !== undefined && we.getSelectionType() === ops.OdtCursor.RangeSelection;
    return {
      enabledFeatures: qe,
      appliedStyles: ye,
      styleSummary: new gui.StyleSummary(ye)
    };
  });
  je = ze.value();
  if (!E) {
    le.formatTextSelection = ie;
    le.setBold = ie;
    le.setItalic = ie;
    le.setHasUnderline = ie;
    le.setHasStrikethrough = ie;
    le.setFontSize = ie;
    le.setFontName = ie;
    le.toggleBold = ne;
    le.toggleItalic = ne;
    le.toggleUnderline = ne;
    le.toggleStrikethrough = ne;
  }
  if (!R) {
    le.alignParagraphCenter = Y;
    le.alignParagraphJustified = Y;
    le.alignParagraphLeft = Y;
    le.alignParagraphRight = Y;
    le.createParagraphStyleOps = function () {
      return [];
    };
    le.indent = Y;
    le.outdent = Y;
  }
};
gui.DirectFormattingController.enabledChanged = "enabled/changed";
gui.DirectFormattingController.textStylingChanged = "textStyling/changed";
gui.DirectFormattingController.paragraphStylingChanged = "paragraphStyling/changed";
gui.DirectFormattingController.SelectionInfo = function () {};
gui.KeyboardHandler = function () {
  function P(w, E) {
    E ||= X.None;
    switch (w) {
      case gui.KeyboardHandler.KeyCode.LeftMeta:
      case gui.KeyboardHandler.KeyCode.RightMeta:
      case gui.KeyboardHandler.KeyCode.MetaInMozilla:
        E |= X.Meta;
        break;
      case gui.KeyboardHandler.KeyCode.Ctrl:
        E |= X.Ctrl;
        break;
      case gui.KeyboardHandler.KeyCode.Alt:
        E |= X.Alt;
        break;
      case gui.KeyboardHandler.KeyCode.Shift:
        E |= X.Shift;
    }
    return w + ":" + E;
  }
  var X = gui.KeyboardHandler.Modifier;
  var I = null;
  var y = {};
  this.setDefault = function (w) {
    I = w;
  };
  this.bind = function (w, E, R, C) {
    w = P(w, E);
    runtime.assert(C || y.hasOwnProperty(w) === false, "tried to overwrite the callback handler of key combo: " + w);
    y[w] = R;
  };
  this.unbind = function (w, E) {
    var R = P(w, E);
    delete y[R];
  };
  this.reset = function () {
    I = null;
    y = {};
  };
  this.handleEvent = function (w) {
    var E = w.keyCode;
    var R = X.None;
    if (w.metaKey) {
      R |= X.Meta;
    }
    if (w.ctrlKey) {
      R |= X.Ctrl;
    }
    if (w.altKey) {
      R |= X.Alt;
    }
    if (w.shiftKey) {
      R |= X.Shift;
    }
    E = P(E, R);
    R = false;
    if (E = y[E]) {
      R = E();
    } else if (I !== null) {
      R = I(w);
    }
    if (R) {
      if (w.preventDefault) {
        w.preventDefault();
      } else {
        w.returnValue = false;
      }
    }
  };
};
gui.KeyboardHandler.Modifier = {
  None: 0,
  Meta: 1,
  Ctrl: 2,
  Alt: 4,
  CtrlAlt: 6,
  Shift: 8,
  MetaShift: 9,
  CtrlShift: 10,
  AltShift: 12
};
gui.KeyboardHandler.KeyCode = {
  Backspace: 8,
  Tab: 9,
  Clear: 12,
  Enter: 13,
  Shift: 16,
  Ctrl: 17,
  Alt: 18,
  End: 35,
  Home: 36,
  Left: 37,
  Up: 38,
  Right: 39,
  Down: 40,
  Delete: 46,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  LeftMeta: 91,
  RightMeta: 93,
  MetaInMozilla: 224
};
gui.HyperlinkClickHandler = function (P, X, I) {
  function y() {
    var l = P();
    runtime.assert(Boolean(l.classList), "Document container has no classList element");
    l.classList.remove("webodf-inactiveLinks");
  }
  function w() {
    var l = P();
    runtime.assert(Boolean(l.classList), "Document container has no classList element");
    l.classList.add("webodf-inactiveLinks");
  }
  function E() {
    s.removeEventListener("focus", w, false);
    m.forEach(function (l) {
      X.unbind(l.keyCode, l.modifier);
      I.unbind(l.keyCode, l.modifier);
    });
    m.length = 0;
  }
  var C = gui.KeyboardHandler.Modifier;
  var N = gui.KeyboardHandler.KeyCode;
  var x = xmldom.XPath;
  var S = odf.OdfUtils;
  var s = runtime.getWindow();
  var u = C.None;
  var m = [];
  runtime.assert(s !== null, "Expected to be run in an environment which has a global window, like a browser.");
  this.handleClick = function (l) {
    var O;
    var q;
    var M = l.target || l.srcElement;
    if (l.ctrlKey) {
      O = C.Ctrl;
    } else if (l.metaKey) {
      O = C.Meta;
    }
    if (u === C.None || u === O) {
      e: {
        for (; M !== null;) {
          if (S.isHyperlink(M)) {
            break e;
          }
          if (S.isParagraph(M)) {
            break;
          }
          M = M.parentNode;
        }
        M = null;
      }
      if (M && (M = S.getHyperlinkTarget(M)) !== "") {
        if (M[0] === "#") {
          M = M.substring(1);
          O = P();
          if ((q = x.getODFElementsWithXPath(O, "//text:bookmark-start[@text:name='" + M + "']", odf.Namespaces.lookupNamespaceURI)).length === 0) {
            q = x.getODFElementsWithXPath(O, "//text:bookmark[@text:name='" + M + "']", odf.Namespaces.lookupNamespaceURI);
          }
          if (q.length > 0) {
            q[0].scrollIntoView(true);
          }
        } else if (/^\s*(javascript|data):/.test(M)) {
          runtime.log("WARN:", "potentially malicious URL ignored");
        } else {
          s.open(M);
        }
        if (l.preventDefault) {
          l.preventDefault();
        } else {
          l.returnValue = false;
        }
      }
    }
  };
  this.setModifier = function (l) {
    if (u !== l) {
      runtime.assert(l === C.None || l === C.Ctrl || l === C.Meta, "Unsupported KeyboardHandler.Modifier value: " + l);
      if ((u = l) !== C.None) {
        w();
      } else {
        y();
      }
      (function R(l) {
        E();
        if (l !== C.None) {
          s.addEventListener("focus", w, false);
          switch (l) {
            case C.Ctrl:
              m.push({
                keyCode: N.Ctrl,
                modifier: C.None
              });
              break;
            case C.Meta:
              m.push({
                keyCode: N.LeftMeta,
                modifier: C.None
              });
              m.push({
                keyCode: N.RightMeta,
                modifier: C.None
              });
              m.push({
                keyCode: N.MetaInMozilla,
                modifier: C.None
              });
          }
          m.forEach(function (M) {
            X.bind(M.keyCode, M.modifier, y);
            I.bind(M.keyCode, M.modifier, w);
          });
        }
      })(u);
    }
  };
  this.getModifier = function () {
    return u;
  };
  this.destroy = function (l) {
    w();
    E();
    l();
  };
};
gui.EventManager = function (P) {
  function X(F) {
    function L(Ee, Le, Qe) {
      var ae;
      var fe = false;
      ae = "on" + Le;
      if (Ee.attachEvent) {
        Ee.attachEvent(ae, Qe);
        fe = true;
      }
      if (!fe && Ee.addEventListener) {
        Ee.addEventListener(Le, Qe, false);
        fe = true;
      }
      if ((!fe || !!B[Le]) && !!Ee.hasOwnProperty(ae)) {
        Ee[ae] = Qe;
      }
    }
    function ie(Ee, Le, Qe) {
      var ae = "on" + Le;
      if (Ee.detachEvent) {
        Ee.detachEvent(ae, Qe);
      }
      if (Ee.removeEventListener) {
        Ee.removeEventListener(Le, Qe, false);
      }
      if (Ee[ae] === Qe) {
        Ee[ae] = null;
      }
    }
    function Y(Ee) {
      if (le.indexOf(Ee) === -1) {
        le.push(Ee);
        if (ne.filters.every(function (Le) {
          return Le(Ee);
        })) {
          try {
            ge.emit(F, Ee);
          } catch (Le) {
            runtime.log("Error occurred while processing " + F + ":\n" + Le.message + "\n" + Le.stack);
          }
        }
        runtime.setTimeout(function () {
          le.splice(le.indexOf(Ee), 1);
        }, 0);
      }
    }
    var ne = this;
    var le = [];
    var ge = new core.EventNotifier([F]);
    this.filters = [];
    this.subscribe = function (Ee) {
      ge.subscribe(F, Ee);
    };
    this.unsubscribe = function (Ee) {
      ge.unsubscribe(F, Ee);
    };
    this.destroy = function () {
      ie(G, F, Y);
      ie(J, F, Y);
      ie(Q, F, Y);
    };
    if (A[F]) {
      L(G, F, Y);
    }
    L(J, F, Y);
    L(Q, F, Y);
  }
  function I(F, L, ie) {
    function Y(ge) {
      ie(ge, ne, function (Ee) {
        Ee.type = F;
        le.emit(F, Ee);
      });
    }
    var ne = {};
    var le = new core.EventNotifier([F]);
    this.subscribe = function (ge) {
      le.subscribe(F, ge);
    };
    this.unsubscribe = function (ge) {
      le.unsubscribe(F, ge);
    };
    this.destroy = function () {
      L.forEach(function (ge) {
        U.unsubscribe(ge, Y);
      });
    };
    L.forEach(function (ge) {
      U.subscribe(ge, Y);
    });
  }
  function y(F) {
    runtime.clearTimeout(F);
    delete K[F];
  }
  function N() {
    Q.classList.add("webodf-touchEnabled");
    U.unsubscribe("touchstart", N);
  }
  function x(F) {
    var L = F.scrollX;
    var ie = F.scrollY;
    this.restore = function () {
      if (F.scrollX !== L || F.scrollY !== ie) {
        F.scrollTo(L, ie);
      }
    };
  }
  function S(F) {
    var L = F.scrollTop;
    var ie = F.scrollLeft;
    this.restore = function () {
      if (F.scrollTop !== L || F.scrollLeft !== ie) {
        F.scrollTop = L;
        F.scrollLeft = ie;
      }
    };
  }
  function s(F, L) {
    var ie = $[F] || H[F] || null;
    if (!ie && L) {
      ie = $[F] = new X(F);
    }
    return ie;
  }
  function u(F, L) {
    s(F, true).subscribe(L);
  }
  function m(F, L) {
    var ie = s(F, false);
    if (ie) {
      ie.unsubscribe(L);
    }
  }
  function l() {
    return P.getDOMDocument().activeElement === J;
  }
  function M() {
    if (l()) {
      J.blur();
    }
    J.setAttribute("disabled", "true");
  }
  function O() {
    J.removeAttribute("disabled");
  }
  function ee() {
    var F;
    if (!l()) {
      F = function q(F) {
        for (var L = []; F;) {
          if (F.scrollWidth > F.clientWidth || F.scrollHeight > F.clientHeight) {
            L.push(new S(F));
          }
          F = F.parentNode;
        }
        L.push(new x(G));
        return L;
      }(J);
      O();
      J.focus();
      F.forEach(function (L) {
        L.restore();
      });
    }
  }
  var J;
  var F;
  var L;
  var G = runtime.getWindow();
  var B = {
    beforecut: true,
    beforepaste: true,
    longpress: true,
    drag: true,
    dragstop: true
  };
  var A = {
    mousedown: true,
    mouseup: true,
    focus: true
  };
  var H = {};
  var $ = {};
  var Q = P.getCanvas().getElement();
  var U = this;
  var K = {};
  this.addFilter = function (F, L) {
    s(F, true).filters.push(L);
  };
  this.removeFilter = function (F, L) {
    var ie = s(F, true);
    var Y = ie.filters.indexOf(L);
    if (Y !== -1) {
      ie.filters.splice(Y, 1);
    }
  };
  this.subscribe = u;
  this.unsubscribe = m;
  this.hasFocus = l;
  this.focus = ee;
  this.getEventTrap = function () {
    return J;
  };
  this.setEditing = function (F) {
    var L = l();
    if (L) {
      J.blur();
    }
    if (F) {
      J.removeAttribute("readOnly");
    } else {
      J.setAttribute("readOnly", "true");
    }
    if (L) {
      ee();
    }
  };
  this.destroy = function (F) {
    m("touchstart", N);
    Object.keys(K).forEach(function (L) {
      y(parseInt(L, 10));
    });
    K.length = 0;
    Object.keys(H).forEach(function (L) {
      H[L].destroy();
    });
    H = {};
    m("mousedown", M);
    m("mouseup", O);
    m("contextmenu", O);
    Object.keys($).forEach(function (L) {
      $[L].destroy();
    });
    $ = {};
    J.parentNode.removeChild(J);
    F();
  };
  L = (F = P.getOdfCanvas().getSizer()).ownerDocument;
  runtime.assert(Boolean(G), "EventManager requires a window object to operate correctly");
  (J = L.createElement("textarea")).id = "eventTrap";
  J.setAttribute("tabindex", "-1");
  J.setAttribute("readOnly", "true");
  J.setAttribute("rows", "1");
  F.appendChild(J);
  u("mousedown", M);
  u("mouseup", O);
  u("contextmenu", O);
  H.longpress = new I("longpress", ["touchstart", "touchmove", "touchend"], function E(F, L, ie) {
    var Y = F.touches.length;
    var ne = F.touches[0];
    var le = L.timer;
    if (F.type === "touchmove" || F.type === "touchend") {
      if (le) {
        y(le);
      }
    } else if (F.type === "touchstart") {
      if (Y !== 1) {
        runtime.clearTimeout(le);
      } else {
        le = function w(F, L) {
          var ie = runtime.setTimeout(function () {
            F();
            y(ie);
          }, L);
          K[ie] = true;
          return ie;
        }(function () {
          ie({
            clientX: ne.clientX,
            clientY: ne.clientY,
            pageX: ne.pageX,
            pageY: ne.pageY,
            target: F.target || F.srcElement || null,
            detail: 1
          });
        }, 400);
      }
    }
    L.timer = le;
  });
  H.drag = new I("drag", ["touchstart", "touchmove", "touchend"], function R(F, L, ie) {
    var Y = F.touches[0];
    var ne = F.target || F.srcElement || null;
    var le = L.target;
    if (F.touches.length !== 1 || F.type === "touchend") {
      le = null;
    } else if (F.type === "touchstart" && ne.getAttribute("class") === "webodf-draggable") {
      le = ne;
    } else if (F.type === "touchmove" && le) {
      F.preventDefault();
      F.stopPropagation();
      ie({
        clientX: Y.clientX,
        clientY: Y.clientY,
        pageX: Y.pageX,
        pageY: Y.pageY,
        target: le,
        detail: 1
      });
    }
    L.target = le;
  });
  H.dragstop = new I("dragstop", ["drag", "touchend"], function C(F, L, ie) {
    var Y = F.target || F.srcElement || null;
    var ne = L.dragging;
    if (F.type === "drag") {
      ne = true;
    } else if (F.type === "touchend" && ne) {
      ne = false;
      ie({
        clientX: (F = F.changedTouches[0]).clientX,
        clientY: F.clientY,
        pageX: F.pageX,
        pageY: F.pageY,
        target: Y,
        detail: 1
      });
    }
    L.dragging = ne;
  });
  u("touchstart", N);
};
gui.IOSSafariSupport = function (P) {
  function X() {
    if (I.innerHeight !== I.outerHeight) {
      y.style.display = "none";
      runtime.requestAnimationFrame(function () {
        y.style.display = "block";
      });
    }
  }
  var I = runtime.getWindow();
  var y = P.getEventTrap();
  this.destroy = function (w) {
    P.unsubscribe("focus", X);
    y.removeAttribute("autocapitalize");
    y.style.WebkitTransform = "";
    w();
  };
  P.subscribe("focus", X);
  y.setAttribute("autocapitalize", "off");
  y.style.WebkitTransform = "translateX(-10000px)";
};
gui.HyperlinkController = function (P, X, I, y) {
  function w() {
    var S = true;
    if (X.getState(gui.CommonConstraints.EDIT.REVIEW_MODE) === true) {
      S = I.isLocalCursorWithinOwnAnnotation();
    }
    if (S !== x) {
      N.emit(gui.HyperlinkController.enabledChanged, x = S);
    }
  }
  function E(S) {
    if (S.getMemberId() === y) {
      w();
    }
  }
  var R = odf.OdfUtils;
  var C = P.getOdtDocument();
  var N = new core.EventNotifier([gui.HyperlinkController.enabledChanged]);
  var x = false;
  this.isEnabled = function () {
    return x;
  };
  this.subscribe = function (S, s) {
    N.subscribe(S, s);
  };
  this.unsubscribe = function (S, s) {
    N.unsubscribe(S, s);
  };
  this.addHyperlink = function (S, s) {
    if (x) {
      var u = C.getCursorSelection(y);
      var m = new ops.OpApplyHyperlink();
      var l = [];
      if (u.length === 0 || s) {
        s = s || S;
        (m = new ops.OpInsertText()).init({
          memberid: y,
          position: u.position,
          text: s
        });
        u.length = s.length;
        l.push(m);
      }
      (m = new ops.OpApplyHyperlink()).init({
        memberid: y,
        position: u.position,
        length: u.length,
        hyperlink: S
      });
      l.push(m);
      P.enqueue(l);
    }
  };
  this.removeHyperlinks = function () {
    if (x) {
      var O;
      var q;
      var S = C.createPositionIterator(C.getRootNode());
      var s = C.getCursor(y).getSelectedRange();
      var u = R.getHyperlinkElements(s);
      var m = s.collapsed && u.length === 1;
      var l = C.getDOMDocument().createRange();
      var M = [];
      if (u.length !== 0) {
        u.forEach(function (ee) {
          l.selectNodeContents(ee);
          O = C.convertDomToCursorRange({
            anchorNode: l.startContainer,
            anchorOffset: l.startOffset,
            focusNode: l.endContainer,
            focusOffset: l.endOffset
          });
          (q = new ops.OpRemoveHyperlink()).init({
            memberid: y,
            position: O.position,
            length: O.length
          });
          M.push(q);
        });
        if (!m) {
          if (s.comparePoint(m = u[0], 0) === -1) {
            l.setStart(m, 0);
            l.setEnd(s.startContainer, s.startOffset);
            if ((O = C.convertDomToCursorRange({
              anchorNode: l.startContainer,
              anchorOffset: l.startOffset,
              focusNode: l.endContainer,
              focusOffset: l.endOffset
            })).length > 0) {
              (q = new ops.OpApplyHyperlink()).init({
                memberid: y,
                position: O.position,
                length: O.length,
                hyperlink: R.getHyperlinkTarget(m)
              });
              M.push(q);
            }
          }
          S.moveToEndOfNode(u = u[u.length - 1]);
          S = S.unfilteredDomOffset();
          if (s.comparePoint(u, S) === 1) {
            l.setStart(s.endContainer, s.endOffset);
            l.setEnd(u, S);
            if ((O = C.convertDomToCursorRange({
              anchorNode: l.startContainer,
              anchorOffset: l.startOffset,
              focusNode: l.endContainer,
              focusOffset: l.endOffset
            })).length > 0) {
              (q = new ops.OpApplyHyperlink()).init({
                memberid: y,
                position: O.position,
                length: O.length,
                hyperlink: R.getHyperlinkTarget(u)
              });
              M.push(q);
            }
          }
        }
        P.enqueue(M);
        l.detach();
      }
    }
  };
  this.destroy = function (S) {
    C.unsubscribe(ops.Document.signalCursorMoved, E);
    X.unsubscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, w);
    S();
  };
  C.subscribe(ops.Document.signalCursorMoved, E);
  X.subscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, w);
  w();
};
gui.HyperlinkController.enabledChanged = "enabled/changed";
gui.ImageController = function (P, X, I, y, w) {
  function E() {
    var l = true;
    if (X.getState(gui.CommonConstraints.EDIT.REVIEW_MODE) === true) {
      l = I.isLocalCursorWithinOwnAnnotation();
    }
    if (l !== m) {
      u.emit(gui.ImageController.enabledChanged, m = l);
    }
  }
  function R(l) {
    if (l.getMemberId() === y) {
      E();
    }
  }
  var C = {
    "image/gif": ".gif",
    "image/jpeg": ".jpg",
    "image/png": ".png"
  };
  var N = odf.Namespaces.textns;
  var x = P.getOdtDocument();
  var S = odf.OdfUtils;
  var s = x.getFormatting();
  var u = new core.EventNotifier([gui.HyperlinkController.enabledChanged]);
  var m = false;
  this.isEnabled = function () {
    return m;
  };
  this.subscribe = function (l, M) {
    u.subscribe(l, M);
  };
  this.unsubscribe = function (l, M) {
    u.unsubscribe(l, M);
  };
  this.insertImage = function (l, M, O, q) {
    if (m) {
      var A;
      var ee = new core.CSSUnits();
      runtime.assert(O > 0 && q > 0, "Both width and height of the image should be greater than 0px.");
      q = {
        width: O,
        height: q
      };
      if (O = S.getParagraphElement(x.getCursor(y).getNode()).getAttributeNS(N, "style-name")) {
        O = s.getContentSize(O, "paragraph");
        var B = 1;
        var G = 1;
        if (q.width > O.width) {
          B = O.width / q.width;
        }
        if (q.height > O.height) {
          G = O.height / q.height;
        }
        O = Math.min(B, G);
        q = {
          width: q.width * O,
          height: q.height * O
        };
      }
      O = ee.convert(q.width, "px", "cm") + "cm";
      ee = ee.convert(q.height, "px", "cm") + "cm";
      G = x.getOdfCanvas().odfContainer().rootElement.styles;
      q = l.toLowerCase();
      B = C.hasOwnProperty(q) ? C[q] : null;
      q = [];
      runtime.assert(B !== null, "Image type is not supported: " + l);
      B = "Pictures/" + w.generateImageName() + B;
      (A = new ops.OpSetBlob()).init({
        memberid: y,
        filename: B,
        mimetype: l,
        content: M
      });
      q.push(A);
      if (!s.getStyleElement("Graphics", "graphic", [G])) {
        (l = new ops.OpAddStyle()).init({
          memberid: y,
          styleName: "Graphics",
          styleFamily: "graphic",
          isAutomaticStyle: false,
          setProperties: {
            "style:graphic-properties": {
              "text:anchor-type": "paragraph",
              "svg:x": "0cm",
              "svg:y": "0cm",
              "style:wrap": "dynamic",
              "style:number-wrapped-paragraphs": "no-limit",
              "style:wrap-contour": "false",
              "style:vertical-pos": "top",
              "style:vertical-rel": "paragraph",
              "style:horizontal-pos": "center",
              "style:horizontal-rel": "paragraph"
            }
          }
        });
        q.push(l);
      }
      l = w.generateStyleName();
      (M = new ops.OpAddStyle()).init({
        memberid: y,
        styleName: l,
        styleFamily: "graphic",
        isAutomaticStyle: true,
        setProperties: {
          "style:parent-style-name": "Graphics",
          "style:graphic-properties": {
            "style:vertical-pos": "top",
            "style:vertical-rel": "baseline",
            "style:horizontal-pos": "center",
            "style:horizontal-rel": "paragraph",
            "fo:background-color": "transparent",
            "style:background-transparency": "100%",
            "style:shadow": "none",
            "style:mirror": "none",
            "fo:clip": "rect(0cm, 0cm, 0cm, 0cm)",
            "draw:luminance": "0%",
            "draw:contrast": "0%",
            "draw:red": "0%",
            "draw:green": "0%",
            "draw:blue": "0%",
            "draw:gamma": "100%",
            "draw:color-inversion": "false",
            "draw:image-opacity": "100%",
            "draw:color-mode": "standard"
          }
        }
      });
      q.push(M);
      (A = new ops.OpInsertImage()).init({
        memberid: y,
        position: x.getCursorPosition(y),
        filename: B,
        frameWidth: O,
        frameHeight: ee,
        frameStyleName: l,
        frameName: w.generateFrameName()
      });
      q.push(A);
      P.enqueue(q);
    }
  };
  this.destroy = function (l) {
    x.unsubscribe(ops.Document.signalCursorMoved, R);
    X.unsubscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, E);
    l();
  };
  x.subscribe(ops.Document.signalCursorMoved, R);
  X.subscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, E);
  E();
};
gui.ImageController.enabledChanged = "enabled/changed";
gui.ImageSelector = function (P) {
  var I = odf.Namespaces.svgns;
  var y = "topLeft topRight bottomRight bottomLeft topMiddle rightMiddle bottomMiddle leftMiddle".split(" ");
  var w = P.getElement().ownerDocument;
  var E = false;
  this.select = function (R) {
    var C;
    var N;
    var x = w.getElementById("imageSelector");
    x ||= function X() {
      var R = P.getSizer();
      var C = w.createElement("div");
      C.id = "imageSelector";
      C.style.borderWidth = "1px";
      R.appendChild(C);
      y.forEach(function (N) {
        var x = w.createElement("div");
        x.className = N;
        C.appendChild(x);
      });
      return C;
    }();
    E = true;
    C = x.parentNode;
    N = R.getBoundingClientRect();
    var S = C.getBoundingClientRect();
    var s = P.getZoomLevel();
    C = (N.left - S.left) / s - 1;
    N = (N.top - S.top) / s - 1;
    x.style.display = "block";
    x.style.left = C + "px";
    x.style.top = N + "px";
    x.style.width = R.getAttributeNS(I, "width");
    x.style.height = R.getAttributeNS(I, "height");
  };
  this.clearSelection = function () {
    var R;
    if (E && (R = w.getElementById("imageSelector"))) {
      R.style.display = "none";
    }
    E = false;
  };
  this.isSelectorElement = function (R) {
    var C = w.getElementById("imageSelector");
    return !!C && (R === C || R.parentNode === C);
  };
};
(function () {
  function P(X) {
    function I(C) {
      R = C.which && String.fromCharCode(C.which) === E;
      E = undefined;
      return R === false;
    }
    function y() {
      R = false;
    }
    function w(C) {
      E = C.data;
      R = false;
    }
    var E;
    var R = false;
    this.destroy = function (C) {
      X.unsubscribe("textInput", y);
      X.unsubscribe("compositionend", w);
      X.removeFilter("keypress", I);
      C();
    };
    X.subscribe("textInput", y);
    X.subscribe("compositionend", w);
    X.addFilter("keypress", I);
  }
  gui.InputMethodEditor = function (X, I) {
    function y(J) {
      if (s) {
        if (J) {
          s.getNode().setAttributeNS("urn:webodf:names:cursor", "composing", "true");
        } else {
          s.getNode().removeAttributeNS("urn:webodf:names:cursor", "composing");
          l.textContent = "";
        }
      }
    }
    function w() {
      if (O) {
        O = false;
        y(false);
        ee.emit(gui.InputMethodEditor.signalCompositionEnd, {
          data: q
        });
        q = "";
      }
    }
    function E() {
      if (!$) {
        $ = true;
        w();
        u.value = s && s.getSelectedRange().collapsed ? "" : B.writeToString(s.getSelectedRange().cloneContents());
        u.setSelectionRange(0, u.value.length);
        $ = false;
      }
    }
    function R() {
      if (I.hasFocus()) {
        M.trigger();
      }
    }
    function C() {
      G = undefined;
      M.cancel();
      y(true);
      if (!O) {
        ee.emit(gui.InputMethodEditor.signalCompositionStart, {
          data: ""
        });
      }
    }
    function N(J) {
      J = G = J.data;
      O = true;
      q += J;
      M.trigger();
    }
    function x(J) {
      if (J.data !== G) {
        O = true;
        q += J = J.data;
        M.trigger();
      }
      G = undefined;
    }
    function S() {
      l.textContent = u.value;
    }
    var l;
    var M;
    var G;
    var B;
    var H;
    var s = null;
    var u = I.getEventTrap();
    var m = u.ownerDocument;
    var O = false;
    var q = "";
    var ee = new core.EventNotifier([gui.InputMethodEditor.signalCompositionStart, gui.InputMethodEditor.signalCompositionEnd]);
    var A = [];
    var $ = false;
    this.subscribe = ee.subscribe;
    this.unsubscribe = ee.unsubscribe;
    this.registerCursor = function (J) {
      if (J.getMemberId() === X) {
        (s = J).getNode().appendChild(l);
        J.subscribe(ops.OdtCursor.signalCursorUpdated, R);
        I.subscribe("input", S);
        I.subscribe("compositionupdate", S);
      }
    };
    this.removeCursor = function (J) {
      if (s && J === X) {
        s.getNode().removeChild(l);
        s.unsubscribe(ops.OdtCursor.signalCursorUpdated, R);
        I.unsubscribe("input", S);
        I.unsubscribe("compositionupdate", S);
        s = null;
      }
    };
    this.destroy = function (J) {
      I.unsubscribe("compositionstart", C);
      I.unsubscribe("compositionend", N);
      I.unsubscribe("textInput", x);
      I.unsubscribe("keypress", w);
      I.unsubscribe("focus", E);
      core.Async.destroyAll(H, J);
    };
    (B = new odf.TextSerializer()).filter = new odf.OdfNodeFilter();
    I.subscribe("compositionstart", C);
    I.subscribe("compositionend", N);
    I.subscribe("textInput", x);
    I.subscribe("keypress", w);
    I.subscribe("focus", E);
    A.push(new P(I));
    H = A.map(function (J) {
      return J.destroy;
    });
    (l = m.createElement("span")).setAttribute("id", "composer");
    M = core.Task.createTimeoutTask(E, 1);
    H.push(M.destroy);
  };
  gui.InputMethodEditor.signalCompositionStart = "input/compositionstart";
  gui.InputMethodEditor.signalCompositionEnd = "input/compositionend";
})();
gui.MetadataController = function (P, X) {
  function I(C) {
    E.emit(gui.MetadataController.signalMetadataChanged, C);
  }
  function y(C) {
    var N = R.indexOf(C) === -1;
    if (!N) {
      runtime.log("Setting " + C + " is restricted.");
    }
    return N;
  }
  var w = P.getOdtDocument();
  var E = new core.EventNotifier([gui.MetadataController.signalMetadataChanged]);
  var R = ["dc:creator", "dc:date", "meta:editing-cycles", "meta:editing-duration", "meta:document-statistic"];
  this.setMetadata = function (C, N) {
    var s;
    var x = {};
    var S = "";
    if (C) {
      Object.keys(C).filter(y).forEach(function (u) {
        x[u] = C[u];
      });
    }
    if (N) {
      S = N.filter(y).join(",");
    }
    if (S.length > 0 || Object.keys(x).length > 0) {
      (s = new ops.OpUpdateMetadata()).init({
        memberid: X,
        setProperties: x,
        removedProperties: S.length > 0 ? {
          attributes: S
        } : null
      });
      P.enqueue([s]);
    }
  };
  this.getMetadata = function (C) {
    var N;
    runtime.assert(typeof C == "string", "Property must be a string");
    N = C.split(":");
    runtime.assert(N.length === 2, "Property must be a namespace-prefixed string");
    C = odf.Namespaces.lookupNamespaceURI(N[0]);
    runtime.assert(Boolean(C), "Prefix must be for an ODF namespace.");
    return w.getOdfCanvas().odfContainer().getMetadata(C, N[1]);
  };
  this.subscribe = function (C, N) {
    E.subscribe(C, N);
  };
  this.unsubscribe = function (C, N) {
    E.unsubscribe(C, N);
  };
  this.destroy = function (C) {
    w.unsubscribe(ops.OdtDocument.signalMetadataUpdated, I);
    C();
  };
  w.subscribe(ops.OdtDocument.signalMetadataUpdated, I);
};
gui.MetadataController.signalMetadataChanged = "metadata/changed";
gui.PasteController = function (P, X, I, y) {
  function w() {
    C = X.getState(gui.CommonConstraints.EDIT.REVIEW_MODE) !== true || I.isLocalCursorWithinOwnAnnotation();
  }
  function E(s) {
    if (s.getMemberId() === y) {
      w();
    }
  }
  var R = P.getOdtDocument();
  var C = false;
  var N = odf.Namespaces.textns;
  var x = core.StepDirection.NEXT;
  var S = odf.OdfUtils;
  this.isEnabled = function () {
    return C;
  };
  this.paste = function (s) {
    if (C) {
      var u = R.getCursorPosition(y);
      var m = R.getCursor(y).getNode();
      var l = (m = S.getParagraphElement(m)).getAttributeNS(N, "style-name") || "";
      var M = u;
      var O = [];
      var q = R.convertDomPointToCursorStep(m, 0, x);
      s.replace(/\r/g, "").split("\n").forEach(function (ee) {
        var G = new ops.OpInsertText();
        var B = new ops.OpSplitParagraph();
        G.init({
          memberid: y,
          position: M,
          text: ee,
          moveCursor: true
        });
        O.push(G);
        B.init({
          memberid: y,
          position: M += ee.length,
          paragraphStyleName: l,
          sourceParagraphPosition: q,
          moveCursor: true
        });
        O.push(B);
        q = M += 1;
      });
      O.pop();
      P.enqueue(O);
    }
  };
  this.destroy = function (s) {
    R.unsubscribe(ops.Document.signalCursorMoved, E);
    X.unsubscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, w);
    s();
  };
  R.subscribe(ops.Document.signalCursorMoved, E);
  X.subscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, w);
  w();
};
gui.ClosestXOffsetScanner = function (P) {
  function X(R) {
    return R !== null && w !== undefined && Math.abs(R - P) > w;
  }
  function I(R) {
    if (R !== null && X(R) === false) {
      w = Math.abs(R - P);
    }
  }
  var w;
  var y = this;
  var E = gui.StepInfo.VisualDirection.LEFT_TO_RIGHT;
  this.token = undefined;
  this.process = function (R, C, N) {
    var x;
    var S;
    if (R.visualDirection === E) {
      x = C && C.right;
      S = N && N.left;
    } else {
      x = C && C.left;
      S = N && N.right;
    }
    return !!X(x) || !!X(S) || !((C || N) && (I(x), I(S), y.token = R.token), 1);
  };
};
gui.LineBoundaryScanner = function () {
  var P = this;
  var X = null;
  this.token = undefined;
  this.process = function (I, y, w) {
    var E;
    if (E = w) {
      if (X) {
        var C = X;
        E = Math.min(C.bottom - C.top, w.bottom - w.top);
        var R = Math.max(C.top, w.top);
        C = Math.min(C.bottom, w.bottom) - R;
        E = (E > 0 ? C / E : 0) <= 0.4;
      } else {
        E = false;
      }
    }
    if (!!y && (!w || !!E)) {
      P.token = I.token;
    }
    return !!E || (X = (I = X) && y ? {
      left: Math.min(I.left, y.left),
      right: Math.max(I.right, y.right),
      top: Math.min(I.top, y.top),
      bottom: Math.min(I.bottom, y.bottom)
    } : I || y, false);
  };
};
gui.ParagraphBoundaryScanner = function () {
  var I;
  var P = this;
  var X = false;
  var y = odf.OdfUtils;
  this.token = undefined;
  this.process = function (w) {
    var E = y.getParagraphElement(w.container());
    if (!X) {
      I = E;
      X = true;
    }
    return I !== E || (P.token = w.token, false);
  };
};
odf.WordBoundaryFilter = function (P, X) {
  function I(l, M, O) {
    for (var G, q = null, ee = P.getRootNode(); l !== ee && l !== null && q === null;) {
      if (O(G = M < 0 ? l.previousSibling : l.nextSibling) === NodeFilter.FILTER_ACCEPT) {
        q = G;
      }
      l = l.parentNode;
    }
    return q;
  }
  function y(l, M) {
    var O;
    if (l === null) {
      return m.NO_NEIGHBOUR;
    } else if (R.isCharacterElement(l)) {
      return m.SPACE_CHAR;
    } else if (l.nodeType === w || R.isTextSpan(l) || R.isHyperlink(l)) {
      O = l.textContent.charAt(M());
      if (N.test(O)) {
        return m.SPACE_CHAR;
      } else if (C.test(O)) {
        return m.PUNCTUATION_CHAR;
      } else {
        return m.WORD_CHAR;
      }
    } else {
      return m.OTHER;
    }
  }
  var w = Node.TEXT_NODE;
  var E = Node.ELEMENT_NODE;
  var R = odf.OdfUtils;
  var C = /[!-#%-*,-\/:-;?-@\[-\]_{}\u00a1\u00ab\u00b7\u00bb\u00bf;\u00b7\u055a-\u055f\u0589-\u058a\u05be\u05c0\u05c3\u05c6\u05f3-\u05f4\u0609-\u060a\u060c-\u060d\u061b\u061e-\u061f\u066a-\u066d\u06d4\u0700-\u070d\u07f7-\u07f9\u0964-\u0965\u0970\u0df4\u0e4f\u0e5a-\u0e5b\u0f04-\u0f12\u0f3a-\u0f3d\u0f85\u0fd0-\u0fd4\u104a-\u104f\u10fb\u1361-\u1368\u166d-\u166e\u169b-\u169c\u16eb-\u16ed\u1735-\u1736\u17d4-\u17d6\u17d8-\u17da\u1800-\u180a\u1944-\u1945\u19de-\u19df\u1a1e-\u1a1f\u1b5a-\u1b60\u1c3b-\u1c3f\u1c7e-\u1c7f\u2000-\u206e\u207d-\u207e\u208d-\u208e\u3008-\u3009\u2768-\u2775\u27c5-\u27c6\u27e6-\u27ef\u2983-\u2998\u29d8-\u29db\u29fc-\u29fd\u2cf9-\u2cfc\u2cfe-\u2cff\u2e00-\u2e7e\u3000-\u303f\u30a0\u30fb\ua60d-\ua60f\ua673\ua67e\ua874-\ua877\ua8ce-\ua8cf\ua92e-\ua92f\ua95f\uaa5c-\uaa5f\ufd3e-\ufd3f\ufe10-\ufe19\ufe30-\ufe52\ufe54-\ufe61\ufe63\ufe68\ufe6a-\ufe6b\uff01-\uff03\uff05-\uff0a\uff0c-\uff0f\uff1a-\uff1b\uff1f-\uff20\uff3b-\uff3d\uff3f\uff5b\uff5d\uff5f-\uff65]|\ud800[\udd00-\udd01\udf9f\udfd0]|\ud802[\udd1f\udd3f\ude50-\ude58]|\ud809[\udc00-\udc7e]/;
  var N = /\s/;
  var x = core.PositionFilter.FilterResult.FILTER_ACCEPT;
  var S = core.PositionFilter.FilterResult.FILTER_REJECT;
  var s = odf.WordBoundaryFilter.IncludeWhitespace.TRAILING;
  var u = odf.WordBoundaryFilter.IncludeWhitespace.LEADING;
  var m = {
    NO_NEIGHBOUR: 0,
    SPACE_CHAR: 1,
    PUNCTUATION_CHAR: 2,
    WORD_CHAR: 3,
    OTHER: 4
  };
  this.acceptPosition = function (l) {
    var M = l.container();
    var O = l.leftNode();
    var q = l.rightNode();
    var ee = l.unfilteredDomOffset;
    function G() {
      return l.unfilteredDomOffset() - 1;
    }
    if (M.nodeType === E) {
      if (q === null) {
        q = I(M, 1, l.getNodeFilter());
      }
      if (O === null) {
        O = I(M, -1, l.getNodeFilter());
      }
    }
    if (M !== q) {
      ee = function () {
        return 0;
      };
    }
    if (M !== O && O !== null) {
      G = function () {
        return O.textContent.length - 1;
      };
    }
    M = y(O, G);
    q = y(q, ee);
    if (M === m.WORD_CHAR && q === m.WORD_CHAR || M === m.PUNCTUATION_CHAR && q === m.PUNCTUATION_CHAR || X === s && M !== m.NO_NEIGHBOUR && q === m.SPACE_CHAR || X === u && M === m.SPACE_CHAR && q !== m.NO_NEIGHBOUR) {
      return S;
    } else {
      return x;
    }
  };
};
odf.WordBoundaryFilter.IncludeWhitespace = {
  None: 0,
  TRAILING: 1,
  LEADING: 2
};
gui.SelectionController = function (P, X) {
  function I(L) {
    var ie = L.spec();
    if (L.isEdit || ie.memberid === X) {
      $ = undefined;
      J.cancel();
    }
  }
  function y() {
    var L = O.getCursor(X).getNode();
    return O.createStepIterator(L, 0, [G, A], O.getRootElement(L));
  }
  function w(L, ie, Y) {
    Y = new odf.WordBoundaryFilter(O, Y);
    var ne = O.getRootElement(L) || O.getRootNode();
    var le = O.createRootFilter(ne);
    return O.createStepIterator(L, ie, [G, le, Y], ne);
  }
  function E(L, ie) {
    if (ie) {
      return {
        anchorNode: L.startContainer,
        anchorOffset: L.startOffset,
        focusNode: L.endContainer,
        focusOffset: L.endOffset
      };
    } else {
      return {
        anchorNode: L.endContainer,
        anchorOffset: L.endOffset,
        focusNode: L.startContainer,
        focusOffset: L.startOffset
      };
    }
  }
  function R(L, ie, Y) {
    var ne = new ops.OpMoveCursor();
    ne.init({
      memberid: X,
      position: L,
      length: ie || 0,
      selectionType: Y
    });
    return ne;
  }
  function C(L, ie, Y) {
    var ne;
    (ne = E((ne = O.getCursor(X)).getSelectedRange(), ne.hasForwardSelection())).focusNode = L;
    ne.focusOffset = ie;
    if (!Y) {
      ne.anchorNode = ne.focusNode;
      ne.anchorOffset = ne.focusOffset;
    }
    L = O.convertDomToCursorRange(ne);
    P.enqueue([R(L.position, L.length)]);
  }
  function N(L) {
    var ie;
    if ((ie = w(L.startContainer, L.startOffset, Q)).roundToPreviousStep()) {
      L.setStart(ie.container(), ie.offset());
    }
    if ((ie = w(L.endContainer, L.endOffset, U)).roundToNextStep()) {
      L.setEnd(ie.container(), ie.offset());
    }
  }
  function x(L) {
    var ie = (Y = ee.getParagraphElements(L))[0];
    var Y = Y[Y.length - 1];
    if (ie) {
      L.setStart(ie, 0);
    }
    if (Y) {
      if (ee.isParagraph(L.endContainer) && L.endOffset === 0) {
        L.setEndBefore(Y);
      } else {
        L.setEnd(Y, Y.childNodes.length);
      }
    }
  }
  function S(L, ie, Y, ne) {
    var le;
    var ge;
    if (ne) {
      le = Y.startContainer;
      ge = Y.startOffset;
    } else {
      le = Y.endContainer;
      ge = Y.endOffset;
    }
    if (!q.containsNode(L, le)) {
      ge = q.comparePoints(L, 0, le, ge) < 0 ? 0 : L.childNodes.length;
      le = L;
    }
    if (!(L = O.createStepIterator(le, ge, ie, ee.getParagraphElement(le) || L)).roundToClosestStep()) {
      runtime.assert(false, "No step found in requested range");
    }
    if (ne) {
      Y.setStart(L.container(), L.offset());
    } else {
      Y.setEnd(L.container(), L.offset());
    }
  }
  function s(L, ie) {
    var Y = y();
    if (Y.advanceStep(L)) {
      C(Y.container(), Y.offset(), ie);
    }
  }
  function u(L, ie) {
    var Y;
    var ne = $;
    var le = [new gui.LineBoundaryScanner(), new gui.ParagraphBoundaryScanner()];
    if (ne === undefined && H) {
      ne = H();
    }
    if (!isNaN(ne)) {
      Y = y();
      if (B.moveToFilteredStep(Y, L, le) && Y.advanceStep(L)) {
        le = [new gui.ClosestXOffsetScanner(ne), new gui.LineBoundaryScanner(), new gui.ParagraphBoundaryScanner()];
        if (B.moveToFilteredStep(Y, L, le)) {
          C(Y.container(), Y.offset(), ie);
          $ = ne;
          J.restart();
        }
      }
    }
  }
  function m(L, ie) {
    var Y = y();
    var ne = [new gui.LineBoundaryScanner(), new gui.ParagraphBoundaryScanner()];
    if (B.moveToFilteredStep(Y, L, ne)) {
      C(Y.container(), Y.offset(), ie);
    }
  }
  function l(L, ie) {
    var Y;
    if ((Y = w((Y = E((Y = O.getCursor(X)).getSelectedRange(), Y.hasForwardSelection())).focusNode, Y.focusOffset, Q)).advanceStep(L)) {
      C(Y.container(), Y.offset(), ie);
    }
  }
  function M(L, ie, Y) {
    var le = false;
    var ne = E((ne = O.getCursor(X)).getSelectedRange(), ne.hasForwardSelection());
    le = O.getRootElement(ne.focusNode);
    runtime.assert(Boolean(le), "SelectionController: Cursor outside root");
    (ne = O.createStepIterator(ne.focusNode, ne.focusOffset, [G, A], le)).roundToClosestStep();
    if (ne.advanceStep(L) && (Y = Y(ne.container()))) {
      if (L === K) {
        ne.setPosition(Y, 0);
        le = ne.roundToNextStep();
      } else {
        ne.setPosition(Y, Y.childNodes.length);
        le = ne.roundToPreviousStep();
      }
      if (le) {
        C(ne.container(), ne.offset(), ie);
      }
    }
  }
  var $;
  var J;
  var O = P.getOdtDocument();
  var q = core.DomUtils;
  var ee = odf.OdfUtils;
  var G = O.getPositionFilter();
  var B = new gui.GuiStepUtils();
  var A = O.createRootFilter(X);
  var H = null;
  var Q = odf.WordBoundaryFilter.IncludeWhitespace.TRAILING;
  var U = odf.WordBoundaryFilter.IncludeWhitespace.LEADING;
  var K = core.StepDirection.PREVIOUS;
  var F = core.StepDirection.NEXT;
  this.selectionToRange = function (L) {
    var ie = q.comparePoints(L.anchorNode, L.anchorOffset, L.focusNode, L.focusOffset) >= 0;
    var Y = L.focusNode.ownerDocument.createRange();
    if (ie) {
      Y.setStart(L.anchorNode, L.anchorOffset);
      Y.setEnd(L.focusNode, L.focusOffset);
    } else {
      Y.setStart(L.focusNode, L.focusOffset);
      Y.setEnd(L.anchorNode, L.anchorOffset);
    }
    return {
      range: Y,
      hasForwardSelection: ie
    };
  };
  this.rangeToSelection = E;
  this.selectImage = function (L) {
    var ne;
    var Y = O.getRootElement(L);
    var ie = O.createRootFilter(Y);
    if (!(Y = O.createStepIterator(L, 0, [ie, O.getPositionFilter()], Y)).roundToPreviousStep()) {
      runtime.assert(false, "No walkable position before frame");
    }
    ie = Y.container();
    ne = Y.offset();
    Y.setPosition(L, L.childNodes.length);
    if (!Y.roundToNextStep()) {
      runtime.assert(false, "No walkable position after frame");
    }
    L = R((L = O.convertDomToCursorRange({
      anchorNode: ie,
      anchorOffset: ne,
      focusNode: Y.container(),
      focusOffset: Y.offset()
    })).position, L.length, ops.OdtCursor.RegionSelection);
    P.enqueue([L]);
  };
  this.expandToWordBoundaries = N;
  this.expandToParagraphBoundaries = x;
  this.selectRange = function (L, ie, Y) {
    var le;
    var ne = O.getOdfCanvas().getElement();
    var ge = [G];
    le = q.containsNode(ne, L.startContainer);
    ne = q.containsNode(ne, L.endContainer);
    if (le || ne) {
      if (le && ne) {
        if (Y === 2) {
          N(L);
        } else if (Y >= 3) {
          x(L);
        }
      }
      if (!(Y = O.getRootElement(ie ? L.startContainer : L.endContainer))) {
        Y = O.getRootNode();
      }
      ge.push(O.createRootFilter(Y));
      S(Y, ge, L, true);
      S(Y, ge, L, false);
      L = E(L, ie);
      ie = O.convertDomToCursorRange(L);
      L = O.getCursorSelection(X);
      if (ie.position !== L.position || ie.length !== L.length) {
        L = R(ie.position, ie.length, ops.OdtCursor.RangeSelection);
        P.enqueue([L]);
      }
    }
  };
  this.moveCursorToLeft = function () {
    s(K, false);
    return true;
  };
  this.moveCursorToRight = function () {
    s(F, false);
    return true;
  };
  this.extendSelectionToLeft = function () {
    s(K, true);
    return true;
  };
  this.extendSelectionToRight = function () {
    s(F, true);
    return true;
  };
  this.setCaretXPositionLocator = function (L) {
    H = L;
  };
  this.moveCursorUp = function () {
    u(K, false);
    return true;
  };
  this.moveCursorDown = function () {
    u(F, false);
    return true;
  };
  this.extendSelectionUp = function () {
    u(K, true);
    return true;
  };
  this.extendSelectionDown = function () {
    u(F, true);
    return true;
  };
  this.moveCursorBeforeWord = function () {
    l(K, false);
    return true;
  };
  this.moveCursorPastWord = function () {
    l(F, false);
    return true;
  };
  this.extendSelectionBeforeWord = function () {
    l(K, true);
    return true;
  };
  this.extendSelectionPastWord = function () {
    l(F, true);
    return true;
  };
  this.moveCursorToLineStart = function () {
    m(K, false);
    return true;
  };
  this.moveCursorToLineEnd = function () {
    m(F, false);
    return true;
  };
  this.extendSelectionToLineStart = function () {
    m(K, true);
    return true;
  };
  this.extendSelectionToLineEnd = function () {
    m(F, true);
    return true;
  };
  this.extendSelectionToParagraphStart = function () {
    M(K, true, ee.getParagraphElement);
    return true;
  };
  this.extendSelectionToParagraphEnd = function () {
    M(F, true, ee.getParagraphElement);
    return true;
  };
  this.moveCursorToParagraphStart = function () {
    M(K, false, ee.getParagraphElement);
    return true;
  };
  this.moveCursorToParagraphEnd = function () {
    M(F, false, ee.getParagraphElement);
    return true;
  };
  this.moveCursorToDocumentStart = function () {
    M(K, false, O.getRootElement);
    return true;
  };
  this.moveCursorToDocumentEnd = function () {
    M(F, false, O.getRootElement);
    return true;
  };
  this.extendSelectionToDocumentStart = function () {
    M(K, true, O.getRootElement);
    return true;
  };
  this.extendSelectionToDocumentEnd = function () {
    M(F, true, O.getRootElement);
    return true;
  };
  this.extendSelectionToEntireDocument = function () {
    var ie;
    var Y;
    var ne;
    var L = O.getCursor(X);
    L = O.getRootElement(L.getNode());
    runtime.assert(Boolean(L), "SelectionController: Cursor outside root");
    (ne = O.createStepIterator(L, 0, [G, A], L)).roundToClosestStep();
    ie = ne.container();
    Y = ne.offset();
    ne.setPosition(L, L.childNodes.length);
    ne.roundToClosestStep();
    L = O.convertDomToCursorRange({
      anchorNode: ie,
      anchorOffset: Y,
      focusNode: ne.container(),
      focusOffset: ne.offset()
    });
    P.enqueue([R(L.position, L.length)]);
    return true;
  };
  this.destroy = function (L) {
    O.unsubscribe(ops.OdtDocument.signalOperationStart, I);
    core.Async.destroyAll([J.destroy], L);
  };
  J = core.Task.createTimeoutTask(function () {
    $ = undefined;
  }, 2000);
  O.subscribe(ops.OdtDocument.signalOperationStart, I);
};
gui.TextController = function (P, X, I, y, w, E) {
  function R() {
    M = X.getState(gui.CommonConstraints.EDIT.REVIEW_MODE) !== true || I.isLocalCursorWithinOwnAnnotation();
  }
  function C(ee) {
    if (ee.getMemberId() === y) {
      R();
    }
  }
  function N(ee, G, B) {
    var A = [u.getPositionFilter()];
    if (B) {
      A.push(u.createRootFilter(ee.startContainer));
    }
    if (!(B = u.createStepIterator(ee.startContainer, ee.startOffset, A, G)).roundToClosestStep()) {
      runtime.assert(false, "No walkable step found in paragraph element at range start");
    }
    G = u.convertDomPointToCursorStep(B.container(), B.offset());
    if (ee.collapsed) {
      ee = G;
    } else {
      B.setPosition(ee.endContainer, ee.endOffset);
      if (!B.roundToClosestStep()) {
        runtime.assert(false, "No walkable step found in paragraph element at range end");
      }
      ee = u.convertDomPointToCursorStep(B.container(), B.offset());
    }
    return {
      position: G,
      length: ee - G
    };
  }
  function x(ee) {
    var G;
    var B;
    var A;
    var H = m.getParagraphElements(ee);
    var $ = ee.cloneRange();
    var J = [];
    G = H[0];
    if (H.length > 1) {
      if (m.hasNoODFContent(G)) {
        G = H[H.length - 1];
      }
      B = G.getAttributeNS(odf.Namespaces.textns, "style-name") || "";
    }
    H.forEach(function (Q, U) {
      var K;
      var F;
      $.setStart(Q, 0);
      $.collapse(true);
      K = N($, Q, false).position;
      if (U > 0) {
        (F = new ops.OpMergeParagraph()).init({
          memberid: y,
          paragraphStyleName: B,
          destinationStartPosition: A,
          sourceStartPosition: K,
          moveCursor: U === 1
        });
        J.unshift(F);
      }
      A = K;
      $.selectNodeContents(Q);
      if ((K = l.rangeIntersection($, ee)) && (K = N(K, Q, true)).length > 0) {
        (F = new ops.OpRemoveText()).init({
          memberid: y,
          position: K.position,
          length: K.length
        });
        J.unshift(F);
      }
    });
    return J;
  }
  function S(ee) {
    if (ee.length < 0) {
      ee.position += ee.length;
      ee.length = -ee.length;
    }
    return ee;
  }
  function s(ee) {
    if (!M) {
      return false;
    }
    var G;
    var H;
    var B = u.getCursor(y).getSelectedRange().cloneRange();
    var A = S(u.getCursorSelection(y));
    if (A.length === 0) {
      A = undefined;
      G = u.getCursor(y).getNode();
      H = u.getRootElement(G);
      var $ = [u.getPositionFilter(), u.createRootFilter(H)];
      if ((H = u.createStepIterator(G, 0, $, H)).roundToClosestStep() && (ee ? H.nextStep() : H.previousStep())) {
        A = S(u.convertDomToCursorRange({
          anchorNode: G,
          anchorOffset: 0,
          focusNode: H.container(),
          focusOffset: H.offset()
        }));
        if (ee) {
          B.setStart(G, 0);
          B.setEnd(H.container(), H.offset());
        } else {
          B.setStart(H.container(), H.offset());
          B.setEnd(G, 0);
        }
      }
    }
    if (A) {
      P.enqueue(x(B));
    }
    return A !== undefined;
  }
  var u = P.getOdtDocument();
  var m = odf.OdfUtils;
  var l = core.DomUtils;
  var M = false;
  var O = odf.Namespaces.textns;
  var q = core.StepDirection.NEXT;
  this.isEnabled = function () {
    return M;
  };
  this.enqueueParagraphSplittingOps = function () {
    if (!M) {
      return false;
    }
    var A;
    var ee = (A = u.getCursor(y)).getSelectedRange();
    var G = S(u.getCursorSelection(y));
    var B = [];
    var H = (A = m.getParagraphElement(A.getNode())).getAttributeNS(O, "style-name") || "";
    if (G.length > 0) {
      B = B.concat(x(ee));
    }
    (ee = new ops.OpSplitParagraph()).init({
      memberid: y,
      position: G.position,
      paragraphStyleName: H,
      sourceParagraphPosition: u.convertDomPointToCursorStep(A, 0, q),
      moveCursor: true
    });
    B.push(ee);
    if (E) {
      G = E(G.position + 1);
      B = B.concat(G);
    }
    P.enqueue(B);
    return true;
  };
  this.removeTextByBackspaceKey = function () {
    return s(false);
  };
  this.removeTextByDeleteKey = function () {
    return s(true);
  };
  this.removeCurrentSelection = function () {
    if (!M) {
      return false;
    }
    var ee = u.getCursor(y).getSelectedRange();
    P.enqueue(x(ee));
    return true;
  };
  this.insertText = function (ee) {
    if (M) {
      var G = u.getCursor(y).getSelectedRange();
      var B = S(u.getCursorSelection(y));
      var A = [];
      var H = false;
      if (B.length > 0) {
        A = A.concat(x(G));
        H = true;
      }
      (G = new ops.OpInsertText()).init({
        memberid: y,
        position: B.position,
        text: ee,
        moveCursor: true
      });
      A.push(G);
      if (w && (ee = w(B.position, ee.length, H))) {
        A.push(ee);
      }
      P.enqueue(A);
    }
  };
  this.destroy = function (ee) {
    u.unsubscribe(ops.Document.signalCursorMoved, C);
    X.unsubscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, R);
    ee();
  };
  u.subscribe(ops.Document.signalCursorMoved, C);
  X.subscribe(gui.CommonConstraints.EDIT.REVIEW_MODE, R);
  R();
};
gui.UndoManager = function () {};
gui.UndoManager.prototype.subscribe = function (P, X) {};
gui.UndoManager.prototype.unsubscribe = function (P, X) {};
gui.UndoManager.prototype.setDocument = function (P) {};
gui.UndoManager.prototype.setInitialState = function () {};
gui.UndoManager.prototype.initialize = function () {};
gui.UndoManager.prototype.purgeInitialState = function () {};
gui.UndoManager.prototype.setPlaybackFunction = function (P) {};
gui.UndoManager.prototype.hasUndoStates = function () {};
gui.UndoManager.prototype.hasRedoStates = function () {};
gui.UndoManager.prototype.moveForward = function (P) {};
gui.UndoManager.prototype.moveBackward = function (P) {};
gui.UndoManager.prototype.onOperationExecuted = function (P) {};
gui.UndoManager.prototype.isDocumentModified = function () {};
gui.UndoManager.prototype.setDocumentModified = function (P) {};
gui.UndoManager.signalUndoStackChanged = "undoStackChanged";
gui.UndoManager.signalUndoStateCreated = "undoStateCreated";
gui.UndoManager.signalUndoStateModified = "undoStateModified";
gui.UndoManager.signalDocumentModifiedChanged = "documentModifiedChanged";
gui.SessionControllerOptions = function () {
  this.annotationsEnabled = this.directParagraphStylingEnabled = this.directTextStylingEnabled = false;
};
(function () {
  var P = core.PositionFilter.FilterResult.FILTER_ACCEPT;
  gui.SessionController = function (X, I, y, w) {
    function E(Ie, me) {
      var Be = ne.getDOMDocument();
      var se = null;
      if (Be.caretRangeFromPoint) {
        se = {
          container: (Be = Be.caretRangeFromPoint(Ie, me)).startContainer,
          offset: Be.startOffset
        };
      } else if (Be.caretPositionFromPoint && (Be = Be.caretPositionFromPoint(Ie, me)) && Be.offsetNode) {
        se = {
          container: Be.offsetNode,
          offset: Be.offset
        };
      }
      return se;
    }
    function R(Ie) {
      var me = ne.getCursor(I).getSelectedRange();
      if (me.collapsed) {
        Ie.preventDefault();
      } else if (ae.setDataFromRange(Ie, me)) {
        Xe.removeCurrentSelection();
      } else {
        runtime.log("Cut operation failed");
      }
    }
    function C() {
      return ne.getCursor(I).getSelectedRange().collapsed !== false;
    }
    function N(Ie) {
      var me = ne.getCursor(I).getSelectedRange();
      if (me.collapsed) {
        Ie.preventDefault();
      } else if (!ae.setDataFromRange(Ie, me)) {
        runtime.log("Copy operation failed");
      }
    }
    function x(Ie) {
      var me;
      if (Y.clipboardData && Y.clipboardData.getData) {
        me = Y.clipboardData.getData("Text");
      } else if (Ie.clipboardData && Ie.clipboardData.getData) {
        me = Ie.clipboardData.getData("text/plain");
      }
      if (me) {
        Xe.removeCurrentSelection();
        ct.paste(me);
      }
      if (Ie.preventDefault) {
        Ie.preventDefault();
      } else {
        Ie.returnValue = false;
      }
    }
    function S() {
      return false;
    }
    function s(Ie) {
      if (qe) {
        qe.onOperationExecuted(Ie);
      }
    }
    function u(Ie) {
      ne.emit(ops.OdtDocument.signalUndoStackChanged, Ie);
    }
    function m() {
      var Ie;
      return !!qe && (Ie = ue.hasFocus(), qe.moveBackward(1), Ie && ue.focus(), true);
    }
    function l() {
      var Ie;
      return !!qe && (Ie = ue.hasFocus(), qe.moveForward(1), Ie && ue.focus(), true);
    }
    function M(Ie) {
      var me = ne.getCursor(I).getSelectedRange();
      var Be = (Ie.target || Ie.srcElement || null).getAttribute("end");
      if (me && Be && (Ie = E(Ie.clientX, Ie.clientY))) {
        Re.setUnfilteredPosition(Ie.container, Ie.offset);
        if (ye.acceptPosition(Re) === P) {
          me = me.cloneRange();
          if (Be === "left") {
            me.setStart(Re.container(), Re.unfilteredDomOffset());
          } else {
            me.setEnd(Re.container(), Re.unfilteredDomOffset());
          }
          y.setSelectedRange(me, Be === "right");
          ne.emit(ops.Document.signalCursorMoved, y);
        }
      }
    }
    function O() {
      nt.selectRange(y.getSelectedRange(), y.hasForwardSelection(), 1);
    }
    function q() {
      var Ie = Y.getSelection();
      var me = Ie.rangeCount > 0 && nt.selectionToRange(Ie);
      if (ze && me) {
        Ce = true;
        tt.clearSelection();
        Re.setUnfilteredPosition(Ie.focusNode, Ie.focusOffset);
        if (ye.acceptPosition(Re) === P) {
          if (Ze === 2) {
            nt.expandToWordBoundaries(me.range);
          } else if (Ze >= 3) {
            nt.expandToParagraphBoundaries(me.range);
          }
          y.setSelectedRange(me.range, me.hasForwardSelection);
          ne.emit(ops.Document.signalCursorMoved, y);
        }
      }
    }
    function ee(Ie) {
      var me = Ie.target || Ie.srcElement || null;
      var Be = ne.getCursor(I);
      if (ze = me !== null && Ee.containsNode(ne.getOdfCanvas().getElement(), me)) {
        Ce = false;
        me = ne.getRootElement(me) || ne.getRootNode();
        ye = ne.createRootFilter(me);
        Ze = Ie.button === 0 ? Ie.detail : 0;
        if (Be && Ie.shiftKey) {
          Y.getSelection().collapse(Be.getAnchorNode(), 0);
        } else {
          Ie = Y.getSelection();
          me = Be.getSelectedRange();
          if (Ie.extend) {
            if (Be.hasForwardSelection()) {
              Ie.collapse(me.startContainer, me.startOffset);
              Ie.extend(me.endContainer, me.endOffset);
            } else {
              Ie.collapse(me.endContainer, me.endOffset);
              Ie.extend(me.startContainer, me.startOffset);
            }
          } else {
            Ie.removeAllRanges();
            Ie.addRange(me.cloneRange());
          }
        }
        if (Ze > 1) {
          q();
        }
      }
    }
    function G(Ie) {
      var Be = ne.getRootElement(Ie);
      var me = ne.createRootFilter(Be);
      (Be = ne.createStepIterator(Ie, 0, [me, ne.getPositionFilter()], Be)).setPosition(Ie, Ie.childNodes.length);
      if (Be.roundToNextStep()) {
        return {
          container: Be.container(),
          offset: Be.offset()
        };
      } else {
        return null;
      }
    }
    function B(Ie) {
      var me;
      me = (me = Y.getSelection()) ? {
        anchorNode: me.anchorNode,
        anchorOffset: me.anchorOffset,
        focusNode: me.focusNode,
        focusOffset: me.focusOffset
      } : null;
      var se;
      var De;
      var Be = Y.getSelection().isCollapsed;
      if (!me.anchorNode && !me.focusNode && !!(se = E(Ie.clientX, Ie.clientY))) {
        me.anchorNode = se.container;
        me.anchorOffset = se.offset;
        me.focusNode = me.anchorNode;
        me.focusOffset = me.anchorOffset;
      }
      if (Le.isImage(me.focusNode) && me.focusOffset === 0 && Le.isCharacterFrame(me.focusNode.parentNode)) {
        se = (De = me.focusNode.parentNode).getBoundingClientRect();
        if (Ie.clientX > se.left && (se = G(De))) {
          me.focusNode = se.container;
          me.focusOffset = se.offset;
          if (Be) {
            me.anchorNode = me.focusNode;
            me.anchorOffset = me.focusOffset;
          }
        }
      } else if (Le.isImage(me.focusNode.firstChild) && me.focusOffset === 1 && Le.isCharacterFrame(me.focusNode) && (se = G(me.focusNode))) {
        me.anchorNode = me.focusNode = se.container;
        me.anchorOffset = me.focusOffset = se.offset;
      }
      if (me.anchorNode && me.focusNode) {
        me = nt.selectionToRange(me);
        nt.selectRange(me.range, me.hasForwardSelection, Ie.button === 0 ? Ie.detail : 0);
      }
      ue.focus();
    }
    function A(Ie) {
      var me;
      if (me = E(Ie.clientX, Ie.clientY)) {
        Ie = nt.selectionToRange(Ie = {
          anchorNode: Ie = me.container,
          anchorOffset: me = me.offset,
          focusNode: Ie,
          focusOffset: me
        });
        nt.selectRange(Ie.range, Ie.hasForwardSelection, 2);
        ue.focus();
      }
    }
    function H(Ie) {
      var Be;
      var se;
      var De;
      var me = Ie.target || Ie.srcElement || null;
      ot.processRequests();
      if (ze) {
        if (Le.isImage(me) && Le.isCharacterFrame(me.parentNode) && Y.getSelection().isCollapsed) {
          nt.selectImage(me.parentNode);
          ue.focus();
        } else if (tt.isSelectorElement(me)) {
          ue.focus();
        } else if (Ce) {
          se = (me = y.getSelectedRange()).collapsed;
          if (Le.isImage(me.endContainer) && me.endOffset === 0 && Le.isCharacterFrame(me.endContainer.parentNode) && (De = G(De = me.endContainer.parentNode))) {
            me.setEnd(De.container, De.offset);
            if (se) {
              me.collapse(false);
            }
          }
          nt.selectRange(me, y.hasForwardSelection(), Ie.button === 0 ? Ie.detail : 0);
          ue.focus();
        } else if (Ct) {
          B(Ie);
        } else {
          Be = Ee.cloneEvent(Ie);
          $e = runtime.setTimeout(function () {
            B(Be);
          }, 0);
        }
        Ze = 0;
        Ce = ze = false;
      }
    }
    function $(Ie) {
      var me = ne.getCursor(I).getSelectedRange();
      if (!me.collapsed) {
        Qe.exportRangeToDataTransfer(Ie.dataTransfer, me);
      }
    }
    function J() {
      if (ze) {
        ue.focus();
      }
      Ze = 0;
      Ce = ze = false;
    }
    function Q(Ie) {
      H(Ie);
    }
    function U(Ie) {
      var me = Ie.target || Ie.srcElement || null;
      var Be = null;
      if (me.className === "annotationRemoveButton") {
        runtime.assert(de, "Remove buttons are displayed on annotations while annotation editing is disabled in the controller.");
        Be = me.parentNode.getElementsByTagNameNS(odf.Namespaces.officens, "annotation").item(0);
        pe.removeAnnotation(Be);
        ue.focus();
      } else if (me.getAttribute("class") !== "webodf-draggable") {
        H(Ie);
      }
    }
    function K(Ie) {
      if (Ie = Ie.data) {
        if (Ie.indexOf("\n") === -1) {
          Xe.insertText(Ie);
        } else {
          ct.paste(Ie);
        }
      }
    }
    function L(Ie) {
      return function (me) {
        return ne.getCursor(I).getSelectionType() !== ops.OdtCursor.RangeSelection || Ie(me);
      };
    }
    function ie(Ie) {
      ue.unsubscribe("keydown", fe.handleEvent);
      ue.unsubscribe("keypress", Me.handleEvent);
      ue.unsubscribe("keyup", je.handleEvent);
      ue.unsubscribe("copy", N);
      ue.unsubscribe("mousedown", ee);
      ue.unsubscribe("mousemove", ot.trigger);
      ue.unsubscribe("mouseup", U);
      ue.unsubscribe("contextmenu", Q);
      ue.unsubscribe("dragstart", $);
      ue.unsubscribe("dragend", J);
      ue.unsubscribe("click", it.handleClick);
      ue.unsubscribe("longpress", A);
      ue.unsubscribe("drag", M);
      ue.unsubscribe("dragstop", O);
      ne.unsubscribe(ops.OdtDocument.signalOperationEnd, pt.trigger);
      ne.unsubscribe(ops.Document.signalCursorAdded, st.registerCursor);
      ne.unsubscribe(ops.Document.signalCursorRemoved, st.removeCursor);
      ne.unsubscribe(ops.OdtDocument.signalOperationEnd, s);
      Ie();
    }
    var $e;
    var ot;
    var pt;
    var Nt;
    var Y = runtime.getWindow();
    var ne = X.getOdtDocument();
    var le = new gui.SessionConstraints();
    var ge = new gui.SessionContext(X, I);
    var Ee = core.DomUtils;
    var Le = odf.OdfUtils;
    var Qe = new gui.MimeDataExporter();
    var ae = new gui.Clipboard(Qe);
    var fe = new gui.KeyboardHandler();
    var Me = new gui.KeyboardHandler();
    var je = new gui.KeyboardHandler();
    var ze = false;
    var we = new odf.ObjectNameGenerator(ne.getOdfCanvas().odfContainer(), I);
    var Ce = false;
    var ye = null;
    var qe = null;
    var ue = new gui.EventManager(ne);
    var de = w.annotationsEnabled;
    var pe = new gui.AnnotationController(X, le, I);
    var xe = new gui.DirectFormattingController(X, le, ge, I, we, w.directTextStylingEnabled, w.directParagraphStylingEnabled);
    var Xe = new gui.TextController(X, le, ge, I, xe.createCursorStyleOp, xe.createParagraphStyleOps);
    var rt = new gui.ImageController(X, le, ge, I, we);
    var tt = new gui.ImageSelector(ne.getOdfCanvas());
    var Re = ne.createPositionIterator(ne.getRootNode());
    var ct = new gui.PasteController(X, le, ge, I);
    var st = new gui.InputMethodEditor(I, ue);
    var Ze = 0;
    var it = new gui.HyperlinkClickHandler(ne.getOdfCanvas().getElement, fe, je);
    var vt = new gui.HyperlinkController(X, le, ge, I);
    var nt = new gui.SelectionController(X, I);
    var gt = new gui.MetadataController(X, I);
    var Ye = gui.KeyboardHandler.Modifier;
    var et = gui.KeyboardHandler.KeyCode;
    var Et = Y.navigator.appVersion.toLowerCase().indexOf("mac") !== -1;
    var Ct = ["iPad", "iPod", "iPhone"].indexOf(Y.navigator.platform) !== -1;
    runtime.assert(Y !== null, "Expected to be run in an environment which has a global window, like a browser.");
    this.undo = m;
    this.redo = l;
    this.insertLocalCursor = function () {
      runtime.assert(X.getOdtDocument().getCursor(I) === undefined, "Inserting local cursor a second time.");
      var Ie = new ops.OpAddCursor();
      Ie.init({
        memberid: I
      });
      X.enqueue([Ie]);
      ue.focus();
    };
    this.removeLocalCursor = function () {
      runtime.assert(X.getOdtDocument().getCursor(I) !== undefined, "Removing local cursor without inserting before.");
      var Ie = new ops.OpRemoveCursor();
      Ie.init({
        memberid: I
      });
      X.enqueue([Ie]);
    };
    this.startEditing = function () {
      st.subscribe(gui.InputMethodEditor.signalCompositionStart, Xe.removeCurrentSelection);
      st.subscribe(gui.InputMethodEditor.signalCompositionEnd, K);
      ue.subscribe("beforecut", C);
      ue.subscribe("cut", R);
      ue.subscribe("beforepaste", S);
      ue.subscribe("paste", x);
      if (qe) {
        qe.initialize();
      }
      ue.setEditing(true);
      it.setModifier(Et ? Ye.Meta : Ye.Ctrl);
      fe.bind(et.Backspace, Ye.None, function F(Ie) {
        return function () {
          Ie();
          return true;
        };
      }(Xe.removeTextByBackspaceKey), true);
      fe.bind(et.Delete, Ye.None, Xe.removeTextByDeleteKey);
      fe.bind(et.Tab, Ye.None, L(function () {
        Xe.insertText("\t");
        return true;
      }));
      if (Et) {
        fe.bind(et.Clear, Ye.None, Xe.removeCurrentSelection);
        fe.bind(et.B, Ye.Meta, L(xe.toggleBold));
        fe.bind(et.I, Ye.Meta, L(xe.toggleItalic));
        fe.bind(et.U, Ye.Meta, L(xe.toggleUnderline));
        fe.bind(et.L, Ye.MetaShift, L(xe.alignParagraphLeft));
        fe.bind(et.E, Ye.MetaShift, L(xe.alignParagraphCenter));
        fe.bind(et.R, Ye.MetaShift, L(xe.alignParagraphRight));
        fe.bind(et.J, Ye.MetaShift, L(xe.alignParagraphJustified));
        if (de) {
          fe.bind(et.C, Ye.MetaShift, pe.addAnnotation);
        }
        fe.bind(et.Z, Ye.Meta, m);
        fe.bind(et.Z, Ye.MetaShift, l);
      } else {
        fe.bind(et.B, Ye.Ctrl, L(xe.toggleBold));
        fe.bind(et.I, Ye.Ctrl, L(xe.toggleItalic));
        fe.bind(et.U, Ye.Ctrl, L(xe.toggleUnderline));
        fe.bind(et.L, Ye.CtrlShift, L(xe.alignParagraphLeft));
        fe.bind(et.E, Ye.CtrlShift, L(xe.alignParagraphCenter));
        fe.bind(et.R, Ye.CtrlShift, L(xe.alignParagraphRight));
        fe.bind(et.J, Ye.CtrlShift, L(xe.alignParagraphJustified));
        if (de) {
          fe.bind(et.C, Ye.CtrlAlt, pe.addAnnotation);
        }
        fe.bind(et.Z, Ye.Ctrl, m);
        fe.bind(et.Z, Ye.CtrlShift, l);
      }
      Me.setDefault(L(function (Ie) {
        var me;
        return !!(me = Ie.which == null ? String.fromCharCode(Ie.keyCode) : Ie.which !== 0 && Ie.charCode !== 0 ? String.fromCharCode(Ie.which) : null) && !Ie.altKey && !Ie.ctrlKey && !Ie.metaKey && !(Xe.insertText(me), 0);
      }));
      Me.bind(et.Enter, Ye.None, L(Xe.enqueueParagraphSplittingOps));
    };
    this.endEditing = function () {
      st.unsubscribe(gui.InputMethodEditor.signalCompositionStart, Xe.removeCurrentSelection);
      st.unsubscribe(gui.InputMethodEditor.signalCompositionEnd, K);
      ue.unsubscribe("cut", R);
      ue.unsubscribe("beforecut", C);
      ue.unsubscribe("paste", x);
      ue.unsubscribe("beforepaste", S);
      ue.setEditing(false);
      it.setModifier(Ye.None);
      fe.bind(et.Backspace, Ye.None, function () {
        return true;
      }, true);
      fe.unbind(et.Delete, Ye.None);
      fe.unbind(et.Tab, Ye.None);
      if (Et) {
        fe.unbind(et.Clear, Ye.None);
        fe.unbind(et.B, Ye.Meta);
        fe.unbind(et.I, Ye.Meta);
        fe.unbind(et.U, Ye.Meta);
        fe.unbind(et.L, Ye.MetaShift);
        fe.unbind(et.E, Ye.MetaShift);
        fe.unbind(et.R, Ye.MetaShift);
        fe.unbind(et.J, Ye.MetaShift);
        if (de) {
          fe.unbind(et.C, Ye.MetaShift);
        }
        fe.unbind(et.Z, Ye.Meta);
        fe.unbind(et.Z, Ye.MetaShift);
      } else {
        fe.unbind(et.B, Ye.Ctrl);
        fe.unbind(et.I, Ye.Ctrl);
        fe.unbind(et.U, Ye.Ctrl);
        fe.unbind(et.L, Ye.CtrlShift);
        fe.unbind(et.E, Ye.CtrlShift);
        fe.unbind(et.R, Ye.CtrlShift);
        fe.unbind(et.J, Ye.CtrlShift);
        if (de) {
          fe.unbind(et.C, Ye.CtrlAlt);
        }
        fe.unbind(et.Z, Ye.Ctrl);
        fe.unbind(et.Z, Ye.CtrlShift);
      }
      Me.setDefault(null);
      Me.unbind(et.Enter, Ye.None);
    };
    this.getInputMemberId = function () {
      return I;
    };
    this.getSession = function () {
      return X;
    };
    this.getSessionConstraints = function () {
      return le;
    };
    this.setUndoManager = function (Ie) {
      if (qe) {
        qe.unsubscribe(gui.UndoManager.signalUndoStackChanged, u);
      }
      if (qe = Ie) {
        qe.setDocument(ne);
        qe.setPlaybackFunction(X.enqueue);
        qe.subscribe(gui.UndoManager.signalUndoStackChanged, u);
      }
    };
    this.getUndoManager = function () {
      return qe;
    };
    this.getMetadataController = function () {
      return gt;
    };
    this.getAnnotationController = function () {
      return pe;
    };
    this.getDirectFormattingController = function () {
      return xe;
    };
    this.getHyperlinkClickHandler = function () {
      return it;
    };
    this.getHyperlinkController = function () {
      return vt;
    };
    this.getImageController = function () {
      return rt;
    };
    this.getSelectionController = function () {
      return nt;
    };
    this.getTextController = function () {
      return Xe;
    };
    this.getEventManager = function () {
      return ue;
    };
    this.getKeyboardHandlers = function () {
      return {
        keydown: fe,
        keypress: Me
      };
    };
    this.destroy = function (Ie) {
      var me = [ot.destroy, pt.destroy, xe.destroy, st.destroy, ue.destroy, it.destroy, vt.destroy, gt.destroy, nt.destroy, Xe.destroy, ie];
      if (Nt) {
        me.unshift(Nt.destroy);
      }
      runtime.clearTimeout($e);
      core.Async.destroyAll(me, Ie);
    };
    ot = core.Task.createRedrawTask(q);
    pt = core.Task.createRedrawTask(function () {
      var Ie = ne.getCursor(I);
      if (Ie && Ie.getSelectionType() === ops.OdtCursor.RegionSelection && (Ie = Le.getImageElements(Ie.getSelectedRange())[0])) {
        tt.select(Ie.parentNode);
      } else {
        tt.clearSelection();
      }
    });
    fe.bind(et.Left, Ye.None, L(nt.moveCursorToLeft));
    fe.bind(et.Right, Ye.None, L(nt.moveCursorToRight));
    fe.bind(et.Up, Ye.None, L(nt.moveCursorUp));
    fe.bind(et.Down, Ye.None, L(nt.moveCursorDown));
    fe.bind(et.Left, Ye.Shift, L(nt.extendSelectionToLeft));
    fe.bind(et.Right, Ye.Shift, L(nt.extendSelectionToRight));
    fe.bind(et.Up, Ye.Shift, L(nt.extendSelectionUp));
    fe.bind(et.Down, Ye.Shift, L(nt.extendSelectionDown));
    fe.bind(et.Home, Ye.None, L(nt.moveCursorToLineStart));
    fe.bind(et.End, Ye.None, L(nt.moveCursorToLineEnd));
    fe.bind(et.Home, Ye.Ctrl, L(nt.moveCursorToDocumentStart));
    fe.bind(et.End, Ye.Ctrl, L(nt.moveCursorToDocumentEnd));
    fe.bind(et.Home, Ye.Shift, L(nt.extendSelectionToLineStart));
    fe.bind(et.End, Ye.Shift, L(nt.extendSelectionToLineEnd));
    fe.bind(et.Up, Ye.CtrlShift, L(nt.extendSelectionToParagraphStart));
    fe.bind(et.Down, Ye.CtrlShift, L(nt.extendSelectionToParagraphEnd));
    fe.bind(et.Home, Ye.CtrlShift, L(nt.extendSelectionToDocumentStart));
    fe.bind(et.End, Ye.CtrlShift, L(nt.extendSelectionToDocumentEnd));
    if (Et) {
      fe.bind(et.Left, Ye.Alt, L(nt.moveCursorBeforeWord));
      fe.bind(et.Right, Ye.Alt, L(nt.moveCursorPastWord));
      fe.bind(et.Left, Ye.Meta, L(nt.moveCursorToLineStart));
      fe.bind(et.Right, Ye.Meta, L(nt.moveCursorToLineEnd));
      fe.bind(et.Home, Ye.Meta, L(nt.moveCursorToDocumentStart));
      fe.bind(et.End, Ye.Meta, L(nt.moveCursorToDocumentEnd));
      fe.bind(et.Left, Ye.AltShift, L(nt.extendSelectionBeforeWord));
      fe.bind(et.Right, Ye.AltShift, L(nt.extendSelectionPastWord));
      fe.bind(et.Left, Ye.MetaShift, L(nt.extendSelectionToLineStart));
      fe.bind(et.Right, Ye.MetaShift, L(nt.extendSelectionToLineEnd));
      fe.bind(et.Up, Ye.AltShift, L(nt.extendSelectionToParagraphStart));
      fe.bind(et.Down, Ye.AltShift, L(nt.extendSelectionToParagraphEnd));
      fe.bind(et.Up, Ye.MetaShift, L(nt.extendSelectionToDocumentStart));
      fe.bind(et.Down, Ye.MetaShift, L(nt.extendSelectionToDocumentEnd));
      fe.bind(et.A, Ye.Meta, L(nt.extendSelectionToEntireDocument));
    } else {
      fe.bind(et.Left, Ye.Ctrl, L(nt.moveCursorBeforeWord));
      fe.bind(et.Right, Ye.Ctrl, L(nt.moveCursorPastWord));
      fe.bind(et.Left, Ye.CtrlShift, L(nt.extendSelectionBeforeWord));
      fe.bind(et.Right, Ye.CtrlShift, L(nt.extendSelectionPastWord));
      fe.bind(et.A, Ye.Ctrl, L(nt.extendSelectionToEntireDocument));
    }
    if (Ct) {
      Nt = new gui.IOSSafariSupport(ue);
    }
    ue.subscribe("keydown", fe.handleEvent);
    ue.subscribe("keypress", Me.handleEvent);
    ue.subscribe("keyup", je.handleEvent);
    ue.subscribe("copy", N);
    ue.subscribe("mousedown", ee);
    ue.subscribe("mousemove", ot.trigger);
    ue.subscribe("mouseup", U);
    ue.subscribe("contextmenu", Q);
    ue.subscribe("dragstart", $);
    ue.subscribe("dragend", J);
    ue.subscribe("click", it.handleClick);
    ue.subscribe("longpress", A);
    ue.subscribe("drag", M);
    ue.subscribe("dragstop", O);
    ne.subscribe(ops.OdtDocument.signalOperationEnd, pt.trigger);
    ne.subscribe(ops.Document.signalCursorAdded, st.registerCursor);
    ne.subscribe(ops.Document.signalCursorRemoved, st.removeCursor);
    ne.subscribe(ops.OdtDocument.signalOperationEnd, s);
  };
})();
gui.CaretManager = function (P, X) {
  function I(x) {
    if (E.hasOwnProperty(x)) {
      return E[x];
    } else {
      return null;
    }
  }
  function y() {
    return Object.keys(E).map(function (x) {
      return E[x];
    });
  }
  function w(x) {
    var S = E[x];
    if (S) {
      delete E[x];
      if (x === P.getInputMemberId()) {
        C.unsubscribe(ops.OdtDocument.signalProcessingBatchEnd, S.ensureVisible);
        C.unsubscribe(ops.Document.signalCursorMoved, S.refreshCursorBlinking);
        N.unsubscribe("compositionupdate", S.handleUpdate);
        N.unsubscribe("compositionend", S.handleUpdate);
        N.unsubscribe("focus", S.setFocus);
        N.unsubscribe("blur", S.removeFocus);
        R.removeEventListener("focus", S.show, false);
        R.removeEventListener("blur", S.hide, false);
      } else {
        C.unsubscribe(ops.OdtDocument.signalProcessingBatchEnd, S.handleUpdate);
      }
      S.destroy(function () {});
    }
  }
  var E = {};
  var R = runtime.getWindow();
  var C = P.getSession().getOdtDocument();
  var N = P.getEventManager();
  this.registerCursor = function (x, S, s) {
    var u = x.getMemberId();
    x = new gui.Caret(x, X, S, s);
    E[u] = x;
    if (u === P.getInputMemberId()) {
      runtime.log("Starting to track input on new cursor of " + u);
      C.subscribe(ops.OdtDocument.signalProcessingBatchEnd, x.ensureVisible);
      C.subscribe(ops.Document.signalCursorMoved, x.refreshCursorBlinking);
      N.subscribe("compositionupdate", x.handleUpdate);
      N.subscribe("compositionend", x.handleUpdate);
      N.subscribe("focus", x.setFocus);
      N.subscribe("blur", x.removeFocus);
      R.addEventListener("focus", x.show, false);
      R.addEventListener("blur", x.hide, false);
      x.setOverlayElement(N.getEventTrap());
    } else {
      C.subscribe(ops.OdtDocument.signalProcessingBatchEnd, x.handleUpdate);
    }
    return x;
  };
  this.getCaret = I;
  this.getCarets = y;
  this.destroy = function (x) {
    var S = y().map(function (s) {
      return s.destroy;
    });
    P.getSelectionController().setCaretXPositionLocator(null);
    C.unsubscribe(ops.Document.signalCursorRemoved, w);
    E = {};
    core.Async.destroyAll(S, x);
  };
  P.getSelectionController().setCaretXPositionLocator(function () {
    var S;
    var x = I(P.getInputMemberId());
    if (x) {
      S = x.getBoundingClientRect();
    }
    if (S) {
      return S.right;
    } else {
      return undefined;
    }
  });
  C.subscribe(ops.Document.signalCursorRemoved, w);
};
gui.EditInfoHandle = function (P) {
  var I;
  var X = [];
  var y = P.ownerDocument;
  var w = y.documentElement.namespaceURI;
  this.setEdits = function (E) {
    var R;
    var C;
    var N;
    var x;
    X = E;
    core.DomUtils.removeAllChildNodes(I);
    E = 0;
    for (; E < X.length; E += 1) {
      (R = y.createElementNS(w, "div")).className = "editInfo";
      (C = y.createElementNS(w, "span")).className = "editInfoColor";
      C.setAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid", X[E].memberid);
      (N = y.createElementNS(w, "span")).className = "editInfoAuthor";
      N.setAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid", X[E].memberid);
      (x = y.createElementNS(w, "span")).className = "editInfoTime";
      x.setAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid", X[E].memberid);
      x.appendChild(y.createTextNode(X[E].time.toString()));
      R.appendChild(C);
      R.appendChild(N);
      R.appendChild(x);
      I.appendChild(R);
    }
  };
  this.show = function () {
    I.style.display = "block";
  };
  this.hide = function () {
    I.style.display = "none";
  };
  this.destroy = function (E) {
    P.removeChild(I);
    E();
  };
  (I = y.createElementNS(w, "div")).setAttribute("class", "editInfoHandle");
  I.style.display = "none";
  P.appendChild(I);
};
ops.EditInfo = function (P, X) {
  var y;
  var w = {};
  this.getNode = function () {
    return y;
  };
  this.getOdtDocument = function () {
    return X;
  };
  this.getEdits = function () {
    return w;
  };
  this.getSortedEdits = function () {
    return function I() {
      var R;
      var E = [];
      for (R in w) {
        if (w.hasOwnProperty(R)) {
          E.push({
            memberid: R,
            time: w[R].time
          });
        }
      }
      E.sort(function (C, N) {
        return C.time - N.time;
      });
      return E;
    }();
  };
  this.addEdit = function (E, R) {
    w[E] = {
      time: R
    };
  };
  this.clearEdits = function () {
    w = {};
  };
  this.destroy = function (E) {
    if (P.parentNode) {
      P.removeChild(y);
    }
    E();
  };
  y = X.getDOMDocument().createElementNS("urn:webodf:names:editinfo", "editinfo");
  P.insertBefore(y, P.firstChild);
};
gui.EditInfoMarker = function (P, X) {
  function I(S, s) {
    return runtime.setTimeout(function () {
      R.style.opacity = S;
    }, s);
  }
  var w;
  var E;
  var R;
  var C;
  var N;
  var x;
  var S;
  var y = this;
  this.addEdit = function (S, s) {
    var u = Date.now() - s;
    P.addEdit(S, s);
    E.setEdits(P.getSortedEdits());
    R.setAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid", S);
    runtime.clearTimeout(N);
    runtime.clearTimeout(x);
    if (u < 10000) {
      C = I(1, 0);
      N = I(0.5, 10000 - u);
      x = I(0.2, 20000 - u);
    } else if (u >= 10000 && u < 20000) {
      C = I(0.5, 0);
      x = I(0.2, 20000 - u);
    } else {
      C = I(0.2, 0);
    }
  };
  this.getEdits = function () {
    return P.getEdits();
  };
  this.clearEdits = function () {
    P.clearEdits();
    E.setEdits([]);
    if (R.hasAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid")) {
      R.removeAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid");
    }
  };
  this.getEditInfo = function () {
    return P;
  };
  this.show = function () {
    R.style.display = "block";
  };
  this.hide = function () {
    y.hideHandle();
    R.style.display = "none";
  };
  this.showHandle = function () {
    E.show();
  };
  this.hideHandle = function () {
    E.hide();
  };
  this.destroy = function (S) {
    runtime.clearTimeout(C);
    runtime.clearTimeout(N);
    runtime.clearTimeout(x);
    w.removeChild(R);
    E.destroy(function (s) {
      if (s) {
        S(s);
      } else {
        P.destroy(S);
      }
    });
  };
  S = P.getOdtDocument().getDOMDocument();
  (R = S.createElementNS(S.documentElement.namespaceURI, "div")).setAttribute("class", "editInfoMarker");
  R.onmouseover = function () {
    y.showHandle();
  };
  R.onmouseout = function () {
    y.hideHandle();
  };
  (w = P.getNode()).appendChild(R);
  E = new gui.EditInfoHandle(w);
  if (!X) {
    y.hide();
  }
};
gui.HyperlinkTooltipView = function (P, X) {
  var E;
  var R;
  var C;
  var N;
  var I = core.DomUtils;
  var y = odf.OdfUtils;
  var w = runtime.getWindow();
  runtime.assert(w !== null, "Expected to be run in an environment which has a global window, like a browser.");
  this.showTooltip = function (N) {
    var u;
    var x = N.target || N.srcElement;
    var S = P.getSizer();
    var s = P.getZoomLevel();
    e: {
      for (; x;) {
        if (y.isHyperlink(x)) {
          break e;
        }
        if (y.isParagraph(x) || y.isInlineRoot(x)) {
          break;
        }
        x = x.parentNode;
      }
      x = null;
    }
    if (x) {
      var m;
      if (!I.containsNode(S, C)) {
        S.appendChild(C);
      }
      u = R;
      switch (X()) {
        case gui.KeyboardHandler.Modifier.Ctrl:
          m = runtime.tr("Ctrl-click to follow link");
          break;
        case gui.KeyboardHandler.Modifier.Meta:
          m = runtime.tr("⌘-click to follow link");
          break;
        default:
          m = "";
      }
      u.textContent = m;
      E.textContent = y.getHyperlinkTarget(x);
      C.style.display = "block";
      x = N.clientX > (u = w.innerWidth - C.offsetWidth - 15) ? u : N.clientX + 15;
      N = ((N = N.clientY > (u = w.innerHeight - C.offsetHeight - 10) ? u : N.clientY + 10) - (S = S.getBoundingClientRect()).top) / s;
      C.style.left = (x = (x - S.left) / s) + "px";
      C.style.top = N + "px";
    }
  };
  this.hideTooltip = function () {
    C.style.display = "none";
  };
  this.destroy = function (N) {
    if (C.parentNode) {
      C.parentNode.removeChild(C);
    }
    N();
  };
  N = P.getElement().ownerDocument;
  E = N.createElement("span");
  R = N.createElement("span");
  E.className = "webodf-hyperlinkTooltipLink";
  R.className = "webodf-hyperlinkTooltipText";
  (C = N.createElement("div")).className = "webodf-hyperlinkTooltip";
  C.appendChild(E);
  C.appendChild(R);
  P.getElement().appendChild(C);
};
gui.OdfFieldView = function (P) {
  var I;
  var w;
  var E;
  var R;
  var y = P.getElement().ownerDocument;
  this.showFieldHighlight = function () {
    I.appendChild(y.createTextNode(function X() {
      var E;
      return (E = odf.OdfSchema.getFields().map(function (R) {
        return R.replace(":", "|");
      })).join(",\n") + "\n{ background-color: #D0D0D0; }\n\n" + E.map(function (R) {
        return R + ":empty::after";
      }).join(",\n") + "\n{ content:' '; white-space: pre; }\n";
    }()));
  };
  this.hideFieldHighlight = function () {
    for (var w = I.sheet, E = w.cssRules; E.length;) {
      w.deleteRule(E.length - 1);
    }
  };
  this.destroy = function (w) {
    if (I.parentNode) {
      I.parentNode.removeChild(I);
    }
    w();
  };
  w = y.getElementsByTagName("head").item(0);
  E = y.createElement("style");
  R = "";
  E.type = "text/css";
  E.media = "screen, print, handheld, projection";
  odf.Namespaces.forEachPrefix(function (C, N) {
    R += "@namespace " + C + " url(" + N + ");\n";
  });
  E.appendChild(y.createTextNode(R));
  w.appendChild(E);
  I = E;
};
gui.ShadowCursor = function (P) {
  var X = P.getDOMDocument().createRange();
  var I = true;
  this.removeFromDocument = function () {};
  this.getMemberId = function () {
    return gui.ShadowCursor.ShadowCursorMemberId;
  };
  this.getSelectedRange = function () {
    return X;
  };
  this.setSelectedRange = function (y, w) {
    X = y;
    I = w !== false;
  };
  this.hasForwardSelection = function () {
    return I;
  };
  this.getDocument = function () {
    return P;
  };
  this.getSelectionType = function () {
    return ops.OdtCursor.RangeSelection;
  };
  X.setStart(P.getRootNode(), 0);
};
gui.ShadowCursor.ShadowCursorMemberId = "";
gui.SelectionView = function (P) {};
gui.SelectionView.prototype.rerender = function () {};
gui.SelectionView.prototype.show = function () {};
gui.SelectionView.prototype.hide = function () {};
gui.SelectionView.prototype.destroy = function (P) {};
gui.SelectionViewManager = function (P) {
  function X() {
    return Object.keys(I).map(function (y) {
      return I[y];
    });
  }
  var I = {};
  this.getSelectionView = function (y) {
    if (I.hasOwnProperty(y)) {
      return I[y];
    } else {
      return null;
    }
  };
  this.getSelectionViews = X;
  this.removeSelectionView = function (y) {
    if (I.hasOwnProperty(y)) {
      I[y].destroy(function () {});
      delete I[y];
    }
  };
  this.hideSelectionView = function (y) {
    if (I.hasOwnProperty(y)) {
      I[y].hide();
    }
  };
  this.showSelectionView = function (y) {
    if (I.hasOwnProperty(y)) {
      I[y].show();
    }
  };
  this.rerenderSelectionViews = function () {
    Object.keys(I).forEach(function (y) {
      I[y].rerender();
    });
  };
  this.registerCursor = function (y, w) {
    var E = y.getMemberId();
    var R = new P(y);
    if (w) {
      R.show();
    } else {
      R.hide();
    }
    return I[E] = R;
  };
  this.destroy = function (y) {
    var E = X();
    (function w(R, C) {
      if (C) {
        y(C);
      } else if (R < E.length) {
        E[R].destroy(function (N) {
          w(R + 1, N);
        });
      } else {
        y();
      }
    })(0, undefined);
  };
};
gui.SessionViewOptions = function () {
  this.caretBlinksOnRangeSelect = this.caretAvatarsInitiallyVisible = this.editInfoMarkersInitiallyVisible = true;
};
(function () {
  function P(X, I) {
    if (X !== undefined) {
      return Boolean(X);
    } else {
      return I;
    }
  }
  gui.SessionView = function (X, I, y, w, E, R) {
    function C(F) {
      if (F.memberId === I) {
        $.getViewport().scrollIntoView(F.annotation.getBoundingClientRect());
      }
    }
    function N() {
      var F = document.getElementsByTagName("head").item(0);
      var L = document.createElement("style");
      L.type = "text/css";
      L.media = "screen, print, handheld, projection";
      F.appendChild(L);
      return L;
    }
    function S(F) {
      var L;
      var ie;
      for (ie in A) {
        if (A.hasOwnProperty(ie)) {
          L = A[ie];
          if (F) {
            L.show();
          } else {
            L.hide();
          }
        }
      }
    }
    function s(F) {
      E.getCarets().forEach(function (L) {
        if (F) {
          L.showHandle();
        } else {
          L.hideHandle();
        }
      });
    }
    function u(F) {
      (function x(F, L, ie) {
        function Y(ne, le, ge) {
          le = ne + "[editinfo|memberid=\"" + F + "\"]" + ge + le;
          e: {
            var Ee = G.firstChild;
            for (ne = ne + "[editinfo|memberid=\"" + F + "\"]" + ge + "{"; Ee;) {
              if (Ee.nodeType === Node.TEXT_NODE && Ee.data.indexOf(ne) === 0) {
                ne = Ee;
                break e;
              }
              Ee = Ee.nextSibling;
            }
            ne = null;
          }
          if (ne) {
            ne.data = le;
          } else {
            G.appendChild(document.createTextNode(le));
          }
        }
        Y("div.editInfoMarker", "{ background-color: " + ie + "; }", "");
        Y("span.editInfoColor", "{ background-color: " + ie + "; }", "");
        Y("span.editInfoAuthor", "{ content: \"" + L + "\"; }", ":before");
        Y("dc|creator", "{ background-color: " + ie + "; }", "");
        Y(".webodf-selectionOverlay", "{ fill: " + ie + "; stroke: " + ie + ";}", "");
        if (F === I) {
          Y(".webodf-touchEnabled .webodf-selectionOverlay", "{ display: block; }", " > .webodf-draggable");
          F = gui.ShadowCursor.ShadowCursorMemberId;
          Y(".webodf-selectionOverlay", "{ fill: " + ie + "; stroke: " + ie + ";}", "");
          Y(".webodf-touchEnabled .webodf-selectionOverlay", "{ display: block; }", " > .webodf-draggable");
        }
      })(F.getMemberId(), (F = F.getProperties()).fullName, F.color);
    }
    function m(F) {
      var L = F.getMemberId();
      var ie = y.getOdtDocument().getMember(L).getProperties();
      E.registerCursor(F, U, K);
      R.registerCursor(F, true);
      if (F = E.getCaret(L)) {
        F.setAvatarImageUrl(ie.imageUrl);
        F.setColor(ie.color);
      }
      runtime.log("+++ View here +++ eagerly created an Caret for '" + L + "'! +++");
    }
    function l(F) {
      F = F.getMemberId();
      var L = R.getSelectionView(I);
      var ie = R.getSelectionView(gui.ShadowCursor.ShadowCursorMemberId);
      var Y = E.getCaret(I);
      if (F === I) {
        ie.hide();
        if (L) {
          L.show();
        }
        if (Y) {
          Y.show();
        }
      } else if (F === gui.ShadowCursor.ShadowCursorMemberId) {
        ie.show();
        if (L) {
          L.hide();
        }
        if (Y) {
          Y.hide();
        }
      }
    }
    function M(F) {
      R.removeSelectionView(F);
    }
    function O(F) {
      var L = F.paragraphElement;
      var ie = F.memberId;
      F = F.timeStamp;
      var Y;
      var ne = "";
      var le = L.getElementsByTagNameNS("urn:webodf:names:editinfo", "editinfo").item(0);
      if (le) {
        ne = le.getAttributeNS("urn:webodf:names:editinfo", "id");
        Y = A[ne];
      } else {
        ne = Math.random().toString();
        Y = new ops.EditInfo(L, y.getOdtDocument());
        Y = new gui.EditInfoMarker(Y, Q);
        (le = L.getElementsByTagNameNS("urn:webodf:names:editinfo", "editinfo").item(0)).setAttributeNS("urn:webodf:names:editinfo", "id", ne);
        A[ne] = Y;
      }
      Y.addEdit(ie, new Date(F));
      J.trigger();
    }
    function q() {
      var F;
      if (B.hasChildNodes()) {
        core.DomUtils.removeAllChildNodes(B);
      }
      if (w.getState(gui.CommonConstraints.EDIT.ANNOTATIONS.ONLY_DELETE_OWN) === true && (F = y.getOdtDocument().getMember(I))) {
        F = F.getProperties().fullName;
        B.appendChild(document.createTextNode(".annotationWrapper:not([creator = '" + F + "']) .annotationRemoveButton { display: none; }"));
      }
    }
    function ee(F) {
      var L = Object.keys(A).map(function (ie) {
        return A[ie];
      });
      H.unsubscribe(ops.Document.signalMemberAdded, u);
      H.unsubscribe(ops.Document.signalMemberUpdated, u);
      H.unsubscribe(ops.Document.signalCursorAdded, m);
      H.unsubscribe(ops.Document.signalCursorRemoved, M);
      H.unsubscribe(ops.OdtDocument.signalParagraphChanged, O);
      H.unsubscribe(ops.Document.signalCursorMoved, l);
      H.unsubscribe(ops.OdtDocument.signalParagraphChanged, R.rerenderSelectionViews);
      H.unsubscribe(ops.OdtDocument.signalTableAdded, R.rerenderSelectionViews);
      H.unsubscribe(ops.OdtDocument.signalParagraphStyleModified, R.rerenderSelectionViews);
      w.unsubscribe(gui.CommonConstraints.EDIT.ANNOTATIONS.ONLY_DELETE_OWN, q);
      H.unsubscribe(ops.Document.signalMemberAdded, q);
      H.unsubscribe(ops.Document.signalMemberUpdated, q);
      G.parentNode.removeChild(G);
      B.parentNode.removeChild(B);
      (function ie(Y, ne) {
        if (ne) {
          F(ne);
        } else if (Y < L.length) {
          L[Y].destroy(function (le) {
            ie(Y + 1, le);
          });
        } else {
          F();
        }
      })(0, undefined);
    }
    var G;
    var B;
    var H;
    var $;
    var J;
    var A = {};
    var Q = P(X.editInfoMarkersInitiallyVisible, true);
    var U = P(X.caretAvatarsInitiallyVisible, true);
    var K = P(X.caretBlinksOnRangeSelect, true);
    this.showEditInfoMarkers = function () {
      if (!Q) {
        S(Q = true);
      }
    };
    this.hideEditInfoMarkers = function () {
      if (Q) {
        S(Q = false);
      }
    };
    this.showCaretAvatars = function () {
      if (!U) {
        s(U = true);
      }
    };
    this.hideCaretAvatars = function () {
      if (U) {
        s(U = false);
      }
    };
    this.getSession = function () {
      return y;
    };
    this.getCaret = function (F) {
      return E.getCaret(F);
    };
    this.destroy = function (F) {
      var L = [J.destroy, ee];
      H.unsubscribe(ops.OdtDocument.signalAnnotationAdded, C);
      core.Async.destroyAll(L, F);
    };
    H = y.getOdtDocument();
    $ = H.getOdfCanvas();
    H.subscribe(ops.OdtDocument.signalAnnotationAdded, C);
    H.subscribe(ops.Document.signalMemberAdded, u);
    H.subscribe(ops.Document.signalMemberUpdated, u);
    H.subscribe(ops.Document.signalCursorAdded, m);
    H.subscribe(ops.Document.signalCursorRemoved, M);
    H.subscribe(ops.OdtDocument.signalParagraphChanged, O);
    H.subscribe(ops.Document.signalCursorMoved, l);
    H.subscribe(ops.OdtDocument.signalParagraphChanged, R.rerenderSelectionViews);
    H.subscribe(ops.OdtDocument.signalTableAdded, R.rerenderSelectionViews);
    H.subscribe(ops.OdtDocument.signalParagraphStyleModified, R.rerenderSelectionViews);
    w.subscribe(gui.CommonConstraints.EDIT.ANNOTATIONS.ONLY_DELETE_OWN, q);
    H.subscribe(ops.Document.signalMemberAdded, q);
    H.subscribe(ops.Document.signalMemberUpdated, q);
    (G = N()).appendChild(document.createTextNode("@namespace editinfo url(urn:webodf:names:editinfo);"));
    G.appendChild(document.createTextNode("@namespace dc url(http://purl.org/dc/elements/1.1/);"));
    B = N();
    q();
    J = core.Task.createRedrawTask(function () {
      var F = $.getAnnotationViewManager();
      if (F) {
        F.rehighlightAnnotations();
        H.fixCursorPositions();
      }
    });
  };
})();
gui.SvgSelectionView = function (P) {
  function X() {
    var F = u.getRootNode();
    if (m !== F) {
      m = F;
      (l = u.getCanvas().getSizer()).appendChild(O);
      O.setAttribute("class", "webodf-selectionOverlay");
      ee.setAttribute("class", "webodf-draggable");
      G.setAttribute("class", "webodf-draggable");
      ee.setAttribute("end", "left");
      G.setAttribute("end", "right");
      ee.setAttribute("r", 8);
      G.setAttribute("r", 8);
      O.appendChild(q);
      O.appendChild(ee);
      O.appendChild(G);
    }
  }
  function I(F) {
    F = F.getBoundingClientRect();
    return Boolean(F && F.height !== 0);
  }
  function w(F, L) {
    var ie = {};
    ie.top = Math.min(F.top, L.top);
    ie.left = Math.min(F.left, L.left);
    ie.right = Math.max(F.right, L.right);
    ie.bottom = Math.max(F.bottom, L.bottom);
    ie.width = ie.right - ie.left;
    ie.height = ie.bottom - ie.top;
    return ie;
  }
  function E(F, L) {
    if (L && L.width > 0 && L.height > 0) {
      F = F ? w(F, L) : L;
    }
    return F;
  }
  function C(F, L) {
    var ie = F.getBoundingClientRect();
    var Y = {
      width: 0
    };
    Y.top = ie.top;
    Y.bottom = ie.bottom;
    Y.height = ie.height;
    Y.left = Y.right = L ? ie.right : ie.left;
    return Y;
  }
  function x(F) {
    if ($ && F === P) {
      K.trigger();
    }
  }
  function S(F) {
    ee.setAttribute("r", F = 8 / F);
    G.setAttribute("r", F);
  }
  function s(F) {
    l.removeChild(O);
    l.classList.remove("webodf-virtualSelections");
    P.getDocument().unsubscribe(ops.Document.signalCursorMoved, x);
    H.unsubscribe(gui.ZoomHelper.signalZoomChanged, S);
    F();
  }
  var m;
  var l;
  var K;
  var F;
  var u = P.getDocument();
  var M = u.getDOMDocument();
  var O = M.createElementNS("http://www.w3.org/2000/svg", "svg");
  var q = M.createElementNS("http://www.w3.org/2000/svg", "polygon");
  var ee = M.createElementNS("http://www.w3.org/2000/svg", "circle");
  var G = M.createElementNS("http://www.w3.org/2000/svg", "circle");
  var B = odf.OdfUtils;
  var A = core.DomUtils;
  var H = u.getCanvas().getZoomHelper();
  var $ = true;
  var J = P.getDocument().createPositionIterator(u.getRootNode());
  var Q = NodeFilter.FILTER_ACCEPT;
  var U = NodeFilter.FILTER_REJECT;
  this.rerender = function () {
    if ($) {
      K.trigger();
    }
  };
  this.show = function () {
    $ = true;
    K.trigger();
  };
  this.hide = function () {
    $ = false;
    K.trigger();
  };
  this.destroy = function (F) {
    core.Async.destroyAll([K.destroy, s], F);
  };
  F = P.getMemberId();
  K = core.Task.createRedrawTask(function N() {
    var L;
    var F = P.getSelectedRange();
    if (L = $ && P.getSelectionType() === ops.OdtCursor.RangeSelection && !F.collapsed) {
      X();
      var ne;
      var le;
      var ge;
      var Ee;
      var Le;
      var Qe;
      var ie = A.getBoundingClientRect(l);
      var Y = H.getZoomLevel();
      F = function y(F) {
        var ne;
        var L = B.getTextElements(F, true, false);
        var ie = F.cloneRange();
        var Y = F.cloneRange();
        F = F.cloneRange();
        if (!L.length) {
          return null;
        }
        e: {
          var le = L[ne = 0];
          var ge = ie.startContainer === le ? ie.startOffset : 0;
          var Ee = ge;
          ie.setStart(le, ge);
          ie.setEnd(le, Ee);
          for (; !I(ie);) {
            if (le.nodeType === Node.ELEMENT_NODE && Ee < le.childNodes.length) {
              Ee = le.childNodes.length;
            } else if (le.nodeType === Node.TEXT_NODE && Ee < le.length) {
              Ee += 1;
            } else {
              if (!L[ne]) {
                ne = false;
                break e;
              }
              le = L[ne];
              ne += 1;
              ge = Ee = 0;
            }
            ie.setStart(le, ge);
            ie.setEnd(le, Ee);
          }
          ne = true;
        }
        if (!ne) {
          return null;
        }
        e: {
          Ee = ge = Y.endContainer === (le = L[ne = L.length - 1]) ? Y.endOffset : le.nodeType === Node.TEXT_NODE ? le.length : le.childNodes.length;
          Y.setStart(le, ge);
          Y.setEnd(le, Ee);
          for (; !I(Y);) {
            if (le.nodeType === Node.ELEMENT_NODE && ge > 0) {
              ge = 0;
            } else if (le.nodeType === Node.TEXT_NODE && ge > 0) {
              --ge;
            } else {
              if (!L[ne]) {
                L = false;
                break e;
              }
              le = L[ne];
              --ne;
              ge = Ee = le.length || le.childNodes.length;
            }
            Y.setStart(le, ge);
            Y.setEnd(le, Ee);
          }
          L = true;
        }
        if (L) {
          F.setStart(ie.startContainer, ie.startOffset);
          F.setEnd(Y.endContainer, Y.endOffset);
          return {
            firstRange: ie,
            lastRange: Y,
            fillerRange: F
          };
        } else {
          return null;
        }
      }(F);
      if (F) {
        var ae;
        ne = F.lastRange;
        le = F.fillerRange;
        ge = A.translateRect(C(L = F.firstRange, false), ie, Y);
        Le = A.translateRect(C(ne, true), ie, Y);
        Ee = (Ee = function R(F) {
          function L(Ce) {
            J.setUnfilteredPosition(Ce, 0);
            if (ze.acceptNode(Ce) === Q && je.acceptPosition(J) === Q) {
              return Q;
            } else {
              return U;
            }
          }
          var Le;
          var Qe;
          var je;
          var we;
          var Ce;
          var ye;
          var Y = F.commonAncestorContainer;
          var ne = F.startContainer;
          var le = F.endContainer;
          var ge = F.startOffset;
          var Ee = F.endOffset;
          var ae = null;
          var Me = M.createRange();
          var ze = new odf.OdfNodeFilter();
          if (ne === Y || le === Y) {
            ae = (Me = F.cloneRange()).getBoundingClientRect();
            Me.detach();
            return ae;
          }
          for (F = ne; F.parentNode !== Y;) {
            F = F.parentNode;
          }
          for (Qe = le; Qe.parentNode !== Y;) {
            Qe = Qe.parentNode;
          }
          je = u.createRootFilter(ne);
          Y = F.nextSibling;
          for (; Y && Y !== Qe;) {
            ye = undefined;
            ye = null;
            if (L(Ce = Y) === Q) {
              ye = A.getBoundingClientRect(Ce);
            }
            ae = E(ae, ye);
            Y = Y.nextSibling;
          }
          if (B.isParagraph(F)) {
            ae = E(ae, A.getBoundingClientRect(F));
          } else if (F.nodeType === Node.TEXT_NODE) {
            Me.setStart(Y = F, ge);
            Me.setEnd(Y, Y === Qe ? Ee : Y.length);
            ae = E(ae, Me.getBoundingClientRect());
          } else {
            for (Y = (we = M.createTreeWalker(F, NodeFilter.SHOW_TEXT, L, false)).currentNode = ne; Y && Y !== le;) {
              Me.setStart(Y, ge);
              Me.setEnd(Y, Y.length);
              ae = E(ae, Me.getBoundingClientRect());
              Le = Y;
              ge = 0;
              Y = we.nextNode();
            }
          }
          Le ||= ne;
          if (B.isParagraph(Qe)) {
            ae = E(ae, A.getBoundingClientRect(Qe));
          } else if (Qe.nodeType === Node.TEXT_NODE) {
            Me.setStart(Y = Qe, Y === F ? ge : 0);
            Me.setEnd(Y, Ee);
            ae = E(ae, Me.getBoundingClientRect());
          } else {
            for (Y = (we = M.createTreeWalker(Qe, NodeFilter.SHOW_TEXT, L, false)).currentNode = le; Y && Y !== Le;) {
              Me.setStart(Y, 0);
              Me.setEnd(Y, Ee);
              ae = E(ae, Me.getBoundingClientRect());
              if (Y = we.previousNode()) {
                Ee = Y.length;
              }
            }
          }
          return ae;
        }(le)) ? A.translateRect(Ee, ie, Y) : w(ge, Le);
        Qe = Ee.left;
        Ee = ge.left + Math.max(0, Ee.width - (ge.left - Ee.left));
        ie = Math.min(ge.top, Le.top);
        Qe = [{
          x: ge.left,
          y: ie + ge.height
        }, {
          x: ge.left,
          y: ie
        }, {
          x: Ee,
          y: ie
        }, {
          x: Ee,
          y: (Y = Le.top + Le.height) - Le.height
        }, {
          x: Le.right,
          y: Y - Le.height
        }, {
          x: Le.right,
          y: Y
        }, {
          x: Qe,
          y: Y
        }, {
          x: Qe,
          y: ie + ge.height
        }, {
          x: ge.left,
          y: ie + ge.height
        }];
        Ee = "";
        ae = 0;
        for (; ae < Qe.length; ae += 1) {
          Ee += Qe[ae].x + "," + Qe[ae].y + " ";
        }
        q.setAttribute("points", Ee);
        ee.setAttribute("cx", ge.left);
        ee.setAttribute("cy", ie + ge.height / 2);
        G.setAttribute("cx", Le.right);
        G.setAttribute("cy", Y - Le.height / 2);
        L.detach();
        ne.detach();
        le.detach();
      }
      L = Boolean(F);
    }
    O.style.display = L ? "block" : "none";
  });
  X();
  O.setAttributeNS("urn:webodf:names:editinfo", "editinfo:memberid", F);
  l.classList.add("webodf-virtualSelections");
  P.getDocument().subscribe(ops.Document.signalCursorMoved, x);
  H.subscribe(gui.ZoomHelper.signalZoomChanged, S);
  S(H.getZoomLevel());
};
gui.UndoStateRules = function () {
  function P(w, E) {
    var R = w.length;
    this.previous = function () {
      for (--R; R >= 0; --R) {
        if (E(w[R])) {
          return w[R];
        }
      }
      return null;
    };
  }
  function X(w) {
    var E;
    if ((w = w.spec()).hasOwnProperty("position")) {
      E = w.position;
    }
    return E;
  }
  function I(w) {
    return w.isEdit;
  }
  function y(w, E, R) {
    if (R) {
      return (w = X(w)) - (E = X(E)) == E - (R = X(R));
    } else {
      return (R = X(w) - X(E)) == 0 || Math.abs(R) === 1;
    }
  }
  this.isEditOperation = I;
  this.isPartOfOperationSet = function (w, E) {
    var C;
    var R = w.group !== undefined;
    if (!w.isEdit || E.length === 0 || (C = E[E.length - 1], R && w.group === C.group)) {
      return true;
    }
    e: switch (w.spec().optype) {
      case "RemoveText":
      case "InsertText":
        C = true;
        break e;
      default:
        C = false;
    }
    if (C && E.some(I)) {
      if (R) {
        var N;
        R = w.spec().optype;
        var s;
        var u;
        var x = (C = new P(E, I)).previous();
        var S = null;
        runtime.assert(Boolean(x), "No edit operations found in state");
        runtime.assert((u = x.group) !== undefined, "Operation has no group");
        s = 1;
        for (; x && x.group === u;) {
          if (R === x.spec().optype) {
            N = x;
            break;
          }
          x = C.previous();
        }
        if (N) {
          for (x = C.previous(); x;) {
            if (x.group !== u) {
              if (s === 2) {
                break;
              }
              u = x.group;
              s += 1;
            }
            if (R === x.spec().optype) {
              S = x;
              break;
            }
            x = C.previous();
          }
          N = y(w, N, S);
        } else {
          N = false;
        }
        return N;
      }
      N = w.spec().optype;
      C = (R = new P(E, I)).previous();
      runtime.assert(Boolean(C), "No edit operations found in state");
      return N === C.spec().optype && y(w, C, R.previous());
    }
    return false;
  };
};
(function () {
  function P(y, w) {
    this.mainId = y !== undefined ? y : -1;
    this.subId = w !== undefined ? w : -1;
  }
  function X(y, w, E) {
    var C;
    var N;
    var x;
    this.addOperation = function (S) {
      if (y.isEditOperation(S)) {
        x += 1;
      }
      N.push(S);
    };
    this.isNextStateId = function (S) {
      return S.mainId === C && S.subId === x;
    };
    this.getNextStateId = function () {
      return new P(C, x);
    };
    this.getOperations = function () {
      return N;
    };
    C = I += 1;
    N = w || [];
    x = w && E ? w.reduce(function R(S, s) {
      return S + (y.isEditOperation(s) ? 1 : 0);
    }, 0) : 0;
  }
  var I = 0;
  gui.TrivialUndoManager = function (y) {
    function w() {
      return B.isNextStateId(G) !== true;
    }
    function E(U) {
      if ((U = U.getOperations()).length > 0) {
        Q = true;
        q(U);
        Q = false;
      }
    }
    function R() {
      $.emit(gui.UndoManager.signalUndoStackChanged, {
        undoAvailable: m.hasUndoStates(),
        redoAvailable: m.hasRedoStates()
      });
    }
    function C(U) {
      var K = w();
      if (U !== K) {
        $.emit(gui.UndoManager.signalDocumentModifiedChanged, K);
      }
    }
    function N() {
      if (B !== O && B !== A[A.length - 1]) {
        A.push(B);
      }
    }
    function x(U) {
      var K = U.previousSibling || U.nextSibling;
      U.parentNode.removeChild(U);
      l.normalizeTextNodes(K);
    }
    function S(U) {
      return Object.keys(U).map(function (K) {
        return U[K];
      });
    }
    function u() {
      var U = w();
      var K = M = ee.cloneDocumentElement();
      l.getElementsByTagNameNS(K, "urn:webodf:names:cursor", "cursor").forEach(x);
      l.getElementsByTagNameNS(K, "urn:webodf:names:cursor", "anchor").forEach(x);
      N();
      B = O = function s(U) {
        function K(le) {
          var ge = le.spec();
          if (ie[ge.memberid]) {
            switch (ge.optype) {
              case "AddCursor":
                if (!F[ge.memberid]) {
                  F[ge.memberid] = le;
                  delete ie[ge.memberid];
                  --Y;
                }
                break;
              case "MoveCursor":
                L[ge.memberid] ||= le;
            }
          }
        }
        var Y;
        var ne;
        var F = {};
        var L = {};
        var ie = {};
        ne = U.pop();
        ee.getMemberIds().forEach(function (le) {
          ie[le] = true;
        });
        Y = Object.keys(ie).length;
        for (; ne && Y > 0;) {
          (ne = ne.getOperations()).reverse();
          ne.forEach(K);
          ne = U.pop();
        }
        return new X(J, S(F).concat(S(L)));
      }([O].concat(A));
      A.length = 0;
      H.length = 0;
      if (!U) {
        G = B.getNextStateId();
      }
      R();
      C(U);
    }
    var M;
    var O;
    var q;
    var ee;
    var G;
    var B;
    var m = this;
    var l = core.DomUtils;
    var A = [];
    var H = [];
    var $ = new core.EventNotifier([gui.UndoManager.signalUndoStackChanged, gui.UndoManager.signalUndoStateCreated, gui.UndoManager.signalUndoStateModified, gui.UndoManager.signalDocumentModifiedChanged, gui.TrivialUndoManager.signalDocumentRootReplaced]);
    var J = y || new gui.UndoStateRules();
    var Q = false;
    this.subscribe = function (U, K) {
      $.subscribe(U, K);
    };
    this.unsubscribe = function (U, K) {
      $.unsubscribe(U, K);
    };
    this.isDocumentModified = w;
    this.setDocumentModified = function (U) {
      if (w() !== U) {
        G = U ? new P() : B.getNextStateId();
        $.emit(gui.UndoManager.signalDocumentModifiedChanged, U);
      }
    };
    this.hasUndoStates = function () {
      return A.length > 0;
    };
    this.hasRedoStates = function () {
      return H.length > 0;
    };
    this.setDocument = function (U) {
      ee = U;
    };
    this.purgeInitialState = function () {
      var U = w();
      A.length = 0;
      H.length = 0;
      B = O = new X(J);
      G = B.getNextStateId();
      M = null;
      R();
      C(U);
    };
    this.setInitialState = u;
    this.initialize = function () {
      if (!M) {
        u();
      }
    };
    this.setPlaybackFunction = function (U) {
      q = U;
    };
    this.onOperationExecuted = function (U) {
      if (!Q) {
        var K = w();
        if (J.isEditOperation(U) && (B === O || H.length > 0) || !J.isPartOfOperationSet(U, B.getOperations())) {
          H.length = 0;
          N();
          B = new X(J, [U], true);
          A.push(B);
          $.emit(gui.UndoManager.signalUndoStateCreated, {
            operations: B.getOperations()
          });
          R();
        } else {
          B.addOperation(U);
          $.emit(gui.UndoManager.signalUndoStateModified, {
            operations: B.getOperations()
          });
        }
        C(K);
      }
    };
    this.moveForward = function (U) {
      for (var L, K = 0, F = w(); U && H.length;) {
        L = H.pop();
        A.push(L);
        E(L);
        --U;
        K += 1;
      }
      if (K) {
        B = A[A.length - 1];
        R();
        C(F);
      }
      return K;
    };
    this.moveBackward = function (U) {
      for (var K = 0, F = w(); U && A.length;) {
        H.push(A.pop());
        --U;
        K += 1;
      }
      if (K) {
        ee.getMemberIds().forEach(function (L) {
          if (ee.hasCursor(L)) {
            ee.removeCursor(L);
          }
        });
        ee.setDocumentElement(M.cloneNode(true));
        $.emit(gui.TrivialUndoManager.signalDocumentRootReplaced, {});
        E(O);
        A.forEach(E);
        B = A[A.length - 1] || O;
        R();
        C(F);
      }
      return K;
    };
    B = O = new X(J);
    G = B.getNextStateId();
  };
  gui.TrivialUndoManager.signalDocumentRootReplaced = "documentRootReplaced";
})();
odf.GraphicProperties = function (P, X, I) {
  var y = this;
  var w = odf.Namespaces.stylens;
  var E = odf.Namespaces.svgns;
  this.verticalPos = function () {
    return y.data.value("verticalPos");
  };
  this.verticalRel = function () {
    return y.data.value("verticalRel");
  };
  this.horizontalPos = function () {
    return y.data.value("horizontalPos");
  };
  this.horizontalRel = function () {
    return y.data.value("horizontalRel");
  };
  this.strokeWidth = function () {
    return y.data.value("strokeWidth");
  };
  y.data = new odf.LazyStyleProperties(I === undefined ? undefined : I.data, {
    verticalPos: function () {
      var R = P.getAttributeNS(w, "vertical-pos");
      if (R === "") {
        return undefined;
      } else {
        return R;
      }
    },
    verticalRel: function () {
      var R = P.getAttributeNS(w, "vertical-rel");
      if (R === "") {
        return undefined;
      } else {
        return R;
      }
    },
    horizontalPos: function () {
      var R = P.getAttributeNS(w, "horizontal-pos");
      if (R === "") {
        return undefined;
      } else {
        return R;
      }
    },
    horizontalRel: function () {
      var R = P.getAttributeNS(w, "horizontal-rel");
      if (R === "") {
        return undefined;
      } else {
        return R;
      }
    },
    strokeWidth: function () {
      var R = P.getAttributeNS(E, "stroke-width");
      return X.parseLength(R);
    }
  });
};
odf.ComputedGraphicProperties = function () {
  var P;
  this.setGraphicProperties = function (X) {
    P = X;
  };
  this.verticalPos = function () {
    return P && P.verticalPos() || "from-top";
  };
  this.verticalRel = function () {
    return P && P.verticalRel() || "page";
  };
  this.horizontalPos = function () {
    return P && P.horizontalPos() || "from-left";
  };
  this.horizontalRel = function () {
    return P && P.horizontalRel() || "page";
  };
};
odf.PageLayoutProperties = function (P, X, I) {
  var y = this;
  var w = odf.Namespaces.fons;
  this.pageHeight = function () {
    return y.data.value("pageHeight") || 1123;
  };
  this.pageWidth = function () {
    return y.data.value("pageWidth") || 794;
  };
  y.data = new odf.LazyStyleProperties(I === undefined ? undefined : I.data, {
    pageHeight: function () {
      var E;
      if (P) {
        E = P.getAttributeNS(w, "page-height");
        E = X.parseLength(E);
      }
      return E;
    },
    pageWidth: function () {
      var E;
      if (P) {
        E = P.getAttributeNS(w, "page-width");
        E = X.parseLength(E);
      }
      return E;
    }
  });
};
odf.PageLayout = function (P, X, I) {
  var y = null;
  if (P) {
    y = X.getPropertiesElement("page-layout-properties", P);
  }
  this.pageLayout = new odf.PageLayoutProperties(y, X, I && I.pageLayout);
};
odf.PageLayoutCache = function () {};
odf.PageLayoutCache.prototype.getPageLayout = function (P) {};
odf.PageLayoutCache.prototype.getDefaultPageLayout = function () {};
odf.ParagraphProperties = function (P, X, I) {
  var y = this;
  var w = odf.Namespaces.fons;
  this.marginTop = function () {
    return y.data.value("marginTop");
  };
  y.data = new odf.LazyStyleProperties(I === undefined ? undefined : I.data, {
    marginTop: function () {
      var E = P.getAttributeNS(w, "margin-top");
      return X.parsePositiveLengthOrPercent(E, "marginTop", I && I.data);
    }
  });
};
odf.ComputedParagraphProperties = function () {
  var P = {};
  var X = [];
  this.setStyleChain = function (I) {
    X = I;
    P = {};
  };
  this.marginTop = function () {
    var I;
    var y;
    if (P.hasOwnProperty("marginTop")) {
      I = P.marginTop;
    } else {
      for (y = 0; I === undefined && y < X.length; y += 1) {
        I = X[y].marginTop();
      }
      P.marginTop = I;
    }
    return I || 0;
  };
};
odf.TextProperties = function (P, X, I) {
  var y = this;
  var w = odf.Namespaces.fons;
  this.fontSize = function () {
    return y.data.value("fontSize");
  };
  y.data = new odf.LazyStyleProperties(I === undefined ? undefined : I.data, {
    fontSize: function () {
      var E = P.getAttributeNS(w, "font-size");
      return X.parsePositiveLengthOrPercent(E, "fontSize", I && I.data);
    }
  });
};
odf.ComputedTextProperties = function () {
  var P = {};
  var X = [];
  this.setStyleChain = function (I) {
    X = I;
    P = {};
  };
  this.fontSize = function () {
    var I;
    var y;
    if (P.hasOwnProperty("fontSize")) {
      I = P.fontSize;
    } else {
      for (y = 0; I === undefined && y < X.length; y += 1) {
        I = X[y].fontSize();
      }
      P.fontSize = I;
    }
    return I || 12;
  };
};
odf.MasterPage = function (P, X) {
  var I;
  if (P) {
    I = P.getAttributeNS(odf.Namespaces.stylens, "page-layout-name");
    this.pageLayout = X.getPageLayout(I);
  } else {
    this.pageLayout = X.getDefaultPageLayout();
  }
};
odf.MasterPageCache = function () {};
odf.MasterPageCache.prototype.getMasterPage = function (P) {};
odf.StylePileEntry = function (P, X, I, y) {
  var w;
  var E;
  var R;
  this.masterPage = function () {
    var w = P.getAttributeNS(odf.Namespaces.stylens, "master-page-name");
    var E = null;
    if (w) {
      E = I.getMasterPage(w);
    }
    return E;
  };
  w = this;
  R = null;
  if ((E = P.getAttributeNS(odf.Namespaces.stylens, "family")) === "graphic" || E === "chart") {
    w.graphic = y === undefined ? undefined : y.graphic;
    if ((R = X.getPropertiesElement("graphic-properties", P, R)) !== null) {
      w.graphic = new odf.GraphicProperties(R, X, w.graphic);
    }
  }
  if (E === "paragraph" || E === "table-cell" || E === "graphic" || E === "presentation" || E === "chart") {
    w.paragraph = y === undefined ? undefined : y.paragraph;
    if ((R = X.getPropertiesElement("paragraph-properties", P, R)) !== null) {
      w.paragraph = new odf.ParagraphProperties(R, X, w.paragraph);
    }
  }
  if (E === "text" || E === "paragraph" || E === "table-cell" || E === "graphic" || E === "presentation" || E === "chart") {
    w.text = y === undefined ? undefined : y.text;
    if ((R = X.getPropertiesElement("text-properties", P, R)) !== null) {
      w.text = new odf.TextProperties(R, X, w.text);
    }
  }
};
odf.StylePile = function (P, X) {
  function I(S, s) {
    var u;
    var m;
    if (S.hasAttributeNS(y, "parent-style-name")) {
      m = S.getAttributeNS(y, "parent-style-name");
      if (s.indexOf(m) === -1) {
        u = x(m, s);
      }
    }
    return new odf.StylePileEntry(S, P, X, u);
  }
  var R;
  var x;
  var y = odf.Namespaces.stylens;
  var w = {};
  var E = {};
  var C = {};
  var N = {};
  x = function (S, s) {
    var m;
    var u = C[S];
    if (!u && (m = w[S])) {
      s.push(S);
      u = I(m, s);
      C[S] = u;
    }
    return u;
  };
  this.getStyle = function (S) {
    var u;
    var s = N[S] || C[S];
    var m = [];
    if (!s) {
      if (!(u = E[S])) {
        if (u = w[S]) {
          m.push(S);
        }
      }
      if (u) {
        s = I(u, m);
      }
    }
    return s;
  };
  this.addCommonStyle = function (S) {
    var s;
    if (S.hasAttributeNS(y, "name")) {
      s = S.getAttributeNS(y, "name");
      if (!w.hasOwnProperty(s)) {
        w[s] = S;
      }
    }
  };
  this.addAutomaticStyle = function (S) {
    var s;
    if (S.hasAttributeNS(y, "name")) {
      s = S.getAttributeNS(y, "name");
      if (!E.hasOwnProperty(s)) {
        E[s] = S;
      }
    }
  };
  this.setDefaultStyle = function (S) {
    if (R === undefined) {
      R = I(S, []);
    }
  };
  this.getDefaultStyle = function () {
    return R;
  };
};
odf.ComputedGraphicStyle = function () {
  this.text = new odf.ComputedTextProperties();
  this.paragraph = new odf.ComputedParagraphProperties();
  this.graphic = new odf.ComputedGraphicProperties();
};
odf.ComputedParagraphStyle = function () {
  this.text = new odf.ComputedTextProperties();
  this.paragraph = new odf.ComputedParagraphProperties();
};
odf.ComputedTextStyle = function () {
  this.text = new odf.ComputedTextProperties();
};
odf.StyleCache = function (P) {
  function X(J, Q, U, K) {
    var F;
    if (Q = U.getAttributeNS(Q, "class-names")) {
      Q = Q.split(" ");
      F = 0;
      Q = Q.split(" ");
      F = 0;
      for (; F < Q.length; F += 1) {
        if (U = Q[F]) {
          K.push(J);
          K.push(U);
        }
      }
    }
  }
  function I(J, Q) {
    var U = O.getStyleName("paragraph", J);
    if (U !== undefined) {
      Q.push("paragraph");
      Q.push(U);
    }
    if (J.namespaceURI === l && (J.localName === "h" || J.localName === "p")) {
      X("paragraph", l, J, Q);
    }
    return Q;
  }
  function y(J, Q, U) {
    var F;
    var L;
    var Y;
    var K = [];
    for (F = 0; F < J.length; F += 2) {
      if ((Y = C[J[F]].getStyle(Y = J[F + 1])) !== undefined && (Y = Y[Q]) !== undefined && Y !== L) {
        K.push(Y);
        L = Y;
      }
    }
    if ((Y = C[U].getDefaultStyle()) && (Y = Y[Q]) !== undefined && Y !== L) {
      K.push(Y);
    }
    return K;
  }
  function w(J, Q) {
    var U = O.getStyleName("text", J);
    var K = J.parentNode;
    if (U !== undefined) {
      Q.push("text");
      Q.push(U);
    }
    if (J.localName === "span" && J.namespaceURI === l) {
      X("text", l, J, Q);
    }
    if (!!K && K !== P) {
      if (K.namespaceURI !== l || K.localName !== "p" && K.localName !== "h") {
        w(K, Q);
      } else {
        I(K, Q);
      }
    }
    return Q;
  }
  function E(J) {
    J = J.getAttributeNS(M, "family");
    return C[J];
  }
  var C;
  var N;
  var x;
  var S;
  var s;
  var u;
  var m;
  var ee;
  var G;
  var B;
  var A;
  var H;
  var $;
  var R = this;
  var l = odf.Namespaces.textns;
  var M = odf.Namespaces.stylens;
  var O = new odf.StyleInfo();
  var q = new odf.StyleParseUtils();
  this.getComputedGraphicStyle = function (J) {
    var Q = [];
    if ((J = O.getStyleName("graphic", J)) !== undefined) {
      Q.push("graphic");
      Q.push(J);
    }
    J = Q.join("/");
    var U = S[J];
    runtime.assert(Q.length % 2 == 0, "Invalid style chain.");
    if (U === undefined) {
      (U = new odf.ComputedGraphicStyle()).graphic.setGraphicProperties(y(Q, "graphic", "graphic")[0]);
      U.text.setStyleChain(y(Q, "text", "graphic"));
      U.paragraph.setStyleChain(y(Q, "paragraph", "graphic"));
      S[J] = U;
    }
    return U;
  };
  this.getComputedParagraphStyle = function (J) {
    var Q = (J = I(J, [])).join("/");
    var U = x[Q];
    runtime.assert(J.length % 2 == 0, "Invalid style chain.");
    if (U === undefined) {
      (U = new odf.ComputedParagraphStyle()).text.setStyleChain(y(J, "text", "paragraph"));
      U.paragraph.setStyleChain(y(J, "paragraph", "paragraph"));
      x[Q] = U;
    }
    return U;
  };
  this.getComputedTextStyle = function (J) {
    var Q = (J = w(J, [])).join("/");
    var U = N[Q];
    runtime.assert(J.length % 2 == 0, "Invalid style chain.");
    if (U === undefined) {
      (U = new odf.ComputedTextStyle()).text.setStyleChain(y(J, "text", "text"));
      N[Q] = U;
    }
    return U;
  };
  this.getPageLayout = function (J) {
    var Q = $[J];
    if (!Q) {
      if (Q = H[J]) {
        Q = new odf.PageLayout(Q, q, A);
        $[J] = Q;
      } else {
        Q = A;
      }
    }
    return Q;
  };
  this.getDefaultPageLayout = function () {
    return A;
  };
  this.getMasterPage = function (J) {
    var Q = G[J];
    if (Q === undefined) {
      if (Q = ee[J]) {
        Q = new odf.MasterPage(Q, R);
        G[J] = Q;
      } else {
        Q = null;
      }
    }
    return Q;
  };
  this.getDefaultMasterPage = function () {
    return B;
  };
  this.update = function () {
    var J;
    var Q;
    var U = null;
    var K = null;
    N = {};
    x = {};
    S = {};
    ee = {};
    G = {};
    $ = {};
    H = {};
    s = new odf.StylePile(q, R);
    u = new odf.StylePile(q, R);
    m = new odf.StylePile(q, R);
    C = {
      text: s,
      paragraph: u,
      graphic: m
    };
    J = P.styles.firstElementChild;
    for (; J;) {
      if (J.namespaceURI === M) {
        if (Q = E(J)) {
          if (J.localName === "style") {
            Q.addCommonStyle(J);
          } else if (J.localName === "default-style") {
            Q.setDefaultStyle(J);
          }
        } else if (J.localName === "default-page-layout") {
          U = J;
        }
      }
      J = J.nextElementSibling;
    }
    A = new odf.PageLayout(U, q);
    J = P.automaticStyles.firstElementChild;
    for (; J;) {
      if (J.namespaceURI === M) {
        if ((Q = E(J)) && J.localName === "style") {
          Q.addAutomaticStyle(J);
        } else if (J.localName === "page-layout") {
          H[J.getAttributeNS(M, "name")] = J;
        }
      }
      J = J.nextElementSibling;
    }
    for (J = P.masterStyles.firstElementChild; J;) {
      if (J.namespaceURI === M && J.localName === "master-page") {
        K = K || J;
        if ((U = (Q = J).getAttributeNS(M, "name")).length > 0 && !ee.hasOwnProperty(U)) {
          ee[U] = Q;
        }
      }
      J = J.nextElementSibling;
    }
    B = new odf.MasterPage(K, R);
  };
};
ops.OperationTransformMatrix = function () {
  function P(s) {
    s.position += s.length;
    s.length *= -1;
  }
  function X(s) {
    var u = s.length < 0;
    if (u) {
      P(s);
    }
    return u;
  }
  function I(s, u) {
    var l = [];
    if (s) {
      ["style:parent-style-name", "style:next-style-name"].forEach(function m(M) {
        if (s[M] === u) {
          l.push(M);
        }
      });
    }
    return l;
  }
  function y(s, u) {
    if (s) {
      ["style:parent-style-name", "style:next-style-name"].forEach(function m(l) {
        if (s[l] === u) {
          delete s[l];
        }
      });
    }
  }
  function w(s) {
    var u = {};
    Object.keys(s).forEach(function (m) {
      u[m] = typeof s[m] == "object" ? w(s[m]) : s[m];
    });
    return u;
  }
  function E(s, u, m, l) {
    var M;
    var ee;
    var O = false;
    var q = false;
    var G = [];
    if (l && l.attributes) {
      G = l.attributes.split(",");
    }
    if (s && (m || G.length > 0)) {
      Object.keys(s).forEach(function (B) {
        var H;
        var A = s[B];
        if (typeof A != "object") {
          if (m) {
            H = m[B];
          }
          if (H !== undefined) {
            delete s[B];
            q = true;
            if (H === A) {
              delete m[B];
              O = true;
            }
          } else if (G.indexOf(B) !== -1) {
            delete s[B];
            q = true;
          }
        }
      });
    }
    if (u && u.attributes && (m || G.length > 0)) {
      ee = u.attributes.split(",");
      l = 0;
      for (; l < ee.length; l += 1) {
        M = ee[l];
        if (m && m[M] !== undefined || G && G.indexOf(M) !== -1) {
          ee.splice(l, 1);
          --l;
          q = true;
        }
      }
      if (ee.length > 0) {
        u.attributes = ee.join(",");
      } else {
        delete u.attributes;
      }
    }
    return {
      majorChanged: O,
      minorChanged: q
    };
  }
  function R(s) {
    for (var u in s) {
      if (s.hasOwnProperty(u)) {
        return true;
      }
    }
    return false;
  }
  function C(s) {
    for (var u in s) {
      if (s.hasOwnProperty(u) && (u !== "attributes" || s.attributes.length > 0)) {
        return true;
      }
    }
    return false;
  }
  function N(s, u, m, l, M) {
    var B;
    var O = s ? s[M] : null;
    var q = u ? u[M] : null;
    var ee = m ? m[M] : null;
    var G = l ? l[M] : null;
    B = E(O, q, ee, G);
    if (O && !R(O)) {
      delete s[M];
    }
    if (q && !C(q)) {
      delete u[M];
    }
    if (ee && !R(ee)) {
      delete m[M];
    }
    if (G && !C(G)) {
      delete l[M];
    }
    return B;
  }
  function x(s, u) {
    return {
      opSpecsA: [s],
      opSpecsB: [u]
    };
  }
  var S;
  S = {
    AddAnnotation: {
      AddAnnotation: function (s, u, m) {
        var l;
        if (s.position < u.position) {
          l = s;
          m = u;
        } else if (u.position < s.position) {
          l = u;
          m = s;
        } else {
          l = m ? s : u;
          m = m ? u : s;
        }
        if (m.position < l.position + l.length) {
          l.length += 2;
        }
        m.position += 2;
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      AddCursor: x,
      AddMember: x,
      AddStyle: x,
      ApplyDirectStyling: function (s, u) {
        if (s.position <= u.position) {
          u.position += 2;
        } else if (s.position <= u.position + u.length) {
          u.length += 2;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      InsertText: function (s, u) {
        if (u.position <= s.position) {
          s.position += u.text.length;
        } else {
          if (s.length !== undefined && u.position <= s.position + s.length) {
            s.length += u.text.length;
          }
          u.position += 2;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      MergeParagraph: function (s, u) {
        if (u.sourceStartPosition <= s.position) {
          --s.position;
        } else {
          if (s.length !== undefined && u.sourceStartPosition <= s.position + s.length) {
            --s.length;
          }
          u.sourceStartPosition += 2;
          if (s.position < u.destinationStartPosition) {
            u.destinationStartPosition += 2;
          }
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      MoveCursor: function (s, u) {
        var m = X(u);
        if (s.position < u.position) {
          u.position += 2;
        } else if (s.position < u.position + u.length) {
          u.length += 2;
        }
        if (m) {
          P(u);
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      RemoveAnnotation: function (s, u) {
        if (s.position < u.position) {
          if (u.position < s.position + s.length) {
            s.length -= u.length + 2;
          }
          u.position += 2;
        } else {
          s.position -= u.length + 2;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      RemoveCursor: x,
      RemoveMember: x,
      RemoveStyle: x,
      RemoveText: function (s, u) {
        var M;
        var m = u.position;
        var l = u.position + u.length;
        var O = [s];
        var q = [u];
        if (s.position <= u.position) {
          u.position += 2;
        } else if (s.position < l) {
          u.length = s.position - u.position;
          q.unshift(M = {
            optype: "RemoveText",
            memberid: u.memberid,
            timestamp: u.timestamp,
            position: s.position + 2,
            length: l - s.position
          });
        }
        if (u.position + u.length <= s.position) {
          s.position -= u.length;
          if (s.length !== undefined && M) {
            s.length = M.length >= s.length ? 0 : s.length - M.length;
          }
        } else if (s.length !== undefined) {
          if (l <= (M = s.position + s.length)) {
            s.length -= u.length;
          } else if (m < M) {
            s.length = m - s.position;
          }
        }
        return {
          opSpecsA: O,
          opSpecsB: q
        };
      },
      SetParagraphStyle: function (s, u) {
        if (s.position < u.position) {
          u.position += 2;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      SplitParagraph: function (s, u) {
        if (s.position < u.sourceParagraphPosition) {
          u.sourceParagraphPosition += 2;
        }
        if (u.position <= s.position) {
          s.position += 1;
        } else {
          if (s.length !== undefined && u.position <= s.position + s.length) {
            s.length += 1;
          }
          u.position += 2;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    AddCursor: {
      AddCursor: x,
      AddMember: x,
      AddStyle: x,
      ApplyDirectStyling: x,
      InsertText: x,
      MergeParagraph: x,
      MoveCursor: x,
      RemoveAnnotation: x,
      RemoveCursor: x,
      RemoveMember: x,
      RemoveStyle: x,
      RemoveText: x,
      SetParagraphStyle: x,
      SplitParagraph: x,
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    AddMember: {
      AddStyle: x,
      ApplyDirectStyling: x,
      InsertText: x,
      MergeParagraph: x,
      MoveCursor: x,
      RemoveAnnotation: x,
      RemoveCursor: x,
      RemoveStyle: x,
      RemoveText: x,
      SetParagraphStyle: x,
      SplitParagraph: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    AddStyle: {
      AddStyle: x,
      ApplyDirectStyling: x,
      InsertText: x,
      MergeParagraph: x,
      MoveCursor: x,
      RemoveAnnotation: x,
      RemoveCursor: x,
      RemoveMember: x,
      RemoveStyle: function (s, u) {
        var m;
        var l = [s];
        var M = [u];
        if (s.styleFamily === u.styleFamily) {
          if ((m = I(s.setProperties, u.styleName)).length > 0) {
            m = {
              optype: "UpdateParagraphStyle",
              memberid: u.memberid,
              timestamp: u.timestamp,
              styleName: s.styleName,
              removedProperties: {
                attributes: m.join(",")
              }
            };
            M.unshift(m);
          }
          y(s.setProperties, u.styleName);
        }
        return {
          opSpecsA: l,
          opSpecsB: M
        };
      },
      RemoveText: x,
      SetParagraphStyle: x,
      SplitParagraph: x,
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    ApplyDirectStyling: {
      ApplyDirectStyling: function (s, u, m) {
        var l;
        var M;
        var O;
        var q;
        var ee;
        var G;
        var B;
        var A;
        q = [s];
        O = [u];
        if (s.position + s.length > u.position && s.position < u.position + u.length) {
          l = m ? s : u;
          M = m ? u : s;
          if (s.position !== u.position || s.length !== u.length) {
            G = w(l);
            B = w(M);
          }
          if ((u = N(M.setProperties, null, l.setProperties, null, "style:text-properties")).majorChanged || u.minorChanged) {
            O = [];
            s = [];
            q = l.position + l.length;
            ee = M.position + M.length;
            if (M.position < l.position) {
              if (u.minorChanged) {
                (A = w(B)).length = l.position - M.position;
                s.push(A);
                M.position = l.position;
                M.length = ee - M.position;
              }
            } else if (l.position < M.position && u.majorChanged) {
              (A = w(G)).length = M.position - l.position;
              O.push(A);
              l.position = M.position;
              l.length = q - l.position;
            }
            if (ee > q) {
              if (u.minorChanged) {
                (G = B).position = q;
                G.length = ee - q;
                s.push(G);
                M.length = q - M.position;
              }
            } else if (q > ee && u.majorChanged) {
              G.position = ee;
              G.length = q - ee;
              O.push(G);
              l.length = ee - l.position;
            }
            if (l.setProperties && R(l.setProperties)) {
              O.push(l);
            }
            if (M.setProperties && R(M.setProperties)) {
              s.push(M);
            }
            if (m) {
              q = O;
              O = s;
            } else {
              q = s;
            }
          }
        }
        return {
          opSpecsA: q,
          opSpecsB: O
        };
      },
      InsertText: function (s, u) {
        if (u.position <= s.position) {
          s.position += u.text.length;
        } else if (u.position <= s.position + s.length) {
          s.length += u.text.length;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      MergeParagraph: function (s, u) {
        var m = s.position;
        var l = s.position + s.length;
        if (m >= u.sourceStartPosition) {
          --m;
        }
        if (l >= u.sourceStartPosition) {
          --l;
        }
        s.position = m;
        s.length = l - m;
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      MoveCursor: x,
      RemoveAnnotation: function (s, u) {
        var m = s.position;
        var l = s.position + s.length;
        var M = u.position + u.length;
        var O = [s];
        var q = [u];
        if (u.position <= m && l <= M) {
          O = [];
        } else {
          if (M < m) {
            m -= u.length + 2;
          }
          if (M < l) {
            l -= u.length + 2;
          }
          s.position = m;
          s.length = l - m;
        }
        return {
          opSpecsA: O,
          opSpecsB: q
        };
      },
      RemoveCursor: x,
      RemoveMember: x,
      RemoveStyle: x,
      RemoveText: function (s, u) {
        var m = s.position + s.length;
        var l = u.position + u.length;
        var M = [s];
        var O = [u];
        if (l <= s.position) {
          s.position -= u.length;
        } else if (u.position < m) {
          if (s.position < u.position) {
            s.length = l < m ? s.length - u.length : u.position - s.position;
          } else {
            s.position = u.position;
            if (l < m) {
              s.length = m - l;
            } else {
              M = [];
            }
          }
        }
        return {
          opSpecsA: M,
          opSpecsB: O
        };
      },
      SetParagraphStyle: x,
      SplitParagraph: function (s, u) {
        if (u.position < s.position) {
          s.position += 1;
        } else if (u.position < s.position + s.length) {
          s.length += 1;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    InsertText: {
      InsertText: function (s, u, m) {
        if (s.position < u.position) {
          u.position += s.text.length;
        } else if (s.position > u.position) {
          s.position += u.text.length;
        } else if (m) {
          u.position += s.text.length;
        } else {
          s.position += u.text.length;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      MergeParagraph: function (s, u) {
        if (s.position >= u.sourceStartPosition) {
          --s.position;
        } else {
          if (s.position < u.sourceStartPosition) {
            u.sourceStartPosition += s.text.length;
          }
          if (s.position < u.destinationStartPosition) {
            u.destinationStartPosition += s.text.length;
          }
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      MoveCursor: function (s, u) {
        var m = X(u);
        if (s.position < u.position) {
          u.position += s.text.length;
        } else if (s.position < u.position + u.length) {
          u.length += s.text.length;
        }
        if (m) {
          P(u);
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      RemoveAnnotation: function (s, u) {
        var m = s.position;
        var l = u.position + u.length;
        var M = [s];
        var O = [u];
        if (u.position <= m && m <= l) {
          M = [];
          u.length += s.text.length;
        } else if (l < s.position) {
          s.position -= u.length + 2;
        } else {
          u.position += s.text.length;
        }
        return {
          opSpecsA: M,
          opSpecsB: O
        };
      },
      RemoveCursor: x,
      RemoveMember: x,
      RemoveStyle: x,
      RemoveText: function (s, u) {
        var m;
        var l = [s];
        var M = [u];
        if ((m = u.position + u.length) <= s.position) {
          s.position -= u.length;
        } else if (s.position <= u.position) {
          u.position += s.text.length;
        } else {
          u.length = s.position - u.position;
          M.unshift(m = {
            optype: "RemoveText",
            memberid: u.memberid,
            timestamp: u.timestamp,
            position: s.position + s.text.length,
            length: m - s.position
          });
          s.position = u.position;
        }
        return {
          opSpecsA: l,
          opSpecsB: M
        };
      },
      SetParagraphStyle: function (s, u) {
        if (u.position > s.position) {
          u.position += s.text.length;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      SplitParagraph: function (s, u) {
        if (s.position < u.sourceParagraphPosition) {
          u.sourceParagraphPosition += s.text.length;
        }
        if (s.position <= u.position) {
          u.position += s.text.length;
        } else {
          s.position += 1;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    MergeParagraph: {
      MergeParagraph: function (s, u, m) {
        var l = [s];
        var M = [u];
        if (s.destinationStartPosition === u.destinationStartPosition) {
          l = [];
          M = [];
          if (s.moveCursor) {
            l.push({
              optype: "MoveCursor",
              memberid: s.memberid,
              timestamp: s.timestamp,
              position: s.sourceStartPosition - 1
            });
          }
          if (u.moveCursor) {
            M.push({
              optype: "MoveCursor",
              memberid: u.memberid,
              timestamp: u.timestamp,
              position: u.sourceStartPosition - 1
            });
          }
          s = {
            optype: "SetParagraphStyle",
            memberid: (s = m ? s : u).memberid,
            timestamp: s.timestamp,
            position: s.destinationStartPosition,
            styleName: s.paragraphStyleName
          };
          if (m) {
            l.push(s);
          } else {
            M.push(s);
          }
        } else if (u.sourceStartPosition === s.destinationStartPosition) {
          s.destinationStartPosition = u.destinationStartPosition;
          --s.sourceStartPosition;
          s.paragraphStyleName = u.paragraphStyleName;
        } else if (s.sourceStartPosition === u.destinationStartPosition) {
          u.destinationStartPosition = s.destinationStartPosition;
          --u.sourceStartPosition;
          u.paragraphStyleName = s.paragraphStyleName;
        } else if (s.destinationStartPosition < u.destinationStartPosition) {
          --u.destinationStartPosition;
          --u.sourceStartPosition;
        } else {
          --s.destinationStartPosition;
          --s.sourceStartPosition;
        }
        return {
          opSpecsA: l,
          opSpecsB: M
        };
      },
      MoveCursor: function (s, u) {
        var M = u.position;
        var m = u.position + u.length;
        var l = Math.min(M, m);
        M = Math.max(M, m);
        if (l >= s.sourceStartPosition) {
          --l;
        }
        if (M >= s.sourceStartPosition) {
          --M;
        }
        if (u.length >= 0) {
          u.position = l;
          u.length = M - l;
        } else {
          u.position = M;
          u.length = l - M;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      RemoveAnnotation: function (s, u) {
        var m = u.position + u.length;
        var l = [s];
        var M = [u];
        if (u.position <= s.destinationStartPosition && s.sourceStartPosition <= m) {
          l = [];
          --u.length;
        } else if (s.sourceStartPosition < u.position) {
          --u.position;
        } else {
          if (m < s.destinationStartPosition) {
            s.destinationStartPosition -= u.length + 2;
          }
          if (m < s.sourceStartPosition) {
            s.sourceStartPosition -= u.length + 2;
          }
        }
        return {
          opSpecsA: l,
          opSpecsB: M
        };
      },
      RemoveCursor: x,
      RemoveMember: x,
      RemoveStyle: x,
      RemoveText: function (s, u) {
        if (u.position >= s.sourceStartPosition) {
          --u.position;
        } else {
          if (u.position < s.destinationStartPosition) {
            s.destinationStartPosition -= u.length;
          }
          if (u.position < s.sourceStartPosition) {
            s.sourceStartPosition -= u.length;
          }
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      SetParagraphStyle: function (s, u) {
        var m = [s];
        var l = [u];
        if (u.position > s.sourceStartPosition) {
          --u.position;
        } else if (u.position === s.destinationStartPosition || u.position === s.sourceStartPosition) {
          u.position = s.destinationStartPosition;
          s.paragraphStyleName = u.styleName;
        }
        return {
          opSpecsA: m,
          opSpecsB: l
        };
      },
      SplitParagraph: function (s, u) {
        var l = [s];
        var M = [u];
        if (u.position < s.destinationStartPosition) {
          s.destinationStartPosition += 1;
          s.sourceStartPosition += 1;
        } else if (u.position >= s.destinationStartPosition && u.position < s.sourceStartPosition) {
          u.paragraphStyleName = s.paragraphStyleName;
          l.push({
            optype: "SetParagraphStyle",
            memberid: s.memberid,
            timestamp: s.timestamp,
            position: s.destinationStartPosition,
            styleName: s.paragraphStyleName
          });
          if (u.position === s.sourceStartPosition - 1 && s.moveCursor) {
            l.push({
              optype: "MoveCursor",
              memberid: s.memberid,
              timestamp: s.timestamp,
              position: u.position,
              length: 0
            });
          }
          s.destinationStartPosition = u.position + 1;
          s.sourceStartPosition += 1;
        } else if (u.position >= s.sourceStartPosition) {
          --u.position;
          --u.sourceParagraphPosition;
        }
        return {
          opSpecsA: l,
          opSpecsB: M
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    MoveCursor: {
      MoveCursor: x,
      RemoveAnnotation: function (s, u) {
        var m = X(s);
        var l = s.position + s.length;
        var M = u.position + u.length;
        if (u.position <= s.position && l <= M) {
          s.position = u.position - 1;
          s.length = 0;
        } else {
          if (M < s.position) {
            s.position -= u.length + 2;
          } else if (M < l) {
            s.length -= u.length + 2;
          }
          if (m) {
            P(s);
          }
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      RemoveCursor: function (s, u) {
        return {
          opSpecsA: s.memberid === u.memberid ? [] : [s],
          opSpecsB: [u]
        };
      },
      RemoveMember: x,
      RemoveStyle: x,
      RemoveText: function (s, u) {
        var m = X(s);
        var l = s.position + s.length;
        var M = u.position + u.length;
        if (M <= s.position) {
          s.position -= u.length;
        } else if (u.position < l) {
          if (s.position < u.position) {
            s.length = M < l ? s.length - u.length : u.position - s.position;
          } else {
            s.position = u.position;
            s.length = M < l ? l - M : 0;
          }
        }
        if (m) {
          P(s);
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      SetParagraphStyle: x,
      SplitParagraph: function (s, u) {
        var m = X(s);
        if (u.position < s.position) {
          s.position += 1;
        } else if (u.position < s.position + s.length) {
          s.length += 1;
        }
        if (m) {
          P(s);
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    RemoveAnnotation: {
      RemoveAnnotation: function (s, u) {
        var m = [s];
        var l = [u];
        if (s.position === u.position && s.length === u.length) {
          m = [];
          l = [];
        } else if (s.position < u.position) {
          u.position -= s.length + 2;
        } else {
          s.position -= u.length + 2;
        }
        return {
          opSpecsA: m,
          opSpecsB: l
        };
      },
      RemoveCursor: x,
      RemoveMember: x,
      RemoveStyle: x,
      RemoveText: function (s, u) {
        var l = u.position + u.length;
        var M = [s];
        var O = [u];
        if (s.position <= u.position && l <= s.position + s.length) {
          O = [];
          s.length -= u.length;
        } else if (l < s.position) {
          s.position -= u.length;
        } else if (u.position < s.position) {
          s.position = u.position + 1;
          u.length -= s.length + 2;
        } else {
          u.position -= s.length + 2;
        }
        return {
          opSpecsA: M,
          opSpecsB: O
        };
      },
      SetParagraphStyle: function (s, u) {
        var m = u.position;
        var l = s.position + s.length;
        var M = [s];
        var O = [u];
        if (s.position <= m && m <= l) {
          O = [];
        } else if (l < m) {
          u.position -= s.length + 2;
        }
        return {
          opSpecsA: M,
          opSpecsB: O
        };
      },
      SplitParagraph: function (s, u) {
        var m = u.position;
        var l = s.position + s.length;
        var M = [s];
        var O = [u];
        if (s.position <= m && m <= l) {
          O = [];
          s.length += 1;
        } else {
          if (l < u.sourceParagraphPosition) {
            u.sourceParagraphPosition -= s.length + 2;
          }
          if (l < m) {
            u.position -= s.length + 2;
          } else {
            s.position += 1;
          }
        }
        return {
          opSpecsA: M,
          opSpecsB: O
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    RemoveCursor: {
      RemoveCursor: function (s, u) {
        var m = s.memberid === u.memberid;
        return {
          opSpecsA: m ? [] : [s],
          opSpecsB: m ? [] : [u]
        };
      },
      RemoveMember: x,
      RemoveStyle: x,
      RemoveText: x,
      SetParagraphStyle: x,
      SplitParagraph: x,
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    RemoveMember: {
      RemoveStyle: x,
      RemoveText: x,
      SetParagraphStyle: x,
      SplitParagraph: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    RemoveStyle: {
      RemoveStyle: function (s, u) {
        var m = s.styleName === u.styleName && s.styleFamily === u.styleFamily;
        return {
          opSpecsA: m ? [] : [s],
          opSpecsB: m ? [] : [u]
        };
      },
      RemoveText: x,
      SetParagraphStyle: function (s, u) {
        var l = [s];
        var M = [u];
        if (s.styleFamily === "paragraph" && s.styleName === u.styleName) {
          l.unshift({
            optype: "SetParagraphStyle",
            memberid: s.memberid,
            timestamp: s.timestamp,
            position: u.position,
            styleName: ""
          });
          u.styleName = "";
        }
        return {
          opSpecsA: l,
          opSpecsB: M
        };
      },
      SplitParagraph: x,
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: function (s, u) {
        var m;
        var l = [s];
        var M = [u];
        if (s.styleFamily === "paragraph") {
          if ((m = I(u.setProperties, s.styleName)).length > 0) {
            m = {
              optype: "UpdateParagraphStyle",
              memberid: s.memberid,
              timestamp: s.timestamp,
              styleName: u.styleName,
              removedProperties: {
                attributes: m.join(",")
              }
            };
            l.unshift(m);
          }
          if (s.styleName === u.styleName) {
            M = [];
          } else {
            y(u.setProperties, s.styleName);
          }
        }
        return {
          opSpecsA: l,
          opSpecsB: M
        };
      }
    },
    RemoveText: {
      RemoveText: function (s, u) {
        var m = s.position + s.length;
        var l = u.position + u.length;
        var M = [s];
        var O = [u];
        if (l <= s.position) {
          s.position -= u.length;
        } else if (m <= u.position) {
          u.position -= s.length;
        } else if (u.position < m) {
          if (s.position < u.position) {
            s.length = l < m ? s.length - u.length : u.position - s.position;
            if (m < l) {
              u.position = s.position;
              u.length = l - m;
            } else {
              O = [];
            }
          } else {
            if (m < l) {
              u.length -= s.length;
            } else if (u.position < s.position) {
              u.length = s.position - u.position;
            } else {
              O = [];
            }
            if (l < m) {
              s.position = u.position;
              s.length = m - l;
            } else {
              M = [];
            }
          }
        }
        return {
          opSpecsA: M,
          opSpecsB: O
        };
      },
      SetParagraphStyle: function (s, u) {
        if (s.position < u.position) {
          u.position -= s.length;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      SplitParagraph: function (s, u) {
        var m = s.position + s.length;
        var l = [s];
        var M = [u];
        if (u.position <= s.position) {
          s.position += 1;
        } else if (u.position < m) {
          s.length = u.position - s.position;
          l.unshift(m = {
            optype: "RemoveText",
            memberid: s.memberid,
            timestamp: s.timestamp,
            position: u.position + 1,
            length: m - u.position
          });
        }
        if (s.position + s.length <= u.position) {
          u.position -= s.length;
        } else if (s.position < u.position) {
          u.position = s.position;
        }
        if (s.position + s.length < u.sourceParagraphPosition) {
          u.sourceParagraphPosition -= s.length;
        }
        return {
          opSpecsA: l,
          opSpecsB: M
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    SetParagraphStyle: {
      SetParagraphStyle: function (s, u, m) {
        if (s.position === u.position) {
          if (m) {
            u.styleName = s.styleName;
          } else {
            s.styleName = u.styleName;
          }
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      SplitParagraph: function (s, u) {
        var M;
        var m = [s];
        var l = [u];
        if (s.position > u.position) {
          s.position += 1;
        } else if (s.position === u.sourceParagraphPosition) {
          u.paragraphStyleName = s.styleName;
          (M = w(s)).position = u.position + 1;
          m.push(M);
        }
        return {
          opSpecsA: m,
          opSpecsB: l
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    SplitParagraph: {
      SplitParagraph: function (s, u, m) {
        var l;
        var M;
        if (s.position < u.position) {
          l = true;
        } else if (u.position < s.position) {
          M = true;
        } else if (s.position === u.position) {
          if (m) {
            l = true;
          } else {
            M = true;
          }
        }
        if (l) {
          u.position += 1;
          u.sourceParagraphPosition = s.position < u.sourceParagraphPosition ? u.sourceParagraphPosition + 1 : s.position + 1;
        } else if (M) {
          s.position += 1;
          s.sourceParagraphPosition = u.position < u.sourceParagraphPosition ? s.sourceParagraphPosition + 1 : u.position + 1;
        }
        return {
          opSpecsA: [s],
          opSpecsB: [u]
        };
      },
      UpdateMember: x,
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    UpdateMember: {
      UpdateMetadata: x,
      UpdateParagraphStyle: x
    },
    UpdateMetadata: {
      UpdateMetadata: function (s, u, m) {
        var l;
        var M = [s];
        var O = [u];
        l = m ? s : u;
        E((s = m ? u : s).setProperties || null, s.removedProperties || null, l.setProperties || null, l.removedProperties || null);
        if ((!l.setProperties || !R(l.setProperties)) && (!l.removedProperties || !C(l.removedProperties))) {
          if (m) {
            M = [];
          } else {
            O = [];
          }
        }
        if ((!s.setProperties || !R(s.setProperties)) && (!s.removedProperties || !C(s.removedProperties))) {
          if (m) {
            O = [];
          } else {
            M = [];
          }
        }
        return {
          opSpecsA: M,
          opSpecsB: O
        };
      },
      UpdateParagraphStyle: x
    },
    UpdateParagraphStyle: {
      UpdateParagraphStyle: function (s, u, m) {
        var l;
        var M = [s];
        var O = [u];
        if (s.styleName === u.styleName) {
          l = m ? s : u;
          N((s = m ? u : s).setProperties, s.removedProperties, l.setProperties, l.removedProperties, "style:paragraph-properties");
          N(s.setProperties, s.removedProperties, l.setProperties, l.removedProperties, "style:text-properties");
          E(s.setProperties || null, s.removedProperties || null, l.setProperties || null, l.removedProperties || null);
          if ((!l.setProperties || !R(l.setProperties)) && (!l.removedProperties || !C(l.removedProperties))) {
            if (m) {
              M = [];
            } else {
              O = [];
            }
          }
          if ((!s.setProperties || !R(s.setProperties)) && (!s.removedProperties || !C(s.removedProperties))) {
            if (m) {
              O = [];
            } else {
              M = [];
            }
          }
        }
        return {
          opSpecsA: M,
          opSpecsB: O
        };
      }
    }
  };
  this.passUnchanged = x;
  this.extendTransformations = function (s) {
    Object.keys(s).forEach(function (u) {
      var l;
      var m = s[u];
      var M = S.hasOwnProperty(u);
      runtime.log((M ? "Extending" : "Adding") + " map for optypeA: " + u);
      if (!M) {
        S[u] = {};
      }
      l = S[u];
      Object.keys(m).forEach(function (O) {
        var q = l.hasOwnProperty(O);
        runtime.assert(u <= O, "Wrong order:" + u + ", " + O);
        runtime.log("  " + (q ? "Overwriting" : "Adding") + " entry for optypeB: " + O);
        l[O] = m[O];
      });
    });
  };
  this.transformOpspecVsOpspec = function (s, u) {
    var l;
    var m = s.optype <= u.optype;
    runtime.log("Crosstransforming:");
    runtime.log(runtime.toJson(s));
    runtime.log(runtime.toJson(u));
    if (!m) {
      l = s;
      s = u;
      u = l;
    }
    if (l = (l = S[s.optype]) && l[u.optype]) {
      l = l(s, u, !m);
      if (!m && l !== null) {
        l = {
          opSpecsA: l.opSpecsB,
          opSpecsB: l.opSpecsA
        };
      }
    } else {
      l = null;
    }
    runtime.log("result:");
    if (l) {
      runtime.log(runtime.toJson(l.opSpecsA));
      runtime.log(runtime.toJson(l.opSpecsB));
    } else {
      runtime.log("null");
    }
    return l;
  };
};
ops.OperationTransformer = function () {
  function P(I, y) {
    for (var w, E, R = [], C = []; I.length > 0 && y;) {
      w = I.shift();
      if (!(w = X.transformOpspecVsOpspec(w, y))) {
        return null;
      }
      R = R.concat(w.opSpecsA);
      if (w.opSpecsB.length === 0) {
        R = R.concat(I);
        y = null;
        break;
      }
      for (; w.opSpecsB.length > 1;) {
        if (!(E = P(I, w.opSpecsB.shift()))) {
          return null;
        }
        C = C.concat(E.opSpecsB);
        I = E.opSpecsA;
      }
      y = w.opSpecsB.pop();
    }
    if (y) {
      C.push(y);
    }
    return {
      opSpecsA: R,
      opSpecsB: C
    };
  }
  var X = new ops.OperationTransformMatrix();
  this.getOperationTransformMatrix = function () {
    return X;
  };
  this.transform = function (I, y) {
    for (var w, E = []; y.length > 0;) {
      if (!(w = P(I, y.shift()))) {
        return null;
      }
      I = w.opSpecsA;
      E = E.concat(w.opSpecsB);
    }
    return {
      opSpecsA: I,
      opSpecsB: E
    };
  };
};
var webodf_css = "@namespace draw url(urn:oasis:names:tc:opendocument:xmlns:drawing:1.0);@namespace fo url(urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0);@namespace office url(urn:oasis:names:tc:opendocument:xmlns:office:1.0);@namespace presentation url(urn:oasis:names:tc:opendocument:xmlns:presentation:1.0);@namespace style url(urn:oasis:names:tc:opendocument:xmlns:style:1.0);@namespace svg url(urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0);@namespace table url(urn:oasis:names:tc:opendocument:xmlns:table:1.0);@namespace text url(urn:oasis:names:tc:opendocument:xmlns:text:1.0);@namespace webodfhelper url(urn:webodf:names:helper);@namespace cursor url(urn:webodf:names:cursor);@namespace editinfo url(urn:webodf:names:editinfo);@namespace annotation url(urn:webodf:names:annotation);@namespace dc url(http://purl.org/dc/elements/1.1/);@namespace svgns url(http://www.w3.org/2000/svg);office|document > *, office|document-content > * {display: none;}office|body, office|document {display: inline-block;position: relative;}text|p, text|h {display: block;padding: 0;margin: 0;line-height: normal;position: relative;}text|p::after, text|h::after {content: \"\\200B\";white-space: pre;}*[webodfhelper|containsparagraphanchor] {position: relative;}text|s {white-space: pre;}text|tab {display: inline;white-space: pre;}text|tracked-changes {display: none;}office|binary-data {display: none;}office|text {display: block;text-align: left;overflow: visible;word-wrap: break-word;}office|text::selection {background: transparent;}.webodf-virtualSelections *::selection {background: transparent;}.webodf-virtualSelections *::-moz-selection {background: transparent;}office|text * draw|text-box {display: block;border: 1px solid #d3d3d3;}office|text draw|frame {z-index: 1;}office|spreadsheet {display: block;border-collapse: collapse;empty-cells: show;font-family: sans-serif;font-size: 10pt;text-align: left;page-break-inside: avoid;overflow: hidden;}office|presentation {display: inline-block;text-align: left;}#shadowContent {display: inline-block;text-align: left;}draw|page {display: block;position: relative;overflow: hidden;}presentation|notes, presentation|footer-decl, presentation|date-time-decl {display: none;}@media print {draw|page {border: 1pt solid black;page-break-inside: avoid;}presentation|notes {}}office|spreadsheet text|p {border: 0px;padding: 1px;margin: 0px;}office|spreadsheet table|table {margin: 3px;}office|spreadsheet table|table:after {}office|spreadsheet table|table-row {counter-increment: row;}office|spreadsheet table|table-row:before {width: 3em;background: #cccccc;border: 1px solid black;text-align: center;content: counter(row);display: table-cell;}office|spreadsheet table|table-cell {border: 1px solid #cccccc;}table|table {display: table;}draw|frame table|table {width: 100%;height: 100%;background: white;}table|table-header-rows {display: table-header-group;}table|table-row {display: table-row;}table|table-column {display: table-column;}table|table-cell {width: 0.889in;display: table-cell;word-break: break-all;}draw|frame {display: block;}draw|image {display: block;width: 100%;height: 100%;top: 0px;left: 0px;background-repeat: no-repeat;background-size: 100% 100%;-moz-background-size: 100% 100%;}draw|frame > draw|image:nth-of-type(n+2) {display: none;}text|list:before {display: none;content:\"\";}text|list {display: block;}text|list-item {display: block;}text|number {display:none;}text|a {color: blue;text-decoration: underline;cursor: pointer;}.webodf-inactiveLinks text|a {cursor: text;}text|note-citation {vertical-align: super;font-size: smaller;}text|note-body {display: none;}text|note:hover text|note-citation {background: #dddddd;}text|note:hover text|note-body {display: block;left:1em;max-width: 80%;position: absolute;background: #ffffaa;}text|bibliography-source {display: none;}svg|title, svg|desc {display: none;}video {width: 100%;height: 100%}cursor|anchor {display: none;}cursor|cursor {display: none;}.webodf-caretOverlay {position: absolute;top: 5%;height: 1em;z-index: 10;padding-left: 1px;pointer-events: none;}.webodf-caretOverlay .caret {position: absolute;border-left: 2px solid black;top: 0;bottom: 0;right: 0;}.webodf-caretOverlay .handle {position: absolute;margin-top: 5px;padding-top: 3px;margin-left: auto;margin-right: auto;width: 64px;height: 68px;border-radius: 5px;opacity: 0.3;text-align: center;background-color: black;box-shadow: 0px 0px 5px rgb(90, 90, 90);border: 1px solid black;top: -85px;right: -32px;}.webodf-caretOverlay .handle > img {box-shadow: 0px 0px 5px rgb(90, 90, 90) inset;background-color: rgb(200, 200, 200);border-radius: 5px;border: 2px solid;height: 60px;width: 60px;display: block;margin: auto;}.webodf-caretOverlay .handle.active {opacity: 0.8;}.webodf-caretOverlay .handle:after {content: \" \";position: absolute;width: 0px;height: 0px;border-style: solid;border-width: 8.7px 5px 0 5px;border-color: black transparent transparent transparent;top: 100%;left: 43%;}.webodf-caretSizer {display: inline-block;width: 0;visibility: hidden;}#eventTrap {display: block;position: absolute;bottom: 0;left: 0;outline: none;opacity: 0;color: rgba(255, 255, 255, 0);pointer-events: none;white-space: pre;overflow: hidden;}cursor|cursor > #composer {text-decoration: underline;}cursor|cursor[cursor|caret-sizer-active=\"true\"],cursor|cursor[cursor|composing=\"true\"] {display: inline;}editinfo|editinfo {display: inline-block;}.editInfoMarker {position: absolute;width: 10px;height: 100%;left: -20px;opacity: 0.8;top: 0;border-radius: 5px;background-color: transparent;box-shadow: 0px 0px 5px rgba(50, 50, 50, 0.75);}.editInfoMarker:hover {box-shadow: 0px 0px 8px rgba(0, 0, 0, 1);}.editInfoHandle {position: absolute;background-color: black;padding: 5px;border-radius: 5px;opacity: 0.8;box-shadow: 0px 0px 5px rgba(50, 50, 50, 0.75);bottom: 100%;margin-bottom: 10px;z-index: 3;left: -25px;}.editInfoHandle:after {content: \" \";position: absolute;width: 0px;height: 0px;border-style: solid;border-width: 8.7px 5px 0 5px;border-color: black transparent transparent transparent;top: 100%;left: 5px;}.editInfo {font-family: sans-serif;font-weight: normal;font-style: normal;text-decoration: none;color: white;width: 100%;height: 12pt;}.editInfoColor {float: left;width: 10pt;height: 10pt;border: 1px solid white;}.editInfoAuthor {float: left;margin-left: 5pt;font-size: 10pt;text-align: left;height: 12pt;line-height: 12pt;}.editInfoTime {float: right;margin-left: 30pt;font-size: 8pt;font-style: italic;color: yellow;height: 12pt;line-height: 12pt;}.annotationWrapper {display: inline;position: relative;}.annotationRemoveButton:before {content: \"×\";color: white;padding: 5px;line-height: 1em;}.annotationRemoveButton {width: 20px;height: 20px;border-radius: 10px;background-color: black;box-shadow: 0px 0px 5px rgba(50, 50, 50, 0.75);position: absolute;top: -10px;left: -10px;z-index: 3;text-align: center;font-family: sans-serif;font-style: normal;font-weight: normal;text-decoration: none;font-size: 15px;}.annotationRemoveButton:hover {cursor: pointer;box-shadow: 0px 0px 5px rgba(0, 0, 0, 1);}.annotationNote {width: 4cm;position: absolute;display: inline;z-index: 10;top: 0;}.annotationNote > office|annotation {display: block;text-align: left;}.annotationConnector {position: absolute;display: inline;top: 0;z-index: 2;border-top: 1px dashed brown;}.annotationConnector.angular {-moz-transform-origin: left top;-webkit-transform-origin: left top;-ms-transform-origin: left top;transform-origin: left top;}.annotationConnector.horizontal {left: 0;}.annotationConnector.horizontal:before {content: \"\";display: inline;position: absolute;width: 0px;height: 0px;border-style: solid;border-width: 8.7px 5px 0 5px;border-color: brown transparent transparent transparent;top: -1px;left: -5px;}office|annotation {width: 100%;height: 100%;display: none;background: rgb(198, 238, 184);background: -moz-linear-gradient(90deg, rgb(198, 238, 184) 30%, rgb(180, 196, 159) 100%);background: -webkit-linear-gradient(90deg, rgb(198, 238, 184) 30%, rgb(180, 196, 159) 100%);background: -o-linear-gradient(90deg, rgb(198, 238, 184) 30%, rgb(180, 196, 159) 100%);background: -ms-linear-gradient(90deg, rgb(198, 238, 184) 30%, rgb(180, 196, 159) 100%);background: linear-gradient(180deg, rgb(198, 238, 184) 30%, rgb(180, 196, 159) 100%);box-shadow: 0 3px 4px -3px #ccc;}office|annotation > dc|creator {display: block;font-size: 10pt;font-weight: normal;font-style: normal;font-family: sans-serif;color: white;background-color: brown;padding: 4px;}office|annotation > dc|date {display: block;font-size: 10pt;font-weight: normal;font-style: normal;font-family: sans-serif;border: 4px solid transparent;color: black;}office|annotation > text|list {display: block;padding: 5px;}office|annotation text|p {font-size: 10pt;color: black;font-weight: normal;font-style: normal;text-decoration: none;font-family: sans-serif;}#annotationsPane {background-color: #EAEAEA;width: 4cm;height: 100%;display: none;position: absolute;outline: 1px solid #ccc;}.webodf-annotationHighlight {background-color: yellow;position: relative;}.webodf-selectionOverlay {position: absolute;pointer-events: none;top: 0;left: 0;top: 0;left: 0;width: 100%;height: 100%;z-index: 15;}.webodf-selectionOverlay > polygon {fill-opacity: 0.3;stroke-opacity: 0.8;stroke-width: 1;fill-rule: evenodd;}.webodf-selectionOverlay > .webodf-draggable {fill-opacity: 0.8;stroke-opacity: 0;stroke-width: 8;pointer-events: all;display: none;-moz-transform-origin: center center;-webkit-transform-origin: center center;-ms-transform-origin: center center;transform-origin: center center;}#imageSelector {display: none;position: absolute;border-style: solid;border-color: black;}#imageSelector > div {width: 5px;height: 5px;display: block;position: absolute;border: 1px solid black;background-color: #ffffff;}#imageSelector > .topLeft {top: -4px;left: -4px;}#imageSelector > .topRight {top: -4px;right: -4px;}#imageSelector > .bottomRight {right: -4px;bottom: -4px;}#imageSelector > .bottomLeft {bottom: -4px;left: -4px;}#imageSelector > .topMiddle {top: -4px;left: 50%;margin-left: -2.5px;}#imageSelector > .rightMiddle {top: 50%;right: -4px;margin-top: -2.5px;}#imageSelector > .bottomMiddle {bottom: -4px;left: 50%;margin-left: -2.5px;}#imageSelector > .leftMiddle {top: 50%;left: -4px;margin-top: -2.5px;}div.webodf-customScrollbars::-webkit-scrollbar{width: 8px;height: 8px;background-color: transparent;}div.webodf-customScrollbars::-webkit-scrollbar-track{background-color: transparent;}div.webodf-customScrollbars::-webkit-scrollbar-thumb{background-color: #444;border-radius: 4px;}.webodf-hyperlinkTooltip {display: none;color: white;background-color: black;border-radius: 5px;box-shadow: 2px 2px 5px gray;padding: 3px;position: absolute;max-width: 210px;text-align: left;word-break: break-all;z-index: 16;}.webodf-hyperlinkTooltipText {display: block;font-weight: bold;}";
(function (P) {
  var X = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  (X.externs ||= {}).JSZip = function y(w, E, R) {
    function C(S, s) {
      if (!E[S]) {
        if (!w[S]) {
          var u = typeof require == "function" && require;
          if (!s && u) {
            return u(S, true);
          }
          if (N) {
            return N(S, true);
          }
          throw new Error("Cannot find module '" + S + "'");
        }
        var m = E[S] = {
          exports: {}
        };
        w[S][0].call(m.exports, function (l) {
          return C(w[S][1][l] || l);
        }, m, m.exports, y, w, E, R);
      }
      return E[S].exports;
    }
    for (var N = typeof require == "function" && require, x = 0; x < R.length; x++) {
      C(R[x]);
    }
    return C;
  }({
    1: [function (y, w, E) {
      var R = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      E.encode = function (C, N) {
        for (var S, s, u, m, l, M, O, x = "", q = 0; q < C.length;) {
          m = (S = C.charCodeAt(q++)) >> 2;
          l = (S & 3) << 4 | (s = C.charCodeAt(q++)) >> 4;
          M = (s & 15) << 2 | (u = C.charCodeAt(q++)) >> 6;
          O = u & 63;
          if (isNaN(s)) {
            M = O = 64;
          } else if (isNaN(u)) {
            O = 64;
          }
          x = x + R.charAt(m) + R.charAt(l) + R.charAt(M) + R.charAt(O);
        }
        return x;
      };
      E.decode = function (C, N) {
        var s;
        var u;
        var m;
        var l;
        var M;
        var O;
        var x = "";
        var q = 0;
        for (C = C.replace(/[^A-Za-z0-9\+\/\=]/g, ""); q < C.length;) {
          m = R.indexOf(C.charAt(q++));
          s = ((l = R.indexOf(C.charAt(q++))) & 15) << 4 | (M = R.indexOf(C.charAt(q++))) >> 2;
          u = (M & 3) << 6 | (O = R.indexOf(C.charAt(q++)));
          x += String.fromCharCode(m << 2 | l >> 4);
          if (M != 64) {
            x += String.fromCharCode(s);
          }
          if (O != 64) {
            x += String.fromCharCode(u);
          }
        }
        return x;
      };
    }, {}],
    2: [function (y, w, E) {
      function R() {
        this.compressedSize = 0;
        this.uncompressedSize = 0;
        this.crc32 = 0;
        this.compressionMethod = null;
        this.compressedContent = null;
      }
      R.prototype = {
        getContent: function () {
          return null;
        },
        getCompressedContent: function () {
          return null;
        }
      };
      w.exports = R;
    }, {}],
    3: [function (y, w, E) {
      E.STORE = {
        magic: "\0\0",
        compress: function (R) {
          return R;
        },
        uncompress: function (R) {
          return R;
        },
        compressInputType: null,
        uncompressInputType: null
      };
      E.DEFLATE = y("./flate");
    }, {
      "./flate": 8
    }],
    4: [function (y, w, E) {
      var R = y("./utils");
      var C = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
      w.exports = function (x, S) {
        if (typeof x === "undefined" || !x.length) {
          return 0;
        }
        var s = R.getTypeOf(x) !== "string";
        if (typeof S === "undefined") {
          S = 0;
        }
        var l = 0;
        S ^= -1;
        for (var M = 0, O = x.length; M < O; M++) {
          l = s ? x[M] : x.charCodeAt(M);
          S = S >>> 8 ^ C[(S ^ l) & 255];
        }
        return S ^ -1;
      };
    }, {
      "./utils": 21
    }],
    5: [function (y, w, E) {
      var R = y("./utils");
      function C(N) {
        this.data = null;
        this.length = 0;
        this.index = 0;
      }
      C.prototype = {
        checkOffset: function (N) {
          this.checkIndex(this.index + N);
        },
        checkIndex: function (N) {
          if (this.length < N || N < 0) {
            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + N + "). Corrupted zip ?");
          }
        },
        setIndex: function (N) {
          this.checkIndex(N);
          this.index = N;
        },
        skip: function (N) {
          this.setIndex(this.index + N);
        },
        byteAt: function (N) {},
        readInt: function (N) {
          var S;
          var x = 0;
          this.checkOffset(N);
          S = this.index + N - 1;
          for (; S >= this.index; S--) {
            x = (x << 8) + this.byteAt(S);
          }
          this.index += N;
          return x;
        },
        readString: function (N) {
          return R.transformTo("string", this.readData(N));
        },
        readData: function (N) {},
        lastIndexOfSignature: function (N) {},
        readDate: function () {
          var N = this.readInt(4);
          return new Date(1980 + (N >> 25 & 127), (N >> 21 & 15) - 1, N >> 16 & 31, N >> 11 & 31, N >> 5 & 63, (N & 31) << 1);
        }
      };
      w.exports = C;
    }, {
      "./utils": 21
    }],
    6: [function (y, w, E) {
      E.base64 = false;
      E.binary = false;
      E.dir = false;
      E.createFolders = false;
      E.date = null;
      E.compression = null;
      E.comment = null;
    }, {}],
    7: [function (y, w, E) {
      var R = y("./utils");
      E.string2binary = function (C) {
        return R.string2binary(C);
      };
      E.string2Uint8Array = function (C) {
        return R.transformTo("uint8array", C);
      };
      E.uint8Array2String = function (C) {
        return R.transformTo("string", C);
      };
      E.string2Blob = function (C) {
        var N = R.transformTo("arraybuffer", C);
        return R.arrayBuffer2Blob(N);
      };
      E.arrayBuffer2Blob = function (C) {
        return R.arrayBuffer2Blob(C);
      };
      E.transformTo = function (C, N) {
        return R.transformTo(C, N);
      };
      E.getTypeOf = function (C) {
        return R.getTypeOf(C);
      };
      E.checkSupport = function (C) {
        return R.checkSupport(C);
      };
      E.MAX_VALUE_16BITS = R.MAX_VALUE_16BITS;
      E.MAX_VALUE_32BITS = R.MAX_VALUE_32BITS;
      E.pretty = function (C) {
        return R.pretty(C);
      };
      E.findCompression = function (C) {
        return R.findCompression(C);
      };
      E.isRegExp = function (C) {
        return R.isRegExp(C);
      };
    }, {
      "./utils": 21
    }],
    8: [function (y, w, E) {
      var R = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Uint32Array !== "undefined";
      var C = y("pako");
      E.uncompressInputType = R ? "uint8array" : "array";
      E.compressInputType = R ? "uint8array" : "array";
      E.magic = "\b\0";
      E.compress = function (N) {
        return C.deflateRaw(N);
      };
      E.uncompress = function (N) {
        return C.inflateRaw(N);
      };
    }, {
      pako: 24
    }],
    9: [function (y, w, E) {
      var R = y("./base64");
      function C(N, x) {
        if (!(this instanceof C)) {
          return new C(N, x);
        }
        this.files = {};
        this.comment = null;
        this.root = "";
        if (N) {
          this.load(N, x);
        }
        this.clone = function () {
          var S = new C();
          for (var s in this) {
            if (typeof this[s] != "function") {
              S[s] = this[s];
            }
          }
          return S;
        };
      }
      (C.prototype = y("./object")).load = y("./load");
      C.support = y("./support");
      C.defaults = y("./defaults");
      C.utils = y("./deprecatedPublicUtils");
      C.base64 = {
        encode: function (N) {
          return R.encode(N);
        },
        decode: function (N) {
          return R.decode(N);
        }
      };
      C.compressions = y("./compressions");
      w.exports = C;
    }, {
      "./base64": 1,
      "./compressions": 3,
      "./defaults": 6,
      "./deprecatedPublicUtils": 7,
      "./load": 10,
      "./object": 13,
      "./support": 17
    }],
    10: [function (y, w, E) {
      var R = y("./base64");
      var C = y("./zipEntries");
      w.exports = function (N, x) {
        var S;
        var s;
        var u;
        var m;
        if ((x = x || {}).base64) {
          N = R.decode(N);
        }
        S = (s = new C(N, x)).files;
        u = 0;
        for (; u < S.length; u++) {
          this.file((m = S[u]).fileName, m.decompressed, {
            binary: true,
            optimizedBinaryString: true,
            date: m.date,
            dir: m.dir,
            comment: m.fileComment.length ? m.fileComment : null,
            createFolders: x.createFolders
          });
        }
        if (s.zipComment.length) {
          this.comment = s.zipComment;
        }
        return this;
      };
    }, {
      "./base64": 1,
      "./zipEntries": 22
    }],
    11: [function (y, w, E) {
      (function (R) {
        w.exports = function (C, N) {
          return new R(C, N);
        };
        w.exports.test = function (C) {
          return R.isBuffer(C);
        };
      }).call(this, typeof Buffer !== "undefined" ? Buffer : undefined);
    }, {}],
    12: [function (y, w, E) {
      var R = y("./uint8ArrayReader");
      function C(N) {
        this.data = N;
        this.length = this.data.length;
        this.index = 0;
      }
      (C.prototype = new R()).readData = function (N) {
        this.checkOffset(N);
        var x = this.data.slice(this.index, this.index + N);
        this.index += N;
        return x;
      };
      w.exports = C;
    }, {
      "./uint8ArrayReader": 18
    }],
    13: [function (y, w, E) {
      var R = y("./support");
      var C = y("./utils");
      var N = y("./crc32");
      var x = y("./signature");
      var S = y("./defaults");
      var s = y("./base64");
      var u = y("./compressions");
      var m = y("./compressedObject");
      var l = y("./nodeBuffer");
      var M = y("./utf8");
      var O = y("./stringWriter");
      var q = y("./uint8ArrayWriter");
      function ee(Y) {
        if (Y._data instanceof m && (Y._data = Y._data.getContent(), Y.options.binary = true, Y.options.base64 = false, C.getTypeOf(Y._data) === "uint8array")) {
          var ne = Y._data;
          Y._data = new Uint8Array(ne.length);
          if (ne.length !== 0) {
            Y._data.set(ne, 0);
          }
        }
        return Y._data;
      }
      function G(Y) {
        var ne = ee(Y);
        if (C.getTypeOf(ne) === "string") {
          if (!Y.options.binary && R.nodebuffer) {
            return l(ne, "utf-8");
          } else {
            return Y.asBinary();
          }
        } else {
          return ne;
        }
      }
      function B(Y) {
        var ne = ee(this);
        if (ne === null || typeof ne === "undefined") {
          return "";
        } else {
          if (this.options.base64) {
            ne = s.decode(ne);
          }
          ne = Y && this.options.binary ? ie.utf8decode(ne) : C.transformTo("string", ne);
          if (!Y && !this.options.binary) {
            ne = C.transformTo("string", ie.utf8encode(ne));
          }
          return ne;
        }
      }
      function A(Y, ne, le) {
        this.name = Y;
        this.dir = le.dir;
        this.date = le.date;
        this.comment = le.comment;
        this._data = ne;
        this.options = le;
        this._initialMetadata = {
          dir: le.dir,
          date: le.date
        };
      }
      A.prototype = {
        asText: function () {
          return B.call(this, true);
        },
        asBinary: function () {
          return B.call(this, false);
        },
        asNodeBuffer: function () {
          var Y = G(this);
          return C.transformTo("nodebuffer", Y);
        },
        asUint8Array: function () {
          var Y = G(this);
          return C.transformTo("uint8array", Y);
        },
        asArrayBuffer: function () {
          return this.asUint8Array().buffer;
        }
      };
      function H(Y, ne) {
        var ge;
        var le = "";
        for (ge = 0; ge < ne; ge++) {
          le += String.fromCharCode(Y & 255);
          Y >>>= 8;
        }
        return le;
      }
      function $() {
        var ne;
        var le;
        var Y = {};
        for (ne = 0; ne < arguments.length; ne++) {
          for (le in arguments[ne]) {
            if (arguments[ne].hasOwnProperty(le) && typeof Y[le] === "undefined") {
              Y[le] = arguments[ne][le];
            }
          }
        }
        return Y;
      }
      function Q(Y, ne, le) {
        var Ee;
        var ge = C.getTypeOf(ne);
        if ((le = function (Y) {
          if ((Y = Y || {}).base64 === true && Y.binary == null) {
            Y.binary = true;
          }
          (Y = $(Y, S)).date = Y.date || new Date();
          if (Y.compression !== null) {
            Y.compression = Y.compression.toUpperCase();
          }
          return Y;
        }(le)).createFolders && (Ee = U(Y))) {
          K.call(this, Ee, true);
        }
        if (le.dir || ne === null || typeof ne === "undefined") {
          le.base64 = false;
          le.binary = false;
          ne = null;
        } else if (ge === "string") {
          if (le.binary && !le.base64 && le.optimizedBinaryString !== true) {
            ne = C.string2binary(ne);
          }
        } else {
          le.base64 = false;
          le.binary = true;
          if (!ge && !(ne instanceof m)) {
            throw new Error("The data of '" + Y + "' is in an unsupported format !");
          }
          if (ge === "arraybuffer") {
            ne = C.transformTo("uint8array", ne);
          }
        }
        var Le = new A(Y, ne, le);
        this.files[Y] = Le;
        return Le;
      }
      function U(Y) {
        if (Y.slice(-1) == "/") {
          Y = Y.substring(0, Y.length - 1);
        }
        var ne = Y.lastIndexOf("/");
        if (ne > 0) {
          return Y.substring(0, ne);
        } else {
          return "";
        }
      }
      function K(Y, ne) {
        if (Y.slice(-1) != "/") {
          Y += "/";
        }
        ne = typeof ne !== "undefined" && ne;
        if (!this.files[Y]) {
          Q.call(this, Y, null, {
            dir: true,
            createFolders: ne
          });
        }
        return this.files[Y];
      }
      function F(Y, ne) {
        var ge;
        var le = new m();
        if (Y._data instanceof m) {
          le.uncompressedSize = Y._data.uncompressedSize;
          le.crc32 = Y._data.crc32;
          if (le.uncompressedSize === 0 || Y.dir) {
            ne = u.STORE;
            le.compressedContent = "";
            le.crc32 = 0;
          } else if (Y._data.compressionMethod === ne.magic) {
            le.compressedContent = Y._data.getCompressedContent();
          } else {
            ge = Y._data.getContent();
            le.compressedContent = ne.compress(C.transformTo(ne.compressInputType, ge));
          }
        } else {
          if (!(ge = G(Y)) || ge.length === 0 || Y.dir) {
            ne = u.STORE;
            ge = "";
          }
          le.uncompressedSize = ge.length;
          le.crc32 = N(ge);
          le.compressedContent = ne.compress(C.transformTo(ne.compressInputType, ge));
        }
        le.compressedSize = le.compressedContent.length;
        le.compressionMethod = ne.magic;
        return le;
      }
      function L(Y, ne, le, ge) {
        var ze;
        var we;
        var qe;
        var ue;
        var Le = C.transformTo("string", M.utf8encode(ne.name));
        var Qe = ne.comment || "";
        var ae = C.transformTo("string", M.utf8encode(Qe));
        var fe = Le.length !== ne.name.length;
        var Me = ae.length !== Qe.length;
        var je = ne.options;
        var Ce = "";
        var ye = "";
        var $e = "";
        qe = ne._initialMetadata.dir !== ne.dir ? ne.dir : je.dir;
        ze = (ue = ne._initialMetadata.date !== ne.date ? ne.date : je.date).getHours();
        ze <<= 6;
        ze |= ue.getMinutes();
        ze <<= 5;
        ze |= ue.getSeconds() / 2;
        we = ue.getFullYear() - 1980;
        we <<= 4;
        we |= ue.getMonth() + 1;
        we <<= 5;
        we |= ue.getDate();
        if (fe) {
          ye = H(1, 1) + H(N(Le), 4) + Le;
          Ce += "up" + H(ye.length, 2) + ye;
        }
        if (Me) {
          $e = H(1, 1) + H(this.crc32(ae), 4) + ae;
          Ce += "uc" + H($e.length, 2) + $e;
        }
        var de = "";
        de += "\n\0";
        de += fe || Me ? "\0\b" : "\0\0";
        de += le.compressionMethod;
        de += H(ze, 2);
        de += H(we, 2);
        de += H(le.crc32, 4);
        de += H(le.compressedSize, 4);
        de += H(le.uncompressedSize, 4);
        de += H(Le.length, 2);
        de += H(Ce.length, 2);
        return {
          fileRecord: x.LOCAL_FILE_HEADER + de + Le + Ce,
          dirRecord: x.CENTRAL_FILE_HEADER + "\0" + de + H(ae.length, 2) + "\0\0\0\0" + (qe === true ? "\0\0\0" : "\0\0\0\0") + H(ge, 4) + Le + Ce + ae,
          compressedObject: le
        };
      }
      var ie = {
        load: function (Y, ne) {
          throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
        },
        filter: function (Y) {
          var le;
          var ge;
          var Ee;
          var Le;
          var ne = [];
          for (le in this.files) {
            if (!!this.files.hasOwnProperty(le)) {
              Le = new A((Ee = this.files[le]).name, Ee._data, $(Ee.options));
              ge = le.slice(this.root.length, le.length);
              if (le.slice(0, this.root.length) === this.root && Y(ge, Le)) {
                ne.push(Le);
              }
            }
          }
          return ne;
        },
        file: function (Y, ne, le) {
          if (arguments.length === 1) {
            if (C.isRegExp(Y)) {
              var ge = Y;
              return this.filter(function (Ee, Le) {
                return !Le.dir && ge.test(Ee);
              });
            }
            return this.filter(function (Ee, Le) {
              return !Le.dir && Ee === Y;
            })[0] || null;
          }
          Q.call(this, Y = this.root + Y, ne, le);
          return this;
        },
        folder: function (Y) {
          if (!Y) {
            return this;
          }
          if (C.isRegExp(Y)) {
            return this.filter(function (Ee, Le) {
              return Le.dir && Y.test(Ee);
            });
          }
          var le = K.call(this, this.root + Y);
          var ge = this.clone();
          ge.root = le.name;
          return ge;
        },
        remove: function (Y) {
          var ne = this.files[Y = this.root + Y];
          if (!ne) {
            if (Y.slice(-1) != "/") {
              Y += "/";
            }
            ne = this.files[Y];
          }
          if (ne && !ne.dir) {
            delete this.files[Y];
          } else {
            for (var le = this.filter(function (Ee, Le) {
                return Le.name.slice(0, Y.length) === Y;
              }), ge = 0; ge < le.length; ge++) {
              delete this.files[le[ge].name];
            }
          }
          return this;
        },
        generate: function (Y) {
          Y = $(Y || {}, {
            base64: true,
            compression: "STORE",
            type: "base64",
            comment: null
          });
          C.checkSupport(Y.type);
          var Ee;
          var Le;
          var ne = [];
          var le = 0;
          var ge = 0;
          var Qe = C.transformTo("string", this.utf8encode(Y.comment || this.comment || ""));
          for (var ae in this.files) {
            if (this.files.hasOwnProperty(ae)) {
              var fe = this.files[ae];
              var Me = fe.options.compression || Y.compression.toUpperCase();
              var je = u[Me];
              if (!je) {
                throw new Error(Me + " is not a valid compression method !");
              }
              var ze = F.call(this, fe, je);
              var we = L.call(this, ae, fe, ze, le);
              le += we.fileRecord.length + ze.compressedSize;
              ge += we.dirRecord.length;
              ne.push(we);
            }
          }
          var Ce;
          Ce = x.CENTRAL_DIRECTORY_END + "\0\0\0\0" + H(ne.length, 2) + H(ne.length, 2) + H(ge, 4) + H(le, 4) + H(Qe.length, 2) + Qe;
          var ye = Y.type.toLowerCase();
          Ee = ye === "uint8array" || ye === "arraybuffer" || ye === "blob" || ye === "nodebuffer" ? new q(le + ge + Ce.length) : new O(le + ge + Ce.length);
          Le = 0;
          for (; Le < ne.length; Le++) {
            Ee.append(ne[Le].fileRecord);
            Ee.append(ne[Le].compressedObject.compressedContent);
          }
          for (Le = 0; Le < ne.length; Le++) {
            Ee.append(ne[Le].dirRecord);
          }
          Ee.append(Ce);
          var $e = Ee.finalize();
          switch (Y.type.toLowerCase()) {
            case "uint8array":
            case "arraybuffer":
            case "nodebuffer":
              return C.transformTo(Y.type.toLowerCase(), $e);
            case "blob":
              return C.arrayBuffer2Blob(C.transformTo("arraybuffer", $e));
            case "base64":
              if (Y.base64) {
                return s.encode($e);
              } else {
                return $e;
              }
            default:
              return $e;
          }
        },
        crc32: function (Y, ne) {
          return N(Y, ne);
        },
        utf8encode: function (Y) {
          return C.transformTo("string", M.utf8encode(Y));
        },
        utf8decode: function (Y) {
          return M.utf8decode(Y);
        }
      };
      w.exports = ie;
    }, {
      "./base64": 1,
      "./compressedObject": 2,
      "./compressions": 3,
      "./crc32": 4,
      "./defaults": 6,
      "./nodeBuffer": 11,
      "./signature": 14,
      "./stringWriter": 16,
      "./support": 17,
      "./uint8ArrayWriter": 19,
      "./utf8": 20,
      "./utils": 21
    }],
    14: [function (y, w, E) {
      E.LOCAL_FILE_HEADER = "PK";
      E.CENTRAL_FILE_HEADER = "PK";
      E.CENTRAL_DIRECTORY_END = "PK";
      E.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK";
      E.ZIP64_CENTRAL_DIRECTORY_END = "PK";
      E.DATA_DESCRIPTOR = "PK\b";
    }, {}],
    15: [function (y, w, E) {
      var R = y("./dataReader");
      var C = y("./utils");
      function N(x, S) {
        this.data = x;
        if (!S) {
          this.data = C.string2binary(this.data);
        }
        this.length = this.data.length;
        this.index = 0;
      }
      (N.prototype = new R()).byteAt = function (x) {
        return this.data.charCodeAt(x);
      };
      N.prototype.lastIndexOfSignature = function (x) {
        return this.data.lastIndexOf(x);
      };
      N.prototype.readData = function (x) {
        this.checkOffset(x);
        var S = this.data.slice(this.index, this.index + x);
        this.index += x;
        return S;
      };
      w.exports = N;
    }, {
      "./dataReader": 5,
      "./utils": 21
    }],
    16: [function (y, w, E) {
      var R = y("./utils");
      function C() {
        this.data = [];
      }
      C.prototype = {
        append: function (N) {
          N = R.transformTo("string", N);
          this.data.push(N);
        },
        finalize: function () {
          return this.data.join("");
        }
      };
      w.exports = C;
    }, {
      "./utils": 21
    }],
    17: [function (y, w, E) {
      (function (R) {
        E.base64 = true;
        E.array = true;
        E.string = true;
        E.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
        E.nodebuffer = typeof R !== "undefined";
        E.uint8array = typeof Uint8Array !== "undefined";
        if (typeof ArrayBuffer === "undefined") {
          E.blob = false;
        } else {
          var C = new ArrayBuffer(0);
          try {
            E.blob = new Blob([C], {
              type: "application/zip"
            }).size === 0;
          } catch {
            try {
              var x = new (window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder)();
              x.append(C);
              E.blob = x.getBlob("application/zip").size === 0;
            } catch {
              E.blob = false;
            }
          }
        }
      }).call(this, typeof Buffer !== "undefined" ? Buffer : undefined);
    }, {}],
    18: [function (y, w, E) {
      var R = y("./dataReader");
      function C(N) {
        if (N) {
          this.data = N;
          this.length = this.data.length;
          this.index = 0;
        }
      }
      (C.prototype = new R()).byteAt = function (N) {
        return this.data[N];
      };
      C.prototype.lastIndexOfSignature = function (N) {
        for (var x = N.charCodeAt(0), S = N.charCodeAt(1), s = N.charCodeAt(2), u = N.charCodeAt(3), m = this.length - 4; m >= 0; --m) {
          if (this.data[m] === x && this.data[m + 1] === S && this.data[m + 2] === s && this.data[m + 3] === u) {
            return m;
          }
        }
        return -1;
      };
      C.prototype.readData = function (N) {
        this.checkOffset(N);
        if (N === 0) {
          return new Uint8Array(0);
        }
        var x = this.data.subarray(this.index, this.index + N);
        this.index += N;
        return x;
      };
      w.exports = C;
    }, {
      "./dataReader": 5
    }],
    19: [function (y, w, E) {
      var R = y("./utils");
      function C(N) {
        this.data = new Uint8Array(N);
        this.index = 0;
      }
      C.prototype = {
        append: function (N) {
          if (N.length !== 0) {
            N = R.transformTo("uint8array", N);
            this.data.set(N, this.index);
            this.index += N.length;
          }
        },
        finalize: function () {
          return this.data;
        }
      };
      w.exports = C;
    }, {
      "./utils": 21
    }],
    20: [function (y, w, E) {
      for (var R = y("./utils"), C = y("./support"), N = y("./nodeBuffer"), x = new Array(256), S = 0; S < 256; S++) {
        x[S] = S >= 252 ? 6 : S >= 248 ? 5 : S >= 240 ? 4 : S >= 224 ? 3 : S >= 192 ? 2 : 1;
      }
      x[254] = x[254] = 1;
      function u(l, M) {
        var O;
        if ((M = M || l.length) > l.length) {
          M = l.length;
        }
        O = M - 1;
        for (; O >= 0 && (l[O] & 192) == 128;) {
          O--;
        }
        if (O < 0 || O === 0) {
          return M;
        } else if (O + x[l[O]] > M) {
          return O;
        } else {
          return M;
        }
      }
      function m(l) {
        var O;
        var q;
        var ee;
        var G;
        var B = l.length;
        var A = new Array(B * 2);
        q = 0;
        O = 0;
        for (; O < B;) {
          if ((ee = l[O++]) < 128) {
            A[q++] = ee;
          } else if ((G = x[ee]) > 4) {
            A[q++] = 65533;
            O += G - 1;
          } else {
            for (ee &= G === 2 ? 31 : G === 3 ? 15 : 7; G > 1 && O < B;) {
              ee = ee << 6 | l[O++] & 63;
              G--;
            }
            if (G > 1) {
              A[q++] = 65533;
            } else if (ee < 65536) {
              A[q++] = ee;
            } else {
              A[q++] = (ee -= 65536) >> 10 & 1023 | 55296;
              A[q++] = ee & 1023 | 56320;
            }
          }
        }
        if (A.length !== q) {
          if (A.subarray) {
            A = A.subarray(0, q);
          } else {
            A.length = q;
          }
        }
        return R.applyFromCharCode(A);
      }
      E.utf8encode = function (M) {
        if (C.nodebuffer) {
          return N(M, "utf-8");
        } else {
          return function (l) {
            var M;
            var O;
            var q;
            var ee;
            var G;
            var B = l.length;
            var A = 0;
            for (ee = 0; ee < B; ee++) {
              if (((O = l.charCodeAt(ee)) & 64512) == 55296 && ee + 1 < B && ((q = l.charCodeAt(ee + 1)) & 64512) == 56320) {
                O = 65536 + (O - 55296 << 10) + (q - 56320);
                ee++;
              }
              A += O < 128 ? 1 : O < 2048 ? 2 : O < 65536 ? 3 : 4;
            }
            M = C.uint8array ? new Uint8Array(A) : new Array(A);
            G = 0;
            ee = 0;
            for (; G < A; ee++) {
              if (((O = l.charCodeAt(ee)) & 64512) == 55296 && ee + 1 < B && ((q = l.charCodeAt(ee + 1)) & 64512) == 56320) {
                O = 65536 + (O - 55296 << 10) + (q - 56320);
                ee++;
              }
              if (O < 128) {
                M[G++] = O;
              } else if (O < 2048) {
                M[G++] = O >>> 6 | 192;
                M[G++] = O & 63 | 128;
              } else if (O < 65536) {
                M[G++] = O >>> 12 | 224;
                M[G++] = O >>> 6 & 63 | 128;
                M[G++] = O & 63 | 128;
              } else {
                M[G++] = O >>> 18 | 240;
                M[G++] = O >>> 12 & 63 | 128;
                M[G++] = O >>> 6 & 63 | 128;
                M[G++] = O & 63 | 128;
              }
            }
            return M;
          }(M);
        }
      };
      E.utf8decode = function (M) {
        if (C.nodebuffer) {
          return R.transformTo("nodebuffer", M).toString("utf-8");
        }
        for (var O = [], q = 0, ee = (M = R.transformTo(C.uint8array ? "uint8array" : "array", M)).length; q < ee;) {
          var B = u(M, Math.min(q + 65536, ee));
          O.push(m(C.uint8array ? M.subarray(q, B) : M.slice(q, B)));
          q = B;
        }
        return O.join("");
      };
    }, {
      "./nodeBuffer": 11,
      "./support": 17,
      "./utils": 21
    }],
    21: [function (y, w, E) {
      var R = y("./support");
      var C = y("./compressions");
      var N = y("./nodeBuffer");
      function x(l) {
        return l;
      }
      function S(l, M) {
        for (var O = 0; O < l.length; ++O) {
          M[O] = l.charCodeAt(O) & 255;
        }
        return M;
      }
      function s(l) {
        var M = 65536;
        var O = [];
        var q = l.length;
        var ee = E.getTypeOf(l);
        var G = 0;
        var B = true;
        try {
          switch (ee) {
            case "uint8array":
              String.fromCharCode.apply(null, new Uint8Array(0));
              break;
            case "nodebuffer":
              String.fromCharCode.apply(null, N(0));
          }
        } catch {
          B = false;
        }
        if (!B) {
          for (var A = "", H = 0; H < l.length; H++) {
            A += String.fromCharCode(l[H]);
          }
          return A;
        }
        for (; G < q && M > 1;) {
          try {
            O.push(String.fromCharCode.apply(null, ee === "array" || ee === "nodebuffer" ? l.slice(G, Math.min(G + M, q)) : l.subarray(G, Math.min(G + M, q))));
            G += M;
          } catch {
            M = Math.floor(M / 2);
          }
        }
        return O.join("");
      }
      function u(l, M) {
        for (var O = 0; O < l.length; O++) {
          M[O] = l[O];
        }
        return M;
      }
      E.string2binary = function (l) {
        for (var M = "", O = 0; O < l.length; O++) {
          M += String.fromCharCode(l.charCodeAt(O) & 255);
        }
        return M;
      };
      E.arrayBuffer2Blob = function (l) {
        E.checkSupport("blob");
        try {
          return new Blob([l], {
            type: "application/zip"
          });
        } catch {
          try {
            var O = new (window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder)();
            O.append(l);
            return O.getBlob("application/zip");
          } catch {
            throw new Error("Bug : can't construct the Blob.");
          }
        }
      };
      E.applyFromCharCode = s;
      var m = {};
      m.string = {
        string: x,
        array: function (l) {
          return S(l, new Array(l.length));
        },
        arraybuffer: function (l) {
          return m.string.uint8array(l).buffer;
        },
        uint8array: function (l) {
          return S(l, new Uint8Array(l.length));
        },
        nodebuffer: function (l) {
          return S(l, N(l.length));
        }
      };
      m.array = {
        string: s,
        array: x,
        arraybuffer: function (l) {
          return new Uint8Array(l).buffer;
        },
        uint8array: function (l) {
          return new Uint8Array(l);
        },
        nodebuffer: function (l) {
          return N(l);
        }
      };
      m.arraybuffer = {
        string: function (l) {
          return s(new Uint8Array(l));
        },
        array: function (l) {
          return u(new Uint8Array(l), new Array(l.byteLength));
        },
        arraybuffer: x,
        uint8array: function (l) {
          return new Uint8Array(l);
        },
        nodebuffer: function (l) {
          return N(new Uint8Array(l));
        }
      };
      m.uint8array = {
        string: s,
        array: function (l) {
          return u(l, new Array(l.length));
        },
        arraybuffer: function (l) {
          return l.buffer;
        },
        uint8array: x,
        nodebuffer: function (l) {
          return N(l);
        }
      };
      m.nodebuffer = {
        string: s,
        array: function (l) {
          return u(l, new Array(l.length));
        },
        arraybuffer: function (l) {
          return m.nodebuffer.uint8array(l).buffer;
        },
        uint8array: function (l) {
          return u(l, new Uint8Array(l.length));
        },
        nodebuffer: x
      };
      E.transformTo = function (l, M) {
        M ||= "";
        if (!l) {
          return M;
        }
        E.checkSupport(l);
        var O = E.getTypeOf(M);
        return m[O][l](M);
      };
      E.getTypeOf = function (l) {
        if (typeof l == "string") {
          return "string";
        } else if (Object.prototype.toString.call(l) === "[object Array]") {
          return "array";
        } else if (R.nodebuffer && N.test(l)) {
          return "nodebuffer";
        } else if (R.uint8array && l instanceof Uint8Array) {
          return "uint8array";
        } else if (R.arraybuffer && l instanceof ArrayBuffer) {
          return "arraybuffer";
        } else {
          return undefined;
        }
      };
      E.checkSupport = function (l) {
        if (!R[l.toLowerCase()]) {
          throw new Error(l + " is not supported by this browser");
        }
      };
      E.MAX_VALUE_16BITS = 65535;
      E.MAX_VALUE_32BITS = -1;
      E.pretty = function (l) {
        var O;
        var q;
        var M = "";
        for (q = 0; q < (l || "").length; q++) {
          M += "\\x" + ((O = l.charCodeAt(q)) < 16 ? "0" : "") + O.toString(16).toUpperCase();
        }
        return M;
      };
      E.findCompression = function (l) {
        for (var M in C) {
          if (C.hasOwnProperty(M) && C[M].magic === l) {
            return C[M];
          }
        }
        return null;
      };
      E.isRegExp = function (l) {
        return Object.prototype.toString.call(l) === "[object RegExp]";
      };
    }, {
      "./compressions": 3,
      "./nodeBuffer": 11,
      "./support": 17
    }],
    22: [function (y, w, E) {
      var R = y("./stringReader");
      var C = y("./nodeBufferReader");
      var N = y("./uint8ArrayReader");
      var x = y("./utils");
      var S = y("./signature");
      var s = y("./zipEntry");
      var u = y("./support");
      var m = y("./object");
      function l(M, O) {
        this.files = [];
        this.loadOptions = O;
        if (M) {
          this.load(M);
        }
      }
      l.prototype = {
        checkSignature: function (M) {
          var O = this.reader.readString(4);
          if (O !== M) {
            throw new Error("Corrupted zip or bug : unexpected signature (" + x.pretty(O) + ", expected " + x.pretty(M) + ")");
          }
        },
        readBlockEndOfCentral: function () {
          this.diskNumber = this.reader.readInt(2);
          this.diskWithCentralDirStart = this.reader.readInt(2);
          this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
          this.centralDirRecords = this.reader.readInt(2);
          this.centralDirSize = this.reader.readInt(4);
          this.centralDirOffset = this.reader.readInt(4);
          this.zipCommentLength = this.reader.readInt(2);
          this.zipComment = this.reader.readString(this.zipCommentLength);
          this.zipComment = m.utf8decode(this.zipComment);
        },
        readBlockZip64EndOfCentral: function () {
          this.zip64EndOfCentralSize = this.reader.readInt(8);
          this.versionMadeBy = this.reader.readString(2);
          this.versionNeeded = this.reader.readInt(2);
          this.diskNumber = this.reader.readInt(4);
          this.diskWithCentralDirStart = this.reader.readInt(4);
          this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
          this.centralDirRecords = this.reader.readInt(8);
          this.centralDirSize = this.reader.readInt(8);
          this.centralDirOffset = this.reader.readInt(8);
          this.zip64ExtensibleData = {};
          for (var q, ee, G, M = this.zip64EndOfCentralSize - 44; M > 0;) {
            q = this.reader.readInt(2);
            ee = this.reader.readInt(4);
            G = this.reader.readString(ee);
            this.zip64ExtensibleData[q] = {
              id: q,
              length: ee,
              value: G
            };
          }
        },
        readBlockZip64EndOfCentralLocator: function () {
          this.diskWithZip64CentralDirStart = this.reader.readInt(4);
          this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
          this.disksCount = this.reader.readInt(4);
          if (this.disksCount > 1) {
            throw new Error("Multi-volumes zip are not supported");
          }
        },
        readLocalFiles: function () {
          var M;
          var O;
          for (M = 0; M < this.files.length; M++) {
            this.reader.setIndex((O = this.files[M]).localHeaderOffset);
            this.checkSignature(S.LOCAL_FILE_HEADER);
            O.readLocalPart(this.reader);
            O.handleUTF8();
          }
        },
        readCentralDir: function () {
          var M;
          for (this.reader.setIndex(this.centralDirOffset); this.reader.readString(4) === S.CENTRAL_FILE_HEADER;) {
            (M = new s({
              zip64: this.zip64
            }, this.loadOptions)).readCentralPart(this.reader);
            this.files.push(M);
          }
        },
        readEndOfCentral: function () {
          var M = this.reader.lastIndexOfSignature(S.CENTRAL_DIRECTORY_END);
          if (M === -1) {
            throw new Error("Corrupted zip : can't find end of central directory");
          }
          this.reader.setIndex(M);
          this.checkSignature(S.CENTRAL_DIRECTORY_END);
          this.readBlockEndOfCentral();
          if (this.diskNumber === x.MAX_VALUE_16BITS || this.diskWithCentralDirStart === x.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === x.MAX_VALUE_16BITS || this.centralDirRecords === x.MAX_VALUE_16BITS || this.centralDirSize === x.MAX_VALUE_32BITS || this.centralDirOffset === x.MAX_VALUE_32BITS) {
            this.zip64 = true;
            if ((M = this.reader.lastIndexOfSignature(S.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) === -1) {
              throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
            }
            this.reader.setIndex(M);
            this.checkSignature(S.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            this.readBlockZip64EndOfCentralLocator();
            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
            this.checkSignature(S.ZIP64_CENTRAL_DIRECTORY_END);
            this.readBlockZip64EndOfCentral();
          }
        },
        prepareReader: function (M) {
          var O = x.getTypeOf(M);
          this.reader = O !== "string" || u.uint8array ? O === "nodebuffer" ? new C(M) : new N(x.transformTo("uint8array", M)) : new R(M, this.loadOptions.optimizedBinaryString);
        },
        load: function (M) {
          this.prepareReader(M);
          this.readEndOfCentral();
          this.readCentralDir();
          this.readLocalFiles();
        }
      };
      w.exports = l;
    }, {
      "./nodeBufferReader": 12,
      "./object": 13,
      "./signature": 14,
      "./stringReader": 15,
      "./support": 17,
      "./uint8ArrayReader": 18,
      "./utils": 21,
      "./zipEntry": 23
    }],
    23: [function (y, w, E) {
      var R = y("./stringReader");
      var C = y("./utils");
      var N = y("./compressedObject");
      var x = y("./object");
      function S(s, u) {
        this.options = s;
        this.loadOptions = u;
      }
      S.prototype = {
        isEncrypted: function () {
          return (this.bitFlag & 1) == 1;
        },
        useUTF8: function () {
          return (this.bitFlag & 2048) == 2048;
        },
        prepareCompressedContent: function (s, u, m) {
          return function () {
            var l = s.index;
            s.setIndex(u);
            var M = s.readData(m);
            s.setIndex(l);
            return M;
          };
        },
        prepareContent: function (s, u, m, l, M) {
          return function () {
            var O = C.transformTo(l.uncompressInputType, this.getCompressedContent());
            var q = l.uncompress(O);
            if (q.length !== M) {
              throw new Error("Bug : uncompressed data size mismatch");
            }
            return q;
          };
        },
        readLocalPart: function (s) {
          var u;
          var m;
          s.skip(22);
          this.fileNameLength = s.readInt(2);
          m = s.readInt(2);
          this.fileName = s.readString(this.fileNameLength);
          s.skip(m);
          if (this.compressedSize == -1 || this.uncompressedSize == -1) {
            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");
          }
          if ((u = C.findCompression(this.compressionMethod)) === null) {
            throw new Error("Corrupted zip : compression " + C.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
          }
          this.decompressed = new N();
          this.decompressed.compressedSize = this.compressedSize;
          this.decompressed.uncompressedSize = this.uncompressedSize;
          this.decompressed.crc32 = this.crc32;
          this.decompressed.compressionMethod = this.compressionMethod;
          this.decompressed.getCompressedContent = this.prepareCompressedContent(s, s.index, this.compressedSize, u);
          this.decompressed.getContent = this.prepareContent(s, s.index, this.compressedSize, u, this.uncompressedSize);
          if (this.loadOptions.checkCRC32 && (this.decompressed = C.transformTo("string", this.decompressed.getContent()), x.crc32(this.decompressed) !== this.crc32)) {
            throw new Error("Corrupted zip : CRC32 mismatch");
          }
        },
        readCentralPart: function (s) {
          this.versionMadeBy = s.readString(2);
          this.versionNeeded = s.readInt(2);
          this.bitFlag = s.readInt(2);
          this.compressionMethod = s.readString(2);
          this.date = s.readDate();
          this.crc32 = s.readInt(4);
          this.compressedSize = s.readInt(4);
          this.uncompressedSize = s.readInt(4);
          this.fileNameLength = s.readInt(2);
          this.extraFieldsLength = s.readInt(2);
          this.fileCommentLength = s.readInt(2);
          this.diskNumberStart = s.readInt(2);
          this.internalFileAttributes = s.readInt(2);
          this.externalFileAttributes = s.readInt(4);
          this.localHeaderOffset = s.readInt(4);
          if (this.isEncrypted()) {
            throw new Error("Encrypted zip are not supported");
          }
          this.fileName = s.readString(this.fileNameLength);
          this.readExtraFields(s);
          this.parseZIP64ExtraField(s);
          this.fileComment = s.readString(this.fileCommentLength);
          this.dir = !!(this.externalFileAttributes & 16);
        },
        parseZIP64ExtraField: function (s) {
          if (this.extraFields[1]) {
            var u = new R(this.extraFields[1].value);
            if (this.uncompressedSize === C.MAX_VALUE_32BITS) {
              this.uncompressedSize = u.readInt(8);
            }
            if (this.compressedSize === C.MAX_VALUE_32BITS) {
              this.compressedSize = u.readInt(8);
            }
            if (this.localHeaderOffset === C.MAX_VALUE_32BITS) {
              this.localHeaderOffset = u.readInt(8);
            }
            if (this.diskNumberStart === C.MAX_VALUE_32BITS) {
              this.diskNumberStart = u.readInt(4);
            }
          }
        },
        readExtraFields: function (s) {
          var m;
          var l;
          var M;
          var u = s.index;
          for (this.extraFields = this.extraFields || {}; s.index < u + this.extraFieldsLength;) {
            m = s.readInt(2);
            l = s.readInt(2);
            M = s.readString(l);
            this.extraFields[m] = {
              id: m,
              length: l,
              value: M
            };
          }
        },
        handleUTF8: function () {
          if (this.useUTF8()) {
            this.fileName = x.utf8decode(this.fileName);
            this.fileComment = x.utf8decode(this.fileComment);
          } else {
            var s = this.findExtraFieldUnicodePath();
            if (s !== null) {
              this.fileName = s;
            }
            var u = this.findExtraFieldUnicodeComment();
            if (u !== null) {
              this.fileComment = u;
            }
          }
        },
        findExtraFieldUnicodePath: function () {
          var s = this.extraFields[28789];
          if (s) {
            var u = new R(s.value);
            if (u.readInt(1) !== 1 || x.crc32(this.fileName) !== u.readInt(4)) {
              return null;
            } else {
              return x.utf8decode(u.readString(s.length - 5));
            }
          }
          return null;
        },
        findExtraFieldUnicodeComment: function () {
          var s = this.extraFields[25461];
          if (s) {
            var u = new R(s.value);
            if (u.readInt(1) !== 1 || x.crc32(this.fileComment) !== u.readInt(4)) {
              return null;
            } else {
              return x.utf8decode(u.readString(s.length - 5));
            }
          }
          return null;
        }
      };
      w.exports = S;
    }, {
      "./compressedObject": 2,
      "./object": 13,
      "./stringReader": 15,
      "./utils": 21
    }],
    24: [function (y, w, E) {
      var S = {};
      (0, y("./lib/utils/common").assign)(S, y("./lib/deflate"), y("./lib/inflate"), y("./lib/zlib/constants"));
      w.exports = S;
    }, {
      "./lib/deflate": 25,
      "./lib/inflate": 26,
      "./lib/utils/common": 27,
      "./lib/zlib/constants": 30
    }],
    25: [function (y, w, E) {
      var R = y("./zlib/deflate.js");
      var C = y("./utils/common");
      var N = y("./utils/strings");
      var x = y("./zlib/messages");
      var S = y("./zlib/zstream");
      function ee(H) {
        this.options = C.assign({
          level: -1,
          method: 8,
          chunkSize: 16384,
          windowBits: 15,
          memLevel: 8,
          strategy: 0,
          to: ""
        }, H || {});
        var $ = this.options;
        if ($.raw && $.windowBits > 0) {
          $.windowBits = -$.windowBits;
        } else if ($.gzip && $.windowBits > 0 && $.windowBits < 16) {
          $.windowBits += 16;
        }
        this.err = 0;
        this.msg = "";
        this.ended = false;
        this.chunks = [];
        this.strm = new S();
        this.strm.avail_out = 0;
        var J = R.deflateInit2(this.strm, $.level, $.method, $.windowBits, $.memLevel, $.strategy);
        if (J !== 0) {
          throw new Error(x[J]);
        }
        if ($.header) {
          R.deflateSetHeader(this.strm, $.header);
        }
      }
      function G(H, $) {
        var J = new ee($);
        J.push(H, true);
        if (J.err) {
          throw J.msg;
        }
        return J.result;
      }
      ee.prototype.push = function (H, $) {
        var U;
        var K;
        var J = this.strm;
        var Q = this.options.chunkSize;
        if (this.ended) {
          return false;
        }
        K = $ === ~~$ ? $ : $ === true ? 4 : 0;
        J.input = typeof H == "string" ? N.string2buf(H) : H;
        J.next_in = 0;
        J.avail_in = J.input.length;
        do {
          if (J.avail_out === 0) {
            J.output = new C.Buf8(Q);
            J.next_out = 0;
            J.avail_out = Q;
          }
          if ((U = R.deflate(J, K)) !== 1 && U !== 0) {
            this.onEnd(U);
            this.ended = true;
            return false;
          }
          if (J.avail_out === 0 || J.avail_in === 0 && K === 4) {
            this.onData(this.options.to === "string" ? N.buf2binstring(C.shrinkBuf(J.output, J.next_out)) : C.shrinkBuf(J.output, J.next_out));
          }
        } while ((J.avail_in > 0 || J.avail_out === 0) && U !== 1);
        return K !== 4 || (U = R.deflateEnd(this.strm), this.onEnd(U), this.ended = true, U === 0);
      };
      ee.prototype.onData = function (H) {
        this.chunks.push(H);
      };
      ee.prototype.onEnd = function (H) {
        if (H === 0) {
          this.result = this.options.to === "string" ? this.chunks.join("") : C.flattenChunks(this.chunks);
        }
        this.chunks = [];
        this.err = H;
        this.msg = this.strm.msg;
      };
      E.Deflate = ee;
      E.deflate = G;
      E.deflateRaw = function B(H, $) {
        ($ = $ || {}).raw = true;
        return G(H, $);
      };
      E.gzip = function A(H, $) {
        ($ = $ || {}).gzip = true;
        return G(H, $);
      };
    }, {
      "./utils/common": 27,
      "./utils/strings": 28,
      "./zlib/deflate.js": 32,
      "./zlib/messages": 37,
      "./zlib/zstream": 39
    }],
    26: [function (y, w, E) {
      var R = y("./zlib/inflate.js");
      var C = y("./utils/common");
      var N = y("./utils/strings");
      var x = y("./zlib/constants");
      var S = y("./zlib/messages");
      var s = y("./zlib/zstream");
      var u = y("./zlib/gzheader");
      function m(O) {
        this.options = C.assign({
          chunkSize: 16384,
          windowBits: 0,
          to: ""
        }, O || {});
        var q = this.options;
        if (q.raw && q.windowBits >= 0 && q.windowBits < 16) {
          q.windowBits = -q.windowBits;
          if (q.windowBits === 0) {
            q.windowBits = -15;
          }
        }
        if (q.windowBits >= 0 && q.windowBits < 16 && (!O || !O.windowBits)) {
          q.windowBits += 32;
        }
        if (q.windowBits > 15 && q.windowBits < 48 && (q.windowBits & 15) == 0) {
          q.windowBits |= 15;
        }
        this.err = 0;
        this.msg = "";
        this.ended = false;
        this.chunks = [];
        this.strm = new s();
        this.strm.avail_out = 0;
        var ee = R.inflateInit2(this.strm, q.windowBits);
        if (ee !== x.Z_OK) {
          throw new Error(S[ee]);
        }
        this.header = new u();
        R.inflateGetHeader(this.strm, this.header);
      }
      function l(O, q) {
        var ee = new m(q);
        ee.push(O, true);
        if (ee.err) {
          throw ee.msg;
        }
        return ee.result;
      }
      m.prototype.push = function (O, q) {
        var B;
        var A;
        var H;
        var $;
        var J;
        var ee = this.strm;
        var G = this.options.chunkSize;
        if (this.ended) {
          return false;
        }
        A = q === ~~q ? q : q === true ? x.Z_FINISH : x.Z_NO_FLUSH;
        ee.input = typeof O == "string" ? N.binstring2buf(O) : O;
        ee.next_in = 0;
        ee.avail_in = ee.input.length;
        do {
          if (ee.avail_out === 0) {
            ee.output = new C.Buf8(G);
            ee.next_out = 0;
            ee.avail_out = G;
          }
          if ((B = R.inflate(ee, x.Z_NO_FLUSH)) !== x.Z_STREAM_END && B !== x.Z_OK) {
            this.onEnd(B);
            this.ended = true;
            return false;
          }
          if (ee.next_out && (ee.avail_out === 0 || B === x.Z_STREAM_END || ee.avail_in === 0 && A === x.Z_FINISH)) {
            if (this.options.to === "string") {
              H = N.utf8border(ee.output, ee.next_out);
              $ = ee.next_out - H;
              J = N.buf2string(ee.output, H);
              ee.next_out = $;
              ee.avail_out = G - $;
              if ($) {
                C.arraySet(ee.output, ee.output, H, $, 0);
              }
              this.onData(J);
            } else {
              this.onData(C.shrinkBuf(ee.output, ee.next_out));
            }
          }
        } while (ee.avail_in > 0 && B !== x.Z_STREAM_END);
        if (B === x.Z_STREAM_END) {
          A = x.Z_FINISH;
        }
        return A !== x.Z_FINISH || (B = R.inflateEnd(this.strm), this.onEnd(B), this.ended = true, B === x.Z_OK);
      };
      m.prototype.onData = function (O) {
        this.chunks.push(O);
      };
      m.prototype.onEnd = function (O) {
        if (O === x.Z_OK) {
          this.result = this.options.to === "string" ? this.chunks.join("") : C.flattenChunks(this.chunks);
        }
        this.chunks = [];
        this.err = O;
        this.msg = this.strm.msg;
      };
      E.Inflate = m;
      E.inflate = l;
      E.inflateRaw = function M(O, q) {
        (q = q || {}).raw = true;
        return l(O, q);
      };
      E.ungzip = l;
    }, {
      "./utils/common": 27,
      "./utils/strings": 28,
      "./zlib/constants": 30,
      "./zlib/gzheader": 33,
      "./zlib/inflate.js": 35,
      "./zlib/messages": 37,
      "./zlib/zstream": 39
    }],
    27: [function (y, w, E) {
      var R = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";
      E.assign = function (x) {
        for (var S = Array.prototype.slice.call(arguments, 1); S.length;) {
          var s = S.shift();
          if (s) {
            if (typeof s != "object") {
              throw new TypeError(s + "must be non-object");
            }
            for (var u in s) {
              if (s.hasOwnProperty(u)) {
                x[u] = s[u];
              }
            }
          }
        }
        return x;
      };
      E.shrinkBuf = function (x, S) {
        if (x.length === S) {
          return x;
        } else if (x.subarray) {
          return x.subarray(0, S);
        } else {
          x.length = S;
          return x;
        }
      };
      var C = {
        arraySet: function (x, S, s, u, m) {
          if (S.subarray && x.subarray) {
            x.set(S.subarray(s, s + u), m);
          } else {
            for (var l = 0; l < u; l++) {
              x[m + l] = S[s + l];
            }
          }
        },
        flattenChunks: function (x) {
          var S;
          var s;
          var u;
          var m;
          var l;
          var M;
          u = 0;
          S = 0;
          s = x.length;
          for (; S < s; S++) {
            u += x[S].length;
          }
          M = new Uint8Array(u);
          m = 0;
          S = 0;
          s = x.length;
          for (; S < s; S++) {
            M.set(l = x[S], m);
            m += l.length;
          }
          return M;
        }
      };
      var N = {
        arraySet: function (x, S, s, u, m) {
          for (var l = 0; l < u; l++) {
            x[m + l] = S[s + l];
          }
        },
        flattenChunks: function (x) {
          return [].concat.apply([], x);
        }
      };
      E.setTyped = function (x) {
        if (x) {
          E.Buf8 = Uint8Array;
          E.Buf16 = Uint16Array;
          E.Buf32 = Int32Array;
          E.assign(E, C);
        } else {
          E.Buf8 = Array;
          E.Buf16 = Array;
          E.Buf32 = Array;
          E.assign(E, N);
        }
      };
      E.setTyped(R);
    }, {}],
    28: [function (y, w, E) {
      var R = y("./common");
      var C = true;
      var N = true;
      try {
        String.fromCharCode.apply(null, [0]);
      } catch {
        C = false;
      }
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch {
        N = false;
      }
      for (var x = new R.Buf8(256), S = 0; S < 256; S++) {
        x[S] = S >= 252 ? 6 : S >= 248 ? 5 : S >= 240 ? 4 : S >= 224 ? 3 : S >= 192 ? 2 : 1;
      }
      function s(u, m) {
        if (m < 65537 && (u.subarray && N || !u.subarray && C)) {
          return String.fromCharCode.apply(null, R.shrinkBuf(u, m));
        }
        for (var l = "", M = 0; M < m; M++) {
          l += String.fromCharCode(u[M]);
        }
        return l;
      }
      x[254] = x[254] = 1;
      E.string2buf = function (u) {
        var m;
        var l;
        var M;
        var O;
        var q;
        var ee = u.length;
        var G = 0;
        for (O = 0; O < ee; O++) {
          if (((l = u.charCodeAt(O)) & 64512) == 55296 && O + 1 < ee && ((M = u.charCodeAt(O + 1)) & 64512) == 56320) {
            l = 65536 + (l - 55296 << 10) + (M - 56320);
            O++;
          }
          G += l < 128 ? 1 : l < 2048 ? 2 : l < 65536 ? 3 : 4;
        }
        m = new R.Buf8(G);
        q = 0;
        O = 0;
        for (; q < G; O++) {
          if (((l = u.charCodeAt(O)) & 64512) == 55296 && O + 1 < ee && ((M = u.charCodeAt(O + 1)) & 64512) == 56320) {
            l = 65536 + (l - 55296 << 10) + (M - 56320);
            O++;
          }
          if (l < 128) {
            m[q++] = l;
          } else if (l < 2048) {
            m[q++] = l >>> 6 | 192;
            m[q++] = l & 63 | 128;
          } else if (l < 65536) {
            m[q++] = l >>> 12 | 224;
            m[q++] = l >>> 6 & 63 | 128;
            m[q++] = l & 63 | 128;
          } else {
            m[q++] = l >>> 18 | 240;
            m[q++] = l >>> 12 & 63 | 128;
            m[q++] = l >>> 6 & 63 | 128;
            m[q++] = l & 63 | 128;
          }
        }
        return m;
      };
      E.buf2binstring = function (u) {
        return s(u, u.length);
      };
      E.binstring2buf = function (u) {
        for (var m = new R.Buf8(u.length), l = 0, M = m.length; l < M; l++) {
          m[l] = u.charCodeAt(l);
        }
        return m;
      };
      E.buf2string = function (u, m) {
        var l;
        var M;
        var O;
        var q;
        var ee = m || u.length;
        var G = new Array(ee * 2);
        M = 0;
        l = 0;
        for (; l < ee;) {
          if ((O = u[l++]) < 128) {
            G[M++] = O;
          } else if ((q = x[O]) > 4) {
            G[M++] = 65533;
            l += q - 1;
          } else {
            for (O &= q === 2 ? 31 : q === 3 ? 15 : 7; q > 1 && l < ee;) {
              O = O << 6 | u[l++] & 63;
              q--;
            }
            if (q > 1) {
              G[M++] = 65533;
            } else if (O < 65536) {
              G[M++] = O;
            } else {
              G[M++] = (O -= 65536) >> 10 & 1023 | 55296;
              G[M++] = O & 1023 | 56320;
            }
          }
        }
        return s(G, M);
      };
      E.utf8border = function (u, m) {
        var l;
        if ((m = m || u.length) > u.length) {
          m = u.length;
        }
        l = m - 1;
        for (; l >= 0 && (u[l] & 192) == 128;) {
          l--;
        }
        if (l < 0 || l === 0) {
          return m;
        } else if (l + x[u[l]] > m) {
          return l;
        } else {
          return m;
        }
      };
    }, {
      "./common": 27
    }],
    29: [function (y, w, E) {
      w.exports = function R(C, N, x, S) {
        for (var s = C & 65535 | 0, u = C >>> 16 & 65535 | 0, m = 0; x !== 0;) {
          x -= m = x > 2000 ? 2000 : x;
          do {
            u = u + (s = s + N[S++] | 0) | 0;
          } while (--m);
          s %= 65521;
          u %= 65521;
        }
        return s | u << 16 | 0;
      };
    }, {}],
    30: [function (y, w, E) {
      w.exports = {
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_TREES: 6,
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        Z_BUF_ERROR: -5,
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,
        Z_BINARY: 0,
        Z_TEXT: 1,
        Z_UNKNOWN: 2,
        Z_DEFLATED: 8
      };
    }, {}],
    31: [function (y, w, E) {
      var C = function R() {
        for (var x, S = [], s = 0; s < 256; s++) {
          x = s;
          for (var u = 0; u < 8; u++) {
            x = x & 1 ? x >>> 1 ^ 3988292384 : x >>> 1;
          }
          S[s] = x;
        }
        return S;
      }();
      w.exports = function N(x, S, s, u) {
        var m = C;
        var l = u + s;
        x ^= -1;
        for (var M = u; M < l; M++) {
          x = x >>> 8 ^ m[(x ^ S[M]) & 255];
        }
        return x ^ -1;
      };
    }, {}],
    32: [function (y, w, E) {
      var R = y("../utils/common");
      var C = y("./trees");
      var N = y("./adler32");
      var x = y("./crc32");
      var S = y("./messages");
      var Me = 258;
      var je = 262;
      function Re(te, Ue) {
        te.msg = S[Ue];
        return Ue;
      }
      function ot(te) {
        return (te << 1) - (te > 4 ? 9 : 0);
      }
      function pt(te) {
        for (var Ue = te.length; --Ue >= 0;) {
          te[Ue] = 0;
        }
      }
      function ct(te) {
        var Ue = te.state;
        var Ke = Ue.pending;
        if (Ke > te.avail_out) {
          Ke = te.avail_out;
        }
        if (Ke !== 0) {
          R.arraySet(te.output, Ue.pending_buf, Ue.pending_out, Ke, te.next_out);
          te.next_out += Ke;
          Ue.pending_out += Ke;
          te.total_out += Ke;
          te.avail_out -= Ke;
          Ue.pending -= Ke;
          if (Ue.pending === 0) {
            Ue.pending_out = 0;
          }
        }
      }
      function st(te, Ue) {
        C._tr_flush_block(te, te.block_start >= 0 ? te.block_start : -1, te.strstart - te.block_start, Ue);
        te.block_start = te.strstart;
        ct(te.strm);
      }
      function Ze(te, Ue) {
        te.pending_buf[te.pending++] = Ue;
      }
      function it(te, Ue) {
        te.pending_buf[te.pending++] = Ue >>> 8 & 255;
        te.pending_buf[te.pending++] = Ue & 255;
      }
      function vt(te, Ue, Ke, ve) {
        var Te = te.avail_in;
        if (Te > ve) {
          Te = ve;
        }
        if (Te === 0) {
          return 0;
        } else {
          te.avail_in -= Te;
          R.arraySet(Ue, te.input, te.next_in, Te, Ke);
          if (te.state.wrap === 1) {
            te.adler = N(te.adler, Ue, Te, Ke);
          } else if (te.state.wrap === 2) {
            te.adler = x(te.adler, Ue, Te, Ke);
          }
          te.next_in += Te;
          te.total_in += Te;
          return Te;
        }
      }
      function nt(te, Ue) {
        var Te;
        var Je;
        var Ke = te.max_chain_length;
        var ve = te.strstart;
        var bt = te.prev_length;
        var ut = te.nice_match;
        var _t = te.strstart > te.w_size - je ? te.strstart - (te.w_size - je) : 0;
        var kt = te.window;
        var It = te.w_mask;
        var Tt = te.prev;
        var St = te.strstart + Me;
        var At = kt[ve + bt - 1];
        var Ot = kt[ve + bt];
        if (te.prev_length >= te.good_match) {
          Ke >>= 2;
        }
        if (ut > te.lookahead) {
          ut = te.lookahead;
        }
        do {
          if (kt[(Te = Ue) + bt] === Ot && kt[Te + bt - 1] === At && kt[Te] === kt[ve] && kt[++Te] === kt[ve + 1]) {
            ve += 2;
            Te++;
            do {} while (kt[++ve] === kt[++Te] && kt[++ve] === kt[++Te] && kt[++ve] === kt[++Te] && kt[++ve] === kt[++Te] && kt[++ve] === kt[++Te] && kt[++ve] === kt[++Te] && kt[++ve] === kt[++Te] && kt[++ve] === kt[++Te] && ve < St);
            Je = Me - (St - ve);
            ve = St - Me;
            if (Je > bt) {
              te.match_start = Ue;
              bt = Je;
              if (Je >= ut) {
                break;
              }
              At = kt[ve + bt - 1];
              Ot = kt[ve + bt];
            }
          }
        } while ((Ue = Tt[Ue & It]) > _t && --Ke != 0);
        if (bt <= te.lookahead) {
          return bt;
        } else {
          return te.lookahead;
        }
      }
      function gt(te) {
        var Ke;
        var ve;
        var Te;
        var Je;
        var bt;
        var Ue = te.w_size;
        do {
          Je = te.window_size - te.lookahead - te.strstart;
          if (te.strstart >= Ue + (Ue - je)) {
            R.arraySet(te.window, te.window, Ue, Ue, 0);
            te.match_start -= Ue;
            te.strstart -= Ue;
            te.block_start -= Ue;
            Ke = ve = te.hash_size;
            do {
              Te = te.head[--Ke];
              te.head[Ke] = Te >= Ue ? Te - Ue : 0;
            } while (--ve);
            Ke = ve = Ue;
            do {
              Te = te.prev[--Ke];
              te.prev[Ke] = Te >= Ue ? Te - Ue : 0;
            } while (--ve);
            Je += Ue;
          }
          if (te.strm.avail_in === 0) {
            break;
          }
          ve = vt(te.strm, te.window, te.strstart + te.lookahead, Je);
          te.lookahead += ve;
          if (te.lookahead + te.insert >= 3) {
            te.ins_h = te.window[bt = te.strstart - te.insert];
            te.ins_h = (te.ins_h << te.hash_shift ^ te.window[bt + 1]) & te.hash_mask;
            te.ins_h = te.window[bt = te.strstart - te.insert];
            te.ins_h = (te.ins_h << te.hash_shift ^ te.window[bt + 1]) & te.hash_mask;
            for (; te.insert && (te.ins_h = (te.ins_h << te.hash_shift ^ te.window[bt + 3 - 1]) & te.hash_mask, te.prev[bt & te.w_mask] = te.head[te.ins_h], te.head[te.ins_h] = bt, bt++, te.insert--, te.lookahead + te.insert >= 3););
          }
        } while (te.lookahead < je && te.strm.avail_in !== 0);
      }
      function et(te, Ue) {
        for (var Ke, ve;;) {
          if (te.lookahead < je) {
            gt(te);
            if (te.lookahead < je && Ue === 0) {
              return 1;
            }
            if (te.lookahead === 0) {
              break;
            }
          }
          Ke = 0;
          if (te.lookahead >= 3) {
            te.ins_h = (te.ins_h << te.hash_shift ^ te.window[te.strstart + 3 - 1]) & te.hash_mask;
            Ke = te.prev[te.strstart & te.w_mask] = te.head[te.ins_h];
            te.head[te.ins_h] = te.strstart;
          }
          if (Ke !== 0 && te.strstart - Ke <= te.w_size - je) {
            te.match_length = nt(te, Ke);
          }
          if (te.match_length >= 3) {
            ve = C._tr_tally(te, te.strstart - te.match_start, te.match_length - 3);
            te.lookahead -= te.match_length;
            if (te.match_length <= te.max_lazy_match && te.lookahead >= 3) {
              te.match_length--;
              do {
                te.strstart++;
                te.ins_h = (te.ins_h << te.hash_shift ^ te.window[te.strstart + 3 - 1]) & te.hash_mask;
                Ke = te.prev[te.strstart & te.w_mask] = te.head[te.ins_h];
                te.head[te.ins_h] = te.strstart;
              } while (--te.match_length != 0);
              te.strstart++;
            } else {
              te.strstart += te.match_length;
              te.match_length = 0;
              te.ins_h = te.window[te.strstart];
              te.ins_h = (te.ins_h << te.hash_shift ^ te.window[te.strstart + 1]) & te.hash_mask;
            }
          } else {
            ve = C._tr_tally(te, 0, te.window[te.strstart]);
            te.lookahead--;
            te.strstart++;
          }
          if (ve && (st(te, false), te.strm.avail_out === 0)) {
            return 1;
          }
        }
        te.insert = te.strstart < 2 ? te.strstart : 2;
        if (Ue === 4) {
          st(te, true);
          if (te.strm.avail_out === 0) {
            return 3;
          } else {
            return 4;
          }
        } else if (te.last_lit && (st(te, false), te.strm.avail_out === 0)) {
          return 1;
        } else {
          return 2;
        }
      }
      function Et(te, Ue) {
        for (var Ke, ve, Te;;) {
          if (te.lookahead < je) {
            gt(te);
            if (te.lookahead < je && Ue === 0) {
              return 1;
            }
            if (te.lookahead === 0) {
              break;
            }
          }
          Ke = 0;
          if (te.lookahead >= 3) {
            te.ins_h = (te.ins_h << te.hash_shift ^ te.window[te.strstart + 3 - 1]) & te.hash_mask;
            Ke = te.prev[te.strstart & te.w_mask] = te.head[te.ins_h];
            te.head[te.ins_h] = te.strstart;
          }
          te.prev_length = te.match_length;
          te.prev_match = te.match_start;
          te.match_length = 2;
          if (Ke !== 0 && te.prev_length < te.max_lazy_match && te.strstart - Ke <= te.w_size - je) {
            te.match_length = nt(te, Ke);
            if (te.match_length <= 5 && (te.strategy === 1 || te.match_length === 3 && te.strstart - te.match_start > 4096)) {
              te.match_length = 2;
            }
          }
          if (te.prev_length >= 3 && te.match_length <= te.prev_length) {
            Te = te.strstart + te.lookahead - 3;
            ve = C._tr_tally(te, te.strstart - 1 - te.prev_match, te.prev_length - 3);
            te.lookahead -= te.prev_length - 1;
            te.prev_length -= 2;
            do {
              if (++te.strstart <= Te) {
                te.ins_h = (te.ins_h << te.hash_shift ^ te.window[te.strstart + 3 - 1]) & te.hash_mask;
                Ke = te.prev[te.strstart & te.w_mask] = te.head[te.ins_h];
                te.head[te.ins_h] = te.strstart;
              }
            } while (--te.prev_length != 0);
            te.match_available = 0;
            te.match_length = 2;
            te.strstart++;
            if (ve && (st(te, false), te.strm.avail_out === 0)) {
              return 1;
            }
          } else if (te.match_available) {
            if (ve = C._tr_tally(te, 0, te.window[te.strstart - 1])) {
              st(te, false);
            }
            te.strstart++;
            te.lookahead--;
            if (te.strm.avail_out === 0) {
              return 1;
            }
          } else {
            te.match_available = 1;
            te.strstart++;
            te.lookahead--;
          }
        }
        if (te.match_available) {
          ve = C._tr_tally(te, 0, te.window[te.strstart - 1]);
          te.match_available = 0;
        }
        te.insert = te.strstart < 2 ? te.strstart : 2;
        if (Ue === 4) {
          st(te, true);
          if (te.strm.avail_out === 0) {
            return 3;
          } else {
            return 4;
          }
        } else if (te.last_lit && (st(te, false), te.strm.avail_out === 0)) {
          return 1;
        } else {
          return 2;
        }
      }
      var me;
      function Ie(te, Ue, Ke, ve, Te) {
        this.good_length = te;
        this.max_lazy = Ue;
        this.nice_length = Ke;
        this.max_chain = ve;
        this.func = Te;
      }
      function se() {
        this.strm = null;
        this.status = 0;
        this.pending_buf = null;
        this.pending_buf_size = 0;
        this.pending_out = 0;
        this.pending = 0;
        this.wrap = 0;
        this.gzhead = null;
        this.gzindex = 0;
        this.method = 8;
        this.last_flush = -1;
        this.w_size = 0;
        this.w_bits = 0;
        this.w_mask = 0;
        this.window = null;
        this.window_size = 0;
        this.prev = null;
        this.head = null;
        this.ins_h = 0;
        this.hash_size = 0;
        this.hash_bits = 0;
        this.hash_mask = 0;
        this.hash_shift = 0;
        this.block_start = 0;
        this.match_length = 0;
        this.prev_match = 0;
        this.match_available = 0;
        this.strstart = 0;
        this.match_start = 0;
        this.lookahead = 0;
        this.prev_length = 0;
        this.max_chain_length = 0;
        this.max_lazy_match = 0;
        this.level = 0;
        this.strategy = 0;
        this.good_match = 0;
        this.nice_match = 0;
        this.dyn_ltree = new R.Buf16(1146);
        this.dyn_dtree = new R.Buf16(122);
        this.bl_tree = new R.Buf16(78);
        pt(this.dyn_ltree);
        pt(this.dyn_dtree);
        pt(this.bl_tree);
        this.l_desc = null;
        this.d_desc = null;
        this.bl_desc = null;
        this.bl_count = new R.Buf16(16);
        this.heap = new R.Buf16(573);
        pt(this.heap);
        this.heap_len = 0;
        this.heap_max = 0;
        this.depth = new R.Buf16(573);
        pt(this.depth);
        this.l_buf = 0;
        this.lit_bufsize = 0;
        this.last_lit = 0;
        this.d_buf = 0;
        this.opt_len = 0;
        this.static_len = 0;
        this.matches = 0;
        this.insert = 0;
        this.bi_buf = 0;
        this.bi_valid = 0;
      }
      function De(te) {
        var Ue;
        if (te && te.state) {
          te.total_in = te.total_out = 0;
          te.data_type = 2;
          (Ue = te.state).pending = 0;
          Ue.pending_out = 0;
          if (Ue.wrap < 0) {
            Ue.wrap = -Ue.wrap;
          }
          Ue.status = Ue.wrap ? 42 : 113;
          te.adler = Ue.wrap === 2 ? 0 : 1;
          Ue.last_flush = 0;
          C._tr_init(Ue);
          return 0;
        } else {
          return Re(te, -2);
        }
      }
      function We(te) {
        var Ue = De(te);
        if (Ue === 0) {
          (function Be(te) {
            te.window_size = te.w_size * 2;
            pt(te.head);
            te.max_lazy_match = me[te.level].max_lazy;
            te.good_match = me[te.level].good_length;
            te.nice_match = me[te.level].nice_length;
            te.max_chain_length = me[te.level].max_chain;
            te.strstart = 0;
            te.block_start = 0;
            te.lookahead = 0;
            te.insert = 0;
            te.match_length = te.prev_length = 2;
            te.match_available = 0;
            te.ins_h = 0;
          })(te.state);
        }
        return Ue;
      }
      function Pe(te, Ue, Ke, ve, Te, Je) {
        if (!te) {
          return -2;
        }
        var bt = 1;
        if (Ue === -1) {
          Ue = 6;
        }
        if (ve < 0) {
          bt = 0;
          ve = -ve;
        } else if (ve > 15) {
          bt = 2;
          ve -= 16;
        }
        if (Te < 1 || Te > 9 || Ke !== 8 || ve < 8 || ve > 15 || Ue < 0 || Ue > 9 || Je < 0 || Je > 4) {
          return Re(te, -2);
        }
        if (ve === 8) {
          ve = 9;
        }
        var ut = new se();
        te.state = ut;
        ut.strm = te;
        ut.wrap = bt;
        ut.gzhead = null;
        ut.w_bits = ve;
        ut.w_size = 1 << ut.w_bits;
        ut.w_mask = ut.w_size - 1;
        ut.hash_bits = Te + 7;
        ut.hash_size = 1 << ut.hash_bits;
        ut.hash_mask = ut.hash_size - 1;
        ut.hash_shift = ~~((ut.hash_bits + 3 - 1) / 3);
        ut.window = new R.Buf8(ut.w_size * 2);
        ut.head = new R.Buf16(ut.hash_size);
        ut.prev = new R.Buf16(ut.w_size);
        ut.lit_bufsize = 1 << Te + 6;
        ut.pending_buf_size = ut.lit_bufsize * 4;
        ut.pending_buf = new R.Buf8(ut.pending_buf_size);
        ut.d_buf = ut.lit_bufsize >> 1;
        ut.l_buf = ut.lit_bufsize * 3;
        ut.level = Ue;
        ut.strategy = Je;
        ut.method = Ke;
        return We(te);
      }
      me = [new Ie(0, 0, 0, 0, function Ye(te, Ue) {
        var Ke = 65535;
        for (Ke > te.pending_buf_size - 5 && (Ke = te.pending_buf_size - 5);;) {
          if (te.lookahead <= 1) {
            gt(te);
            if (te.lookahead === 0 && Ue === 0) {
              return 1;
            }
            if (te.lookahead === 0) {
              break;
            }
          }
          te.strstart += te.lookahead;
          te.lookahead = 0;
          var ve = te.block_start + Ke;
          if ((te.strstart === 0 || te.strstart >= ve) && (te.lookahead = te.strstart - ve, te.strstart = ve, st(te, false), te.strm.avail_out === 0) || te.strstart - te.block_start >= te.w_size - je && (st(te, false), te.strm.avail_out === 0)) {
            return 1;
          }
        }
        te.insert = 0;
        if (Ue === 4) {
          st(te, true);
          if (te.strm.avail_out === 0) {
            return 3;
          } else {
            return 4;
          }
        } else {
          if (te.strstart > te.block_start) {
            st(te, false);
          }
          return 1;
        }
      }), new Ie(4, 4, 8, 4, et), new Ie(4, 5, 16, 8, et), new Ie(4, 6, 32, 32, et), new Ie(4, 4, 16, 16, Et), new Ie(8, 16, 32, 32, Et), new Ie(8, 16, 128, 128, Et), new Ie(8, 32, 128, 256, Et), new Ie(32, 128, 258, 1024, Et), new Ie(32, 258, 258, 4096, Et)];
      E.deflateInit = function ce(te, Ue) {
        return Pe(te, Ue, 8, 15, 8, 0);
      };
      E.deflateInit2 = Pe;
      E.deflateReset = We;
      E.deflateResetKeep = De;
      E.deflateSetHeader = function ke(te, Ue) {
        if (te && te.state && te.state.wrap === 2) {
          te.state.gzhead = Ue;
          return 0;
        } else {
          return -2;
        }
      };
      E.deflate = function Ge(te, Ue) {
        var Ke;
        var ve;
        var Te;
        var Je;
        if (!te || !te.state || Ue > 5 || Ue < 0) {
          if (te) {
            return Re(te, -2);
          } else {
            return -2;
          }
        }
        ve = te.state;
        if (!te.output || !te.input && te.avail_in !== 0 || ve.status === 666 && Ue !== 4) {
          return Re(te, te.avail_out === 0 ? -5 : -2);
        }
        ve.strm = te;
        Ke = ve.last_flush;
        ve.last_flush = Ue;
        if (ve.status === 42) {
          if (ve.wrap === 2) {
            te.adler = 0;
            Ze(ve, 31);
            Ze(ve, 139);
            Ze(ve, 8);
            if (ve.gzhead) {
              Ze(ve, (ve.gzhead.text ? 1 : 0) + (ve.gzhead.hcrc ? 2 : 0) + (ve.gzhead.extra ? 4 : 0) + (ve.gzhead.name ? 8 : 0) + (ve.gzhead.comment ? 16 : 0));
              Ze(ve, ve.gzhead.time & 255);
              Ze(ve, ve.gzhead.time >> 8 & 255);
              Ze(ve, ve.gzhead.time >> 16 & 255);
              Ze(ve, ve.gzhead.time >> 24 & 255);
              Ze(ve, ve.level === 9 ? 2 : ve.strategy >= 2 || ve.level < 2 ? 4 : 0);
              Ze(ve, ve.gzhead.os & 255);
              if (ve.gzhead.extra && ve.gzhead.extra.length) {
                Ze(ve, ve.gzhead.extra.length & 255);
                Ze(ve, ve.gzhead.extra.length >> 8 & 255);
              }
              if (ve.gzhead.hcrc) {
                te.adler = x(te.adler, ve.pending_buf, ve.pending, 0);
              }
              ve.gzindex = 0;
              ve.status = 69;
            } else {
              Ze(ve, 0);
              Ze(ve, 0);
              Ze(ve, 0);
              Ze(ve, 0);
              Ze(ve, 0);
              Ze(ve, ve.level === 9 ? 2 : ve.strategy >= 2 || ve.level < 2 ? 4 : 0);
              Ze(ve, 3);
              ve.status = 113;
            }
          } else {
            var bt = 8 + (ve.w_bits - 8 << 4) << 8;
            bt |= (ve.strategy >= 2 || ve.level < 2 ? 0 : ve.level < 6 ? 1 : ve.level === 6 ? 2 : 3) << 6;
            if (ve.strstart !== 0) {
              bt |= 32;
            }
            bt += 31 - bt % 31;
            ve.status = 113;
            it(ve, bt);
            if (ve.strstart !== 0) {
              it(ve, te.adler >>> 16);
              it(ve, te.adler & 65535);
            }
            te.adler = 1;
          }
        }
        if (ve.status === 69) {
          if (ve.gzhead.extra) {
            for (Te = ve.pending; ve.gzindex < (ve.gzhead.extra.length & 65535) && (ve.pending !== ve.pending_buf_size || (ve.gzhead.hcrc && ve.pending > Te && (te.adler = x(te.adler, ve.pending_buf, ve.pending - Te, Te)), ct(te), Te = ve.pending, ve.pending !== ve.pending_buf_size));) {
              Ze(ve, ve.gzhead.extra[ve.gzindex] & 255);
              ve.gzindex++;
            }
            if (ve.gzhead.hcrc && ve.pending > Te) {
              te.adler = x(te.adler, ve.pending_buf, ve.pending - Te, Te);
            }
            if (ve.gzindex === ve.gzhead.extra.length) {
              ve.gzindex = 0;
              ve.status = 73;
            }
          } else {
            ve.status = 73;
          }
        }
        if (ve.status === 73) {
          if (ve.gzhead.name) {
            Te = ve.pending;
            do {
              if (ve.pending === ve.pending_buf_size && (ve.gzhead.hcrc && ve.pending > Te && (te.adler = x(te.adler, ve.pending_buf, ve.pending - Te, Te)), ct(te), Te = ve.pending, ve.pending === ve.pending_buf_size)) {
                Je = 1;
                break;
              }
              Je = ve.gzindex < ve.gzhead.name.length ? ve.gzhead.name.charCodeAt(ve.gzindex++) & 255 : 0;
              Ze(ve, Je);
            } while (Je !== 0);
            if (ve.gzhead.hcrc && ve.pending > Te) {
              te.adler = x(te.adler, ve.pending_buf, ve.pending - Te, Te);
            }
            if (Je === 0) {
              ve.gzindex = 0;
              ve.status = 91;
            }
          } else {
            ve.status = 91;
          }
        }
        if (ve.status === 91) {
          if (ve.gzhead.comment) {
            Te = ve.pending;
            do {
              if (ve.pending === ve.pending_buf_size && (ve.gzhead.hcrc && ve.pending > Te && (te.adler = x(te.adler, ve.pending_buf, ve.pending - Te, Te)), ct(te), Te = ve.pending, ve.pending === ve.pending_buf_size)) {
                Je = 1;
                break;
              }
              Je = ve.gzindex < ve.gzhead.comment.length ? ve.gzhead.comment.charCodeAt(ve.gzindex++) & 255 : 0;
              Ze(ve, Je);
            } while (Je !== 0);
            if (ve.gzhead.hcrc && ve.pending > Te) {
              te.adler = x(te.adler, ve.pending_buf, ve.pending - Te, Te);
            }
            if (Je === 0) {
              ve.status = 103;
            }
          } else {
            ve.status = 103;
          }
        }
        if (ve.status === 103) {
          if (ve.gzhead.hcrc) {
            if (ve.pending + 2 > ve.pending_buf_size) {
              ct(te);
            }
            if (ve.pending + 2 <= ve.pending_buf_size) {
              Ze(ve, te.adler & 255);
              Ze(ve, te.adler >> 8 & 255);
              te.adler = 0;
              ve.status = 113;
            }
          } else {
            ve.status = 113;
          }
        }
        if (ve.pending !== 0) {
          ct(te);
          if (te.avail_out === 0) {
            ve.last_flush = -1;
            return 0;
          }
        } else if (te.avail_in === 0 && ot(Ue) <= ot(Ke) && Ue !== 4) {
          return Re(te, -5);
        }
        if (ve.status === 666 && te.avail_in !== 0) {
          return Re(te, -5);
        }
        if (te.avail_in !== 0 || ve.lookahead !== 0 || Ue !== 0 && ve.status !== 666) {
          var _t = ve.strategy === 2 ? function Nt(te, Ue) {
            for (var Ke;;) {
              if (te.lookahead === 0 && (gt(te), te.lookahead === 0)) {
                if (Ue === 0) {
                  return 1;
                }
                break;
              }
              te.match_length = 0;
              Ke = C._tr_tally(te, 0, te.window[te.strstart]);
              te.lookahead--;
              te.strstart++;
              if (Ke && (st(te, false), te.strm.avail_out === 0)) {
                return 1;
              }
            }
            te.insert = 0;
            if (Ue === 4) {
              st(te, true);
              if (te.strm.avail_out === 0) {
                return 3;
              } else {
                return 4;
              }
            } else if (te.last_lit && (st(te, false), te.strm.avail_out === 0)) {
              return 1;
            } else {
              return 2;
            }
          }(ve, Ue) : ve.strategy === 3 ? function Ct(te, Ue) {
            for (var Ke, ve, Te, Je, bt = te.window;;) {
              if (te.lookahead <= Me) {
                gt(te);
                if (te.lookahead <= Me && Ue === 0) {
                  return 1;
                }
                if (te.lookahead === 0) {
                  break;
                }
              }
              te.match_length = 0;
              if (te.lookahead >= 3 && te.strstart > 0 && (ve = bt[Te = te.strstart - 1]) === bt[++Te] && ve === bt[++Te] && ve === bt[++Te]) {
                Je = te.strstart + Me;
                do {} while (ve === bt[++Te] && ve === bt[++Te] && ve === bt[++Te] && ve === bt[++Te] && ve === bt[++Te] && ve === bt[++Te] && ve === bt[++Te] && ve === bt[++Te] && Te < Je);
                te.match_length = Me - (Je - Te);
                if (te.match_length > te.lookahead) {
                  te.match_length = te.lookahead;
                }
              }
              if (te.match_length >= 3) {
                Ke = C._tr_tally(te, 1, te.match_length - 3);
                te.lookahead -= te.match_length;
                te.strstart += te.match_length;
                te.match_length = 0;
              } else {
                Ke = C._tr_tally(te, 0, te.window[te.strstart]);
                te.lookahead--;
                te.strstart++;
              }
              if (Ke && (st(te, false), te.strm.avail_out === 0)) {
                return 1;
              }
            }
            te.insert = 0;
            if (Ue === 4) {
              st(te, true);
              if (te.strm.avail_out === 0) {
                return 3;
              } else {
                return 4;
              }
            } else if (te.last_lit && (st(te, false), te.strm.avail_out === 0)) {
              return 1;
            } else {
              return 2;
            }
          }(ve, Ue) : me[ve.level].func(ve, Ue);
          if (_t === 3 || _t === 4) {
            ve.status = 666;
          }
          if (_t === 1 || _t === 3) {
            if (te.avail_out === 0) {
              ve.last_flush = -1;
            }
            return 0;
          }
          if (_t === 2 && (Ue === 1 ? C._tr_align(ve) : Ue !== 5 && (C._tr_stored_block(ve, 0, 0, false), Ue === 3 && (pt(ve.head), ve.lookahead === 0 && (ve.strstart = 0, ve.block_start = 0, ve.insert = 0))), ct(te), te.avail_out === 0)) {
            ve.last_flush = -1;
            return 0;
          }
        }
        if (Ue !== 4) {
          return 0;
        } else if (ve.wrap <= 0) {
          return 1;
        } else {
          if (ve.wrap === 2) {
            Ze(ve, te.adler & 255);
            Ze(ve, te.adler >> 8 & 255);
            Ze(ve, te.adler >> 16 & 255);
            Ze(ve, te.adler >> 24 & 255);
            Ze(ve, te.total_in & 255);
            Ze(ve, te.total_in >> 8 & 255);
            Ze(ve, te.total_in >> 16 & 255);
            Ze(ve, te.total_in >> 24 & 255);
          } else {
            it(ve, te.adler >>> 16);
            it(ve, te.adler & 65535);
          }
          ct(te);
          if (ve.wrap > 0) {
            ve.wrap = -ve.wrap;
          }
          if (ve.pending !== 0) {
            return 0;
          } else {
            return 1;
          }
        }
      };
      E.deflateEnd = function dt(te) {
        var Ue;
        if (te && te.state) {
          if ((Ue = te.state.status) !== 42 && Ue !== 69 && Ue !== 73 && Ue !== 91 && Ue !== 103 && Ue !== 113 && Ue !== 666) {
            return Re(te, -2);
          } else {
            te.state = null;
            if (Ue === 113) {
              return Re(te, -3);
            } else {
              return 0;
            }
          }
        } else {
          return -2;
        }
      };
      E.deflateInfo = "pako deflate (from Nodeca project)";
    }, {
      "../utils/common": 27,
      "./adler32": 29,
      "./crc32": 31,
      "./messages": 37,
      "./trees": 38
    }],
    33: [function (y, w, E) {
      w.exports = function R() {
        this.text = 0;
        this.time = 0;
        this.xflags = 0;
        this.os = 0;
        this.extra = null;
        this.extra_len = 0;
        this.name = "";
        this.comment = "";
        this.hcrc = 0;
        this.done = false;
      };
    }, {}],
    34: [function (y, w, E) {
      w.exports = function (x, S) {
        var s;
        var u;
        var m;
        var l;
        var M;
        var O;
        var q;
        var ee;
        var G;
        var B;
        var A;
        var H;
        var $;
        var J;
        var Q;
        var U;
        var K;
        var F;
        var L;
        var ie;
        var Y;
        var ne;
        var le;
        var ge;
        var Ee;
        ge = x.input;
        m = (u = x.next_in) + (x.avail_in - 5);
        Ee = x.output;
        M = (l = x.next_out) - (S - x.avail_out);
        O = l + (x.avail_out - 257);
        q = (s = x.state).dmax;
        ee = s.wsize;
        G = s.whave;
        B = s.wnext;
        A = s.window;
        H = s.hold;
        $ = s.bits;
        J = s.lencode;
        Q = s.distcode;
        U = (1 << s.lenbits) - 1;
        K = (1 << s.distbits) - 1;
        e: do {
          if ($ < 15) {
            H += ge[u++] << $;
            H += ge[u++] << ($ += 8);
            $ += 8;
          }
          F = J[H & U];
          t: for (;;) {
            H >>>= L = F >>> 24;
            $ -= L;
            if ((L = F >>> 16 & 255) == 0) {
              Ee[l++] = F & 65535;
            } else {
              if (!(L & 16)) {
                if ((L & 64) == 0) {
                  F = J[(F & 65535) + (H & (1 << L) - 1)];
                  continue t;
                }
                if (L & 32) {
                  s.mode = 12;
                  break e;
                }
                x.msg = "invalid literal/length code";
                s.mode = 30;
                break e;
              }
              ie = F & 65535;
              if (L &= 15) {
                if ($ < L) {
                  H += ge[u++] << $;
                  $ += 8;
                }
                ie += H & (1 << L) - 1;
                H >>>= L;
                $ -= L;
              }
              if ($ < 15) {
                H += ge[u++] << $;
                H += ge[u++] << ($ += 8);
                $ += 8;
              }
              F = Q[H & K];
              n: for (;;) {
                H >>>= L = F >>> 24;
                $ -= L;
                if (!((L = F >>> 16 & 255) & 16)) {
                  if ((L & 64) == 0) {
                    F = Q[(F & 65535) + (H & (1 << L) - 1)];
                    continue n;
                  }
                  x.msg = "invalid distance code";
                  s.mode = 30;
                  break e;
                }
                Y = F & 65535;
                if ($ < (L &= 15)) {
                  H += ge[u++] << $;
                  if (($ += 8) < L) {
                    H += ge[u++] << $;
                    $ += 8;
                  }
                }
                if ((Y += H & (1 << L) - 1) > q) {
                  x.msg = "invalid distance too far back";
                  s.mode = 30;
                  break e;
                }
                H >>>= L;
                $ -= L;
                if (Y > (L = l - M)) {
                  if ((L = Y - L) > G && s.sane) {
                    x.msg = "invalid distance too far back";
                    s.mode = 30;
                    break e;
                  }
                  ne = 0;
                  le = A;
                  if (B === 0) {
                    ne += ee - L;
                    if (L < ie) {
                      ie -= L;
                      do {
                        Ee[l++] = A[ne++];
                      } while (--L);
                      ne = l - Y;
                      le = Ee;
                    }
                  } else if (B < L) {
                    ne += ee + B - L;
                    if ((L -= B) < ie) {
                      ie -= L;
                      do {
                        Ee[l++] = A[ne++];
                      } while (--L);
                      ne = 0;
                      if (B < ie) {
                        ie -= L = B;
                        do {
                          Ee[l++] = A[ne++];
                        } while (--L);
                        ne = l - Y;
                        le = Ee;
                      }
                    }
                  } else {
                    ne += B - L;
                    if (L < ie) {
                      ie -= L;
                      do {
                        Ee[l++] = A[ne++];
                      } while (--L);
                      ne = l - Y;
                      le = Ee;
                    }
                  }
                  for (; ie > 2;) {
                    Ee[l++] = le[ne++];
                    Ee[l++] = le[ne++];
                    Ee[l++] = le[ne++];
                    ie -= 3;
                  }
                  if (ie) {
                    Ee[l++] = le[ne++];
                    if (ie > 1) {
                      Ee[l++] = le[ne++];
                    }
                  }
                } else {
                  ne = l - Y;
                  do {
                    Ee[l++] = Ee[ne++];
                    Ee[l++] = Ee[ne++];
                    Ee[l++] = Ee[ne++];
                    ie -= 3;
                  } while (ie > 2);
                  if (ie) {
                    Ee[l++] = Ee[ne++];
                    if (ie > 1) {
                      Ee[l++] = Ee[ne++];
                    }
                  }
                }
                break;
              }
            }
            break;
          }
        } while (u < m && l < O);
        H &= (1 << ($ -= (ie = $ >> 3) << 3)) - 1;
        x.next_in = u -= ie;
        x.next_out = l;
        x.avail_in = u < m ? m - u + 5 : 5 - (u - m);
        x.avail_out = l < O ? O - l + 257 : 257 - (l - O);
        s.hold = H;
        s.bits = $;
      };
    }, {}],
    35: [function (y, w, E) {
      var R = y("../utils/common");
      var C = y("./adler32");
      var N = y("./crc32");
      var x = y("./inffast");
      var S = y("./inftrees");
      var B = -2;
      function it(ke) {
        return (ke >>> 24 & 255) + (ke >>> 8 & 65280) + ((ke & 65280) << 8) + ((ke & 255) << 24);
      }
      function vt() {
        this.mode = 0;
        this.last = false;
        this.wrap = 0;
        this.havedict = false;
        this.flags = 0;
        this.dmax = 0;
        this.check = 0;
        this.total = 0;
        this.head = null;
        this.wbits = 0;
        this.wsize = 0;
        this.whave = 0;
        this.wnext = 0;
        this.window = null;
        this.hold = 0;
        this.bits = 0;
        this.length = 0;
        this.offset = 0;
        this.extra = 0;
        this.lencode = null;
        this.distcode = null;
        this.lenbits = 0;
        this.distbits = 0;
        this.ncode = 0;
        this.nlen = 0;
        this.ndist = 0;
        this.have = 0;
        this.next = null;
        this.lens = new R.Buf16(320);
        this.work = new R.Buf16(288);
        this.lendyn = null;
        this.distdyn = null;
        this.sane = 0;
        this.back = 0;
        this.was = 0;
      }
      function nt(ke) {
        var Pe;
        if (ke && ke.state) {
          ke.total_in = ke.total_out = (Pe = ke.state).total = 0;
          ke.msg = "";
          if (Pe.wrap) {
            ke.adler = Pe.wrap & 1;
          }
          Pe.mode = 1;
          Pe.last = 0;
          Pe.havedict = 0;
          Pe.dmax = 32768;
          Pe.head = null;
          Pe.hold = 0;
          Pe.bits = 0;
          Pe.lencode = Pe.lendyn = new R.Buf32(852);
          Pe.distcode = Pe.distdyn = new R.Buf32(592);
          Pe.sane = 1;
          Pe.back = -1;
          return 0;
        } else {
          return B;
        }
      }
      function gt(ke) {
        var Pe;
        if (ke && ke.state) {
          (Pe = ke.state).wsize = 0;
          Pe.whave = 0;
          Pe.wnext = 0;
          return nt(ke);
        } else {
          return B;
        }
      }
      function Ye(ke, Pe) {
        var ce;
        var Ge;
        if (!ke || !ke.state || (Ge = ke.state, Pe < 0 ? (ce = 0, Pe = -Pe) : (ce = 1 + (Pe >> 4), Pe < 48 && (Pe &= 15)), Pe && (Pe < 8 || Pe > 15))) {
          return B;
        } else {
          if (Ge.window !== null && Ge.wbits !== Pe) {
            Ge.window = null;
          }
          Ge.wrap = ce;
          Ge.wbits = Pe;
          return gt(ke);
        }
      }
      function et(ke, Pe) {
        var ce;
        var Ge;
        if (ke) {
          Ge = new vt();
          ke.state = Ge;
          Ge.window = null;
          if ((ce = Ye(ke, Pe)) !== 0) {
            ke.state = null;
          }
          return ce;
        } else {
          return B;
        }
      }
      var Nt;
      var Ie;
      var Ct = true;
      function me(ke) {
        if (Ct) {
          var Pe;
          Nt = new R.Buf32(512);
          Ie = new R.Buf32(32);
          Pe = 0;
          for (; Pe < 144;) {
            ke.lens[Pe++] = 8;
          }
          for (; Pe < 256;) {
            ke.lens[Pe++] = 9;
          }
          for (; Pe < 280;) {
            ke.lens[Pe++] = 7;
          }
          for (; Pe < 288;) {
            ke.lens[Pe++] = 8;
          }
          S(1, ke.lens, 0, 288, Nt, 0, ke.work, {
            bits: 9
          });
          Pe = 0;
          for (; Pe < 32;) {
            ke.lens[Pe++] = 5;
          }
          S(2, ke.lens, 0, 32, Ie, 0, ke.work, {
            bits: 5
          });
          Ct = false;
        }
        ke.lencode = Nt;
        ke.lenbits = 9;
        ke.distcode = Ie;
        ke.distbits = 5;
      }
      E.inflateReset = gt;
      E.inflateReset2 = Ye;
      E.inflateResetKeep = nt;
      E.inflateInit = function Et(ke) {
        return et(ke, 15);
      };
      E.inflateInit2 = et;
      E.inflate = function se(ke, Pe) {
        var ce;
        var Ge;
        var dt;
        var te;
        var Ue;
        var Ke;
        var ve;
        var Te;
        var Je;
        var bt;
        var ut;
        var _t;
        var kt;
        var It;
        var St;
        var At;
        var Ot;
        var Mt;
        var t;
        var j;
        var a;
        var v;
        var i;
        var o;
        var Tt = 0;
        var _ = new R.Buf8(4);
        var c = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        if (!ke || !ke.state || !ke.output || !ke.input && ke.avail_in !== 0) {
          return B;
        }
        if ((ce = ke.state).mode === 12) {
          ce.mode = 13;
        }
        Ue = ke.next_out;
        dt = ke.output;
        te = ke.next_in;
        Ge = ke.input;
        Te = ce.hold;
        Je = ce.bits;
        bt = Ke = ke.avail_in;
        ut = ve = ke.avail_out;
        v = 0;
        e: for (;;) {
          switch (ce.mode) {
            case 1:
              if (ce.wrap === 0) {
                ce.mode = 13;
                break;
              }
              for (; Je < 16;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              if (ce.wrap & 2 && Te === 35615) {
                ce.check = 0;
                _[0] = Te & 255;
                _[1] = Te >>> 8 & 255;
                ce.check = N(ce.check, _, 2, 0);
                Te = 0;
                Je = 0;
                ce.mode = 2;
                break;
              }
              ce.flags = 0;
              if (ce.head) {
                ce.head.done = false;
              }
              if (!(ce.wrap & 1) || (((Te & 255) << 8) + (Te >> 8)) % 31) {
                ke.msg = "incorrect header check";
                ce.mode = 30;
                break;
              }
              if ((Te & 15) != 8) {
                ke.msg = "unknown compression method";
                ce.mode = 30;
                break;
              }
              Je -= 4;
              a = 8 + ((Te >>>= 4) & 15);
              if (ce.wbits === 0) {
                ce.wbits = a;
              } else if (a > ce.wbits) {
                ke.msg = "invalid window size";
                ce.mode = 30;
                break;
              }
              ce.dmax = 1 << a;
              ke.adler = ce.check = 1;
              ce.mode = Te & 512 ? 10 : 12;
              Te = 0;
              Je = 0;
              break;
            case 2:
              for (; Je < 16;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              ce.flags = Te;
              if ((ce.flags & 255) != 8) {
                ke.msg = "unknown compression method";
                ce.mode = 30;
                break;
              }
              if (ce.flags & 57344) {
                ke.msg = "unknown header flags set";
                ce.mode = 30;
                break;
              }
              if (ce.head) {
                ce.head.text = Te >> 8 & 1;
              }
              if (ce.flags & 512) {
                _[0] = Te & 255;
                _[1] = Te >>> 8 & 255;
                ce.check = N(ce.check, _, 2, 0);
              }
              Te = 0;
              Je = 0;
              ce.mode = 3;
            case 3:
              for (; Je < 32;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              if (ce.head) {
                ce.head.time = Te;
              }
              if (ce.flags & 512) {
                _[0] = Te & 255;
                _[1] = Te >>> 8 & 255;
                _[2] = Te >>> 16 & 255;
                _[3] = Te >>> 24 & 255;
                ce.check = N(ce.check, _, 4, 0);
              }
              Te = 0;
              Je = 0;
              ce.mode = 4;
            case 4:
              for (; Je < 16;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              if (ce.head) {
                ce.head.xflags = Te & 255;
                ce.head.os = Te >> 8;
              }
              if (ce.flags & 512) {
                _[0] = Te & 255;
                _[1] = Te >>> 8 & 255;
                ce.check = N(ce.check, _, 2, 0);
              }
              Te = 0;
              Je = 0;
              ce.mode = 5;
            case 5:
              if (ce.flags & 1024) {
                for (; Je < 16;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                ce.length = Te;
                if (ce.head) {
                  ce.head.extra_len = Te;
                }
                if (ce.flags & 512) {
                  _[0] = Te & 255;
                  _[1] = Te >>> 8 & 255;
                  ce.check = N(ce.check, _, 2, 0);
                }
                Te = 0;
                Je = 0;
              } else if (ce.head) {
                ce.head.extra = null;
              }
              ce.mode = 6;
            case 6:
              if (ce.flags & 1024 && ((_t = ce.length) > Ke && (_t = Ke), _t && (ce.head && (a = ce.head.extra_len - ce.length, ce.head.extra ||= new Array(ce.head.extra_len), R.arraySet(ce.head.extra, Ge, te, _t, a)), ce.flags & 512 && (ce.check = N(ce.check, Ge, _t, te)), Ke -= _t, te += _t, ce.length -= _t), ce.length)) {
                break e;
              }
              ce.length = 0;
              ce.mode = 7;
            case 7:
              if (ce.flags & 2048) {
                if (Ke === 0) {
                  break e;
                }
                _t = 0;
                do {
                  a = Ge[te + _t++];
                  if (ce.head && a && ce.length < 65536) {
                    ce.head.name += String.fromCharCode(a);
                  }
                } while (a && _t < Ke);
                if (ce.flags & 512) {
                  ce.check = N(ce.check, Ge, _t, te);
                }
                Ke -= _t;
                te += _t;
                if (a) {
                  break e;
                }
              } else if (ce.head) {
                ce.head.name = null;
              }
              ce.length = 0;
              ce.mode = 8;
            case 8:
              if (ce.flags & 4096) {
                if (Ke === 0) {
                  break e;
                }
                _t = 0;
                do {
                  a = Ge[te + _t++];
                  if (ce.head && a && ce.length < 65536) {
                    ce.head.comment += String.fromCharCode(a);
                  }
                } while (a && _t < Ke);
                if (ce.flags & 512) {
                  ce.check = N(ce.check, Ge, _t, te);
                }
                Ke -= _t;
                te += _t;
                if (a) {
                  break e;
                }
              } else if (ce.head) {
                ce.head.comment = null;
              }
              ce.mode = 9;
            case 9:
              if (ce.flags & 512) {
                for (; Je < 16;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                if (Te !== (ce.check & 65535)) {
                  ke.msg = "header crc mismatch";
                  ce.mode = 30;
                  break;
                }
                Te = 0;
                Je = 0;
              }
              if (ce.head) {
                ce.head.hcrc = ce.flags >> 9 & 1;
                ce.head.done = true;
              }
              ke.adler = ce.check = 0;
              ce.mode = 12;
              break;
            case 10:
              for (; Je < 32;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              ke.adler = ce.check = it(Te);
              Te = 0;
              Je = 0;
              ce.mode = 11;
            case 11:
              if (ce.havedict === 0) {
                ke.next_out = Ue;
                ke.avail_out = ve;
                ke.next_in = te;
                ke.avail_in = Ke;
                ce.hold = Te;
                ce.bits = Je;
                return 2;
              }
              ke.adler = ce.check = 1;
              ce.mode = 12;
            case 12:
              if (Pe === 5 || Pe === 6) {
                break e;
              }
            case 13:
              if (ce.last) {
                Te >>>= Je & 7;
                Je -= Je & 7;
                ce.mode = 27;
                break;
              }
              for (; Je < 3;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              ce.last = Te & 1;
              Je -= 1;
              switch ((Te >>>= 1) & 3) {
                case 0:
                  ce.mode = 14;
                  break;
                case 1:
                  me(ce);
                  ce.mode = 20;
                  if (Pe === 6) {
                    Te >>>= 2;
                    Je -= 2;
                    break e;
                  }
                  break;
                case 2:
                  ce.mode = 17;
                  break;
                case 3:
                  ke.msg = "invalid block type";
                  ce.mode = 30;
              }
              Te >>>= 2;
              Je -= 2;
              break;
            case 14:
              Te >>>= Je & 7;
              Je -= Je & 7;
              for (; Je < 32;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              if ((Te & 65535) != (Te >>> 16 ^ 65535)) {
                ke.msg = "invalid stored block lengths";
                ce.mode = 30;
                break;
              }
              ce.length = Te & 65535;
              Te = 0;
              Je = 0;
              ce.mode = 15;
              if (Pe === 6) {
                break e;
              }
            case 15:
              ce.mode = 16;
            case 16:
              if (_t = ce.length) {
                if (_t > Ke) {
                  _t = Ke;
                }
                if (_t > ve) {
                  _t = ve;
                }
                if (_t === 0) {
                  break e;
                }
                R.arraySet(dt, Ge, te, _t, Ue);
                Ke -= _t;
                te += _t;
                ve -= _t;
                Ue += _t;
                ce.length -= _t;
                break;
              }
              ce.mode = 12;
              break;
            case 17:
              for (; Je < 14;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              ce.nlen = 257 + (Te & 31);
              Je -= 5;
              ce.ndist = 1 + ((Te >>>= 5) & 31);
              Je -= 5;
              ce.ncode = 4 + ((Te >>>= 5) & 15);
              Te >>>= 4;
              Je -= 4;
              if (ce.nlen > 286 || ce.ndist > 30) {
                ke.msg = "too many length or distance symbols";
                ce.mode = 30;
                break;
              }
              ce.have = 0;
              ce.mode = 18;
            case 18:
              for (; ce.have < ce.ncode;) {
                for (; Je < 3;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                ce.lens[c[ce.have++]] = Te & 7;
                Te >>>= 3;
                Je -= 3;
              }
              for (; ce.have < 19;) {
                ce.lens[c[ce.have++]] = 0;
              }
              ce.lencode = ce.lendyn;
              ce.lenbits = 7;
              v = S(0, ce.lens, 0, 19, ce.lencode, 0, ce.work, i = {
                bits: ce.lenbits
              });
              ce.lenbits = i.bits;
              if (v) {
                ke.msg = "invalid code lengths set";
                ce.mode = 30;
                break;
              }
              ce.have = 0;
              ce.mode = 19;
            case 19:
              for (; ce.have < ce.nlen + ce.ndist;) {
                for (; At = (Tt = ce.lencode[Te & (1 << ce.lenbits) - 1]) >>> 16 & 255, Ot = Tt & 65535, (St = Tt >>> 24) > Je;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                if (Ot < 16) {
                  Te >>>= St;
                  Je -= St;
                  ce.lens[ce.have++] = Ot;
                } else {
                  if (Ot === 16) {
                    for (o = St + 2; Je < o;) {
                      if (Ke === 0) {
                        break e;
                      }
                      Ke--;
                      Te += Ge[te++] << Je;
                      Je += 8;
                    }
                    Te >>>= St;
                    Je -= St;
                    if (ce.have === 0) {
                      ke.msg = "invalid bit length repeat";
                      ce.mode = 30;
                      break;
                    }
                    a = ce.lens[ce.have - 1];
                    _t = 3 + (Te & 3);
                    Te >>>= 2;
                    Je -= 2;
                  } else if (Ot === 17) {
                    for (o = St + 3; Je < o;) {
                      if (Ke === 0) {
                        break e;
                      }
                      Ke--;
                      Te += Ge[te++] << Je;
                      Je += 8;
                    }
                    Je -= St;
                    a = 0;
                    _t = 3 + ((Te >>>= St) & 7);
                    Te >>>= 3;
                    Je -= 3;
                  } else {
                    for (o = St + 7; Je < o;) {
                      if (Ke === 0) {
                        break e;
                      }
                      Ke--;
                      Te += Ge[te++] << Je;
                      Je += 8;
                    }
                    Je -= St;
                    a = 0;
                    _t = 11 + ((Te >>>= St) & 127);
                    Te >>>= 7;
                    Je -= 7;
                  }
                  if (ce.have + _t > ce.nlen + ce.ndist) {
                    ke.msg = "invalid bit length repeat";
                    ce.mode = 30;
                    break;
                  }
                  for (; _t--;) {
                    ce.lens[ce.have++] = a;
                  }
                }
              }
              if (ce.mode === 30) {
                break;
              }
              if (ce.lens[256] === 0) {
                ke.msg = "invalid code -- missing end-of-block";
                ce.mode = 30;
                break;
              }
              ce.lenbits = 9;
              v = S(1, ce.lens, 0, ce.nlen, ce.lencode, 0, ce.work, i = {
                bits: ce.lenbits
              });
              ce.lenbits = i.bits;
              if (v) {
                ke.msg = "invalid literal/lengths set";
                ce.mode = 30;
                break;
              }
              ce.distbits = 6;
              ce.distcode = ce.distdyn;
              v = S(2, ce.lens, ce.nlen, ce.ndist, ce.distcode, 0, ce.work, i = {
                bits: ce.distbits
              });
              ce.distbits = i.bits;
              if (v) {
                ke.msg = "invalid distances set";
                ce.mode = 30;
                break;
              }
              ce.mode = 20;
              if (Pe === 6) {
                break e;
              }
            case 20:
              ce.mode = 21;
            case 21:
              if (Ke >= 6 && ve >= 258) {
                ke.next_out = Ue;
                ke.avail_out = ve;
                ke.next_in = te;
                ke.avail_in = Ke;
                ce.hold = Te;
                ce.bits = Je;
                x(ke, ut);
                Ue = ke.next_out;
                dt = ke.output;
                ve = ke.avail_out;
                te = ke.next_in;
                Ge = ke.input;
                Ke = ke.avail_in;
                Te = ce.hold;
                Je = ce.bits;
                if (ce.mode === 12) {
                  ce.back = -1;
                }
                break;
              }
              for (ce.back = 0; At = (Tt = ce.lencode[Te & (1 << ce.lenbits) - 1]) >>> 16 & 255, Ot = Tt & 65535, (St = Tt >>> 24) > Je;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              if (At && (At & 240) == 0) {
                Mt = St;
                t = At;
                j = Ot;
                for (; At = (Tt = ce.lencode[j + ((Te & (1 << Mt + t) - 1) >> Mt)]) >>> 16 & 255, Ot = Tt & 65535, Mt + (St = Tt >>> 24) > Je;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                Te >>>= Mt;
                Je -= Mt;
                ce.back += Mt;
              }
              Te >>>= St;
              Je -= St;
              ce.back += St;
              ce.length = Ot;
              if (At === 0) {
                ce.mode = 26;
                break;
              }
              if (At & 32) {
                ce.back = -1;
                ce.mode = 12;
                break;
              }
              if (At & 64) {
                ke.msg = "invalid literal/length code";
                ce.mode = 30;
                break;
              }
              ce.extra = At & 15;
              ce.mode = 22;
            case 22:
              if (ce.extra) {
                for (o = ce.extra; Je < o;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                ce.length += Te & (1 << ce.extra) - 1;
                Te >>>= ce.extra;
                Je -= ce.extra;
                ce.back += ce.extra;
              }
              ce.was = ce.length;
              ce.mode = 23;
            case 23:
              for (; At = (Tt = ce.distcode[Te & (1 << ce.distbits) - 1]) >>> 16 & 255, Ot = Tt & 65535, (St = Tt >>> 24) > Je;) {
                if (Ke === 0) {
                  break e;
                }
                Ke--;
                Te += Ge[te++] << Je;
                Je += 8;
              }
              if ((At & 240) == 0) {
                Mt = St;
                t = At;
                j = Ot;
                for (; At = (Tt = ce.distcode[j + ((Te & (1 << Mt + t) - 1) >> Mt)]) >>> 16 & 255, Ot = Tt & 65535, Mt + (St = Tt >>> 24) > Je;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                Te >>>= Mt;
                Je -= Mt;
                ce.back += Mt;
              }
              Te >>>= St;
              Je -= St;
              ce.back += St;
              if (At & 64) {
                ke.msg = "invalid distance code";
                ce.mode = 30;
                break;
              }
              ce.offset = Ot;
              ce.extra = At & 15;
              ce.mode = 24;
            case 24:
              if (ce.extra) {
                for (o = ce.extra; Je < o;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                ce.offset += Te & (1 << ce.extra) - 1;
                Te >>>= ce.extra;
                Je -= ce.extra;
                ce.back += ce.extra;
              }
              if (ce.offset > ce.dmax) {
                ke.msg = "invalid distance too far back";
                ce.mode = 30;
                break;
              }
              ce.mode = 25;
            case 25:
              if (ve === 0) {
                break e;
              }
              if (ce.offset > (_t = ut - ve)) {
                if ((_t = ce.offset - _t) > ce.whave && ce.sane) {
                  ke.msg = "invalid distance too far back";
                  ce.mode = 30;
                  break;
                }
                kt = _t > ce.wnext ? ce.wsize - (_t -= ce.wnext) : ce.wnext - _t;
                if (_t > ce.length) {
                  _t = ce.length;
                }
                It = ce.window;
              } else {
                It = dt;
                kt = Ue - ce.offset;
                _t = ce.length;
              }
              if (_t > ve) {
                _t = ve;
              }
              ve -= _t;
              ce.length -= _t;
              do {
                dt[Ue++] = It[kt++];
              } while (--_t);
              if (ce.length === 0) {
                ce.mode = 21;
              }
              break;
            case 26:
              if (ve === 0) {
                break e;
              }
              dt[Ue++] = ce.length;
              ve--;
              ce.mode = 21;
              break;
            case 27:
              if (ce.wrap) {
                for (; Je < 32;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te |= Ge[te++] << Je;
                  Je += 8;
                }
                ke.total_out += ut -= ve;
                ce.total += ut;
                if (ut) {
                  ke.adler = ce.check = ce.flags ? N(ce.check, dt, ut, Ue - ut) : C(ce.check, dt, ut, Ue - ut);
                }
                ut = ve;
                if ((ce.flags ? Te : it(Te)) !== ce.check) {
                  ke.msg = "incorrect data check";
                  ce.mode = 30;
                  break;
                }
                Te = 0;
                Je = 0;
              }
              ce.mode = 28;
            case 28:
              if (ce.wrap && ce.flags) {
                for (; Je < 32;) {
                  if (Ke === 0) {
                    break e;
                  }
                  Ke--;
                  Te += Ge[te++] << Je;
                  Je += 8;
                }
                if (Te !== (ce.total & 4294967295)) {
                  ke.msg = "incorrect length check";
                  ce.mode = 30;
                  break;
                }
                Te = 0;
                Je = 0;
              }
              ce.mode = 29;
            case 29:
              v = 1;
              break e;
            case 30:
              v = -3;
              break e;
            case 31:
              return -4;
            default:
              return B;
          }
        }
        ke.next_out = Ue;
        ke.avail_out = ve;
        ke.next_in = te;
        ke.avail_in = Ke;
        ce.hold = Te;
        ce.bits = Je;
        if ((ce.wsize || ut !== ke.avail_out && ce.mode < 30 && (ce.mode < 27 || Pe !== 4)) && function Be(ke, Pe, ce, Ge) {
          var dt;
          var te = ke.state;
          if (te.window === null) {
            te.wsize = 1 << te.wbits;
            te.wnext = 0;
            te.whave = 0;
            te.window = new R.Buf8(te.wsize);
          }
          if (Ge >= te.wsize) {
            R.arraySet(te.window, Pe, ce - te.wsize, te.wsize, 0);
            te.wnext = 0;
            te.whave = te.wsize;
          } else {
            if ((dt = te.wsize - te.wnext) > Ge) {
              dt = Ge;
            }
            R.arraySet(te.window, Pe, ce - Ge, dt, te.wnext);
            if (Ge -= dt) {
              R.arraySet(te.window, Pe, ce - Ge, Ge, 0);
              te.wnext = Ge;
              te.whave = te.wsize;
            } else {
              te.wnext += dt;
              if (te.wnext === te.wsize) {
                te.wnext = 0;
              }
              if (te.whave < te.wsize) {
                te.whave += dt;
              }
            }
          }
          return 0;
        }(ke, ke.output, ke.next_out, ut - ke.avail_out)) {
          ce.mode = 31;
          return -4;
        } else {
          ut -= ke.avail_out;
          ke.total_in += bt -= ke.avail_in;
          ke.total_out += ut;
          ce.total += ut;
          if (ce.wrap && ut) {
            ke.adler = ce.check = ce.flags ? N(ce.check, dt, ut, ke.next_out - ut) : C(ce.check, dt, ut, ke.next_out - ut);
          }
          ke.data_type = ce.bits + (ce.last ? 64 : 0) + (ce.mode === 12 ? 128 : 0) + (ce.mode === 20 || ce.mode === 15 ? 256 : 0);
          if ((bt === 0 && ut === 0 || Pe === 4) && v === 0) {
            v = -5;
          }
          return v;
        }
      };
      E.inflateEnd = function De(ke) {
        if (!ke || !ke.state) {
          return B;
        }
        var Pe = ke.state;
        Pe.window &&= null;
        ke.state = null;
        return 0;
      };
      E.inflateGetHeader = function We(ke, Pe) {
        var ce;
        if (ke && ke.state && ((ce = ke.state).wrap & 2) != 0) {
          ce.head = Pe;
          Pe.done = false;
          return 0;
        } else {
          return B;
        }
      };
      E.inflateInfo = "pako inflate (from Nodeca project)";
    }, {
      "../utils/common": 27,
      "./adler32": 29,
      "./crc32": 31,
      "./inffast": 34,
      "./inftrees": 36
    }],
    36: [function (y, w, E) {
      var R = y("../utils/common");
      var C = 15;
      var m = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
      var l = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
      var M = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
      var O = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
      w.exports = function (ee, G, B, A, H, $, J, Q) {
        var Qe;
        var ae;
        var fe;
        var Me;
        var je;
        var Ce;
        var de;
        var pe;
        var xe;
        var U = Q.bits;
        var K = 0;
        var F = 0;
        var L = 0;
        var ie = 0;
        var Y = 0;
        var ne = 0;
        var le = 0;
        var ge = 0;
        var Ee = 0;
        var Le = 0;
        var ze = null;
        var we = 0;
        var ye = new R.Buf16(16);
        var $e = new R.Buf16(16);
        var qe = null;
        var ue = 0;
        for (K = 0; K <= C; K++) {
          ye[K] = 0;
        }
        for (F = 0; F < A; F++) {
          ye[G[B + F]]++;
        }
        Y = U;
        ie = C;
        for (; ie >= 1 && ye[ie] === 0; ie--);
        if (Y > ie) {
          Y = ie;
        }
        if (ie === 0) {
          H[$++] = 20971520;
          H[$++] = 20971520;
          Q.bits = 1;
          return 0;
        }
        for (L = 1; L < ie && ye[L] === 0; L++);
        if (Y < L) {
          Y = L;
        }
        ge = 1;
        K = 1;
        for (; K <= C; K++) {
          ge <<= 1;
          if ((ge -= ye[K]) < 0) {
            return -1;
          }
        }
        if (ge > 0 && (ee === 0 || ie !== 1)) {
          return -1;
        }
        $e[1] = 0;
        K = 1;
        for (; K < C; K++) {
          $e[K + 1] = $e[K] + ye[K];
        }
        for (F = 0; F < A; F++) {
          if (G[B + F] !== 0) {
            J[$e[G[B + F]]++] = F;
          }
        }
        if (ee === 0) {
          ze = qe = J;
          Ce = 19;
        } else if (ee === 1) {
          ze = m;
          we -= 257;
          qe = l;
          ue -= 257;
          Ce = 256;
        } else {
          ze = M;
          qe = O;
          Ce = -1;
        }
        Le = 0;
        F = 0;
        K = L;
        je = $;
        ne = Y;
        le = 0;
        fe = -1;
        Me = (Ee = 1 << Y) - 1;
        if (ee === 1 && Ee > 852 || ee === 2 && Ee > 592) {
          return 1;
        }
        for (;;) {
          de = K - le;
          if (J[F] < Ce) {
            pe = 0;
            xe = J[F];
          } else if (J[F] > Ce) {
            pe = qe[ue + J[F]];
            xe = ze[we + J[F]];
          } else {
            pe = 96;
            xe = 0;
          }
          Qe = 1 << K - le;
          L = ae = 1 << ne;
          do {
            H[je + (Le >> le) + (ae -= Qe)] = de << 24 | pe << 16 | xe | 0;
          } while (ae !== 0);
          for (Qe = 1 << K - 1; Le & Qe;) {
            Qe >>= 1;
          }
          if (Qe !== 0) {
            Le &= Qe - 1;
            Le += Qe;
          } else {
            Le = 0;
          }
          F++;
          if (--ye[K] == 0) {
            if (K === ie) {
              break;
            }
            K = G[B + J[F]];
          }
          if (K > Y && (Le & Me) !== fe) {
            if (le === 0) {
              le = Y;
            }
            je += L;
            ge = 1 << (ne = K - le);
            for (; ne + le < ie && (ge -= ye[ne + le]) > 0;) {
              ne++;
              ge <<= 1;
            }
            Ee += 1 << ne;
            if (ee === 1 && Ee > 852 || ee === 2 && Ee > 592) {
              return 1;
            }
            H[fe = Le & Me] = Y << 24 | ne << 16 | je - $ | 0;
          }
        }
        if (Le !== 0) {
          H[je + Le] = K - le << 24 | 64 << 16 | 0;
        }
        Q.bits = Y;
        return 0;
      };
    }, {
      "../utils/common": 27
    }],
    37: [function (y, w, E) {
      w.exports = {
        2: "need dictionary",
        1: "stream end",
        0: "",
        "-1": "file error",
        "-2": "stream error",
        "-3": "data error",
        "-4": "insufficient memory",
        "-5": "buffer error",
        "-6": "incompatible version"
      };
    }, {}],
    38: [function (y, w, E) {
      var R = y("../utils/common");
      function s(se) {
        for (var De = se.length; --De >= 0;) {
          se[De] = 0;
        }
      }
      var G = 286;
      var B = 30;
      var $ = 15;
      var ie = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
      var Y = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
      var ne = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
      var le = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      var Ee = new Array(576);
      s(Ee);
      var Le = new Array(60);
      s(Le);
      var Qe = new Array(512);
      s(Qe);
      var ae = new Array(256);
      s(ae);
      var fe = new Array(29);
      s(fe);
      var Me = new Array(B);
      s(Me);
      var ze;
      var we;
      var Ce;
      function je(se, De, We, ke, Pe) {
        this.static_tree = se;
        this.extra_bits = De;
        this.extra_base = We;
        this.elems = ke;
        this.max_length = Pe;
        this.has_stree = se && se.length;
      }
      function ye(se, De) {
        this.dyn_tree = se;
        this.max_code = 0;
        this.stat_desc = De;
      }
      function $e(se) {
        if (se < 256) {
          return Qe[se];
        } else {
          return Qe[256 + (se >>> 7)];
        }
      }
      function qe(se, De) {
        se.pending_buf[se.pending++] = De & 255;
        se.pending_buf[se.pending++] = De >>> 8 & 255;
      }
      function ue(se, De, We) {
        if (se.bi_valid > 16 - We) {
          se.bi_buf |= De << se.bi_valid & 65535;
          qe(se, se.bi_buf);
          se.bi_buf = De >> 16 - se.bi_valid;
          se.bi_valid += We - 16;
        } else {
          se.bi_buf |= De << se.bi_valid & 65535;
          se.bi_valid += We;
        }
      }
      function de(se, De, We) {
        ue(se, We[De * 2], We[De * 2 + 1]);
      }
      function pe(se, De) {
        var We = 0;
        do {
          We |= se & 1;
          se >>>= 1;
          We <<= 1;
        } while (--De > 0);
        return We >>> 1;
      }
      function rt(se, De, We) {
        var ce;
        var Ge;
        var ke = new Array(16);
        var Pe = 0;
        for (ce = 1; ce <= $; ce++) {
          ke[ce] = Pe = Pe + We[ce - 1] << 1;
        }
        for (Ge = 0; Ge <= De; Ge++) {
          var dt = se[Ge * 2 + 1];
          if (dt !== 0) {
            se[Ge * 2] = pe(ke[dt]++, dt);
          }
        }
      }
      function Re(se) {
        var De;
        for (De = 0; De < G; De++) {
          se.dyn_ltree[De * 2] = 0;
        }
        for (De = 0; De < B; De++) {
          se.dyn_dtree[De * 2] = 0;
        }
        for (De = 0; De < 19; De++) {
          se.bl_tree[De * 2] = 0;
        }
        se.dyn_ltree[512] = 1;
        se.opt_len = se.static_len = 0;
        se.last_lit = se.matches = 0;
      }
      function ot(se) {
        if (se.bi_valid > 8) {
          qe(se, se.bi_buf);
        } else if (se.bi_valid > 0) {
          se.pending_buf[se.pending++] = se.bi_buf;
        }
        se.bi_buf = 0;
        se.bi_valid = 0;
      }
      function ct(se, De, We, ke) {
        var Pe = De * 2;
        var ce = We * 2;
        return se[Pe] < se[ce] || se[Pe] === se[ce] && ke[De] <= ke[We];
      }
      function st(se, De, We) {
        for (var ke = se.heap[We], Pe = We << 1; Pe <= se.heap_len && (Pe < se.heap_len && ct(De, se.heap[Pe + 1], se.heap[Pe], se.depth) && Pe++, !ct(De, ke, se.heap[Pe], se.depth));) {
          se.heap[We] = se.heap[Pe];
          We = Pe;
          Pe <<= 1;
        }
        se.heap[We] = ke;
      }
      function Ze(se, De, We) {
        var ke;
        var Pe;
        var Ge;
        var dt;
        var ce = 0;
        if (se.last_lit !== 0) {
          do {
            ke = se.pending_buf[se.d_buf + ce * 2] << 8 | se.pending_buf[se.d_buf + ce * 2 + 1];
            Pe = se.pending_buf[se.l_buf + ce];
            ce++;
            if (ke === 0) {
              de(se, Pe, De);
            } else {
              de(se, (Ge = ae[Pe]) + 256 + 1, De);
              if ((dt = ie[Ge]) !== 0) {
                ue(se, Pe -= fe[Ge], dt);
              }
              de(se, Ge = $e(--ke), We);
              if ((dt = Y[Ge]) !== 0) {
                ue(se, ke -= Me[Ge], dt);
              }
            }
          } while (ce < se.last_lit);
        }
        de(se, 256, De);
      }
      function it(se, De) {
        var Ge;
        var dt;
        var Ue;
        var We = De.dyn_tree;
        var ke = De.stat_desc.static_tree;
        var Pe = De.stat_desc.has_stree;
        var ce = De.stat_desc.elems;
        var te = -1;
        se.heap_len = 0;
        se.heap_max = 573;
        Ge = 0;
        for (; Ge < ce; Ge++) {
          if (We[Ge * 2] !== 0) {
            se.heap[++se.heap_len] = te = Ge;
            se.depth[Ge] = 0;
          } else {
            We[Ge * 2 + 1] = 0;
          }
        }
        for (; se.heap_len < 2;) {
          We[(Ue = se.heap[++se.heap_len] = te < 2 ? ++te : 0) * 2] = 1;
          se.depth[Ue] = 0;
          se.opt_len--;
          if (Pe) {
            se.static_len -= ke[Ue * 2 + 1];
          }
        }
        De.max_code = te;
        Ge = se.heap_len >> 1;
        for (; Ge >= 1; Ge--) {
          st(se, We, Ge);
        }
        Ue = ce;
        do {
          Ge = se.heap[1];
          se.heap[1] = se.heap[se.heap_len--];
          st(se, We, 1);
          dt = se.heap[1];
          se.heap[--se.heap_max] = Ge;
          se.heap[--se.heap_max] = dt;
          We[Ue * 2] = We[Ge * 2] + We[dt * 2];
          se.depth[Ue] = (se.depth[Ge] >= se.depth[dt] ? se.depth[Ge] : se.depth[dt]) + 1;
          We[Ge * 2 + 1] = We[dt * 2 + 1] = Ue;
          se.heap[1] = Ue++;
          st(se, We, 1);
        } while (se.heap_len >= 2);
        se.heap[--se.heap_max] = se.heap[1];
        (function Xe(se, De) {
          var Ue;
          var Ke;
          var ve;
          var Te;
          var Je;
          var bt;
          var We = De.dyn_tree;
          var ke = De.max_code;
          var Pe = De.stat_desc.static_tree;
          var ce = De.stat_desc.has_stree;
          var Ge = De.stat_desc.extra_bits;
          var dt = De.stat_desc.extra_base;
          var te = De.stat_desc.max_length;
          var ut = 0;
          for (Te = 0; Te <= $; Te++) {
            se.bl_count[Te] = 0;
          }
          We[se.heap[se.heap_max] * 2 + 1] = 0;
          Ue = se.heap_max + 1;
          for (; Ue < 573; Ue++) {
            if ((Te = We[We[(Ke = se.heap[Ue]) * 2 + 1] * 2 + 1] + 1) > te) {
              Te = te;
              ut++;
            }
            We[Ke * 2 + 1] = Te;
            if (Ke <= ke) {
              se.bl_count[Te]++;
              Je = 0;
              if (Ke >= dt) {
                Je = Ge[Ke - dt];
              }
              se.opt_len += (bt = We[Ke * 2]) * (Te + Je);
              if (ce) {
                se.static_len += bt * (Pe[Ke * 2 + 1] + Je);
              }
            }
          }
          if (ut !== 0) {
            do {
              for (Te = te - 1; se.bl_count[Te] === 0;) {
                Te--;
              }
              se.bl_count[Te]--;
              se.bl_count[Te + 1] += 2;
              se.bl_count[te]--;
              ut -= 2;
            } while (ut > 0);
            for (Te = te; Te !== 0; Te--) {
              for (Ke = se.bl_count[Te]; Ke !== 0;) {
                if ((ve = se.heap[--Ue]) <= ke) {
                  if (We[ve * 2 + 1] !== Te) {
                    se.opt_len += (Te - We[ve * 2 + 1]) * We[ve * 2];
                    We[ve * 2 + 1] = Te;
                  }
                  Ke--;
                }
              }
            }
          }
        })(se, De);
        rt(We, te, se.bl_count);
      }
      function vt(se, De, We) {
        var ke;
        var ce;
        var Pe = -1;
        var Ge = De[1];
        var dt = 0;
        var te = 7;
        var Ue = 4;
        if (Ge === 0) {
          te = 138;
          Ue = 3;
        }
        De[(We + 1) * 2 + 1] = 65535;
        ke = 0;
        for (; ke <= We; ke++) {
          ce = Ge;
          Ge = De[(ke + 1) * 2 + 1];
          if (++dt >= te || ce !== Ge) {
            if (dt < Ue) {
              se.bl_tree[ce * 2] += dt;
            } else if (ce !== 0) {
              if (ce !== Pe) {
                se.bl_tree[ce * 2]++;
              }
              se.bl_tree[32]++;
            } else if (dt <= 10) {
              se.bl_tree[34]++;
            } else {
              se.bl_tree[36]++;
            }
            dt = 0;
            Pe = ce;
            if (Ge === 0) {
              te = 138;
              Ue = 3;
            } else if (ce === Ge) {
              te = 6;
              Ue = 3;
            } else {
              te = 7;
              Ue = 4;
            }
          }
        }
      }
      function nt(se, De, We) {
        var ke;
        var ce;
        var Pe = -1;
        var Ge = De[1];
        var dt = 0;
        var te = 7;
        var Ue = 4;
        if (Ge === 0) {
          te = 138;
          Ue = 3;
        }
        ke = 0;
        for (; ke <= We; ke++) {
          ce = Ge;
          Ge = De[(ke + 1) * 2 + 1];
          if (++dt >= te || ce !== Ge) {
            if (dt < Ue) {
              do {
                de(se, ce, se.bl_tree);
              } while (--dt != 0);
            } else if (ce !== 0) {
              if (ce !== Pe) {
                de(se, ce, se.bl_tree);
                dt--;
              }
              de(se, 16, se.bl_tree);
              ue(se, dt - 3, 2);
            } else if (dt <= 10) {
              de(se, 17, se.bl_tree);
              ue(se, dt - 3, 3);
            } else {
              de(se, 18, se.bl_tree);
              ue(se, dt - 11, 7);
            }
            dt = 0;
            Pe = ce;
            if (Ge === 0) {
              te = 138;
              Ue = 3;
            } else if (ce === Ge) {
              te = 6;
              Ue = 3;
            } else {
              te = 7;
              Ue = 4;
            }
          }
        }
      }
      var Et = false;
      function Nt(se, De, We, ke) {
        ue(se, 0 + (ke ? 1 : 0), 3);
        (function pt(se, De, We, ke) {
          ot(se);
          if (ke) {
            qe(se, We);
            qe(se, ~We);
          }
          R.arraySet(se.pending_buf, se.window, De, We, se.pending);
          se.pending += We;
        })(se, De, We, true);
      }
      E._tr_init = function Ct(se) {
        if (!Et) {
          (function tt() {
            var se;
            var De;
            var We;
            var ke;
            var Pe;
            var ce = new Array(16);
            We = 0;
            ke = 0;
            for (; ke < 28; ke++) {
              fe[ke] = We;
              se = 0;
              fe[ke] = We;
              se = 0;
              for (; se < 1 << ie[ke]; se++) {
                ae[We++] = ke;
              }
            }
            ae[We - 1] = ke;
            Pe = 0;
            ke = 0;
            for (; ke < 16; ke++) {
              Me[ke] = Pe;
              se = 0;
              Me[ke] = Pe;
              se = 0;
              for (; se < 1 << Y[ke]; se++) {
                Qe[Pe++] = ke;
              }
            }
            for (Pe >>= 7; ke < B; ke++) {
              Me[ke] = Pe << 7;
              se = 0;
              Me[ke] = Pe << 7;
              se = 0;
              for (; se < 1 << Y[ke] - 7; se++) {
                Qe[256 + Pe++] = ke;
              }
            }
            for (De = 0; De <= $; De++) {
              ce[De] = 0;
            }
            for (se = 0; se <= 143;) {
              Ee[se * 2 + 1] = 8;
              se++;
              ce[8]++;
            }
            for (; se <= 255;) {
              Ee[se * 2 + 1] = 9;
              se++;
              ce[9]++;
            }
            for (; se <= 279;) {
              Ee[se * 2 + 1] = 7;
              se++;
              ce[7]++;
            }
            for (; se <= 287;) {
              Ee[se * 2 + 1] = 8;
              se++;
              ce[8]++;
            }
            rt(Ee, 287, ce);
            se = 0;
            for (; se < B; se++) {
              Le[se * 2 + 1] = 5;
              Le[se * 2] = pe(se, 5);
            }
            ze = new je(Ee, ie, 257, G, $);
            we = new je(Le, Y, 0, B, $);
            Ce = new je(new Array(0), ne, 0, 19, 7);
          })();
          Et = true;
        }
        se.l_desc = new ye(se.dyn_ltree, ze);
        se.d_desc = new ye(se.dyn_dtree, we);
        se.bl_desc = new ye(se.bl_tree, Ce);
        se.bi_buf = 0;
        se.bi_valid = 0;
        Re(se);
      };
      E._tr_stored_block = Nt;
      E._tr_flush_block = function me(se, De, We, ke) {
        var Pe;
        var ce;
        var Ge = 0;
        if (se.level > 0) {
          if (se.strm.data_type === 2) {
            se.strm.data_type = function et(se) {
              var We;
              var De = 4093624447;
              for (We = 0; We <= 31; We++, De >>>= 1) {
                if (De & 1 && se.dyn_ltree[We * 2] !== 0) {
                  return 0;
                }
              }
              if (se.dyn_ltree[18] !== 0 || se.dyn_ltree[20] !== 0 || se.dyn_ltree[26] !== 0) {
                return 1;
              }
              for (We = 32; We < 256; We++) {
                if (se.dyn_ltree[We * 2] !== 0) {
                  return 1;
                }
              }
              return 0;
            }(se);
          }
          it(se, se.l_desc);
          it(se, se.d_desc);
          Ge = function gt(se) {
            var De;
            vt(se, se.dyn_ltree, se.l_desc.max_code);
            vt(se, se.dyn_dtree, se.d_desc.max_code);
            it(se, se.bl_desc);
            De = 18;
            for (; De >= 3 && se.bl_tree[le[De] * 2 + 1] === 0; De--);
            se.opt_len += (De + 1) * 3 + 5 + 5 + 4;
            return De;
          }(se);
          if ((ce = se.static_len + 3 + 7 >>> 3) <= (Pe = se.opt_len + 3 + 7 >>> 3)) {
            Pe = ce;
          }
        } else {
          Pe = ce = We + 5;
        }
        if (We + 4 <= Pe && De !== -1) {
          Nt(se, De, We, ke);
        } else if (se.strategy === 4 || ce === Pe) {
          ue(se, 2 + (ke ? 1 : 0), 3);
          Ze(se, Ee, Le);
        } else {
          ue(se, 4 + (ke ? 1 : 0), 3);
          (function Ye(se, De, We, ke) {
            var Pe;
            ue(se, De - 257, 5);
            ue(se, We - 1, 5);
            ue(se, ke - 4, 4);
            Pe = 0;
            for (; Pe < ke; Pe++) {
              ue(se, se.bl_tree[le[Pe] * 2 + 1], 3);
            }
            nt(se, se.dyn_ltree, De - 1);
            nt(se, se.dyn_dtree, We - 1);
          })(se, se.l_desc.max_code + 1, se.d_desc.max_code + 1, Ge + 1);
          Ze(se, se.dyn_ltree, se.dyn_dtree);
        }
        Re(se);
        if (ke) {
          ot(se);
        }
      };
      E._tr_tally = function Be(se, De, We) {
        se.pending_buf[se.d_buf + se.last_lit * 2] = De >>> 8 & 255;
        se.pending_buf[se.d_buf + se.last_lit * 2 + 1] = De & 255;
        se.pending_buf[se.l_buf + se.last_lit] = We & 255;
        se.last_lit++;
        if (De === 0) {
          se.dyn_ltree[We * 2]++;
        } else {
          se.matches++;
          De--;
          se.dyn_ltree[(ae[We] + 256 + 1) * 2]++;
          se.dyn_dtree[$e(De) * 2]++;
        }
        return se.last_lit === se.lit_bufsize - 1;
      };
      E._tr_align = function Ie(se) {
        ue(se, 2, 3);
        de(se, 256, Ee);
        (function xe(se) {
          if (se.bi_valid === 16) {
            qe(se, se.bi_buf);
            se.bi_buf = 0;
            se.bi_valid = 0;
          } else if (se.bi_valid >= 8) {
            se.pending_buf[se.pending++] = se.bi_buf & 255;
            se.bi_buf >>= 8;
            se.bi_valid -= 8;
          }
        })(se);
      };
    }, {
      "../utils/common": 27
    }],
    39: [function (y, w, E) {
      w.exports = function R() {
        this.input = null;
        this.next_in = 0;
        this.avail_in = 0;
        this.total_in = 0;
        this.output = null;
        this.next_out = 0;
        this.avail_out = 0;
        this.total_out = 0;
        this.msg = "";
        this.state = null;
        this.data_type = 2;
        this.adler = 0;
      };
    }, {}]
  }, {}, [9])(9);
})();